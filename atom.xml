<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  
  <title><![CDATA[Программирование - это просто!]]></title>
  <link href="http://demin.ws/atom.xml" rel="self"/>
  <link href="http://demin.ws/"/>
  <updated>2013-05-20T22:00:00Z</updated>
  <id>http://demin.ws/</id>
  <author>
    <name><![CDATA[Александр Дëмин]]></name>
    <email><![CDATA[alexander@demin.ws]]></email>
  </author>

  
  <entry>
    <title type="html"><![CDATA[Про конференцию ACCU 2013, фото со Страуструпом и жизнь]]></title>
    <link href="http://demin.ws/blog/russian/2013/05/20/accu2013/"/>
    <updated>2013-05-20T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2013/05/20/accu2013/</id>
    <content type="html"><![CDATA[<p>Уф, около четырех месяцев ничего не писал в этот блог, хотя материал имеется.
Два интереснейших интервью лежат &ldquo;в столе&rdquo;, ожидая перевода. Сейчас у меня
не самый простой период в жизни по многим фронтам, и многие проекты задвинуты.
С работой небольшой застой, но вот-вот должно измениться. А пока я целиком
в совершенной иной теме &ndash; спорт, еда, диета, кулинария и все что с этим
связано.</p>

<p>Подсев на диету &ldquo;медленных углеводов&rdquo; (Slow-Carb), я завел блог
<a href="http://lazy-diet.tumblr.com/">Диета и спорт для ленивых</a>, который веду
преимущественно с айфона (О <a href="http://tumblr.com/">Tumblr</a>! Ты лучший!).
Активно <a href="http://instagram.com/begoon/">&ldquo;массирую&rdquo; фотографиями Инстаграм</a> и в
частности <a href="http://statigr.am/tag/slowcarb_begoon/">едой, которую готовлю</a>.</p>

<p>Но в апреле я таки съездил на ежегодную конференцию <a href="http://accu.org/index.php/conferences/accu_conference_2013">ACCU 2013</a>.</p>

<p><img src="http://demin.ws/blog/russian/2013/05/20/accu2013/2013-04-09-10.55.25.jpg" alt="" />
</p>

<p>В этом году она проходила в Бристоле и была на 99% посвящена новому стандарту C++ 2011.
Кроме этого одним из генеральных спонсоров была компания Блумберг, поэтому
было непривычное количество друзей и знакомых.</p>

<p><img src="http://demin.ws/blog/russian/2013/05/20/accu2013/2013-04-12-09.23.30.jpg" alt="" />
</p>

<p>Гвоздем программы был сам Страуструп, лично.</p>

<p><img src="http://demin.ws/blog/russian/2013/05/20/accu2013/2013-04-12-09.34.58.jpg" alt="" />
</p>

<p>Мне до Бристоля два часа на машине, и это было удобно. А тот момент я уже
&ldquo;сидел&rdquo; на диете Slow-Carb, поэтому поездка не обошлась без ее элементов.
Про как и почему, про гантелю в багажнике и kettlebell swing я писал в кулинарном
блоге в серии постов, начиная с <a href="http://lazy-diet.tumblr.com/post/47503498720">Эксперимент по готовке еды в командировке</a>.</p>

<p>Ну все, хватит про кулинарию, и ближе к программированию и С++.</p>

<p>Все презентации были, как я уже сказал, про C++ 2011. Многие темы уже оскомину
набили, но для освежения памяти полезно. Конечно, выступления мастеров типа
Бьярна Страуструпа, Джона Лакоса, <a href="http://demin.ws/blog/russian/2012/07/24/interview-with-anthony-williams/">Энтони Уильямса</a>
или Кевлина Хенни всегда классные.</p>

<p>Не могу не похвастаться парочкой фотографий, что удалось сделать.</p>

<p>Мастер</p>

<p><img src="http://demin.ws/blog/russian/2013/05/20/accu2013/2013-04-11-15.21.26.jpg" alt="" />
</p>

<p>Джон Лакос</p>

<p><img src="http://demin.ws/blog/russian/2013/05/20/accu2013/2013-04-12-20.06.11.jpg" alt="" />
</p>

<p>А в качестве развлекательного бонуса фотографии моего пятиминутного экспромта в
рамках Lighting Talks, где я рассказываю про свою
<a href="http://demin.ws/blog/russian/2012/12/24/my-i8080-collection/">коллекцию микропроцессоров Intel 8080</a> и про
<a href="http://rk86.ru">эмулятор Радио-86РК</a>.</p>

<p><img src="http://demin.ws/blog/russian/2013/05/20/accu2013/2013-04-11-18.19.58.jpg" alt="" />
</p>

<p><img src="http://demin.ws/blog/russian/2013/05/20/accu2013/2013-04-11-18.17.37.jpg" alt="" />
</p>

<p>Увы, в этом году мне пришлось самому оплатить конференцию вместе проживанием, но
я ни разу не жалею о таком варианте отпуска, ибо было очень интересно и полезно.</p>

<p>На сайте <a href="http://accu.org">ACCU</a> доступны практические все материалы конференции.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Тонкости использования putenv()]]></title>
    <link href="http://demin.ws/blog/russian/2013/01/29/tricky-details-about-putenv/"/>
    <updated>2013-01-29T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2013/01/29/tricky-details-about-putenv/</id>
    <content type="html"><![CDATA[<p>Пару постов назад я писал про класс для работы с переменными окружения.
Весь смысл того класса был в способности хранить значения переменных,
передаваемых в <code>putenv</code>.</p>

<p>Я выкатил этот класс в наш QA, который работает на множестве платформ
(AIX, HP-UX, Solaris, Linux, Windows). И вроде все шло нормально, unit-тесты
проходили, основной код не падал. Увы, но QA машины, управляемые
Hudson/Jenkins обычно дико перегружены, и обычно на них начинают вылезать
самые неожиданные косяки. Через неделю работы стало видно, что на AIX
иногда происходят странные падения при вызове <code>std::system()</code>. Причем
что-то странное происходило именно внутри этой функции. Но так как чудес не
бывает, то необъяснимые вещи обычно являются следствиями проблем с памятью.
<a href="http://pic.dhe.ibm.com/infocenter/aix/v6r1/index.jsp?topic=%2Fcom.ibm.aix.cmds%2Fdoc%2Faixcmds5%2Ftruss.htm">truss</a>, вставленный в командную строку, передавамую в <code>system()</code>, показал,
что иногда блок переменных окружения дочернего процесса имеет разрушенные
значения у некоторых переменных.</p>

<p>Начали копать в моем новом классе. Вот его упрощенная версия, но которая
содержит коварный баг. Желающие могут сначала подумать, в чем тут может быть
проблема, а потом читать дальше. Простой <code>main()</code> внизу позволяет багу
проявиться.</p>

<pre class="hl">
<span class="hl ppc">#include &lt;vector&gt;</span>
<span class="hl ppc">#include &lt;map&gt;</span>
<span class="hl ppc">#include &lt;string&gt;</span>

<span class="hl ppc">#include &lt;unistd.h&gt;</span>

<span class="hl kwc">class</span> EnvironmentVariablesManager <span class="hl opt">{</span>
 <span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl kwc">typedef</span> std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span><span class="hl kwb">char</span><span class="hl opt">&gt;</span> VariableContainer<span class="hl opt">;</span>
  <span class="hl kwc">typedef</span> std<span class="hl opt">::</span>map<span class="hl opt">&lt;</span>std<span class="hl opt">::</span>string<span class="hl opt">,</span> VariableContainer<span class="hl opt">&gt;</span> Variables<span class="hl opt">;</span>
  <span class="hl kwb">void</span> <span class="hl kwd">put</span><span class="hl opt">(</span><span class="hl kwb">const</span> std<span class="hl opt">::</span>string<span class="hl opt">&amp;</span> name<span class="hl opt">,</span> <span class="hl kwb">const</span> std<span class="hl opt">::</span>string<span class="hl opt">&amp;</span> value<span class="hl opt">) {</span>
    VariableContainer pair<span class="hl opt">;</span>
    <span class="hl kwd">PairToContainer</span><span class="hl opt">(</span>name<span class="hl opt">,</span> value<span class="hl opt">, &amp;</span>pair<span class="hl opt">);</span>
    <span class="hl kwb">const</span> std<span class="hl opt">::</span>pair<span class="hl opt">&lt;</span>Variables<span class="hl opt">::</span>iterator<span class="hl opt">,</span> <span class="hl kwb">bool</span><span class="hl opt">&gt;</span> inserted <span class="hl opt">=</span>
      vars_<span class="hl opt">.</span><span class="hl kwd">insert</span><span class="hl opt">(</span>std<span class="hl opt">::</span><span class="hl kwd">make_pair</span><span class="hl opt">(</span>name<span class="hl opt">,</span> pair<span class="hl opt">));</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!</span>inserted<span class="hl opt">.</span>second<span class="hl opt">)</span>
      inserted<span class="hl opt">.</span>first<span class="hl opt">-&gt;</span>second <span class="hl opt">=</span> pair<span class="hl opt">;</span>
    <span class="hl kwd">putenv</span><span class="hl opt">(&amp;</span>inserted<span class="hl opt">.</span>first<span class="hl opt">-&gt;</span>second<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]);</span>
  <span class="hl opt">}</span>

 <span class="hl kwc">private</span><span class="hl opt">:</span>
  <span class="hl kwb">void</span> <span class="hl kwd">PairToContainer</span><span class="hl opt">(</span><span class="hl kwb">const</span> std<span class="hl opt">::</span>string<span class="hl opt">&amp;</span> name<span class="hl opt">,</span> <span class="hl kwb">const</span> std<span class="hl opt">::</span>string<span class="hl opt">&amp;</span> value<span class="hl opt">,</span>
                       VariableContainer<span class="hl opt">*</span> pair<span class="hl opt">)</span> <span class="hl kwb">const</span> <span class="hl opt">{</span>
    pair<span class="hl opt">-&gt;</span><span class="hl kwd">clear</span><span class="hl opt">();</span>
    std<span class="hl opt">::</span><span class="hl kwd">copy</span><span class="hl opt">(</span>name<span class="hl opt">.</span><span class="hl kwd">begin</span><span class="hl opt">(),</span> name<span class="hl opt">.</span><span class="hl kwd">end</span><span class="hl opt">(),</span> std<span class="hl opt">::</span><span class="hl kwd">back_inserter</span><span class="hl opt">(*</span>pair<span class="hl opt">));</span>
    pair<span class="hl opt">-&gt;</span><span class="hl kwd">push_back</span><span class="hl opt">(</span><span class="hl str">'='</span><span class="hl opt">);</span>
    std<span class="hl opt">::</span><span class="hl kwd">copy</span><span class="hl opt">(</span>value<span class="hl opt">.</span><span class="hl kwd">begin</span><span class="hl opt">(),</span> value<span class="hl opt">.</span><span class="hl kwd">end</span><span class="hl opt">(),</span> std<span class="hl opt">::</span><span class="hl kwd">back_inserter</span><span class="hl opt">(*</span>pair<span class="hl opt">));</span>
    pair<span class="hl opt">-&gt;</span><span class="hl kwd">push_back</span><span class="hl opt">(</span><span class="hl str">'\0'</span><span class="hl opt">);</span>
  <span class="hl opt">}</span>
  Variables vars_<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
  EnvironmentVariablesManager env<span class="hl opt">;</span>
  env<span class="hl opt">.</span><span class="hl kwd">put</span><span class="hl opt">(</span><span class="hl str">&quot;DB2_HOME&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;a&quot;</span><span class="hl opt">);</span>
  env<span class="hl opt">.</span><span class="hl kwd">put</span><span class="hl opt">(</span><span class="hl str">&quot;DB2_HOME&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;12345678&quot;</span><span class="hl opt">);</span>
<span class="hl opt">}</span>
</pre>

<p>Если этот код запустить под valgrind на Линуксе (я тестировал у себя
на OSX), вылезает странное сообщение об использовании памяти внутри <code>putenv</code>
после ее освобождения.</p>

<pre><code>clang++ -o putenv_check putenv_test.cpp &amp;&amp; valgrind ./putenv_check
==1046== Memcheck, a memory error detector
==1046== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==1046== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==1046== Command: ./putenv_check
==1046==
--1046-- ./putenv_check:
--1046-- dSYM directory is missing; consider using --dsymutil=yes
==1046== Invalid read of size 1
==1046==    at 0x2A8A3B: __findenv (in /usr/lib/system/libsystem_c.dylib)
==1046==    by 0x232C62: __setenv (in /usr/lib/system/libsystem_c.dylib)
==1046==    by 0x216A7E: putenv (in /usr/lib/system/libsystem_c.dylib)
==1046==    by 0x100001999: EnvironmentVariablesManager::put(std::string const&amp;, std::string const&amp;) (in ./putenv_check)
==1046==    by 0x1000015DE: main (in ./putenv_check)
==1046==  Address 0x100012560 is 0 bytes inside a block of size 11 free'd
==1046==    at 0x563A: free (in /usr/local/Cellar/valgrind/3.8.1/lib/valgrind/vgpreload_memcheck-amd64-darwin.so)
==1046==    by 0x10000208C: __gnu_cxx::new_allocator&lt;char&gt;::deallocate(char*, unsigned long) (in ./putenv_check)
==1046==    by 0x10000201D: std::_Vector_base&lt;char, std::allocator&lt;char&gt; &gt;::_M_deallocate(char*, unsigned long) (in ./putenv_check)
==1046==    by 0x100002483: std::vector&lt;char, std::allocator&lt;char&gt; &gt;::operator=(std::vector&lt;char, std::allocator&lt;char&gt; &gt; const&amp;) (in ./putenv_check)
==1046==    by 0x1000018A8: EnvironmentVariablesManager::put(std::string const&amp;, std::string const&amp;) (in ./putenv_check)
==1046==    by 0x1000015DE: main (in ./putenv_check)
==1046==
==1046==
==1046== HEAP SUMMARY:
==1046==     in use at exit: 2,425 bytes in 34 blocks
==1046==   total heap usage: 58 allocs, 24 frees, 2,824 bytes allocated
==1046==
==1046== LEAK SUMMARY:
==1046==    definitely lost: 18 bytes in 1 blocks
==1046==    indirectly lost: 0 bytes in 0 blocks
==1046==      possibly lost: 0 bytes in 0 blocks
==1046==    still reachable: 2,407 bytes in 33 blocks
==1046==         suppressed: 0 bytes in 0 blocks
==1046== Rerun with --leak-check=full to see details of leaked memory
==1046==
==1046== For counts of detected and suppressed errors, rerun with: -v
==1046== ERROR SUMMARY: 9 errors from 1 contexts (suppressed: 1 from 1)
</code></pre>

<p>Сходу, по крайне мере мне, не совсем очевидно, почему это происходит. Причем,
если убрать второй вызов <code>env.put(&quot;DB2_HOME&quot;, &quot;12345678&quot;)</code>, то ошибка
изчезает. Поэтому подозрение пало на строки:</p>

<pre class="hl">
    <span class="hl kwa">if</span> <span class="hl opt">(!</span>inserted<span class="hl opt">.</span>second<span class="hl opt">)</span>
      inserted<span class="hl opt">.</span>first<span class="hl opt">-&gt;</span>second <span class="hl opt">=</span> pair<span class="hl opt">;</span>
    <span class="hl kwd">putenv</span><span class="hl opt">(&amp;</span>inserted<span class="hl opt">.</span>first<span class="hl opt">-&gt;</span>second<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]);</span>
</pre>

<p>Если изменить немного код (фактически, мы тоже копируем массив, но иным
способом):</p>

<pre class="hl">
    <span class="hl kwa">if</span> <span class="hl opt">(!</span>inserted<span class="hl opt">.</span>second<span class="hl opt">)</span>
      inserted<span class="hl opt">.</span>first<span class="hl opt">-&gt;</span>second<span class="hl opt">.</span><span class="hl kwd">assign</span><span class="hl opt">(</span>pair<span class="hl opt">.</span><span class="hl kwd">begin</span><span class="hl opt">(),</span> pair<span class="hl opt">.</span><span class="hl kwd">end</span><span class="hl opt">());</span>
</pre>

<p>то сообщение об ошибке меняется:</p>

<pre><code>--1087-- ./putenv_check:
--1087-- dSYM directory is missing; consider using --dsymutil=yes
==1087== Invalid read of size 1
==1087==    at 0x2A8A3B: __findenv (in /usr/lib/system/libsystem_c.dylib)
==1087==    by 0x232C62: __setenv (in /usr/lib/system/libsystem_c.dylib)
==1087==    by 0x216A7E: putenv (in /usr/lib/system/libsystem_c.dylib)
==1087==    by 0x1000016A9: EnvironmentVariablesManager::put(std::string const&amp;, std::string const&amp;) (in ./putenv_check)
==1087==    by 0x10000129E: main (in ./putenv_check)
==1087==  Address 0x100013560 is 0 bytes inside a block of size 11 free'd
==1087==    at 0x563A: free (in /usr/local/Cellar/valgrind/3.8.1/lib/valgrind/vgpreload_memcheck-amd64-darwin.so)
==1087==    by 0x100001D9C: __gnu_cxx::new_allocator&lt;char&gt;::deallocate(char*, unsigned long) (in ./putenv_check)
==1087==    by 0x100001D2D: std::_Vector_base&lt;char, std::allocator&lt;char&gt; &gt;::_M_deallocate(char*, unsigned long) (in ./putenv_check)
==1087==    by 0x1000022E9: void std::vector&lt;char, std::allocator&lt;char&gt; &gt;::_M_assign_aux&lt;__gnu_cxx::__normal_iterator&lt;char*, std::vector&lt;char, std::allocator&lt;char&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;char*, std::vector&lt;char, std::allocator&lt;char&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;char*, std::vector&lt;char, std::allocator&lt;char&gt; &gt; &gt;, std::forward_iterator_tag) (in ./putenv_check)
==1087==    by 0x1000021C4: void std::vector&lt;char, std::allocator&lt;char&gt; &gt;::_M_assign_dispatch&lt;__gnu_cxx::__normal_iterator&lt;char*, std::vector&lt;char, std::allocator&lt;char&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;char*, std::vector&lt;char, std::allocator&lt;char&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;char*, std::vector&lt;char, std::allocator&lt;char&gt; &gt; &gt;, std::__false_type) (in ./putenv_check)
==1087==    by 0x1000020A4: void std::vector&lt;char, std::allocator&lt;char&gt; &gt;::assign&lt;__gnu_cxx::__normal_iterator&lt;char*, std::vector&lt;char, std::allocator&lt;char&gt; &gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;char*, std::vector&lt;char, std::allocator&lt;char&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;char*, std::vector&lt;char, std::allocator&lt;char&gt; &gt; &gt;) (in ./putenv_check)
==1087==    by 0x1000015BF: EnvironmentVariablesManager::put(std::string const&amp;, std::string const&amp;) (in ./putenv_check)
==1087==    by 0x10000129E: main (in ./putenv_check)
</code></pre>

<p>Теперь более менее ясно, что происходит. Но для полного понимания приведу
еще более простой код на С:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;unistd.h&gt;</span>
<span class="hl ppc">#include &lt;stdlib.h&gt;</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
  <span class="hl kwb">char</span> <span class="hl opt">*</span>v1<span class="hl opt">, *</span>v2<span class="hl opt">;</span>
  v1 <span class="hl opt">=</span> <span class="hl kwd">malloc</span><span class="hl opt">(</span><span class="hl num">10</span><span class="hl opt">);</span>
  <span class="hl kwd">strcpy</span><span class="hl opt">(</span>v1<span class="hl opt">,</span> <span class="hl str">&quot;x=123&quot;</span><span class="hl opt">);</span>
  <span class="hl kwd">putenv</span><span class="hl opt">(</span>v1<span class="hl opt">);</span>
  <span class="hl kwd">free</span><span class="hl opt">(</span>v1<span class="hl opt">);</span>

  v2 <span class="hl opt">=</span> <span class="hl kwd">malloc</span><span class="hl opt">(</span><span class="hl num">10</span><span class="hl opt">);</span>
  <span class="hl kwd">strcpy</span><span class="hl opt">(</span>v2<span class="hl opt">,</span> <span class="hl str">&quot;x=123&quot;</span><span class="hl opt">);</span>
  <span class="hl kwd">putenv</span><span class="hl opt">(</span>v2<span class="hl opt">);</span>
  <span class="hl kwd">free</span><span class="hl opt">(</span>v2<span class="hl opt">);</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Данный код, запущенный под valgrind, выдает следующее (этот trace уже с
Линукса):</p>

<pre><code>==523== Memcheck, a memory error detector
==523== Copyright (C) 2002-2010, and GNU GPL'd, by Julian Seward et al.
==523== Using Valgrind-3.6.0 and LibVEX; rerun with -h for copyright info
==523== Command: ./putenv_test
==523==
==523== Invalid read of size 1
==523==    at 0x4A07CF9: __GI_strncmp (mc_replace_strmem.c:400)
==523==    by 0x3E1C235649: __add_to_environ (in /lib64/libc-2.12.so)
==523==    by 0x3E1C2353CD: putenv (in /lib64/libc-2.12.so)
==523==    by 0x4A0952D: putenv (mc_replace_strmem.c:1165)
==523==    by 0x400607: main (in /storage2/home3/ademin/test/env/t)
==523==  Address 0x4c28040 is 0 bytes inside a block of size 10 free'd
==523==    at 0x4A0595D: free (vg_replace_malloc.c:366)
==523==    by 0x4005D7: main (in /storage2/home3/ademin/test/env/t)
==523==
==523== Invalid read of size 1
==523==    at 0x4A07D14: __GI_strncmp (mc_replace_strmem.c:400)
==523==    by 0x3E1C235649: __add_to_environ (in /lib64/libc-2.12.so)
==523==    by 0x3E1C2353CD: putenv (in /lib64/libc-2.12.so)
==523==    by 0x4A0952D: putenv (mc_replace_strmem.c:1165)
==523==    by 0x400607: main (in /storage2/home3/ademin/test/env/t)
==523==  Address 0x4c28040 is 0 bytes inside a block of size 10 free'd
==523==    at 0x4A0595D: free (vg_replace_malloc.c:366)
==523==    by 0x4005D7: main (in /storage2/home3/ademin/test/env/t)
==523==
==523== Invalid read of size 1
==523==    at 0x3E1C235652: __add_to_environ (in /lib64/libc-2.12.so)
==523==    by 0x3E1C2353CD: putenv (in /lib64/libc-2.12.so)
==523==    by 0x4A0952D: putenv (mc_replace_strmem.c:1165)
==523==    by 0x400607: main (in /storage2/home3/ademin/test/env/t)
==523==  Address 0x4c28041 is 1 bytes inside a block of size 10 free'd
==523==    at 0x4A0595D: free (vg_replace_malloc.c:366)
==523==    by 0x4005D7: main (in /storage2/home3/ademin/test/env/t)
==523==
==523==
==523== HEAP SUMMARY:
==523==     in use at exit: 0 bytes in 0 blocks
==523==   total heap usage: 3 allocs, 3 frees, 492 bytes allocated
==523==
==523== All heap blocks were freed -- no leaks are possible
==523==
==523== For counts of detected and suppressed errors, rerun with: -v
==523== ERROR SUMMARY: 3 errors from 3 contexts (suppressed: 6 from 6)
</code></pre>

<p>Но если убрать первый <code>free(v1);</code> или передвинуть его <strong>после</strong> второго
<code>putenv</code>, то valgrind ничего не находит.</p>

<p>Итак, вывод: функция <code>putenv</code> требует, чтобы в момент ее вызова память, в
которой хранится передыдущее значение переменной, <strong>обязана</strong> быть доступной и
все еще содержать правильное старое значение.</p>

<p>Каким-то образом, <code>putenv</code> пытает читать старое значение при установке нового.</p>

<p>Теперь назад к C++. Если оригинальный код:</p>

<pre class="hl">
    <span class="hl kwa">if</span> <span class="hl opt">(!</span>inserted<span class="hl opt">.</span>second<span class="hl opt">)</span>
      inserted<span class="hl opt">.</span>first<span class="hl opt">-&gt;</span>second <span class="hl opt">=</span> pair<span class="hl opt">;</span>
</pre>

<p>заменить на следущий:</p>

<pre class="hl">
    <span class="hl kwa">if</span> <span class="hl opt">(!</span>inserted<span class="hl opt">.</span>second<span class="hl opt">)</span>
      inserted<span class="hl opt">.</span>first<span class="hl opt">-&gt;</span>second<span class="hl opt">.</span><span class="hl kwd">swap</span><span class="hl opt">(</span>pair<span class="hl opt">);</span>
</pre>

<p>то проблема изчезает (valgrind более ничего не находит подозрительного).</p>

<p>В чем разница? А в том, что первый код в процессе копирования <strong>разрушает</strong>
(освобождает, перемещает) старое значение. Поэтому последующий вызов putenv&rsquo;а
будет пытаться обратиться к уже освобожденной памяти.</p>

<p>Второй же код, делая <code>swap</code>, перекидывает владение данными старого значения
из хранилища (map) во временную переменную <code>pair</code>, а данные из <code>pair</code> отдает
хранилищу. А так как переменная <code>pair</code> &ldquo;изчезнет&rdquo; только в конце функции, то на
момент вызова <code>putenv</code> старое значение будет все еще доступно. Фактически, мы
откладываем момент уничтожения старого значения.</p>

<p>Вот такая вот история. Если честно, это один из крутейших багов с памятью,
что я лично встречал последнее время.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Как работает snprintf() на разных платформах]]></title>
    <link href="http://demin.ws/blog/russian/2013/01/28/use-snprintf-on-different-platforms/"/>
    <updated>2013-01-28T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2013/01/28/use-snprintf-on-different-platforms/</id>
    <content type="html"><![CDATA[<p>Считается, что функция <code>snprintf()</code> является &ldquo;правильным&rdquo; способом форматного
преобразования в С, так как есть возможность контролировать длину рождаемых
данных. Но как у остальных функций подобного рода, типа <code>strcpy()</code>, у нее есть
мутный момент в плане нуля на конце, если буфер кончился раньше времени.
Мне хотелость определенности в этом вопросе, поэтому программа:</p>

<pre><code>#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#ifdef WINDOWS
#define snprintf _snprintf
#endif
void test(const int capacity) {
  char buf[1024];
  int n;
  strcpy(buf, &quot;abcdefghijk&quot;);
  n = snprintf(buf, capacity, &quot;%d&quot;, 123);
  printf(&quot;capacity=%d, n=%d, buf=[%s] (length %d)\n&quot;,
         capacity, n, buf, (int)strlen(buf));
}

int main() {
  test(0);
  test(1);
  test(2);
  test(3);
  test(4);
  test(5);
  return 0;
}
</code></pre>

<p>Данный код проверяет, как именно <code>snprintf()</code> использует предоставленный
буфер, если результат полностью не вмещается, и добавляется ли ноль в конце.</p>

<p>Запускать будем на разных системах и компиляторах.</p>

<h2>Solaris SunOS 5.10 SPARC, Sun C 5.8</h2>

<pre><code>capacity=0, n=3, buf=[abcdefghijk] (length 11)
capacity=1, n=3, buf=[] (length 0)
capacity=2, n=3, buf=[1] (length 1)
capacity=3, n=3, buf=[12] (length 2)
capacity=4, n=3, buf=[123] (length 3)
capacity=5, n=3, buf=[123] (length 3)
</code></pre>

<h2>Solaris SunOS 5.10 SPARC, Sun C 5.12</h2>

<pre><code>capacity=0, n=3, buf=[abcdefghijk] (length 11)
capacity=1, n=3, buf=[] (length 0)
capacity=2, n=3, buf=[1] (length 1)
capacity=3, n=3, buf=[12] (length 2)
capacity=4, n=3, buf=[123] (length 3)
capacity=5, n=3, buf=[123] (length 3)
</code></pre>

<h2>Solaris SunOS 5.10 Intel x86, Sun C 5.12</h2>

<pre><code>capacity=0, n=3, buf=[abcdefghijk] (length 11)
capacity=1, n=3, buf=[] (length 0)
capacity=2, n=3, buf=[1] (length 1)
capacity=3, n=3, buf=[12] (length 2)
capacity=4, n=3, buf=[123] (length 3)
capacity=5, n=3, buf=[123] (length 3)
</code></pre>

<h2>Solaris SunOS 5.11 Intel x86, Sun C 5.12</h2>

<pre><code>capacity=0, n=3, buf=[abcdefghijk] (length 11)
capacity=1, n=3, buf=[] (length 0)
capacity=2, n=3, buf=[1] (length 1)
capacity=3, n=3, buf=[12] (length 2)
capacity=4, n=3, buf=[123] (length 3)
capacity=5, n=3, buf=[123] (length 3)
</code></pre>

<h2>Linux 2.6.18 x64, gcc 4.1.2</h2>

<pre><code>capacity=0, n=3, buf=[abcdefghijk] (length 11)
capacity=1, n=3, buf=[] (length 0)
capacity=2, n=3, buf=[1] (length 1)
capacity=3, n=3, buf=[12] (length 2)
capacity=4, n=3, buf=[123] (length 3)
capacity=5, n=3, buf=[123] (length 3)
</code></pre>

<h2>Linux 2.6.32 x64, gcc 4.4.6</h2>

<pre><code>capacity=0, n=3, buf=[abcdefghijk] (length 11)
capacity=1, n=3, buf=[] (length 0)
capacity=2, n=3, buf=[1] (length 1)
capacity=3, n=3, buf=[12] (length 2)
capacity=4, n=3, buf=[123] (length 3)
capacity=5, n=3, buf=[123] (length 3)
</code></pre>

<h2>HP-UX B.11.31 Itanium 64, HP C/aC++ B3910B A.06.22</h2>

<pre><code>capacity=0, n=0, buf=[abcdefghijk] (length 11)
capacity=1, n=-1, buf=[] (length 0)
capacity=2, n=-1, buf=[1] (length 1)
capacity=3, n=-1, buf=[12] (length 2)
capacity=4, n=3, buf=[123] (length 3)
capacity=5, n=3, buf=[123] (length 3)
</code></pre>

<h2>AIX 5.3 (PowerPC), IBM XL C/C++ 8.0.0.20</h2>

<pre><code>capacity=0, n=3, buf=[abcdefghijk] (length 11)
capacity=1, n=3, buf=[] (length 0)
capacity=2, n=3, buf=[1] (length 1)
capacity=3, n=3, buf=[12] (length 2)
capacity=4, n=3, buf=[123] (length 3)
capacity=5, n=3, buf=[123] (length 3)
</code></pre>

<h2>AIX 6.1 (PowerPC), IBM XL C/C++ 9.0.0.0</h2>

<pre><code>capacity=0, n=3, buf=[abcdefghijk] (length 11)
capacity=1, n=3, buf=[] (length 0)
capacity=2, n=3, buf=[1] (length 1)
capacity=3, n=3, buf=[12] (length 2)
capacity=4, n=3, buf=[123] (length 3)
capacity=5, n=3, buf=[123] (length 3)
</code></pre>

<h2>AIX 6.1 (PowerPC), IBM XL C/C++ 9.0.0.15</h2>

<pre><code>capacity=0, n=3, buf=[abcdefghijk] (length 11)
capacity=1, n=3, buf=[] (length 0)
capacity=2, n=3, buf=[1] (length 1)
capacity=3, n=3, buf=[12] (length 2)
capacity=4, n=3, buf=[123] (length 3)
capacity=5, n=3, buf=[123] (length 3)
</code></pre>

<h2>AIX 7.1 (PowerPC), IBM XL C/C++ 11.1.0.0</h2>

<pre><code>capacity=0, n=3, buf=[abcdefghijk] (length 11)
capacity=1, n=3, buf=[] (length 0)
capacity=2, n=3, buf=[1] (length 1)
capacity=3, n=3, buf=[12] (length 2)
capacity=4, n=3, buf=[123] (length 3)
capacity=5, n=3, buf=[123] (length 3)
</code></pre>

<h2>Windows 7, Visual Studio 12 (17.00.50727.1), x86</h2>

<pre><code>capacity=0, n=-1, buf=[abcdefghijk] (length 11)
capacity=1, n=-1, buf=[1bcdefghijk] (length 11)
capacity=2, n=-1, buf=[12cdefghijk] (length 11)
capacity=3, n=3, buf=[123defghijk] (length 11)
capacity=4, n=3, buf=[123] (length 3)
capacity=5, n=3, buf=[123] (length 3)
</code></pre>

<h2>Windows 7, Visual Studio 12 (17.00.50727.1), x64</h2>

<pre><code>capacity=0, n=-1, buf=[abcdefghijk] (length 11)
capacity=1, n=-1, buf=[1bcdefghijk] (length 11)
capacity=2, n=-1, buf=[12cdefghijk] (length 11)
capacity=3, n=3, buf=[123defghijk] (length 11)
capacity=4, n=3, buf=[123] (length 3)
capacity=5, n=3, buf=[123] (length 3)
</code></pre>

<h2>OSX 10.7.5, Apple clang 4.1</h2>

<pre><code>capacity=0, n=3, buf=[abcdefghijk] (length 11)
capacity=1, n=3, buf=[] (length 0)
capacity=2, n=3, buf=[1] (length 1)
capacity=3, n=3, buf=[12] (length 2)
capacity=4, n=3, buf=[123] (length 3)
capacity=5, n=3, buf=[123] (length 3)
</code></pre>

<h2>OSX 10.7.5, Apple gcc/llmv 4.2.1</h2>

<pre><code>capacity=0, n=3, buf=[abcdefghijk] (length 11)
capacity=1, n=3, buf=[] (length 0)
capacity=2, n=3, buf=[1] (length 1)
capacity=3, n=3, buf=[12] (length 2)
capacity=4, n=3, buf=[123] (length 3)
capacity=5, n=3, buf=[123] (length 3)
</code></pre>

<h1>Выводы</h1>

<p>На всех UNIX&rsquo;ах (SunOS, Linux, AIX, OSX), кроме HP-UX, буфер не
трогается, если его длина 0, завершающий <code>\0</code> учитывается в длине рождаемых
данных (то есть, если буфер длиной 1, то туда влезет только один символ конца
строки), и фукнция всегда возващает длину данных (без учета нуля в конце),
которые могли бы быть записаны, если б хватило буфера. Это число можно
использовать для выделения буфера достаточной длины при повторном вызове
функции.</p>

<p>Увы, на HP-UX, если буфер маловат, то возвращается -1. В этом случае не понятно,
как определить длину требуемого буфера. Методом дихотомии? Странно.</p>

<p>В Windows ситуация еще хуже. Мало того, что функция не возвращает длину
требуемого буфера, так еще не учитывает ноль в расчете его длины. То есть
когда размера буфера не достаточно, то ноль в конце не добавляется.
Но Microsoft говорит, что не стоит использоваться <code>snprintf()</code> вообще,
а переключиться на <code>_snrpintf_s()</code>.</p>

<p>Теперь понятно, почему интернет полон темами типа &ldquo;a portable snprintf
implementation&rdquo;.</p>

<h1>Бонус</h1>

<p>Для моей конкретной задачи неплохо подошла бы функция <a href="http://linux.die.net/man/3/asprintf">asprintf</a>, так как
меня не пугает malloc на каждом вызове, но увы, функция нестандартная, и то же
HP-UX ее не имеет.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Потоки в С++ для удобного тестирования]]></title>
    <link href="http://demin.ws/blog/russian/2013/01/19/use-streams-for-unittesting/"/>
    <updated>2013-01-19T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2013/01/19/use-streams-for-unittesting/</id>
    <content type="html"><![CDATA[<p>Лично у меня прием, описанный ниже, даже уже набил оскомину, но от этого
не сделался ни на каплю хуже.</p>

<p>Итак, функция, которая что-то делает с файлом:</p>

<pre class="hl">
std<span class="hl opt">::</span>string <span class="hl kwd">DoSomethingWithFile</span><span class="hl opt">(</span><span class="hl kwb">const</span> std<span class="hl opt">::</span>string<span class="hl opt">&amp;</span> name<span class="hl opt">) {</span>
  std<span class="hl opt">::</span>ifstream <span class="hl kwd">is</span><span class="hl opt">(</span>name<span class="hl opt">);</span>
  <span class="hl slc">// ...</span>
  <span class="hl kwa">return</span> a_value<span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Что плохого в этой функции? Для ее тестирования нужен реальный файл на
файловой системе. В принципе, это не смертельно для unit-тестов, но как-то
коряво, особенно если логика требует большого количества тестов.</p>

<p>Лично я взял себе за правило всегда разделять работу с файлом и его
открытие:</p>

<pre class="hl">
std<span class="hl opt">::</span>string <span class="hl kwd">DoSomethingWithStream</span><span class="hl opt">(</span>std<span class="hl opt">::</span>istream<span class="hl opt">*</span> is<span class="hl opt">) {</span>
  <span class="hl slc">// ...</span>
  <span class="hl kwa">return</span> a_value<span class="hl opt">;</span>
<span class="hl opt">}</span>

std<span class="hl opt">::</span>string <span class="hl kwd">DoSomethingWithFile</span><span class="hl opt">(</span><span class="hl kwb">const</span> std<span class="hl opt">::</span>string<span class="hl opt">&amp;</span> name<span class="hl opt">) {</span>
  std<span class="hl opt">::</span>ifstream <span class="hl kwd">is</span><span class="hl opt">(</span>name<span class="hl opt">);</span>
  <span class="hl kwa">return</span> <span class="hl kwd">DoSomethingWithStream</span><span class="hl opt">(&amp;</span>is<span class="hl opt">);</span>
<span class="hl opt">}</span>
</pre>

<p>Тогда первую функцию можно в хвост и в гриву оттестировать, подсунув ей
std::istringstream в тесте. А вторую, прикрыв глаза рукой, можно не
тестировать или тестировать примитивно на одном реальном файле просто на
предмет того, что она может его открыть.</p>

<h2>Бонус</h2>

<p>Еще одно мое собственное правило: в принципе стараться не использовать
стандартные потоки std::cin/cout/cerr напрямую, а всегда передавать их как
параметр. Например, есть фукнция <code>usage()</code>, которая выводит справку о
программе. Если <code>cout/cerr</code> передать через параметр, то можно будет
делать тесты на наличие определенных строк в выводе этой функции. Добавил
новый функционал и наряду с прочими тестами добавил тест для проверки, что
<code>usage()</code> что-то там выводит про этот новый функционал.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Спасибо, тебе Эппл]]></title>
    <link href="http://demin.ws/blog/russian/2013/01/18/thank-you-apple/"/>
    <updated>2013-01-18T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2013/01/18/thank-you-apple/</id>
    <content type="html"><![CDATA[<p>Эппл, спасибо, что полтора года назад ты изменил мою жизнь с компьютером, как когда-то изменил ее мой брат, познакомив меня с ними. С того первого раза много лет назад я познал многое, и с тех пор удивить меня было не так-то просто. Но оглядываясь на последние полтора года, я осознал, что оказывается, существуют по-настоящему мобильные ноутбуки, например, Mac Air (верите, много раз на работе такое было, что я говорил: &ldquo;ОК, я дома на ДОМАШНЕМ компьютере посмотрю&rdquo;, а потом через секунду понимал, что &ldquo;Стоп, зачем ДОМА, вот же он, ДОМАШНИЙ компьютер, у меня в рюкзаке&rdquo;, порой я даже забываю, что он у меня всегда с собой), корпус которого не хрустит из-за пластика; что есть, оказывается, тачпады, на которых реально полноценно РАБОТАТЬ, а не только делать унылую &ldquo;козу&rdquo; двумя пальцами для скроллинга и материться &ldquo;надо было брать мышь&rdquo;; что есть шнуры и разъемы питания, которые не отламываются; что никто не устанавливает мне апдейтов именно тогда, когда мне надо срочно выключить ноут и не ждать (неожиданно) еще час, пока ставятся 123 обновления; что у меня под рукой в одном флаконе и великолепный UI и одновременно среда программирования с командной строкой (чтобы получить которую, не надо ставить тонны дополнительного софта); что, оказывается, можно спокойно ставить и удалять программы без опаски постепенного засирания системы, и что &ldquo;переустановка раз в год&rdquo; больше не является необходимой оздоровительной процедурой; что система резервного копирования включается одной галочкой, после чего всегда актуальная точная пофайловая копия моего винта (и история файлов, насколько позволяет объем NASа) всегда на NASе, даже за периоды, когда я был не дома; что на компьютере любой файл можно всегда МГНОВЕННО найти за секунды (я всегда верил и все еще верю в подход &ldquo;don&rsquo;t sort, but search!&rdquo;, и концепция иерархических папочек в конце концов умрет, а останется только Desktop с текущими рабочими документами и все остальное); за то, что теперь, оказывается, есть люди, которым теперь надо отвечать на вопрос &ldquo;голубой ли я&rdquo;, который они задают, глядя на логотип моего ноута &ndash; вы уж сами решите, а люблю смотреть, что происходит, когда я делаю что-то не так, не там, не тогда, и, главное, не по-ихнему.</p>

<p>И ничего, что нет (и не будет) на клавиатуре, кнопок BACKSPACE и INSERT (я давно знаю, что жизнь без них все так же прекрасна) и красная кнопочка в углу окна полностью НЕ закрывает программу, а надо жать CMD-Q (я помню клавиатурных комбинаций больше, чем английских слов). А все эти &ldquo;проблемы&rdquo; только на пользу &ndash; меньше людей будут пользоваться вашими продуктами, что значит: мне больше достанется.</p>

<p>СПАСИБО!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Пример того, почему удобно жить с unit-тестами]]></title>
    <link href="http://demin.ws/blog/russian/2013/01/18/unit-test-necessity/"/>
    <updated>2013-01-18T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2013/01/18/unit-test-necessity/</id>
    <content type="html"><![CDATA[<p>Нужна мне была функция, которая бы при низкоуровневой отладочной печати
умела распечатать строку, заменив непечатаемые коды (меньше 32 и больше 126)
кодами. Все крайне тривиально.</p>

<p>Имеем:</p>

<pre><code>1234\x04\x1fooo\xff
</code></pre>

<p>Печататься должно:</p>

<pre><code>1234&lt;04&gt;&lt;1f&gt;ooo&lt;ff&gt;
</code></pre>

<p>Рождается функция:</p>

<pre class="hl">
<span class="hl slc">// This function converts all non-ASCII characters (with codes less than 32</span>
<span class="hl slc">// and greater than 126) into the &lt;xx&gt; form where &quot;xx&quot; is a hexadecimal code</span>
<span class="hl slc">// of the character.</span>
<span class="hl kwb">void</span> <span class="hl kwd">MakeAllPrintable</span><span class="hl opt">(</span><span class="hl kwb">const char</span><span class="hl opt">*</span> from<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> to<span class="hl opt">,</span> <span class="hl kwb">int</span> to_capacity<span class="hl opt">) {</span>
  <span class="hl kwb">const static char</span> hex<span class="hl opt">[] =</span> <span class="hl str">&quot;0123456789abcdef&quot;</span><span class="hl opt">;</span>
  <span class="hl kwa">for</span> <span class="hl opt">(; *</span>from <span class="hl opt">&amp;&amp;</span> to_capacity <span class="hl opt">&gt;</span> <span class="hl num">1</span><span class="hl opt">; ++</span>from<span class="hl opt">) {</span>
    <span class="hl kwb">const unsigned char</span> c <span class="hl opt">= *</span>from<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>c <span class="hl opt">&lt;</span> <span class="hl num">32</span> <span class="hl opt">||</span> c <span class="hl opt">&gt;</span> <span class="hl num">126</span><span class="hl opt">) {</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>to_capacity <span class="hl opt">&lt;</span> <span class="hl num">4</span> <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">)</span>
        <span class="hl kwa">break</span><span class="hl opt">;</span>
      <span class="hl opt">*</span>to<span class="hl opt">++ =</span> <span class="hl str">'&lt;'</span><span class="hl opt">;</span>
      <span class="hl opt">*</span>to<span class="hl opt">++ =</span> hex<span class="hl opt">[(</span>c <span class="hl opt">&gt;&gt;</span> <span class="hl num">4</span><span class="hl opt">) &amp;</span> <span class="hl num">0xf</span><span class="hl opt">];</span>
      <span class="hl opt">*</span>to<span class="hl opt">++ =</span> hex<span class="hl opt">[</span>c <span class="hl opt">&amp;</span> <span class="hl num">0xf</span><span class="hl opt">];</span>
      <span class="hl opt">*</span>to<span class="hl opt">++ =</span> <span class="hl str">'&gt;'</span><span class="hl opt">;</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
      <span class="hl opt">*</span>to<span class="hl opt">++ =</span> c<span class="hl opt">;</span>
    <span class="hl opt">}</span>
  <span class="hl opt">}</span>
  <span class="hl opt">*</span>to <span class="hl opt">=</span> <span class="hl str">'\0'</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Увы, это С, а наша системы сборки частей на С, хоть и имеет cmockery, но
добавление тестов всегда связано с ручным прописываением имен фунцкий, а это
будет означать пересборку еще и makefile&rsquo;ов, а это будет означать проверку
этой пересборки на всех типах ОС, и в этоге на подготовку уйдет час или больше.
А если потихоньку просто добавить функцию без теста, то 5 минут, так как
изменится только один исходник. Мои мысли: &ldquo;Ну я, типа, такой катаный
колобок, врядли налажаю в столь простой функции. Так что можно без тестов.&ldquo;.
И, конечно, налажал. Код выше имеет конкретный косяк. Он бы, естественно,
всплыл, может даже на code review, но в итоге я отогнал все ренегатские
мысли, сделал всю рутину и сел за тесты, хотя по уму, я их должен быть
писать до.</p>

<p>Очевидно, что вполне логичный (предпоследний) тест, там, где последний параметр
5, сразу показал, что я забыл проверку максимальной длины буфера (эдакая
назадача!):</p>

<pre class="hl">
<span class="hl kwb">void</span> <span class="hl kwd">test_MakeAllPrintable</span><span class="hl opt">(</span><span class="hl kwb">void</span> <span class="hl opt">**</span>state<span class="hl opt">) {</span>
  <span class="hl kwb">char</span> buf<span class="hl opt">[</span><span class="hl num">16</span> <span class="hl opt">*</span> <span class="hl num">1024</span><span class="hl opt">];</span>

  <span class="hl kwd">MakeAllPrintable</span><span class="hl opt">(</span><span class="hl str">&quot;&quot;</span><span class="hl opt">,</span> buf<span class="hl opt">,</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span>buf<span class="hl opt">));</span>
  <span class="hl kwd">assert_int_equal</span><span class="hl opt">(</span><span class="hl kwd">strlen</span><span class="hl opt">(</span>buf<span class="hl opt">),</span> <span class="hl num">0</span><span class="hl opt">);</span>

  <span class="hl kwd">MakeAllPrintable</span><span class="hl opt">(</span><span class="hl str">&quot;abc&quot;</span><span class="hl opt">,</span> buf<span class="hl opt">,</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span>buf<span class="hl opt">));</span>
  <span class="hl kwd">assert_string_equal</span><span class="hl opt">(</span>buf<span class="hl opt">,</span> <span class="hl str">&quot;abc&quot;</span><span class="hl opt">);</span>

  <span class="hl slc">// This check verifies that the function always cleans the buffer at start.</span>
  <span class="hl kwd">MakeAllPrintable</span><span class="hl opt">(</span><span class="hl str">&quot;&quot;</span><span class="hl opt">,</span> buf<span class="hl opt">,</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span>buf<span class="hl opt">));</span>
  <span class="hl kwd">assert_int_equal</span><span class="hl opt">(</span><span class="hl kwd">strlen</span><span class="hl opt">(</span>buf<span class="hl opt">),</span> <span class="hl num">0</span><span class="hl opt">);</span>

  <span class="hl slc">// This check verifies that the function doesn't overwrite the given buffer</span>
  <span class="hl slc">// and always reserves the last byte for '\0'.</span>
  <span class="hl kwd">MakeAllPrintable</span><span class="hl opt">(</span><span class="hl str">&quot;12345678&quot;</span><span class="hl opt">,</span> buf<span class="hl opt">,</span> <span class="hl num">5</span><span class="hl opt">);</span>
  <span class="hl kwd">assert_string_equal</span><span class="hl opt">(</span>buf<span class="hl opt">,</span> <span class="hl str">&quot;1234&quot;</span><span class="hl opt">);</span>$
  <span class="hl kwd">MakeAllPrintable</span><span class="hl opt">(</span><span class="hl str">&quot;1</span><span class="hl esc">\x01\r\n\t\x1f</span> <span class="hl str">2</span><span class="hl esc">\x7e\x7f\x80\xff</span><span class="hl str">&quot;</span><span class="hl opt">,</span> buf<span class="hl opt">,</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span>buf<span class="hl opt">));</span>
  <span class="hl kwd">assert_string_equal</span><span class="hl opt">(</span>buf<span class="hl opt">,</span> <span class="hl str">&quot;1&lt;01&gt;&lt;0d&gt;&lt;0a&gt;&lt;09&gt;&lt;1f&gt; 2~&lt;7f&gt;&lt;80&gt;&lt;ff&gt;&quot;</span><span class="hl opt">);</span>
<span class="hl opt">}</span>
</pre>

<p>А вот как код должен был выглядеть:</p>

<pre class="hl">
<span class="hl slc">// This function converts all non-ASCII characters (with codes less than 32</span>
<span class="hl slc">// and greater than 126) into the &lt;xx&gt; form where &quot;xx&quot; is a hexadecimal code</span>
<span class="hl slc">// of the character.</span>
<span class="hl kwb">void</span> <span class="hl kwd">MakeAllPrintable</span><span class="hl opt">(</span><span class="hl kwb">const char</span><span class="hl opt">*</span> from<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> to<span class="hl opt">,</span> <span class="hl kwb">int</span> to_capacity<span class="hl opt">) {</span>
  <span class="hl kwb">const static char</span> hex<span class="hl opt">[] =</span> <span class="hl str">&quot;0123456789abcdef&quot;</span><span class="hl opt">;</span>
  <span class="hl kwa">for</span> <span class="hl opt">(; *</span>from <span class="hl opt">&amp;&amp;</span> to_capacity <span class="hl opt">&gt;</span> <span class="hl num">1</span><span class="hl opt">; ++</span>from<span class="hl opt">) {</span>
    <span class="hl kwb">const unsigned char</span> c <span class="hl opt">= *</span>from<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>c <span class="hl opt">&lt;</span> <span class="hl num">32</span> <span class="hl opt">||</span> c <span class="hl opt">&gt;</span> <span class="hl num">126</span><span class="hl opt">) {</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>to_capacity <span class="hl opt">&lt;</span> <span class="hl num">4</span> <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">)</span>
        <span class="hl kwa">break</span><span class="hl opt">;</span>
      <span class="hl opt">*</span>to<span class="hl opt">++ =</span> <span class="hl str">'&lt;'</span><span class="hl opt">;</span>
      <span class="hl opt">*</span>to<span class="hl opt">++ =</span> hex<span class="hl opt">[(</span>c <span class="hl opt">&gt;&gt;</span> <span class="hl num">4</span><span class="hl opt">) &amp;</span> <span class="hl num">0xf</span><span class="hl opt">];</span>
      <span class="hl opt">*</span>to<span class="hl opt">++ =</span> hex<span class="hl opt">[</span>c <span class="hl opt">&amp;</span> <span class="hl num">0xf</span><span class="hl opt">];</span>
      <span class="hl opt">*</span>to<span class="hl opt">++ =</span> <span class="hl str">'&gt;'</span><span class="hl opt">;</span>
      to_capacity <span class="hl opt">-=</span> <span class="hl num">4</span><span class="hl opt">;</span>   <span class="hl slc">// (!!!)</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
      <span class="hl opt">*</span>to<span class="hl opt">++ =</span> c<span class="hl opt">;</span>
      <span class="hl opt">--</span>to_capacity<span class="hl opt">;</span>      <span class="hl slc">// (!!!)</span>
    <span class="hl opt">}</span>
  <span class="hl opt">}</span>
  <span class="hl opt">*</span>to <span class="hl opt">=</span> <span class="hl str">'\0'</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Пример, безусловно, примитивный, но очень показательный. Принцип простой:
&ldquo;нет тестов, нет кода&rdquo;. Когда жизненный цикл проекта более нескольких дней,
тесты обязаны быть частью кода, и по мне, не должно быть разделения на
production code и test code по большому счету, так как первое без второго
не существует.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Класс EnvironmentVariablesManager для переменных окружения]]></title>
    <link href="http://demin.ws/blog/russian/2013/01/12/environment-variables-manager/"/>
    <updated>2013-01-12T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2013/01/12/environment-variables-manager/</id>
    <content type="html"><![CDATA[<p>Давненько не публиковал я кода. Возвращаемся к истокам.</p>

<p>У функции <code>putenv()</code>, которая создает (или удаляет) переменную окружения
есть одно неприятное свойство: она не создает копию аргумента, а использует
его напрямую по указателю. Более того, ее аргумент является неконстантным
указателем. Тут и автоматические объекты нельзя использовать, да и даже
строковую константу надо передавать, снимая <code>const</code>, что и не очень правильно.
Тут и начинаются всякие несуразности типа <code>malloc</code> или <code>strdup</code>.</p>

<p>Итак, класс <code>EnvironmentVariablesManager</code>, который является небольшой
надстройкой над <code>putenv()</code> и <code>getenv()</code>. Для <code>putenv()</code> класс сохраняет
копию переменной (пары &ldquo;имя=значение&rdquo;) во внутреннем хранилище.</p>

<p>Класс разрабатывался как универсальный под ряд платформ: Linux, AIX, HP-UX,
Solaris и Windows.</p>

<p>Файл EnvironmentVariablesManager.h:</p>

<pre class="hl">
<span class="hl ppc">#ifndef ENVIRONMENT_VARIABLE_MANAGER_H</span>
<span class="hl ppc">#define ENVIRONMENT_VARIABLE_MANAGER_H</span>

<span class="hl ppc">#include &lt;string&gt;</span>
<span class="hl ppc">#include &lt;vector&gt;</span>
<span class="hl ppc">#include &lt;map&gt;</span>

<span class="hl kwc">class</span> EnvironmentVariablesManager <span class="hl opt">{</span>
 <span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl kwc">typedef</span> std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span><span class="hl kwb">char</span><span class="hl opt">&gt;</span> VariableContainer<span class="hl opt">;</span>
  <span class="hl kwc">typedef</span> std<span class="hl opt">::</span>map<span class="hl opt">&lt;</span>std<span class="hl opt">::</span>string<span class="hl opt">,</span> VariableContainer<span class="hl opt">&gt;</span> Variables<span class="hl opt">;</span>

  <span class="hl kwd">EnvironmentVariablesManager</span><span class="hl opt">() {}</span>

  <span class="hl kwb">void</span> <span class="hl kwd">put</span><span class="hl opt">(</span><span class="hl kwb">const</span> std<span class="hl opt">::</span>string<span class="hl opt">&amp;</span> name<span class="hl opt">,</span> <span class="hl kwb">const</span> std<span class="hl opt">::</span>string<span class="hl opt">&amp;</span> value<span class="hl opt">);</span>
  std<span class="hl opt">::</span>string <span class="hl kwd">get</span><span class="hl opt">(</span><span class="hl kwb">const</span> std<span class="hl opt">::</span>string<span class="hl opt">&amp;</span> name<span class="hl opt">)</span> <span class="hl kwb">const</span><span class="hl opt">;</span>
  <span class="hl kwb">void</span> <span class="hl kwd">del</span><span class="hl opt">(</span><span class="hl kwb">const</span> std<span class="hl opt">::</span>string<span class="hl opt">&amp;</span> name<span class="hl opt">);</span>

  <span class="hl kwb">static void</span> <span class="hl kwd">PutOSVariable</span><span class="hl opt">(</span><span class="hl kwb">char</span><span class="hl opt">*</span> value<span class="hl opt">);</span>
  <span class="hl kwb">static</span> std<span class="hl opt">::</span>string <span class="hl kwd">GetOSVariable</span><span class="hl opt">(</span><span class="hl kwb">const char</span><span class="hl opt">*</span> name<span class="hl opt">);</span>
  <span class="hl kwb">static bool</span> <span class="hl kwd">IsOSVariableSet</span><span class="hl opt">(</span><span class="hl kwb">const char</span><span class="hl opt">*</span> name<span class="hl opt">);</span>

 <span class="hl kwc">private</span><span class="hl opt">:</span>
  VariableContainer <span class="hl kwd">PairToContainer</span><span class="hl opt">(</span><span class="hl kwb">const</span> std<span class="hl opt">::</span>string<span class="hl opt">&amp;</span> name<span class="hl opt">,</span>
                                    <span class="hl kwb">const</span> std<span class="hl opt">::</span>string<span class="hl opt">&amp;</span> value<span class="hl opt">)</span> <span class="hl kwb">const</span><span class="hl opt">;</span>
  Variables vars_<span class="hl opt">;</span>

  <span class="hl slc">// This class is not copiable.</span>
  <span class="hl kwd">EnvironmentVariablesManager</span><span class="hl opt">(</span><span class="hl kwb">const</span> EnvironmentVariablesManager<span class="hl opt">&amp;);</span>
  <span class="hl kwb">void</span> <span class="hl kwc">operator</span><span class="hl opt">=(</span><span class="hl kwb">const</span> EnvironmentVariablesManager<span class="hl opt">&amp;);</span>
<span class="hl opt">};</span>

<span class="hl ppc">#endif</span>
</pre>

<p>Файл EnvironmentVariablesManager.cpp:</p>

<pre class="hl">
<span class="hl ppc">#include</span> <span class="hl pps">&quot;EnvironmentVariablesManager.h&quot;</span><span class="hl ppc"></span>

<span class="hl ppc">#ifdef WINDOWS</span>
<span class="hl ppc">#include &lt;windows.h&gt;</span>
<span class="hl ppc">#else</span>
<span class="hl ppc">#include &lt;unistd.h&gt;</span>
<span class="hl ppc">#endif</span>

<span class="hl ppc">#include &lt;vector&gt;</span>
<span class="hl ppc">#include &lt;map&gt;</span>
<span class="hl ppc">#include &lt;string&gt;</span>
<span class="hl ppc">#include &lt;iterator&gt;</span>
<span class="hl ppc">#include &lt;algorithm&gt;</span>

<span class="hl ppc">#include &lt;cassert&gt;</span>

<span class="hl kwb">void</span> EnvironmentVariablesManager<span class="hl opt">::</span><span class="hl kwd">put</span><span class="hl opt">(</span><span class="hl kwb">const</span> std<span class="hl opt">::</span>string<span class="hl opt">&amp;</span> name<span class="hl opt">,</span>
                                      <span class="hl kwb">const</span> std<span class="hl opt">::</span>string<span class="hl opt">&amp;</span> value<span class="hl opt">) {</span>
  <span class="hl kwb">const</span> VariableContainer pair <span class="hl opt">=</span> <span class="hl kwd">PairToContainer</span><span class="hl opt">(</span>name<span class="hl opt">,</span> value<span class="hl opt">);</span>
  <span class="hl kwb">const</span> std<span class="hl opt">::</span>pair<span class="hl opt">&lt;</span>Variables<span class="hl opt">::</span>iterator<span class="hl opt">,</span> <span class="hl kwb">bool</span><span class="hl opt">&gt;</span> inserted <span class="hl opt">=</span>
    vars_<span class="hl opt">.</span><span class="hl kwd">insert</span><span class="hl opt">(</span>std<span class="hl opt">::</span><span class="hl kwd">make_pair</span><span class="hl opt">(</span>name<span class="hl opt">,</span> pair<span class="hl opt">));</span>
  <span class="hl kwa">if</span> <span class="hl opt">(!</span>inserted<span class="hl opt">.</span>second<span class="hl opt">)</span>
    inserted<span class="hl opt">.</span>first<span class="hl opt">-&gt;</span>second <span class="hl opt">=</span> pair<span class="hl opt">;</span>
  <span class="hl kwb">char</span><span class="hl opt">*</span> data <span class="hl opt">= &amp;(</span>inserted<span class="hl opt">.</span>first<span class="hl opt">-&gt;</span>second<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]);</span>
  <span class="hl kwd">PutOSVariable</span><span class="hl opt">(</span>data<span class="hl opt">);</span>
<span class="hl opt">}</span>

std<span class="hl opt">::</span>string EnvironmentVariablesManager<span class="hl opt">::</span><span class="hl kwd">get</span><span class="hl opt">(</span><span class="hl kwb">const</span> std<span class="hl opt">::</span>string<span class="hl opt">&amp;</span> name<span class="hl opt">)</span> <span class="hl kwb">const</span> <span class="hl opt">{</span>
  <span class="hl kwa">return</span> <span class="hl kwd">GetOSVariable</span><span class="hl opt">(</span>name<span class="hl opt">.</span><span class="hl kwd">c_str</span><span class="hl opt">());</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span> EnvironmentVariablesManager<span class="hl opt">::</span><span class="hl kwd">del</span><span class="hl opt">(</span><span class="hl kwb">const</span> std<span class="hl opt">::</span>string<span class="hl opt">&amp;</span> name<span class="hl opt">) {</span>
  <span class="hl kwd">put</span><span class="hl opt">(</span>name<span class="hl opt">,</span> <span class="hl str">&quot;&quot;</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span> EnvironmentVariablesManager<span class="hl opt">::</span><span class="hl kwd">PutOSVariable</span><span class="hl opt">(</span><span class="hl kwb">char</span><span class="hl opt">*</span> value<span class="hl opt">) {</span>
  <span class="hl opt">::</span><span class="hl kwd">putenv</span><span class="hl opt">(</span>value<span class="hl opt">);</span>
<span class="hl opt">}</span>

std<span class="hl opt">::</span>string EnvironmentVariablesManager<span class="hl opt">::</span><span class="hl kwd">GetOSVariable</span><span class="hl opt">(</span><span class="hl kwb">const char</span><span class="hl opt">*</span> name<span class="hl opt">) {</span>
<span class="hl ppc">#ifdef WINDOWS</span>
  <span class="hl kwb">size_t</span> sz <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span><span class="hl kwd">getenv_s</span><span class="hl opt">(&amp;</span>sz<span class="hl opt">,</span> NULL<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> name<span class="hl opt">) ==</span> <span class="hl num">0</span><span class="hl opt">);</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>sz <span class="hl opt">==</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">return</span> std<span class="hl opt">::</span><span class="hl kwd">string</span><span class="hl opt">();</span>
  std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span><span class="hl kwb">char</span><span class="hl opt">&gt;</span> <span class="hl kwd">value</span><span class="hl opt">(</span>sz <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">);</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span><span class="hl kwd">getenv_s</span><span class="hl opt">(&amp;</span>sz<span class="hl opt">, &amp;</span>value<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">],</span> sz<span class="hl opt">,</span> name<span class="hl opt">) ==</span> <span class="hl num">0</span><span class="hl opt">);</span>
  <span class="hl kwa">return</span> std<span class="hl opt">::</span><span class="hl kwd">string</span><span class="hl opt">(&amp;</span>value<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">],</span> sz <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">);</span>
<span class="hl ppc">#else</span>
  <span class="hl kwb">const char</span><span class="hl opt">*</span> <span class="hl kwb">const</span> value <span class="hl opt">=</span> std<span class="hl opt">::</span><span class="hl kwd">getenv</span><span class="hl opt">(</span>name<span class="hl opt">);</span>
  <span class="hl kwa">return</span> value ? value <span class="hl opt">:</span> <span class="hl str">&quot;&quot;</span><span class="hl opt">;</span>
<span class="hl ppc">#endif</span>
<span class="hl opt">}</span>

<span class="hl kwb">bool</span> EnvironmentVariablesManager<span class="hl opt">::</span><span class="hl kwd">IsOSVariableSet</span><span class="hl opt">(</span><span class="hl kwb">const char</span><span class="hl opt">*</span> name<span class="hl opt">) {</span>
<span class="hl ppc">#ifdef WINDOWS</span>
  <span class="hl kwb">size_t</span> sz <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span><span class="hl kwd">getenv_s</span><span class="hl opt">(&amp;</span>sz<span class="hl opt">,</span> NULL<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> name<span class="hl opt">) ==</span> <span class="hl num">0</span><span class="hl opt">);</span>
  <span class="hl kwa">return</span> sz <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl ppc">#else</span>
  <span class="hl kwb">const char</span><span class="hl opt">*</span> value <span class="hl opt">=</span> std<span class="hl opt">::</span><span class="hl kwd">getenv</span><span class="hl opt">(</span>name<span class="hl opt">);</span>
  <span class="hl kwa">return</span> value <span class="hl opt">!=</span> NULL <span class="hl opt">&amp;&amp; *</span>value <span class="hl opt">!=</span> <span class="hl str">'\0'</span><span class="hl opt">;</span>
<span class="hl ppc">#endif</span>
<span class="hl opt">}</span>

EnvironmentVariablesManager<span class="hl opt">::</span>VariableContainer 
EnvironmentVariablesManager<span class="hl opt">::</span><span class="hl kwd">PairToContainer</span><span class="hl opt">(</span><span class="hl kwb">const</span> std<span class="hl opt">::</span>string<span class="hl opt">&amp;</span> name<span class="hl opt">,</span>
                                             <span class="hl kwb">const</span> std<span class="hl opt">::</span>string<span class="hl opt">&amp;</span> value<span class="hl opt">)</span> <span class="hl kwb">const</span> <span class="hl opt">{</span>
  VariableContainer pair<span class="hl opt">;</span>                                            
  std<span class="hl opt">::</span><span class="hl kwd">copy</span><span class="hl opt">(</span>name<span class="hl opt">.</span><span class="hl kwd">begin</span><span class="hl opt">(),</span> name<span class="hl opt">.</span><span class="hl kwd">end</span><span class="hl opt">(),</span> std<span class="hl opt">::</span><span class="hl kwd">back_inserter</span><span class="hl opt">(</span>pair<span class="hl opt">));</span>
  pair<span class="hl opt">.</span><span class="hl kwd">push_back</span><span class="hl opt">(</span><span class="hl str">'='</span><span class="hl opt">);</span>
  std<span class="hl opt">::</span><span class="hl kwd">copy</span><span class="hl opt">(</span>value<span class="hl opt">.</span><span class="hl kwd">begin</span><span class="hl opt">(),</span> value<span class="hl opt">.</span><span class="hl kwd">end</span><span class="hl opt">(),</span> std<span class="hl opt">::</span><span class="hl kwd">back_inserter</span><span class="hl opt">(</span>pair<span class="hl opt">));</span>
  pair<span class="hl opt">.</span><span class="hl kwd">push_back</span><span class="hl opt">(</span><span class="hl str">'\0'</span><span class="hl opt">);</span>
  <span class="hl kwa">return</span> pair<span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Тесты через обычный assert.</p>

<p>Файл EnvironmentVariablesManager_unittest.cpp:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;iostream&gt;</span>
<span class="hl ppc">#include &lt;string&gt;</span>
<span class="hl ppc">#include &lt;vector&gt;</span>
<span class="hl ppc">#include &lt;cstdlib&gt;</span>
<span class="hl ppc">#include &lt;cstring&gt;</span>
<span class="hl ppc">#include &lt;cassert&gt;</span>

<span class="hl ppc">#ifdef WINDOWS</span>
<span class="hl ppc">#include &lt;windows.h&gt;</span>
<span class="hl ppc">#else</span>
<span class="hl ppc">#include &lt;stdlib.h&gt;</span>
<span class="hl ppc">#include &lt;stdio.h&gt;</span>
<span class="hl ppc">#include &lt;unistd.h&gt;</span>
<span class="hl ppc">#endif</span>

<span class="hl ppc">#include</span> <span class="hl pps">&quot;EnvironmentVariablesManager.h&quot;</span><span class="hl ppc"></span>

<span class="hl kwb">void</span> <span class="hl kwd">Test_EnvironmentVariablesManager_get_put</span><span class="hl opt">() {</span>
  EnvironmentVariablesManager env<span class="hl opt">;</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>std<span class="hl opt">::</span><span class="hl kwd">string</span><span class="hl opt">(</span><span class="hl str">&quot;&quot;</span><span class="hl opt">) ==</span> env<span class="hl opt">.</span><span class="hl kwd">get</span><span class="hl opt">(</span><span class="hl str">&quot;_a_unique_variable_&quot;</span><span class="hl opt">));</span>
  env<span class="hl opt">.</span><span class="hl kwd">put</span><span class="hl opt">(</span><span class="hl str">&quot;_a_unique_variable_&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;b&quot;</span><span class="hl opt">);</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>std<span class="hl opt">::</span><span class="hl kwd">string</span><span class="hl opt">(</span><span class="hl str">&quot;b&quot;</span><span class="hl opt">) ==</span> env<span class="hl opt">.</span><span class="hl kwd">get</span><span class="hl opt">(</span><span class="hl str">&quot;_a_unique_variable_&quot;</span><span class="hl opt">));</span>
  env<span class="hl opt">.</span><span class="hl kwd">put</span><span class="hl opt">(</span><span class="hl str">&quot;_a_unique_variable_&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;abc&quot;</span><span class="hl opt">);</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>std<span class="hl opt">::</span><span class="hl kwd">string</span><span class="hl opt">(</span><span class="hl str">&quot;abc&quot;</span><span class="hl opt">) ==</span> env<span class="hl opt">.</span><span class="hl kwd">get</span><span class="hl opt">(</span><span class="hl str">&quot;_a_unique_variable_&quot;</span><span class="hl opt">));</span>
  env<span class="hl opt">.</span><span class="hl kwd">put</span><span class="hl opt">(</span><span class="hl str">&quot;_a_unique_variable_&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;&quot;</span><span class="hl opt">);</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>std<span class="hl opt">::</span><span class="hl kwd">string</span><span class="hl opt">(</span><span class="hl str">&quot;&quot;</span><span class="hl opt">) ==</span> env<span class="hl opt">.</span><span class="hl kwd">get</span><span class="hl opt">(</span><span class="hl str">&quot;_a_unique_variable_&quot;</span><span class="hl opt">));</span>
<span class="hl opt">}</span>

<span class="hl kwa">namespace</span> <span class="hl opt">{</span>
std<span class="hl opt">::</span>string <span class="hl kwd">ReadEnvironmentVariableViaShell</span><span class="hl opt">(</span><span class="hl kwb">const</span> std<span class="hl opt">::</span>string<span class="hl opt">&amp;</span> name<span class="hl opt">) {</span>
<span class="hl ppc">#ifdef WINDOWS</span>
  <span class="hl kwb">const</span> std<span class="hl opt">::</span>string shell <span class="hl opt">=</span>
    EnvironmentVariablesManager<span class="hl opt">::</span><span class="hl kwd">GetOSVariable</span><span class="hl opt">(</span><span class="hl str">&quot;ComSpec&quot;</span><span class="hl opt">);</span>
  <span class="hl kwa">assert</span><span class="hl opt">(!</span>shell<span class="hl opt">.</span><span class="hl kwd">empty</span><span class="hl opt">());</span>
  <span class="hl kwb">const</span> std<span class="hl opt">::</span>string cmd <span class="hl opt">=</span> shell <span class="hl opt">+</span> <span class="hl str">&quot; /c echo %&quot;</span> <span class="hl opt">+</span> name <span class="hl opt">+</span> <span class="hl str">&quot;%&quot;</span><span class="hl opt">;</span>
  <span class="hl kwb">FILE</span><span class="hl opt">*</span> <span class="hl kwb">const</span> f <span class="hl opt">=</span> <span class="hl kwd">_popen</span><span class="hl opt">(</span>cmd<span class="hl opt">.</span><span class="hl kwd">c_str</span><span class="hl opt">(),</span> <span class="hl str">&quot;rb&quot;</span><span class="hl opt">);</span>
<span class="hl ppc">#else</span>
  <span class="hl kwb">const</span> std<span class="hl opt">::</span>string cmd <span class="hl opt">=</span> <span class="hl str">&quot;echo $&quot;</span> <span class="hl opt">+</span> name<span class="hl opt">;</span>
  <span class="hl kwb">FILE</span><span class="hl opt">*</span> <span class="hl kwb">const</span> f <span class="hl opt">=</span> <span class="hl kwd">popen</span><span class="hl opt">(</span>cmd<span class="hl opt">.</span><span class="hl kwd">c_str</span><span class="hl opt">(),</span> <span class="hl str">&quot;r&quot;</span><span class="hl opt">);</span>
<span class="hl ppc">#endif</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>f <span class="hl opt">!=</span> NULL<span class="hl opt">);</span>
  std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span><span class="hl kwb">char</span><span class="hl opt">&gt;</span> <span class="hl kwd">line</span><span class="hl opt">(</span><span class="hl num">1024</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">);</span>
  <span class="hl kwb">size_t</span> read <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
  <span class="hl kwa">while</span> <span class="hl opt">(!::</span><span class="hl kwd">feof</span><span class="hl opt">(</span>f<span class="hl opt">) &amp;&amp;</span> read <span class="hl opt">&lt;</span> line<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">()) {</span>
    <span class="hl kwb">const size_t</span> sz <span class="hl opt">= ::</span><span class="hl kwd">fread</span><span class="hl opt">(&amp;</span>line<span class="hl opt">[</span>read<span class="hl opt">],</span> <span class="hl num">1</span><span class="hl opt">,</span> line<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">() -</span> read<span class="hl opt">,</span> f<span class="hl opt">);</span>
    read <span class="hl opt">+=</span> sz<span class="hl opt">;</span>
  <span class="hl opt">}</span>
<span class="hl ppc">#ifdef WINDOWS</span>
  <span class="hl opt">::</span><span class="hl kwd">_pclose</span><span class="hl opt">(</span>f<span class="hl opt">);</span>
<span class="hl ppc">#else</span>
  <span class="hl opt">::</span><span class="hl kwd">pclose</span><span class="hl opt">(</span>f<span class="hl opt">);</span>
<span class="hl ppc">#endif</span>
  line<span class="hl opt">.</span><span class="hl kwd">resize</span><span class="hl opt">(</span>read<span class="hl opt">);</span>
  std<span class="hl opt">::</span>string <span class="hl kwd">trimmed</span><span class="hl opt">(</span>read<span class="hl opt">,</span> <span class="hl str">'\0'</span><span class="hl opt">);</span>
  std<span class="hl opt">::</span><span class="hl kwd">copy</span><span class="hl opt">(</span>line<span class="hl opt">.</span><span class="hl kwd">begin</span><span class="hl opt">(),</span> line<span class="hl opt">.</span><span class="hl kwd">end</span><span class="hl opt">(),</span> trimmed<span class="hl opt">.</span><span class="hl kwd">begin</span><span class="hl opt">());</span>
  <span class="hl kwa">return</span> trimmed<span class="hl opt">.</span><span class="hl kwd">substr</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> trimmed<span class="hl opt">.</span><span class="hl kwd">find_last_not_of</span><span class="hl opt">(</span><span class="hl str">&quot;</span><span class="hl esc">\r\n</span><span class="hl str">&quot;</span><span class="hl opt">) +</span> <span class="hl num">1</span><span class="hl opt">);</span>
<span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">Test_EnvironmentVariablesManager_put_is_propagated_to_child_process</span><span class="hl opt">() {</span>
  EnvironmentVariablesManager env<span class="hl opt">;</span>
<span class="hl ppc">#ifdef WINDOWS</span>
  <span class="hl kwb">const</span> std<span class="hl opt">::</span>string empty <span class="hl opt">=</span> <span class="hl str">&quot;%__unique_%&quot;</span><span class="hl opt">;</span>
<span class="hl ppc">#else</span>
  <span class="hl kwb">const</span> std<span class="hl opt">::</span>string empty <span class="hl opt">=</span> <span class="hl str">&quot;&quot;</span><span class="hl opt">;</span>
<span class="hl ppc">#endif</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>empty <span class="hl opt">==</span> <span class="hl kwd">ReadEnvironmentVariableViaShell</span><span class="hl opt">(</span><span class="hl str">&quot;__unique_&quot;</span><span class="hl opt">));</span>
  env<span class="hl opt">.</span><span class="hl kwd">put</span><span class="hl opt">(</span><span class="hl str">&quot;__unique_&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;b&quot;</span><span class="hl opt">);</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>std<span class="hl opt">::</span><span class="hl kwd">string</span><span class="hl opt">(</span><span class="hl str">&quot;b&quot;</span><span class="hl opt">) ==</span> <span class="hl kwd">ReadEnvironmentVariableViaShell</span><span class="hl opt">(</span><span class="hl str">&quot;__unique_&quot;</span><span class="hl opt">));</span>
  env<span class="hl opt">.</span><span class="hl kwd">put</span><span class="hl opt">(</span><span class="hl str">&quot;__unique_&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;&quot;</span><span class="hl opt">);</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>empty <span class="hl opt">==</span> <span class="hl kwd">ReadEnvironmentVariableViaShell</span><span class="hl opt">(</span><span class="hl str">&quot;__unique_&quot;</span><span class="hl opt">));</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">Test_EnvironmentVariablesManager_must_take_a_copy</span><span class="hl opt">() {</span>
  EnvironmentVariablesManager env<span class="hl opt">;</span>
  <span class="hl kwb">char</span> var<span class="hl opt">[] =</span> <span class="hl str">&quot;12345678&quot;</span><span class="hl opt">;</span>
  env<span class="hl opt">.</span><span class="hl kwd">put</span><span class="hl opt">(</span><span class="hl str">&quot;var&quot;</span><span class="hl opt">,</span> var<span class="hl opt">);</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>env<span class="hl opt">.</span><span class="hl kwd">get</span><span class="hl opt">(</span><span class="hl str">&quot;var&quot;</span><span class="hl opt">) ==</span> std<span class="hl opt">::</span><span class="hl kwd">string</span><span class="hl opt">(</span><span class="hl str">&quot;12345678&quot;</span><span class="hl opt">));</span>
  std<span class="hl opt">::</span><span class="hl kwd">strcpy</span><span class="hl opt">(</span>var<span class="hl opt">,</span> <span class="hl str">&quot;abc&quot;</span><span class="hl opt">);</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>env<span class="hl opt">.</span><span class="hl kwd">get</span><span class="hl opt">(</span><span class="hl str">&quot;var&quot;</span><span class="hl opt">) ==</span> std<span class="hl opt">::</span><span class="hl kwd">string</span><span class="hl opt">(</span><span class="hl str">&quot;12345678&quot;</span><span class="hl opt">));</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">Test_EnvironmentVariablesManager_del</span><span class="hl opt">() {</span>
  EnvironmentVariablesManager env<span class="hl opt">;</span>
  env<span class="hl opt">.</span><span class="hl kwd">put</span><span class="hl opt">(</span><span class="hl str">&quot;variable_to_delete&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;123&quot;</span><span class="hl opt">);</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>std<span class="hl opt">::</span><span class="hl kwd">string</span><span class="hl opt">(</span><span class="hl str">&quot;123&quot;</span><span class="hl opt">) ==</span> env<span class="hl opt">.</span><span class="hl kwd">get</span><span class="hl opt">(</span><span class="hl str">&quot;variable_to_delete&quot;</span><span class="hl opt">));</span>
  env<span class="hl opt">.</span><span class="hl kwd">del</span><span class="hl opt">(</span><span class="hl str">&quot;variable_to_delete&quot;</span><span class="hl opt">);</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>env<span class="hl opt">.</span><span class="hl kwd">get</span><span class="hl opt">(</span><span class="hl str">&quot;variable_to_delete&quot;</span><span class="hl opt">).</span><span class="hl kwd">empty</span><span class="hl opt">() ==</span> <span class="hl kwa">true</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">Test_EnvironmentVariablesManager_IsOSVariableSet_set_and_unset</span><span class="hl opt">() {</span>
  EnvironmentVariablesManager env<span class="hl opt">;</span>
  env<span class="hl opt">.</span><span class="hl kwd">put</span><span class="hl opt">(</span><span class="hl str">&quot;a&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;value&quot;</span><span class="hl opt">);</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>EnvironmentVariablesManager<span class="hl opt">::</span><span class="hl kwd">IsOSVariableSet</span><span class="hl opt">(</span><span class="hl str">&quot;a&quot;</span><span class="hl opt">) ==</span> <span class="hl kwa">true</span><span class="hl opt">);</span>
  env<span class="hl opt">.</span><span class="hl kwd">put</span><span class="hl opt">(</span><span class="hl str">&quot;a&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;&quot;</span><span class="hl opt">);</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>EnvironmentVariablesManager<span class="hl opt">::</span><span class="hl kwd">IsOSVariableSet</span><span class="hl opt">(</span><span class="hl str">&quot;a&quot;</span><span class="hl opt">) ==</span> <span class="hl kwa">false</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">Test_EnvironmentVariablesManager_GetOSVariable</span><span class="hl opt">() {</span>
  <span class="hl kwb">const</span> std<span class="hl opt">::</span>string unique_name <span class="hl opt">=</span> <span class="hl str">&quot;EnvironmentVariablesManager_GetOSVariable&quot;</span><span class="hl opt">;</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>EnvironmentVariablesManager<span class="hl opt">::</span><span class="hl kwd">GetOSVariable</span><span class="hl opt">(</span>unique_name<span class="hl opt">.</span><span class="hl kwd">c_str</span><span class="hl opt">())</span>
                                                    <span class="hl opt">.</span><span class="hl kwd">empty</span><span class="hl opt">());</span>
  <span class="hl kwb">const</span> std<span class="hl opt">::</span>string unique_name_pair <span class="hl opt">=</span> unique_name <span class="hl opt">+</span> <span class="hl str">&quot;=12345678&quot;</span><span class="hl opt">;</span>
  <span class="hl kwb">char</span> var<span class="hl opt">[</span><span class="hl num">1024</span><span class="hl opt">];</span>
  unique_name_pair<span class="hl opt">.</span><span class="hl kwd">copy</span><span class="hl opt">(</span>var<span class="hl opt">,</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span>var<span class="hl opt">));</span>
  var<span class="hl opt">[</span>unique_name_pair<span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">()] =</span> <span class="hl str">'\0'</span><span class="hl opt">;</span>
  <span class="hl opt">::</span><span class="hl kwd">putenv</span><span class="hl opt">(</span>var<span class="hl opt">);</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>EnvironmentVariablesManager<span class="hl opt">::</span><span class="hl kwd">GetOSVariable</span><span class="hl opt">(</span>unique_name<span class="hl opt">.</span><span class="hl kwd">c_str</span><span class="hl opt">())</span>
                                                    <span class="hl opt">==</span> <span class="hl str">&quot;12345678&quot;</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">Test_EnvironmentVariablesManager_PutOSVariable</span><span class="hl opt">() {</span>
  <span class="hl kwb">const</span> std<span class="hl opt">::</span>string unique_name <span class="hl opt">=</span> <span class="hl str">&quot;EnvironmentVariablesManager_PutOSVariable&quot;</span><span class="hl opt">;</span>
  <span class="hl kwb">const char</span><span class="hl opt">*</span> before <span class="hl opt">= ::</span><span class="hl kwd">getenv</span><span class="hl opt">(</span>unique_name<span class="hl opt">.</span><span class="hl kwd">c_str</span><span class="hl opt">());</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>before <span class="hl opt">!=</span> NULL<span class="hl opt">)</span>
    <span class="hl kwa">assert</span><span class="hl opt">(</span>std<span class="hl opt">::</span><span class="hl kwd">string</span><span class="hl opt">(</span>before<span class="hl opt">).</span><span class="hl kwd">empty</span><span class="hl opt">());</span>

  <span class="hl kwb">const</span> std<span class="hl opt">::</span>string unique_name_pair <span class="hl opt">=</span> unique_name <span class="hl opt">+</span> <span class="hl str">&quot;=12345678&quot;</span><span class="hl opt">;</span>
  <span class="hl kwb">char</span> var<span class="hl opt">[</span><span class="hl num">1024</span><span class="hl opt">];</span>
  unique_name_pair<span class="hl opt">.</span><span class="hl kwd">copy</span><span class="hl opt">(</span>var<span class="hl opt">,</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span>var<span class="hl opt">));</span>
  var<span class="hl opt">[</span>unique_name_pair<span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">()] =</span> <span class="hl str">'\0'</span><span class="hl opt">;</span>

  EnvironmentVariablesManager<span class="hl opt">::</span><span class="hl kwd">PutOSVariable</span><span class="hl opt">(</span>var<span class="hl opt">);</span>
  <span class="hl kwb">const char</span><span class="hl opt">*</span> after <span class="hl opt">= ::</span><span class="hl kwd">getenv</span><span class="hl opt">(</span>unique_name<span class="hl opt">.</span><span class="hl kwd">c_str</span><span class="hl opt">());</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>after <span class="hl opt">!=</span> NULL<span class="hl opt">);</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>std<span class="hl opt">::</span><span class="hl kwd">string</span><span class="hl opt">(</span>after<span class="hl opt">) ==</span> <span class="hl str">&quot;12345678&quot;</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">run_tests</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">const char</span><span class="hl opt">*</span> <span class="hl kwb">const</span> argv<span class="hl opt">[]) {</span>
  <span class="hl kwd">Test_EnvironmentVariablesManager_GetOSVariable</span><span class="hl opt">();</span>
  <span class="hl kwd">Test_EnvironmentVariablesManager_PutOSVariable</span><span class="hl opt">();</span>
  <span class="hl kwd">Test_EnvironmentVariablesManager_get_put</span><span class="hl opt">();</span>
  <span class="hl kwd">Test_EnvironmentVariablesManager_put_is_propagated_to_child_process</span><span class="hl opt">();</span>
  <span class="hl kwd">Test_EnvironmentVariablesManager_must_take_a_copy</span><span class="hl opt">();</span>
  <span class="hl kwd">Test_EnvironmentVariablesManager_del</span><span class="hl opt">();</span>
  <span class="hl kwd">Test_EnvironmentVariablesManager_IsOSVariableSet_set_and_unset</span><span class="hl opt">();</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">const char</span><span class="hl opt">*</span> <span class="hl kwb">const</span> argv<span class="hl opt">[]) {</span>
  <span class="hl kwd">run_tests</span><span class="hl opt">(</span>argc<span class="hl opt">,</span> argv<span class="hl opt">);</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;All tests pass.&quot;</span> <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Ничего особо замысловатого, но удобно.</p>

<p>Посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2011/11/16/subtleties-of-using-getenv-and-putenv/">Тонкости использования getenv() и putenv()</a></li>
<li><a href="http://demin.ws/blog/russian/2009/02/01/static-argument-of-putenv/">Статический аргумент функции putenv</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Платежный терминал OMNI-395 изнутри]]></title>
    <link href="http://demin.ws/blog/russian/2013/01/04/omni395/"/>
    <updated>2013-01-04T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2013/01/04/omni395/</id>
    <content type="html"><![CDATA[<p>Мое реальное знакомство с &ldquo;недо&rdquo; PC случилось (случайно) в начале 2000-х, когда
я устроился в отдел процессинга пластиковых карточек одного банка. А конкретнее,
в разработку софта для платежных терминалов, POS-ов. ПОС для приема платежей
пластиковыми карточками - это обычно законченный девайс, мини- или микро-
компьютер, с экраном, клавиатурой, с читалкой магнитной полосы с карты,
часто с принтером, а сейчас еще и ридером для чиповых карт.</p>

<p>Я начал с OMNI-395. Построен на Zilog Z180, имеет до 1М non-volatile памяти
для хранения данных (журналов операций, например), AT-модем на 2400 (даже
с какой-то коррекцией), двенадцативольтовые порты RS232 для PIN-клавиатуры,
принтера и просто порт общего назначения (мы его использовали для
подключения к мультипортовому шлюзу в TCP/IP) (увы, не все порты имеют полный
набор линий RS232, что вынуждает изобретать программные велосипеды), ну и LCD
экран.</p>

<p><img src="http://demin.ws/blog/russian/2013/01/04/omni395/IMG_1621.JPG" alt="" />
</p>

<p>Архитектура, кстати, интересная. Для выполнения пользовательского кода
применялась виртуальная машина (видимо, так обходились ограничения в адресации,
страницы и прочее). Это позволяло использовать для данных много памяти, но вот
размер и скорость кода была весьма скромная. Приходилось, например, не
использовать родной sprintf, а писать свой, чтобы избежать переполнение
локального стека и т.д. Расчет табличного CRC по 5-10КБ данных работал видимые
секунды.</p>

<p><img src="http://demin.ws/blog/russian/2013/01/04/omni395/IMG_1622.JPG" alt="" />
</p>

<p>Хотя, положа руку на сердце, по сравнению с терминалами других фирм
в то время (Injenico, Nurit и т.д.), где часто надо было заниматься ерундой типа
ручного переключения страниц памяти и там хранить журналы, среда VeriFone (TXO)
давала почти стандартную библиотеку C, где с портами и файлами можно было
работать через read/write/ioctl и т.д. А то, что шаловливые умы разработчиков
обычно хотят запихнуть в несчастный девайс слона - и вызывало проблемы.
Когда со временем ограничения были более менее освоены, разработка стала почти
беспроблемной.</p>

<p>Компилятор С поддерживал почти всю стандартную библиотеку и раздельную
компиляцию модулей. Загрузочные же модули (R-модули), можно было динамически
запускать прямо из пользователького кода (типа механизма оверлеев или CHAIN
в классических бейсиках).</p>

<p>И тут дед мороз принес списанный старенький OMNI-395, и радости моей не было
предела. Откупоривать будем? Конечно!</p>

<p>Включаем, на всякий случай, и, о чудо, там еще загружена одна из моих прошивок.</p>

<p><img src="http://demin.ws/blog/russian/2013/01/04/omni395/IMG_1623.JPG" alt="" />
</p>

<p>Итак, вид изнутри.</p>

<p><img src="http://demin.ws/blog/russian/2013/01/04/omni395/IMG_1624.JPG" alt="" />
</p>

<p>Два платы - верхняя, под клавиатурой, и нижняя, с разъемам.</p>

<p><img src="http://demin.ws/blog/russian/2013/01/04/omni395/IMG_1635.JPG" alt="" />
</p>

<p><img src="http://demin.ws/blog/russian/2013/01/04/omni395/IMG_1636.JPG" alt="" />
</p>

<p>Раскопаю компилятор и загрузчик в сусеках, попробую написать что-нибудь.</p>

<p>Увы, описания деталей аппаратной части я не нашел, а официальная документация
описывает только стандартную библиотеку и немного виртуальную машину, в коды
которой компилируется пользовательский код.</p>

<p>Конечно, OMNI-395 можно спокойно использовать в качестве НЕДО-PC как он есть.
Например, как контроллер чего-либо. Если нужны порты общего назначения, то
подходит RS-232 (DTR/RTS &ndash; вывод, CTS/DSR &ndash; ввод).</p>

<p>А идеале можно диассемблировать прошивку (там всего 64КБ), и поняв архитектуру,
уже писать чисто на Z80, и тогда работать будет гораздо быстрее.</p>

<h1>P.S.</h1>

<p>Надо сказать, что, несмотря на смену аппаратной платформы и компилятора
(не один раз), у VefiFone отличная приемственность интерфейса библиотек,
что позволяет портировать прошивки на последующие модели с минимальным
изменениями. После 395-го я еще поработал с OMNI-3350, 3750, VX510, VX610.</p>

<p>Кстати, по тэгу <a href="https://twitter.com/search?q=%23cardpayments&amp;src=hash">#cardpayments</a> в Твиттере я выкладываю фотографии ПОСов,
пинпадов и прочих устройств приема банковских карточек, если кому интересно.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Адаптер Serial VGA]]></title>
    <link href="http://demin.ws/blog/russian/2012/12/26/serial-vga/"/>
    <updated>2012-12-26T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/12/26/serial-vga/</id>
    <content type="html"><![CDATA[<p>Пощупал интересную платку &ndash; <a href="http://www.hobbytronics.co.uk/serial-vga">Serial VGA</a>. Позволяет через RS-232 (TTL)
на VGA экране (800x600) организовать многооконный текстовый вывод.</p>

<p><img src="http://demin.ws/blog/russian/2012/12/26/serial-vga/IMG_1284.jpg" alt="" />
</p>

<p><img src="http://demin.ws/blog/russian/2012/12/26/serial-vga/IMG_1284.jpg" alt="" />
</p>

<p>Максимальный размер одного окна 100x50 символов при 64 цветах, и можно
одновременно создавать до 9 окон. Информация в каждое окно выводится
независимо. Управляющие команды передаются через специальные
<code>^[</code>-последовательности.</p>

<p><img src="http://demin.ws/blog/russian/2012/12/26/serial-vga/serial-vga-5.jpg" alt="" />
</p>

<p>В целом &ndash; очень удобно для проектов на микроконтроллерах, когда лень возиться
с выводом VGA самостоятельно, а вывод в формате RS-232 можно написать на
коленке. Я также подключал это к Raspberry Pi. Единственное, могу сказать, что
на скорости более 9600 лучше поддержать сигнал CTS, иначе символы могут
пропадать, так как девайс не успевает.</p>

<p><a href="http://demin.ws/blog/russian/2012/12/26/serial-vga/SerialVGA-1.0.pdf">Полное описание в формате PDF</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Рабочее место в Блумберге]]></title>
    <link href="http://demin.ws/blog/russian/2012/12/25/my-office-desk-at-bloomberg/"/>
    <updated>2012-12-25T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/12/25/my-office-desk-at-bloomberg/</id>
    <content type="html"><![CDATA[<p>Обнаружил тут в сусеках фотографию своего рабочего места в Блумберге:</p>

<p><img src="http://demin.ws/blog/russian/2012/12/25/my-office-desk-at-bloomberg/office-desk-at-bloomberg.jpg" alt="" />
</p>

<p><em>Там хоть и исходники на экране, но разглядеть что-либо конкретное будет
трудно</em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Моя коллекция микропроцессоров Intel 8080]]></title>
    <link href="http://demin.ws/blog/russian/2012/12/24/my-i8080-collection/"/>
    <updated>2012-12-24T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/12/24/my-i8080-collection/</id>
    <content type="html"><![CDATA[<p>Я начал программировать лет двадцать назад, и пришлось мне это делать
прямо в машинных кодах Intel 8080. Этот эпохальный микропроцессор
стал для билетом в мир создания программного обеспечения. Годы спустя,
работая над эмуляторами i8080 и разбираясь с недокументированными или
плохо документированными его особенностями, возникла идея собрать несколько
экземпляров реальных i8080, желательно, от разных производителей, а не
только Intel, и протестировать их в программе <a href="http://www.idb.me.uk/sunhillow/8080.html">8080 CPU Exerciser</a>.</p>

<p>На данный момент я собрал 20 чипов (Intel, AMD, National Semiconductor, NEC,
Samsung, Texas Instruments, и также в произведенных Советском Союзе и
Чехословакии). Среди тех, что имеют даты выпуска на корпусе, самый старый
1974 года, а самый новый - 1980. Все чипы, за исключением одного, прекрасно
работают. Тестировал я их в <a href="http://demin.ws/blog/russian/2012/10/07/rk86-sram/">Радио-86РК</a>.</p>

<p>Проверка показала, что все чипы, кроме произведенных AMD, совершенно одинаковы
по показаниям <a href="http://www.idb.me.uk/sunhillow/8080.html">8080 CPU Exerciser</a>. Кристаллы же AMD, AM8080 and AM9080A,
имеют одно небольшое отличие в команде битовой операции AND (инструкции ANA и
ANI). Следуя оригинальному поведению процессоров i8080 от Intel, флаг
дополнительного переноса AC должен вычисляться как третий (A3) бит результата
операции OR между аккумулятором и аргументом команд ANA или ANI. Процессоры же
AMD просто обнуляют флаг AC в инструкциях ANA и ANI. Сложно представить,
почему Intel придумал столь странную логику для флага AC в операциях AND (в
других битовых операциях флаг AC просто обнуляется аналогично логике от AMD).</p>

<h1>Итак, моя коллекция</h1>

<p><em>Двойным кликом можно переключать верх и низ чипов.</em></p>

<h2>AMD</h2>

<p>Интересно, что изначально AMD начала производить клоны i8080, используя,
дословно, украденные у Intel чертежи. Так что война Intel vs AMD началась
именно тогда.</p>

<h3>8080A, 1977</h3>

<p><img src="http://demin.ws/blog/russian/2012/12/24/my-i8080-collection/AM8080A-8507DMA-1977-AMD-PHILIPPINES-top.jpg" alt="" />
</p>

<h3>AM9080, 1977</h3>

<p><img src="http://demin.ws/blog/russian/2012/12/24/my-i8080-collection/AM9080ACC-D8080A-8015HP-1977-AMD-top.jpg" alt="" />
</p>

<p><img src="http://demin.ws/blog/russian/2012/12/24/my-i8080-collection/AM9080ADCB-D8080AB-8102WP-1977-AMD-top.jpg" alt="" />
</p>

<p><img src="http://demin.ws/blog/russian/2012/12/24/my-i8080-collection/AM9080APC-P8080A-790EP-1977-AMD-top.jpg" alt="" />
</p>

<h2>National Semiconductor</h2>

<h3>INS8080AN</h3>

<p><img src="http://demin.ws/blog/russian/2012/12/24/my-i8080-collection/INS8080AN-P8080A-1927-P4798-CB-FAULTY-top.jpg" alt="" />
</p>

<p><em>Этот чип, увы, не работает.</em></p>

<h3>INS8080AN</h3>

<p><img src="http://demin.ws/blog/russian/2012/12/24/my-i8080-collection/INS8080AN-P8080A-B8436-4798D-3062-top.jpg" alt="" />
</p>

<p><img src="http://demin.ws/blog/russian/2012/12/24/my-i8080-collection/INS8080AN-P8080A-B8436A-4798D-3133-top.jpg" alt="" />
</p>

<h2>Intel</h2>

<h3>1974</h3>

<p><img src="http://demin.ws/blog/russian/2012/12/24/my-i8080-collection/INTEL-P8080A-S2701-3626D-INTEL-74-MALAYSIA-7943-top.jpg" alt="" />
</p>

<h3>1977</h3>

<p><img src="http://demin.ws/blog/russian/2012/12/24/my-i8080-collection/INTEL-P8080A-2-L1307000-1977-8134-PHILIPPINES-top.jpg" alt="" />
</p>

<h3>1979</h3>

<p><img src="http://demin.ws/blog/russian/2012/12/24/my-i8080-collection/INTEL-P8080A-1-U3120121-INTEL-79-8311DT-PHILIPPINES-top.jpg" alt="" />
</p>

<h3>1980</h3>

<p><img src="http://demin.ws/blog/russian/2012/12/24/my-i8080-collection/INTEL-P8080A-L4480180E-INTEL-1980-top.jpg" alt="" />
</p>

<h2>Россия</h2>

<h3>КР580ИК80A</h3>

<p><img src="http://demin.ws/blog/russian/2012/12/24/my-i8080-collection/KR580IK80A-8608-top.jpg" alt="" />
</p>

<h3>КР580ВМ80A</h3>

<p>Родной вкладыш, с которым продавался ВМ80:
<a href="http://demin.ws/blog/russian/2012/12/24/my-i8080-collection/KR580VM80A-passport-1.jpg">страница 1</a> и <a href="http://demin.ws/blog/russian/2012/12/24/my-i8080-collection/KR580VM80A-passport-2.jpg">страница 2</a>.</p>

<p><img src="http://demin.ws/blog/russian/2012/12/24/my-i8080-collection/KR580VM80-8941-top.jpg" alt="" />
</p>

<p><img src="http://demin.ws/blog/russian/2012/12/24/my-i8080-collection/KR580VM80A-911-615-top.jpg" alt="" />
</p>

<p><img src="http://demin.ws/blog/russian/2012/12/24/my-i8080-collection/KR580VM80A-9102-top.jpg" alt="" />
</p>

<h2>NEC</h2>

<p><img src="http://demin.ws/blog/russian/2012/12/24/my-i8080-collection/NEC-JAPAN-D8080AFC-1-X05020-020-top.jpg" alt="" />
</p>

<p><img src="http://demin.ws/blog/russian/2012/12/24/my-i8080-collection/NEC-JAPAN-D8080AFC-P77236-top.jpg" alt="" />
</p>

<h2>Samsung</h2>

<p><img src="http://demin.ws/blog/russian/2012/12/24/my-i8080-collection/SAB-8080-A-P-8036-top.jpg" alt="" />
</p>

<h2>Telsa (Чехословакия)</h2>

<p><img src="http://demin.ws/blog/russian/2012/12/24/my-i8080-collection/TESLAU4M-MHB8080A-top.jpg" alt="" />
</p>

<h2>Texas Instruments</h2>

<p><img src="http://demin.ws/blog/russian/2012/12/24/my-i8080-collection/TMS8080ANL-BP7718-H8080A-SINGAPORE-top.jpg" alt="" />
</p>

<hr />

<p>ВСЕ! (пока).</p>

<p>А вот как я все это фотографировал при помощи айфона и двух Raspberry Pi&rsquo;ев.</p>

<p><img src="http://demin.ws/blog/russian/2012/12/24/my-i8080-collection/taking-pictures-using-iphone-and-rpi.jpg" alt="" />
</p>

<script>
var images = document.getElementsByTagName("img");
for (var i = 0; i < images.length; ++i) {
  var img = images[i];
  img.ondblclick = function() {
    var url = this.src;
    if (url.indexOf("-top") != -1)
      this.src = url.replace("-top", "-bottom");
    else
      this.src = url.replace("-bottom", "-top");
  }
}
</script>

<h2>P.S.</h2>

<p>Хочу надеяться, что коллекция будет расти. Увы, пока я у меня только один
чип в белой керамике. И если вы знаете о существовании еще каких-то клонов
i8080 от еще каких-то фирм, буду признателен за информацию.</p>

<p>Также с удовольствием приму в подарок любой i8080 (даже не обязательно
рабочий) и могу поставить ссылку на подарившего.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Консольная игра "Змейка"]]></title>
    <link href="http://demin.ws/blog/russian/2012/12/10/snake-game/"/>
    <updated>2012-12-10T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/12/10/snake-game/</id>
    <content type="html"><![CDATA[<p>Автор - не я, изначально взято с <a href="http://itblogs.org/c-konsolnaya-zmejka/">itblogs</a>. Я немного причесал код,
убрал переключения цвета фона и добавил код для Linux/OSX.</p>

<p>В игре, ясное дело, ничего особенного, просто понравилась она мне. К тому же
попробовал <a href="http://ascii.io/">ascii.io</a> для записи asciicast&rsquo;a, так что геймплей можно
заценить - <a href="http://ascii.io/a/1715">http://ascii.io/a/1715</a></p>

<p><a href="https://github.com/begoon/stuff/tree/master/games/snake/c++">Исходник</a> есть на GitHub&rsquo;е, но можно просто скопировать снизу.</p>

<pre class="hl">
<span class="hl slc">// Originally taken from http://itblogs.org/c-konsolnaya-zmejka/.</span>

<span class="hl ppc">#include &lt;iostream&gt;</span>
<span class="hl ppc">#include &lt;cstdio&gt;</span>
<span class="hl ppc">#include &lt;cstdlib&gt;</span>
<span class="hl ppc">#include &lt;ctime&gt;</span>
<span class="hl ppc">#ifdef WINDOWS</span>
<span class="hl slc">// Библиотека, нужна для использования функции Sleep().</span>
<span class="hl ppc">#include &lt;windows.h&gt;</span>
<span class="hl slc">// Библиотека, нужна для использования функций kbhit() и getch().</span>
<span class="hl ppc">#include &lt;conio.h&gt;</span>
<span class="hl ppc">#else</span>
<span class="hl ppc">#include &lt;unistd.h&gt;</span>
<span class="hl ppc">#include &lt;termios.h&gt;</span>
<span class="hl ppc">#include &lt;sys/select.h&gt;</span>

<span class="hl ppc">#define STDIN_FILENO 0</span>
<span class="hl ppc">#define NB_DISABLE 0</span>
<span class="hl ppc">#define NB_ENABLE 1</span>

<span class="hl ppc">#define Sleep(x) usleep(x*1000)</span>

<span class="hl kwb">int</span> <span class="hl kwd">kbhit</span><span class="hl opt">() {</span>
  <span class="hl kwb">struct</span> timeval tv<span class="hl opt">;</span>
  fd_set fds<span class="hl opt">;</span>
  tv<span class="hl opt">.</span>tv_sec <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
  tv<span class="hl opt">.</span>tv_usec <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
  <span class="hl kwd">FD_ZERO</span><span class="hl opt">(&amp;</span>fds<span class="hl opt">);</span>
  <span class="hl kwd">FD_SET</span><span class="hl opt">(</span>STDIN_FILENO<span class="hl opt">, &amp;</span>fds<span class="hl opt">);</span>
  <span class="hl kwd">select</span><span class="hl opt">(</span>STDIN_FILENO<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">, &amp;</span>fds<span class="hl opt">,</span> NULL<span class="hl opt">,</span> NULL<span class="hl opt">, &amp;</span>tv<span class="hl opt">);</span>
  <span class="hl kwa">return</span> <span class="hl kwd">FD_ISSET</span><span class="hl opt">(</span>STDIN_FILENO<span class="hl opt">, &amp;</span>fds<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">nonblock</span><span class="hl opt">(</span><span class="hl kwb">int</span> state<span class="hl opt">) {</span>
  <span class="hl kwb">struct</span> termios ttystate<span class="hl opt">;</span>

  <span class="hl slc">// Get the terminal state.</span>
  <span class="hl kwd">tcgetattr</span><span class="hl opt">(</span>STDIN_FILENO<span class="hl opt">, &amp;</span>ttystate<span class="hl opt">);</span>

  <span class="hl kwa">if</span> <span class="hl opt">(</span>state <span class="hl opt">==</span> NB_ENABLE<span class="hl opt">) {</span>
    <span class="hl slc">// Turn off canonical mode.</span>
    ttystate<span class="hl opt">.</span>c_lflag <span class="hl opt">&amp;= ~</span>ICANON<span class="hl opt">;</span>
    <span class="hl slc">// Minimum of number input read.</span>
    ttystate<span class="hl opt">.</span>c_cc<span class="hl opt">[</span>VMIN<span class="hl opt">] =</span> <span class="hl num">1</span><span class="hl opt">;</span>
  <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>state <span class="hl opt">==</span> NB_DISABLE<span class="hl opt">) {</span>
    <span class="hl slc">// Turn on canonical mode.</span>
    ttystate<span class="hl opt">.</span>c_lflag <span class="hl opt">|=</span> ICANON<span class="hl opt">;</span>
  <span class="hl opt">}</span>
  <span class="hl slc">// Set the terminal attributes.</span>
  <span class="hl kwd">tcsetattr</span><span class="hl opt">(</span>STDIN_FILENO<span class="hl opt">,</span> TCSANOW<span class="hl opt">, &amp;</span>ttystate<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">getch</span><span class="hl opt">() {</span>
  <span class="hl kwa">return</span> <span class="hl kwd">fgetc</span><span class="hl opt">(</span>stdin<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl ppc">#endif</span>

<span class="hl slc">// snake_size - размер змейки.</span>
<span class="hl slc">// change_x, change_y - в какую сторону движется змейка.</span>
<span class="hl slc">// coordinates_x[1000], coordinates_y[1000] - массивы, хранящие координаты</span>
<span class="hl slc">//                                            частей тела змейки.</span>
<span class="hl slc">// Kоординаты головы змейки хранятся в coordinates_x[1], coordinates_y[1].</span>
<span class="hl slc">// food_x, food_y - координаты еды.</span>

<span class="hl kwb">int</span> snake_size<span class="hl opt">,</span> change_x<span class="hl opt">,</span> change_y<span class="hl opt">,</span> coordinates_x<span class="hl opt">[</span><span class="hl num">1000</span><span class="hl opt">],</span> coordinates_y<span class="hl opt">[</span><span class="hl num">1000</span><span class="hl opt">];</span>
<span class="hl kwb">int</span> food_x <span class="hl opt">= -</span><span class="hl num">1</span><span class="hl opt">,</span> food_y <span class="hl opt">= -</span><span class="hl num">1</span><span class="hl opt">;</span>

<span class="hl slc">// symbol - хранит в себе ASCII код нажатой клавиши.</span>
<span class="hl slc">// a[1000][1000] - наша таблица, в которой происходит вся игра.</span>
<span class="hl kwb">char</span> symbol<span class="hl opt">,</span> a<span class="hl opt">[</span><span class="hl num">1000</span><span class="hl opt">][</span><span class="hl num">1000</span><span class="hl opt">];</span>

<span class="hl slc">// Константы:</span>
<span class="hl slc">// N - размер таблицы, а именно высота.</span>
<span class="hl slc">// M - ширина таблицы.</span>
<span class="hl slc">// INTERVAL - интервал в миллисекундах, через каждый этот промежуток</span>
<span class="hl slc">//            времени змейка будет передвигаться.</span>
<span class="hl kwb">const int</span> N <span class="hl opt">=</span> <span class="hl num">13</span><span class="hl opt">,</span> M <span class="hl opt">=</span> <span class="hl num">17</span><span class="hl opt">,</span> INTERVAL <span class="hl opt">=</span> <span class="hl num">200</span><span class="hl opt">;</span>

<span class="hl slc">// функция, считывающая нажатую клавишу.</span>
<span class="hl kwb">void</span> <span class="hl kwd">change_direction</span><span class="hl opt">() {</span>
  <span class="hl slc">// Cчитываем нажатую клавишу с помощью функции getch().</span>
  symbol <span class="hl opt">=</span> <span class="hl kwd">getch</span><span class="hl opt">();</span>
  <span class="hl kwa">switch</span> <span class="hl opt">(</span>symbol<span class="hl opt">) {</span>
    <span class="hl slc">// Управление змейкой у нас через wasd.</span>
    <span class="hl kwa">case</span> <span class="hl str">'w'</span><span class="hl opt">:</span> <span class="hl kwa">if</span> <span class="hl opt">(</span>change_x <span class="hl opt">!=</span> <span class="hl num">1</span> <span class="hl opt">||</span> change_y <span class="hl opt">!=</span> <span class="hl num">0</span><span class="hl opt">) {</span>
                change_x <span class="hl opt">= -</span><span class="hl num">1</span><span class="hl opt">;</span> change_y <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
              <span class="hl opt">}</span>
              <span class="hl kwa">break</span><span class="hl opt">;</span>
    <span class="hl kwa">case</span> <span class="hl str">'a'</span><span class="hl opt">:</span> <span class="hl kwa">if</span> <span class="hl opt">(</span>change_x <span class="hl opt">!=</span> <span class="hl num">0</span> <span class="hl opt">||</span> change_y <span class="hl opt">!=</span> <span class="hl num">1</span><span class="hl opt">) {</span>
                change_x <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> change_y <span class="hl opt">= -</span><span class="hl num">1</span><span class="hl opt">;</span>
              <span class="hl opt">}</span>
              <span class="hl kwa">break</span><span class="hl opt">;</span>
    <span class="hl kwa">case</span> <span class="hl str">'s'</span><span class="hl opt">:</span> <span class="hl kwa">if</span> <span class="hl opt">(</span>change_x <span class="hl opt">!= -</span><span class="hl num">1</span> <span class="hl opt">||</span> change_y <span class="hl opt">!=</span> <span class="hl num">0</span><span class="hl opt">) {</span>
                change_x <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span> change_y <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
              <span class="hl opt">}</span>
              <span class="hl kwa">break</span><span class="hl opt">;</span>
    <span class="hl kwa">case</span> <span class="hl str">'d'</span><span class="hl opt">:</span> <span class="hl kwa">if</span> <span class="hl opt">(</span>change_x <span class="hl opt">!=</span> <span class="hl num">0</span> <span class="hl opt">||</span> change_y <span class="hl opt">!= -</span><span class="hl num">1</span><span class="hl opt">) {</span>
                change_x <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> change_y <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
              <span class="hl opt">}</span>
              <span class="hl kwa">break</span><span class="hl opt">;</span>
<span class="hl ppc">#ifndef WINDOWS</span>
    <span class="hl kwa">case</span> <span class="hl str">'q'</span><span class="hl opt">:</span> <span class="hl kwd">nonblock</span><span class="hl opt">(</span>NB_DISABLE<span class="hl opt">);</span> std<span class="hl opt">::</span><span class="hl kwd">exit</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">);</span>
<span class="hl ppc">#endif</span>
    <span class="hl kwa">default</span><span class="hl opt">:</span> <span class="hl kwa">break</span><span class="hl opt">;</span>
  <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl slc">// функция для вывода таблицы</span>
<span class="hl kwb">void</span> <span class="hl kwd">show_table</span><span class="hl opt">() {</span>
  <span class="hl slc">// Очищаем консоль.</span>
<span class="hl ppc">#ifdef WINDOWS</span>
  <span class="hl kwd">system</span><span class="hl opt">(</span><span class="hl str">&quot;cls&quot;</span><span class="hl opt">);</span>
<span class="hl ppc">#else</span>
  <span class="hl kwd">system</span><span class="hl opt">(</span><span class="hl str">&quot;clear&quot;</span><span class="hl opt">);</span>
<span class="hl ppc">#endif</span>

  <span class="hl slc">// Выводим таблицу и края.</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;=</span> N <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">; ++</span>i<span class="hl opt">)</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> j <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> j <span class="hl opt">&lt;=</span> M <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">; ++</span>j<span class="hl opt">)</span>
      std<span class="hl opt">::</span>cout
        <span class="hl opt">&lt;&lt; (</span>i <span class="hl opt">==</span> <span class="hl num">0</span> <span class="hl opt">||</span> j <span class="hl opt">==</span> <span class="hl num">0</span> <span class="hl opt">||</span> i <span class="hl opt">==</span> N <span class="hl opt">+</span> <span class="hl num">1</span> <span class="hl opt">||</span> j <span class="hl opt">==</span> M <span class="hl opt">+</span> <span class="hl num">1</span> ?
           <span class="hl str">'#'</span> <span class="hl opt">:</span> a<span class="hl opt">[</span>i<span class="hl opt">][</span>j<span class="hl opt">])</span>
        <span class="hl opt">&lt;&lt; (</span>j <span class="hl opt">&lt;=</span> M ? <span class="hl str">&quot;&quot;</span> <span class="hl opt">:</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl slc">// Очищаем координаты, в которых располагалась змейка.</span>
<span class="hl kwb">void</span> <span class="hl kwd">clear_snake_on_table</span><span class="hl opt">() {</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span> i <span class="hl opt">&lt;=</span> snake_size<span class="hl opt">; ++</span>i<span class="hl opt">)</span>
    a<span class="hl opt">[</span>coordinates_x<span class="hl opt">[</span>i<span class="hl opt">]][</span>coordinates_y<span class="hl opt">[</span>i<span class="hl opt">]] =</span> <span class="hl str">' '</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl slc">// Красим координаты змейки.</span>
<span class="hl kwb">void</span> <span class="hl kwd">show_snake_on_table</span><span class="hl opt">() {</span>
  <span class="hl slc">// Изменяем тип головы.</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>change_x <span class="hl opt">==</span> <span class="hl num">1</span> <span class="hl opt">&amp;&amp;</span> change_y <span class="hl opt">==</span> <span class="hl num">0</span><span class="hl opt">)</span>
    a<span class="hl opt">[</span>coordinates_x<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]][</span>coordinates_y<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]] =</span> <span class="hl str">'v'</span><span class="hl opt">;</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>change_x <span class="hl opt">== -</span><span class="hl num">1</span> <span class="hl opt">&amp;&amp;</span> change_y <span class="hl opt">==</span> <span class="hl num">0</span><span class="hl opt">)</span>
    a<span class="hl opt">[</span>coordinates_x<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]][</span>coordinates_y<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]] =</span> <span class="hl str">'^'</span><span class="hl opt">;</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>change_x <span class="hl opt">==</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> change_y <span class="hl opt">==</span> <span class="hl num">1</span><span class="hl opt">)</span>
    a<span class="hl opt">[</span>coordinates_x<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]][</span>coordinates_y<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]] =</span> <span class="hl str">'&gt;'</span><span class="hl opt">;</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>change_x <span class="hl opt">==</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> change_y <span class="hl opt">== -</span><span class="hl num">1</span><span class="hl opt">)</span>
    a<span class="hl opt">[</span>coordinates_x<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]][</span>coordinates_y<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]] =</span> <span class="hl str">'&lt;'</span><span class="hl opt">;</span>

  <span class="hl slc">// Красим змейку.</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">2</span><span class="hl opt">;</span> i <span class="hl opt">&lt;=</span> snake_size<span class="hl opt">; ++</span>i<span class="hl opt">)</span>
    a<span class="hl opt">[</span>coordinates_x<span class="hl opt">[</span>i<span class="hl opt">]][</span>coordinates_y<span class="hl opt">[</span>i<span class="hl opt">]] =</span> <span class="hl str">'&#64;'</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl slc">// Проверяем, съела ли змейка саму себя.</span>
<span class="hl kwb">bool</span> <span class="hl kwd">game_over</span><span class="hl opt">() {</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">2</span><span class="hl opt">;</span> i <span class="hl opt">&lt;=</span> snake_size<span class="hl opt">; ++</span>i<span class="hl opt">)</span>
    <span class="hl slc">// Eсли координаты головы змейки равны координате какой-либо части тела</span>
    <span class="hl slc">// змейки, то змейка съела саму себя.</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>coordinates_x<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] ==</span> coordinates_x<span class="hl opt">[</span>i<span class="hl opt">] &amp;&amp;</span>
        coordinates_y<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] ==</span> coordinates_y<span class="hl opt">[</span>i<span class="hl opt">])</span>
      <span class="hl kwa">return true</span><span class="hl opt">;</span>
  <span class="hl slc">// Если все координаты различны, то все в порядке - играем дальше.</span>
  <span class="hl kwa">return false</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl slc">// Проверяем, не вышла ли змейка за поле, если да то возвращаем ее обратно.</span>
<span class="hl kwb">void</span> <span class="hl kwd">check_coordinates</span><span class="hl opt">() {</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>coordinates_x<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] &gt;</span> N<span class="hl opt">)</span> coordinates_x<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] =</span> <span class="hl num">1</span><span class="hl opt">;</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>coordinates_x<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] &lt;</span> <span class="hl num">1</span><span class="hl opt">)</span> coordinates_x<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] =</span> N<span class="hl opt">;</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>coordinates_y<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] &gt;</span> M<span class="hl opt">)</span> coordinates_y<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] =</span> <span class="hl num">1</span><span class="hl opt">;</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>coordinates_y<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] &lt;</span> <span class="hl num">1</span><span class="hl opt">)</span> coordinates_y<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] =</span> M<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl slc">// функция следующего хода, в которой наша змейка сдвигается в сторону</span>
<span class="hl slc">// на 1 ячейку.</span>
<span class="hl kwb">void</span> <span class="hl kwd">next_step</span><span class="hl opt">() {</span>
  <span class="hl slc">// Чистим таблицу от змейки.</span>
  <span class="hl kwd">clear_snake_on_table</span><span class="hl opt">();</span>

  <span class="hl slc">// Передвигаем тело змейки.</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> snake_size<span class="hl opt">;</span> i <span class="hl opt">&gt;=</span> <span class="hl num">2</span><span class="hl opt">; --</span>i<span class="hl opt">) {</span>
    coordinates_x<span class="hl opt">[</span>i<span class="hl opt">] =</span> coordinates_x<span class="hl opt">[</span>i <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">];</span>
    coordinates_y<span class="hl opt">[</span>i<span class="hl opt">] =</span> coordinates_y<span class="hl opt">[</span>i <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">];</span>
  <span class="hl opt">}</span>

  <span class="hl slc">// Передвигаем голову змейки.</span>
  coordinates_x<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] +=</span> change_x<span class="hl opt">;</span>
  coordinates_y<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] +=</span> change_y<span class="hl opt">;</span>

  <span class="hl slc">// Проверяем в порядке ли координаты.</span>
  <span class="hl kwd">check_coordinates</span><span class="hl opt">();</span>

  <span class="hl slc">// Если голова змейки там же где и еда, то увеличиваем размер змейки</span>
  <span class="hl slc">// и очищаем координаты змейки.</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>coordinates_x<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] ==</span> food_x <span class="hl opt">&amp;&amp;</span> coordinates_y<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] ==</span> food_y<span class="hl opt">) {</span>
    snake_size<span class="hl opt">++;</span>
    food_x <span class="hl opt">= -</span><span class="hl num">1</span><span class="hl opt">;</span>
    food_y <span class="hl opt">= -</span><span class="hl num">1</span><span class="hl opt">;</span>
  <span class="hl opt">}</span>

  <span class="hl slc">// Рисуем змейку.</span>
  <span class="hl kwd">show_snake_on_table</span><span class="hl opt">();</span>

  <span class="hl slc">// Если змея укусила себя.</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">game_over</span><span class="hl opt">()) {</span>
    <span class="hl slc">// Cообщаем всю правду о игроке.</span>
    std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;You're looser!</span> <span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">;</span>
    <span class="hl slc">// Приостанавливаем игру.</span>
<span class="hl ppc">#ifdef WINDOWS</span>
    <span class="hl kwd">system</span><span class="hl opt">(</span><span class="hl str">&quot;pause&quot;</span><span class="hl opt">);</span>
<span class="hl ppc">#endif</span>
    <span class="hl slc">// Завершаем программу.</span>
    std<span class="hl opt">::</span><span class="hl kwd">exit</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">);</span>
  <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl slc">// функция проверки на наличие еды на карте.</span>
<span class="hl kwb">bool</span> <span class="hl kwd">food_check</span><span class="hl opt">() {</span>
  <span class="hl slc">// Если координаты еды неопределенны, то возвращаем true.</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>food_x <span class="hl opt">== -</span><span class="hl num">1</span> <span class="hl opt">&amp;&amp;</span> food_y <span class="hl opt">== -</span><span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">return false</span><span class="hl opt">;</span>
  <span class="hl slc">// В остальных случаях false.</span>
  <span class="hl kwa">return true</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl slc">// функция добавления еды на карту.</span>
<span class="hl kwb">void</span> <span class="hl kwd">place_food</span><span class="hl opt">() {</span>
  std<span class="hl opt">::</span><span class="hl kwd">srand</span><span class="hl opt">(</span>std<span class="hl opt">::</span><span class="hl kwd">time</span><span class="hl opt">(</span>NULL<span class="hl opt">));</span>
  <span class="hl slc">// Cтавим в рандомное место еду.</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span> i <span class="hl opt">&lt;=</span> <span class="hl num">9</span><span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
    <span class="hl kwb">int</span> x <span class="hl opt">=</span> std<span class="hl opt">::</span><span class="hl kwd">rand</span><span class="hl opt">(),</span> y <span class="hl opt">=</span> std<span class="hl opt">::</span><span class="hl kwd">rand</span><span class="hl opt">();</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>x <span class="hl opt">&lt;</span> <span class="hl num">0</span><span class="hl opt">)</span> x <span class="hl opt">*= -</span><span class="hl num">1</span><span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>y <span class="hl opt">&lt;</span> <span class="hl num">0</span><span class="hl opt">)</span> y <span class="hl opt">*= -</span><span class="hl num">1</span><span class="hl opt">;</span>
    x <span class="hl opt">%= (</span>N <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">);</span>
    y <span class="hl opt">%= (</span>M <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">);</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>x <span class="hl opt">==</span> <span class="hl num">0</span><span class="hl opt">) ++</span>x<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>y <span class="hl opt">==</span> <span class="hl num">0</span><span class="hl opt">) ++</span>y<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>a<span class="hl opt">[</span>x<span class="hl opt">][</span>y<span class="hl opt">] !=</span> <span class="hl str">'&#64;'</span> <span class="hl opt">&amp;&amp;</span> a<span class="hl opt">[</span>x<span class="hl opt">][</span>y<span class="hl opt">] !=</span> <span class="hl str">'v'</span> <span class="hl opt">&amp;&amp;</span> a<span class="hl opt">[</span>x<span class="hl opt">][</span>y<span class="hl opt">] !=</span> <span class="hl str">'^'</span> <span class="hl opt">&amp;&amp;</span>
        a<span class="hl opt">[</span>x<span class="hl opt">][</span>y<span class="hl opt">] !=</span> <span class="hl str">'&lt;'</span> <span class="hl opt">&amp;&amp;</span> a<span class="hl opt">[</span>x<span class="hl opt">][</span>y<span class="hl opt">] !=</span> <span class="hl str">'&gt;'</span><span class="hl opt">) {</span>
      food_x <span class="hl opt">=</span> x<span class="hl opt">;</span>
      food_y <span class="hl opt">=</span> y<span class="hl opt">;</span>
      a<span class="hl opt">[</span>x<span class="hl opt">][</span>y<span class="hl opt">] =</span> <span class="hl str">'+'</span><span class="hl opt">;</span>
      <span class="hl kwa">return</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
  <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl slc">// Начальные установки.</span>
<span class="hl kwb">void</span> <span class="hl kwd">standart_settings</span><span class="hl opt">() {</span>
  <span class="hl slc">// Размер змеи - 2.</span>
  snake_size <span class="hl opt">=</span> <span class="hl num">2</span><span class="hl opt">;</span>

  <span class="hl slc">// Змейка занимает две клетки вправо от координаты {1,1}.</span>
  coordinates_x<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] =</span> <span class="hl num">1</span><span class="hl opt">;</span>
  coordinates_y<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] =</span> <span class="hl num">2</span><span class="hl opt">;</span>
  coordinates_x<span class="hl opt">[</span><span class="hl num">2</span><span class="hl opt">] =</span> <span class="hl num">1</span><span class="hl opt">;</span>
  coordinates_y<span class="hl opt">[</span><span class="hl num">2</span><span class="hl opt">] =</span> <span class="hl num">1</span><span class="hl opt">;</span>

  <span class="hl slc">// Змейка движется вправо.</span>
  change_x <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
  change_y <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
  <span class="hl slc">// Задаем стандартные настройки.</span>
  <span class="hl kwd">standart_settings</span><span class="hl opt">();</span>

<span class="hl ppc">#ifndef WINDOWS</span>
  std<span class="hl opt">::</span><span class="hl kwd">memset</span><span class="hl opt">(</span>a<span class="hl opt">,</span> <span class="hl str">' '</span><span class="hl opt">,</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span>a<span class="hl opt">));</span>
  <span class="hl kwd">nonblock</span><span class="hl opt">(</span>NB_ENABLE<span class="hl opt">);</span>
<span class="hl ppc">#endif</span>

  <span class="hl slc">// Бесконечный цикл.</span>
  <span class="hl kwa">while</span> <span class="hl opt">(</span><span class="hl kwa">true</span><span class="hl opt">) {</span>
    <span class="hl slc">// Если нажата клавиша, обрабатываем нажатую клавишу.</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">kbhit</span><span class="hl opt">() !=</span> <span class="hl num">0</span><span class="hl opt">)</span>
     <span class="hl kwd">change_direction</span><span class="hl opt">();</span>

    <span class="hl slc">// Двигаем змейку.</span>
    <span class="hl kwd">next_step</span><span class="hl opt">();</span>

    <span class="hl slc">// Если нет еды, то ставим ее.</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!</span><span class="hl kwd">food_check</span><span class="hl opt">())</span>
      <span class="hl kwd">place_food</span><span class="hl opt">();</span>

    <span class="hl slc">// Рисуем змейку.</span>
    <span class="hl kwd">show_table</span><span class="hl opt">();</span>

    <span class="hl slc">// &quot;Усыпляем&quot; программу на заданный интервал.</span>
    <span class="hl kwd">Sleep</span><span class="hl opt">(</span>INTERVAL<span class="hl opt">);</span>
  <span class="hl opt">}</span>
<span class="hl opt">}</span>
</pre>

<h2>P.S.</h2>

<p>Если у кого есть всякие консольные примочки типа этой - делитесь, не
стесняйтесь.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Цветной микрокомпьютер Maximite]]></title>
    <link href="http://demin.ws/blog/russian/2012/12/04/colour-maximite/"/>
    <updated>2012-12-04T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/12/04/colour-maximite/</id>
    <content type="html"><![CDATA[<p>На сегодняшний момент проект <a href="http://geoffg.net/maximite.html">Maximite</a> является моим любимым в области
рукодельных микрокомпьютеров.
<a href="http://demin.ws/blog/russian/2012/01/19/maximite-kit/">Собрав его оригинальный черно-белый вариант</a>,
я после <a href="http://demin.ws/blog/russian/2012/05/11/retrobsd-on-maximite/">запустил на нем RetroBSD</a>, затем даже свой
эмулятор <a href="http://demin.ws/blog/russian/2012/08/23/radio86-on-maximite/">Радио-86РК</a>. Что подкупает в
проекте, так это законченность. Конструктивно Maximite простой, PIC32 делает
почти всю работу. Но Maximite - это не просто идея в виде схемы. Для Maximite
разработана плата, корпус и, собственно, прошивка - MMBasic,
продвинутый диалект Бейсика, дающий доступ ко всей периферии, а она
у Maximite внушительна. В <a href="http://demin.ws/blog/russian/2012/08/07/interview-with-geoff-graham/">небольшом интервью</a>
автор и разработчик Maximite, Джеф Грэхем, рассказал, почему ему
фактически пришлось довести проект для столь законченного вида.</p>

<p>Недавно автор выпустил новую, цветную версию, и данный обзор посвящен
именно ей. Итак, возможности цветного Maximite (новые и улучшенные
возможности отмечены звездочкой):</p>

<ul>
<li>PS/2 клавиатура</li>
<li>VGA видео-сигнал (480x432 или 240x216), восемь цветов (*)</li>
<li>черно-белый композитный видео-сигнал</li>
<li>генерация стерео-звука (*)</li>
<li>часы реального времени с независимой батарейкой (*)</li>
<li>20 независимых пинов ввода-вывода</li>
<li>разъем для подключения к Arduino (*)</li>
<li>SD-карта (до 32ГБ)</li>
<li>USB соединение для передачи файлов или терминала</li>
<li>интерфейсы RS232, I2C, SPI, 1-wire</li>
<li>двухканальный ШИМ (*)</li>
<li>возможность обновления прошивки по USB</li>
<li>возможность питания от USB</li>
<li>встроенная в Бейсик система шрифтов</li>
<li>команды работы со спрайтами в Бейсике для программирования игр (*)</li>
</ul>

<p>Встроенный Бейсик позволяет максимально полно использовать все эти
возможности. Можно даже создавать обработчики прерываний таймера в виде
подпрограмм.</p>

<p>Я, конечно, приобрел конструктор цветного Maximite, как и в прошлый раз у
<a href="http://www.altronics.com.au/index.asp?area=item&amp;id=K9555">Altronics</a>.</p>

<p><img src="http://demin.ws/blog/russian/2012/12/04/colour-maximite/IMG_1221.JPG" alt="" />
</p>

<p><img src="http://demin.ws/blog/russian/2012/12/04/colour-maximite/IMG_1223.JPG" alt="" />
</p>

<p>Все элементы с ножками, чтобы, видимо, дилетантам в пайке, типа меня,
было проще. Только один конденсатор (C10) там планарный и довольно маленький.
Хоть под него пятачки были уже с оловом, пришлось поерзать с пайкой, чтобы
не закоротить.</p>

<p><img src="http://demin.ws/blog/russian/2012/12/04/colour-maximite/IMG_1224.JPG" alt="" />
</p>

<p>В сборе.</p>

<p><img src="http://demin.ws/blog/russian/2012/12/04/colour-maximite/IMG_1266.JPG" alt="" />
</p>

<p><img src="http://demin.ws/blog/russian/2012/12/04/colour-maximite/IMG_1268.JPG" alt="" />
</p>

<p><img src="http://demin.ws/blog/russian/2012/12/04/colour-maximite/IMG_1269.JPG" alt="" />
</p>

<p><img src="http://demin.ws/blog/russian/2012/12/04/colour-maximite/IMG_1275.JPG" alt="" />
</p>

<p><img src="http://demin.ws/blog/russian/2012/12/04/colour-maximite/IMG_1276.JPG" alt="" />
</p>

<p>Для сравнения старый и новый Maximite.</p>

<p><img src="http://demin.ws/blog/russian/2012/12/04/colour-maximite/IMG_1270.JPG" alt="" />
</p>

<p><img src="http://demin.ws/blog/russian/2012/12/04/colour-maximite/IMG_1277.JPG" alt="" />
</p>

<p><img src="http://demin.ws/blog/russian/2012/12/04/colour-maximite/IMG_1278.JPG" alt="" />
</p>

<p>Вот, что можно делать с цветами на Бейсике.</p>

<p><img src="http://demin.ws/blog/russian/2012/12/04/colour-maximite/IMG_1289.JPG" alt="" />
</p>

<p>А это хоть и не в цвете, что, все-таки, классика.</p>

<p><img src="http://demin.ws/blog/russian/2012/12/04/colour-maximite/IMG_1287.JPG" alt="" />
</p>

<p>Как пишет автор, возможность генерировать цветной видео сигнал потребовала
100-ногую модель PIC32, где есть три канала SPI. Понятно, что при этом
требуется &ldquo;прогонять&rdquo; в три раза больше данных, а так так частота кристалла
осталась той же, 80МГц, то объективно, цветная прошивка работает немного
медленнее, чем оригинальная черно-белая. Поэтому для нового Maximite есть
вариант чисто черно-белой прошивки, в которой аналогично добавлены все новые
периферийные возможности, и которая работает по скорости аналогично
предыдущему, черно-белому Maximite&rsquo;у.</p>

<p>Конструктор от Альтроникс, как и в прошлый раз, отличного качества.</p>

<p>В целом, рекомендую.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA["21st Century C: C Tips from the New School", автор Ben Klemens]]></title>
    <link href="http://demin.ws/blog/russian/2012/11/30/21st-century-c/"/>
    <updated>2012-11-30T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/11/30/21st-century-c/</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.uk/gp/product/1449327141/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=1634&amp;creative=6738&amp;creativeASIN=1449327141&amp;linkCode=as2&amp;tag=prodiy-21">21st Century C: C Tips from the New School</a><img src="http://www.assoc-amazon.co.uk/e/ir?t=prodiy-21&amp;l=as2&amp;o=2&amp;a=1449327141" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p><a href="http://www.amazon.co.uk/gp/product/1449327141/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=1634&amp;creative=6738&amp;creativeASIN=1449327141&amp;linkCode=as2&amp;tag=prodiy-21"><img border="0" src="http://ws.assoc-amazon.co.uk/widgets/q?_encoding=UTF8&amp;ASIN=1449327141&amp;Format=_SL160_&amp;ID=AsinImage&amp;MarketPlace=GB&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=prodiy-21" ></a><img src="http://www.assoc-amazon.co.uk/e/ir?t=prodiy-21&amp;l=as2&amp;o=2&amp;a=1449327141" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p>Как следует из названия - это книга о &ldquo;новом&rdquo; C. Конкретно: С89, C99 и даже
C11. Плюс, краткий обзор основных &ldquo;игроков&rdquo; типа gcc или clang.</p>

<p>Скажу сразу, что это не учебник, а сборник советов автора на тему
использования возможностей современного C.</p>

<p>Зацените начало введения:</p>

<p><em>C has only a handful of keywords and is a bit rough around the edges, and it rocks. You can do anything with it. Like the C, G and D chords of a guitar, you can learn the basic mechanics pretty quickly, and then spend the rest of your life getting better</em>.</p>

<p>Мне понравилось. А когда я увидел главу под названием &ldquo;C syntax you can
ignore&rdquo;, точно решил с книгой ознакомиться.</p>

<p>Итак, сначала идет небольшой обзор стандартов. Затем пара глав про утилиты
и средства разработки (gdb, autotools, makefiles, valgrind, git). Кратко,
но для новичков это будет началом, где копнуть. Далее идет, собственно,
про язык. Дается много полезных советов про указатели, структуры (понятно, что
для &ldquo;нового&rdquo; С), приемчики объектно-ориентированного подхода, работа с
Unicode. В конце обзор нескольких распространенных библиотек.</p>

<p>Книга выглядит немного поверхностно, но на одно вечернее чтиво тянет
спокойно.</p>

<p>Например, что лично нового узнал для себя:</p>

<ul>
<li>ключевое слово &ldquo;restrict&rdquo;</li>
<li>функция &ldquo;asprintf()&rdquo;, которая сама выделяет нужное место для буфера</li>
<li>идея префикса &ldquo;private_&rdquo; для членов структур, доступ к которым надо
ограничить (физической защиты не дает, конечно, но является удобной
подсказкой)</li>
</ul>

<p>Также, например, если надо из функции вернуть несколько значений, можно
просто использовать struct в качестве результата функции. Если размер
структуры небольшой, то все будет и красиво и быстро. Не то, чтобы я этого
не знал, но просто в С это не самый распространенный прием, и часто о нем
забываешь.</p>

<p>Как всегда бескомпромиссный совет использовать makefile вместо пачки скриптов.</p>

<p>Но книга была бы пресной без &ldquo;ЧТО?! - НИКОГДА!!!&rdquo;.</p>

<p>Например, автор поддерживает использование goto для экстренного выхода из
функции, когда в ее конце есть код завершения, который надо обязательно
выполнить. Лично я так никогда делать не буду, а постараюсь изолировать
этот код, например, в отдельной функции, и вызывать ее на каждом подобном
выходе.</p>

<p>Также автор рекомендует не использовать switch в целом, объясняя это его
ненаглядным синтаксисом и проблемой пропущенного break. Опять, лично я с
этим не могу согласиться.</p>

<p>Далее автор всячески рекомендует autotools (autoconf, automake, libtools).
Лично до сих пор не могу до конца понять суть этих сложных и запутанных
систем. Хорошо, когда скрипт &ldquo;configure&rdquo; уже кем-то написан, но делать
его самому&hellip;</p>

<p>Под занавес - doxygen. Крайне редко я видел проекты, где автоматическая
документация реально хорошего качества. Увы, поддержание doxygen&rsquo;овских
вставок в достойном состоянии - это отдельный фронт работы, на который
обычно нет ни желания, ни времени, если, конечно, это документация не
является коммерческой частью продукта.</p>

<p><strong>Вывод</strong>: Можно купить книгу в офис, по очереди пролистать за вечером, и
затем можно перетирать детали на офисной кухне с коллегами.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS для удобного просмотра Хабра]]></title>
    <link href="http://demin.ws/blog/russian/2012/11/27/stylebot-css-for-habr/"/>
    <updated>2012-11-27T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/11/27/stylebot-css-for-habr/</id>
    <content type="html"><![CDATA[<p><a href="http://demin.ws/blog/russian/2012/05/06/how-to-fix-dom-css-on-the-fly-in-browser/">Первый опыт &ldquo;причесывания&rdquo; сайтов</a>, пестрящих баннерами, был очень удачным. Я постоянно лазаю на translate.ru, поэтому сделать его компактным было полезно.</p>

<p>Теперь небольшой fix для Хабра. Было:</p>

<p><img src="http://demin.ws/blog/russian/2012/11/27/stylebot-css-for-habr/habr-normal-view.png" alt="" />
</p>

<p>Стало (просмотр в полную ширину и без рекламы):</p>

<p><img src="http://demin.ws/blog/russian/2012/11/27/stylebot-css-for-habr/habr-without-banners.png" alt="" />
</p>

<p>Фикс можно приложить расширением Stylebot.</p>

<pre class="hl">
<span class="hl kwd">#topline</span> <span class="hl opt">{</span>
    <span class="hl kwa">display</span><span class="hl opt">:</span> none<span class="hl opt">;</span>
<span class="hl opt">}</span>
<span class="hl kwd">#header</span> <span class="hl opt">.</span>logo <span class="hl opt">{</span>
    <span class="hl kwa">background</span><span class="hl opt">:</span> none<span class="hl opt">;</span>
    <span class="hl kwa">height</span><span class="hl opt">:</span> <span class="hl num">30px</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
<span class="hl kwd">#header</span> <span class="hl opt">.</span>main_menu <span class="hl opt">.</span>banner_special <span class="hl opt">{</span>
    <span class="hl kwa">display</span><span class="hl opt">:</span> none<span class="hl opt">;</span>
<span class="hl opt">}</span>
<span class="hl kwc">.sidebar_right</span> <span class="hl opt">{</span>
    <span class="hl kwa">display</span><span class="hl opt">:</span> none<span class="hl opt">;</span>
<span class="hl opt">}</span>
<span class="hl kwc">.content_left</span> <span class="hl opt">{</span>
    <span class="hl kwa">width</span><span class="hl opt">:</span> <span class="hl num">99</span><span class="hl opt">%;</span>
<span class="hl opt">}</span>
<span class="hl kwc">.rotated_posts</span> <span class="hl opt">{</span>
    <span class="hl kwa">display</span><span class="hl opt">:</span> none<span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Пример использование Splunk для анализа логов]]></title>
    <link href="http://demin.ws/blog/russian/2012/11/25/progress-indicator-using-splunk/"/>
    <updated>2012-11-25T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/11/25/progress-indicator-using-splunk/</id>
    <content type="html"><![CDATA[<p>Splunk - это система хранения и анализа логов. В двух словах принцип работы
можно описать так: есть сервер Splunk, который хранит, индексирует и
позволяет анализировать логи, и есть рабочие машины (сервера), которые эти
логи создают и передают на сервер Splunk. Сервер Splunk в свою очередь
может быть кластером из нескольких физических машин, между которыми
распределяется хранение информации, и которые используются для ее обработки
по технологии MapReduce. Способов передавать логи с рабочих машин очень
много: через специальную программу forwarder, которая умеет быстро и
эффективно отсылать изменения логов на сервер, через технологии типа NFS/SMB,
или SNMP, можно самостоятельно отсылать данные в Splunk по TCP/IP (например,
вместо того, чтобы писать в файл). Под Windows Splunk умеет брать данные из
Windows Events, Performance Counters или Реестра. Это основные способы.</p>

<p>Для Splunk логи - это текстовая информация, разбитая на строки. В процессе
индексирования строки логов разбиваются на поля, например &ldquo;имя=значение&rdquo;,
хотя это настраиваемо. Далее с помощью специального языка запросов SPL
можно работать с этими полями: сортировать, агрегировать, создавать
вычисляемые поля, формировать таблицы, обращаться ко внешним словарям,
например, из SQL-базы, и, конечно, строить разнообразные графики. SPL
работает не только с одиночными строками, но и позволяет группировать,
&ldquo;сжимать&rdquo; логически в одну строку многострочные куски.</p>

<p>Как заявляет сам Splunk, все логи, что хранятся в системе за любое время,
являются доступными для запросов, то есть нет понятия архивирования.
Конечно, машин (машины), где крутится Splunk должна сообразно отражать
объем хранимой и обрабатываемой информации.</p>

<p>Еще Splunk называет себя &ldquo;Google для логов&rdquo;, но оставим это высказывание
без комментариев на их собственный откуп.</p>

<p>Интерфейс Splunk - веб. Можно создавать панели (dashboard&rsquo;ы), из которых
формировать свое собственное Splunk-приложение. У Splunk есть магазин
приложений (хотя большинство из них бесплатны), где есть море уже
готовых конфигураций для анализа популярных систем, например, UNIX syslog,
логи Apache, Microsoft Exchange и т.д.</p>

<p>Программный комплекс <a href="http://www.splunk.com/">Splunk</a> можно бесплатно скачать с официального сайта.
Лицензирование происходит на основе дневного объема прокачиваемых через
систему логов. Для ознакомления есть минимальный бесплатный объем, которого
прекрасно хватает для освоения системы.</p>

<p>Для быстрого ознакомления рекомендую книгу <a href="http://www.splunk.com/goto/book">Exploring Splunk</a> от создателей
этого продукта. Пролистав ее, вы получите неплохое начальное понимание, что
можно делать в Splunk, суть языка запросов SPL и т.д.</p>

<p>В данной же статье я хочу показать реальный пример, который можно повторить
в течение получаса. Для этого достаточно бесплатно скачать и установить
Splunk под вашу операционную систему. Далее можно просто следовать моим
инструкциям.</p>

<p>Пример будет необычным. Традиционно, логи используются для анализа
исторической информации. Но ничто не мешает извлекать ее по ходу появления
и создавать &ldquo;живые&rdquo; индикаторы на ее основе. Соглашусь, мой пример
немного искусственен, но я хочу показать, как быстро и просто можно
&ldquo;накидывать&rdquo; данные в Спланк, формализовать их и строить на их основе
динамический пользовательский интерфейс</p>

<p>Вот простой скрипт, который в течение минуты будет записывать в лог
сообщения, содержащие процентный показатель (от 0 до 100%).</p>

<pre class="hl">
    <span class="hl kwa">require</span> <span class="hl str">'date'</span>

    duration <span class="hl opt">=</span> <span class="hl num">60</span><span class="hl opt">*</span><span class="hl num">1</span>
    update_period <span class="hl opt">=</span> <span class="hl num">0.5</span>
    i <span class="hl opt">=</span> <span class="hl num">0</span>
    <span class="hl kwa">while</span> i <span class="hl opt">&lt;=</span> duration <span class="hl kwa">do</span>
      progress <span class="hl opt">=</span> i <span class="hl opt">*</span> <span class="hl num">100.0</span> <span class="hl opt">/</span> duration
      msg <span class="hl opt">=</span> <span class="hl str">&quot;%s progress=%05.2f\n&quot;</span> <span class="hl opt">% [</span>DateTime<span class="hl opt">.</span>now<span class="hl opt">,</span> progress<span class="hl opt">]</span>
      puts msg
      <span class="hl kwd">open</span><span class="hl opt">(</span><span class="hl str">&quot;logs/my.log&quot;</span><span class="hl opt">,</span> <span class="hl str">'a'</span>) <span class="hl esc">{ |f| f &lt;&lt; msg }</span>
      i <span class="hl opt">=</span> i <span class="hl opt">+</span> update_period
      sleep update_period
    <span class="hl kwa">end</span>
</pre>

<p>Лог будет выглядеть примерно вот так:</p>

<pre><code>2012-11-23T15:58:54+00:00 progress=45.00
2012-11-23T15:58:55+00:00 progress=45.83
2012-11-23T15:58:55+00:00 progress=46.67
2012-11-23T15:58:56+00:00 progress=47.50
2012-11-23T15:58:56+00:00 progress=48.33
2012-11-23T15:58:57+00:00 progress=49.17
2012-11-23T15:58:57+00:00 progress=50.00
</code></pre>

<p>Наша цель создать dashboard (панель просмотра) в Спланке, которая отображала
бы процесс выполнения скрипта в форме красивого индикатора, беря при этом
данные из лога.</p>

<p>Для простоты мы будет все делать на одной машине, и Спланк будет брать лог
просто из указанного файла.</p>

<p>Итак, вы уже установили Спланк, и если зайти на &ldquo;http://localhost:8000&rdquo;, то
вы увидите рабочую страницу Спланка, где можно залогиниться пользователем
&ldquo;admin&rdquo;.</p>

<p>Далее идем по меню: &ldquo;Manager -&gt; Data Inputs -&gt; Add data -&gt; A file or directory
or files&rdquo;. Тут мы указывает имя файла или каталога, где лежат наши логи
(в данном случае это будет одиночный файл).</p>

<p><img src="http://demin.ws/blog/russian/2012/11/25/progress-indicator-using-splunk/01-adding-log.png" alt="" />
</p>

<p>Подтверждаем создание так называемого источника логов (source type).
Как я уже говорил, логи в Спланк могут поступать различными путями. Каждый
такой источник логов именован и может обрабатываться независимо.</p>

<p><img src="http://demin.ws/blog/russian/2012/11/25/progress-indicator-using-splunk/02-data-source-creation.png" alt="" />
</p>

<p>Итак, лог добавлен. Мы видим, что Спланк &ldquo;подцепил&rdquo; файл и уже разобрал
строки на поля. Спланк понимает огромное количество форматов даты и времени,
но и это настаиваемо.</p>

<p><img src="http://demin.ws/blog/russian/2012/11/25/progress-indicator-using-splunk/03-data-source-check.png" alt="" />
</p>

<p>Далее мы даем имя нашему источнику логов - &ldquo;test_logging&rdquo;, и сохраняем
настройки.</p>

<p><img src="http://demin.ws/blog/russian/2012/11/25/progress-indicator-using-splunk/04-data-source-name.png" alt="" />
</p>

<p>Возвращаемся на главную страницу и строке Search вводим наш первый запрос
на языке SPL (в красном):</p>

<pre><code>sourcetype=&quot;test_logging&quot; | table progress as float
</code></pre>

<p>Перевожу: взять логи из источника &ldquo;test_logging&rdquo;, сформировать таблицу,
в которую добавить колонку со значением из поля &ldquo;progress&rdquo;, попутно
преобразовав его в тип float. Внизу (в синем) мы видим результат выполнения
запроса (в логе уже есть данные). В SPL работает принцип UNIX pipes (|),
когда результат одной операции передается на вход следующей.</p>

<p><img src="http://demin.ws/blog/russian/2012/11/25/progress-indicator-using-splunk/05-radial-gauge-query.png" alt="" />
</p>

<p>Итак, таблица есть. Теперь сделаем ей графическое представление. Так как
у нас всего одно поле, показывающее процент выполнения от 0 до 100, то,
например, можно использовать вид спидометра, стрелка которого будет
демонстрировать текущее значение. Кликаем на &ldquo;Formatting options&rdquo; (в синем)
и выбираем тип элемента (Chart type) &ldquo;radial gauge&rdquo; (в красном). Появляется
вот такой красивый спидометр.</p>

<p><img src="http://demin.ws/blog/russian/2012/11/25/progress-indicator-using-splunk/06-radial-gauge-widget.png" alt="" />
</p>

<p>Первый виджет готов. Теперь ради эксперимента создадим еще один. Он тоже
будет показывать значения поля progress, но в виде горизонтального
индикатора (progress bar), двигаясь слева направо. Запрос в этом случае
будет таким:</p>

<pre><code>sourcetype=&quot;test_logging&quot; | table _time progress | head 1
</code></pre>

<p>Что значит: по данным из источника &ldquo;test_logging&rdquo; создать таблицу из
двух полей, &ldquo;_time&rdquo; и &ldquo;progress&rdquo;, из которой брать только первую строку.
Сортировка по умолчанию по полю &ldquo;_time&rdquo; по убыванию. Внизу (в зеленом)
мы видим результат этого запроса.</p>

<p><img src="http://demin.ws/blog/russian/2012/11/25/progress-indicator-using-splunk/07-bar-chart-query.png" alt="" />
</p>

<p>Далее кликаем на &ldquo;Formatting options&rdquo;, выбираем тип &ldquo;bar&rdquo; (в зеленом),
для оси Y задаем интервал от 0 до 100. Почему-то тут ось X идет по
вертикали (там будет отображаться поле &ldquo;_time&rdquo;), а ось Y по горизонтали
(там будет отображаться поле &ldquo;progress&rdquo;). Так как запрос на предыдущей
картинки показывал значение 100, то и наш горизонтальный индикатор
полностью закрашен.</p>

<p><img src="http://demin.ws/blog/russian/2012/11/25/progress-indicator-using-splunk/08-chart-type-bar.png" alt="" />
</p>

<p>Я пропустил это для первого виджета, спидометра, но отлаженный запрос
и его визуальное представление можно сохранить в виде &ldquo;Dashboard panel&rdquo;.
Для это кликаем на &ldquo;Create&rdquo; и &ldquo;Dashboard panel&hellip;&rdquo; (в красном) и сохраняем
настройки. Назовем первый наш виджет &ldquo;Speedometer&rdquo;, и второй &ldquo;Progress bar&rdquo;.</p>

<p><img src="http://demin.ws/blog/russian/2012/11/25/progress-indicator-using-splunk/09-create-dashboard-button.png" alt="" />
</p>

<p>При сохранение первого виджета будет предложено также создать панель
(dashboard), назовем ее &ldquo;Test logging&rdquo;. При сохранении второго виджета
добавим его уже созданную панель.</p>

<p>После создания панели можно кликнуть на &ldquo;Dashboards &amp; Views&rdquo;, выбрать ее
по имени &ldquo;Test logging&rdquo;. Внешний вид будет примерно таким:</p>

<p><img src="http://demin.ws/blog/russian/2012/11/25/progress-indicator-using-splunk/10-dashboard-layout.png" alt="" />
</p>

<p>Пока данных нет, поэтому панели пустые. Мы видим название панели (в
красном), названия виджетов (в желтом), кнопку активации панели (в зеленом)
и кнопки &ldquo;Edit&rdquo; (в синем), которой можно налету подправить запрос или
визуальное представление. Перед запуском скрипта надо через кнопку
&ldquo;Edit&rdquo; зайти в каждый из виджетов и указать интервал времени обновления
в одну секунду: от &ldquo;rt-1s&rdquo; (real time - 1s), до &ldquo;rt&rdquo; (текущее время).</p>

<p>Итак, все! Зажимаем на &ldquo;On&rdquo; и запускаем наш скрипт.</p>

<p>Видео как это работает:</p>

<iframe width="480" height="360" src="https://www.youtube.com/embed/wPh7dm5brWg" frameborder="0" allowfullscreen></iframe>

<p>Все!</p>

<h2>Заключение</h2>

<p>Конечно, пример очень простой, но надеюсь, мне удалось передать хотя бы
минимальное ощущение, как работает Спланк.</p>

<p>Скажу, мы в компании недавно начали использовать этот продукт
и пока довольны. В этом году я был на конференции SplunkLive, где выступали
люди из весьма солидных контор типа British Telecom. С помощью Splunk
они обрабатывают гигабайты логов ежедневно.</p>

<p>Увы, даже у крупных контор не всегда есть желание разрабатывать подсистему
для обработки логов, так что Спланк может прийтись очень кстати.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Мини-компьютер на базе микроконтроллера Parallax Propeller]]></title>
    <link href="http://demin.ws/blog/russian/2012/11/22/personal-mini-computer-on-parallax-propeller/"/>
    <updated>2012-11-22T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/11/22/personal-mini-computer-on-parallax-propeller/</id>
    <content type="html"><![CDATA[<p>Микроконтроллер фирмы Parallax под названием <a href="http://www.parallax.com/propeller/">Propeller</a>, в сравнении с
&ldquo;классикой&rdquo; жанра типа PIC или AVR занимает несколько странную нишу. Про
первые два можно сказать, что это архитектуры общего назначения. Создатели
же Пропеллера подошли к вопросу &ldquo;с фланга&rdquo;.</p>

<p>Основные отличительные особенности Пропеллера:</p>

<ul>
<li>8 независимых ядер, работающих параллельно. Какое-либо разделение времени,
необходимое для общих ресурсов типа памяти или портов ввода-вывода не
контролируется программистом и &ldquo;вшито&rdquo; в кристалл. Это дает предсказуемость
во времени выполнения кода. Каждое ядро (cog) имеет 4КБ собственной
изолированной оперативной памяти. Также каждое ядро имеет встроенный
аппаратный модуль для генерации (внимание!) ТВ или VGA видео-сигнала.</li>
<li>Нет понятия прерываний. Вместо это предлагается запускать конкурирующие
задачи разных ядрах (cog&rsquo;ах).</li>
<li>Программировать можно либо на ассемблере, либо на особом высокоуровневом
языке Spin, который сильно упрощает многоядерное и параллельное
программирование. Интерпретатор Spin зашит в кристалл.</li>
<li>Почти нет понятия программации или прошивки кристалла. Верхняя половина
адресного (ROM) пространства размером в 32КБ прошита интерпретатором Spin
и разными системными таблицами. В этом случае при каждом включении
требуется загрузка программы извне (например, из среды разработки) в нижнюю
область 32КБ (RAM). Но обычно в реальном использовании подключается внешняя
I2C микросхема памяти EEPROM, содержимое которой автоматически копируется
в RAM при включении кристалла.</li>
<li>Процессор заявлен как 32-х битный, так как оперирует со данными этого
размера, но адресное пространство 16-и битное (64КБ).</li>
</ul>

<p>Язык Spin разработан для удобного многопроцессорного программирования, и
выглядит как нечто среднее между процедурным и объектно-ориентированным
языком.</p>

<p>Вот пример кода на Spin, запускающего функцию крутиться на нескольких
ядрах. Код реально простой и понятный.</p>

<pre><code>CON

  _clkmode = xtal1 + pll16x         'Establish speed
  _xinfreq = 5_000_000              '80Mhz

OBJ

  led: &quot;E555_LEDEngine.spin&quot;        'Include LED methods object

VAR

  byte Counter                      'Establish Counter Variable
  long stack[90]                    'Establish working space

PUB Main

  cognew(Twinkle(16,clkfreq/50), @stack[0])    'start Twinkle cog 1
  cognew(Twinkle(19,clkfreq/150), @stack[30])  'start Twinkle cog 2
  cognew(Twinkle(22,clkfreq/100), @stack[60])  'start Twinkle cog 3

PUB Twinkle(PIN,RATE)                  'Method declaration 

  repeat                               'Initiate a master loop

    repeat Counter from 0 to 100       'Repeat loop Counter
      led.LEDBrightness(Counter, PIN)  'Adjust LED brightness 
      waitcnt(RATE + cnt)              'Wait a moment

    repeat Counter from 100 to 0       'Repeat loop Counter
      led.LEDBrightness(Counter,PIN)   'Adjust LED brightness 
      waitcnt(RATE + cnt)              'Wait a moment
</code></pre>

<p>Функция <code>cognew</code> запускает задачу на трех ядрах, параметризируя каждую
своей частотой и стеком.</p>

<p>Упрощенно Пропеллер устроен следующим образом:</p>

<p><a href="http://demin.ws/blog/russian/2012/11/22/personal-mini-computer-on-parallax-propeller/propeller-block-large.jpg"><img src="http://demin.ws/blog/russian/2012/11/22/personal-mini-computer-on-parallax-propeller/propeller-block.jpg" alt="" />
</a></p>

<p>Название &ldquo;Пропеллер&rdquo; произошло от его модели передачи приоритета на доступ к
разделяемым ресурсам. Модуль Hub, контролирующий разделение времени,
делает это по кругу, типа крутящегося пропеллера.</p>

<p>Я не хочу в этой статье углубляется в сам Пропеллер, ибо это большая тема.
Для интересующихся в конце есть ссылки на книги, в которых можно получить
исчерпывающую информацию об этом микроконтроллере.</p>

<p>Но хочу рассказать об одном интересном проекте, который называется
&ldquo;<a href="http://propellerpowered.wikispaces.com/Pocket+Mini+Computer">Pocket Mini Computer</a>&rdquo;. Это мини-компьютер на базе Пропеллера (P8X32A),
использующий evaluation board &ldquo;P8X32A QuickStart&rdquo; как основу.</p>

<p><img src="http://demin.ws/blog/russian/2012/11/22/personal-mini-computer-on-parallax-propeller/P8X32A-quick-start.jpg" alt="" />
</p>

<p>Выглядит это добро следующим образом (фотография с официального сайта):</p>

<p><img src="http://demin.ws/blog/russian/2012/11/22/personal-mini-computer-on-parallax-propeller/pocket-mini-computer.jpg" alt="" />
</p>

<p>Фактически, автор <a href="http://propellerpowered.com/shop/?page_id=234">продает</a> evaluation board плюс плату расширения,
на которой есть VGA, microSD, PS/2, звук и Wii Gameport. Опционально
можно поставить микросхему оперативки SRAM на 32КБ.</p>

<p>Фишка проекта в том, что автор разработал интерпретатор Бейсика,
который превращает все это в микро-компьютер а-ля 80-е. Бейсик написан
на Spin&rsquo;e (<a href="https://www.dropbox.com/sh/qwhixzvtlrvp1u1/y-JshwklWj/PropellerBASIC">исходники открыты</a>). Диалект весьма
ограничен, например, нет массивов, строковых и вещественных переменных,
имена переменных только однобуквенные и т.д. Но тем не менее, дается
доступ ко всей периферии, включая SD-карту, и также позволяет запускать
чисто двоичные файлы, которые могут быть написаны хоть на том же Spin&rsquo;e,
хоть на С (Parallax имеет версию GCC для Пропеллера), хоть на ассемблере.</p>

<p>Далее несколько фотографий конструктора, чтобы было понятно, что дается в
наборе. Как я уже говорил, основа PMC - это готовая плата &ldquo;P8X32A
QuickStart&rdquo;, поэтому спаять надо только плату расширения.</p>

<p><img src="http://demin.ws/blog/russian/2012/11/22/personal-mini-computer-on-parallax-propeller/IMG_1192.JPG" alt="" />
</p>

<p><img src="http://demin.ws/blog/russian/2012/11/22/personal-mini-computer-on-parallax-propeller/IMG_1193.JPG" alt="" />
</p>

<p><img src="http://demin.ws/blog/russian/2012/11/22/personal-mini-computer-on-parallax-propeller/IMG_1194.JPG" alt="" />
</p>

<p>Почти все запаяно.</p>

<p><img src="http://demin.ws/blog/russian/2012/11/22/personal-mini-computer-on-parallax-propeller/IMG_1195.JPG" alt="" />
</p>

<p>Бутерброд в сборе.</p>

<p><img src="http://demin.ws/blog/russian/2012/11/22/personal-mini-computer-on-parallax-propeller/IMG_1196.JPG" alt="" />
</p>

<p><img src="http://demin.ws/blog/russian/2012/11/22/personal-mini-computer-on-parallax-propeller/IMG_1197.JPG" alt="" />
</p>

<p><img src="http://demin.ws/blog/russian/2012/11/22/personal-mini-computer-on-parallax-propeller/IMG_1198.JPG" alt="" />
</p>

<p><img src="http://demin.ws/blog/russian/2012/11/22/personal-mini-computer-on-parallax-propeller/IMG_1199.JPG" alt="" />
</p>

<p>Вот небольшая демка, чтобы оценить графические возможности.</p>

<iframe width="640" height="360" src="https://www.youtube.com/embed/capsFv1njUE" frameborder="0" allowfullscreen></iframe>

<h2>Общие впечатления</h2>

<h3>Пропеллер</h3>

<p>Не получается назвать его процессором общего назначения. По моему
субъективному мнению, для эффективного использования Пропеллера надо очень
хорошо понимать свою прикладную задачу. Например, у Пропеллера нет ШИМ,
ЦАП/АПЦ, встроенной флеш-памяти, триггеров, понятия прерываний, и создатели
предлагают либо реализовывать необходимое программно, используя силу
нескольких ядер, либо использовать специализированные внешние микросхемы.
В книгах, приведенных в конце, описано множество примеров работы с
дополнительными микросхемами.</p>

<p>Интересно другое. Создатели Пропеллера не забоялись отойти от традиционного
подхода и попытались вложить в кристалл конкретные прикладные возможности,
почти готовые задачи. Может для каких-то проектов это придется очень кстати.
Как я понял, Пропеллер очень удобен для создания разного
рода игровых автоматов и приставок, например, из-за встроенной возможности
генерировать качественный телевизионный и VGA сигнал.</p>

<p><strong>Вывод</strong>: интересная архитектура, определенно заслуживающая внимания.</p>

<h3>Конструктор PMC</h3>

<p>Опять-таки, двоякое ощущение. Вроде работает, но ресурсов Бейсику явно
не хватает, особенно памяти. Например, тот же <a href="http://demin.ws/blog/russian/2012/01/19/maximite-kit/">Maximite</a> на базе PIC32 его
на голову превосходит. На нем можно запустить хоть <a href="http://demin.ws/blog/russian/2012/05/11/retrobsd-on-maximite/">RetroBSD</a>, хоть
<a href="http://demin.ws/blog/russian/2012/08/23/radio86-on-maximite/">Радио-86РК</a>. Да и встроенный MMBasic несравнимо мощнее.</p>

<p>Хотя, за 39 долларов США - это отличная игрушка для тех, кто хочет пощупать
Пропеллер, имея уже собранное устройство.</p>

<h2>На закуску</h2>

<p>Книги по Пропеллеру, которые я прочитал, что касаемо архитектуры, и проглядел
(что касаемо проектов). Все рекомендую.</p>

<hr />

<p>Небольшая и очень понятная книга для начинающих. Описаны (с картинками)
интересные проекты. Один из соавторов является конструктором PMC.</p>

<p><a href="http://www.amazon.co.uk/gp/product/B004X6U6II/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=1634&amp;creative=6738&amp;creativeASIN=B004X6U6II&amp;linkCode=as2&amp;tag=prodiy-21">Getting Started With the Propeller</a><img src="http://www.assoc-amazon.co.uk/e/ir?t=prodiy-21&amp;l=as2&amp;o=2&amp;a=B004X6U6II" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p><a href="http://www.amazon.co.uk/gp/product/B004X6U6II/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=1634&amp;creative=6738&amp;creativeASIN=B004X6U6II&amp;linkCode=as2&amp;tag=prodiy-21"><img border="0" src="http://ws.assoc-amazon.co.uk/widgets/q?_encoding=UTF8&amp;ASIN=B004X6U6II&amp;Format=_SL160_&amp;ID=AsinImage&amp;MarketPlace=GB&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=prodiy-21" ></a><img src="http://www.assoc-amazon.co.uk/e/ir?t=prodiy-21&amp;l=as2&amp;o=2&amp;a=B004X6U6II" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<hr />

<p>Крайне грамотная книга в плане архитектуры и понимания сути Пропеллера.
В ней рассматривается только программирование на Spin, но с полным
объяснением подходов и особенностей микроконтроллера. Прочитав первую главу,
вы получите почти полное понимание архитектуры. Далее описаны несколько
проектов (это можно пропустить).</p>

<p><a href="http://www.amazon.co.uk/gp/product/B003TQM9Y2/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=1634&amp;creative=6738&amp;creativeASIN=B003TQM9Y2&amp;linkCode=as2&amp;tag=prodiy-21">Programming the Propeller with Spin : A Beginner&rsquo;s Guide to Parallel Processing (Tab Electronics)</a><img src="http://www.assoc-amazon.co.uk/e/ir?t=prodiy-21&amp;l=as2&amp;o=2&amp;a=B003TQM9Y2" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p><a href="http://www.amazon.co.uk/gp/product/B003TQM9Y2/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=1634&amp;creative=6738&amp;creativeASIN=B003TQM9Y2&amp;linkCode=as2&amp;tag=prodiy-21"><img border="0" src="http://ws.assoc-amazon.co.uk/widgets/q?_encoding=UTF8&amp;ASIN=B003TQM9Y2&amp;Format=_SL160_&amp;ID=AsinImage&amp;MarketPlace=GB&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=prodiy-21" ></a><img src="http://www.assoc-amazon.co.uk/e/ir?t=prodiy-21&amp;l=as2&amp;o=2&amp;a=B003TQM9Y2" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<hr />

<p>Сборник реальных проектов с использованием Пропеллера от его создателей.</p>

<p><a href="http://www.amazon.co.uk/gp/product/B003BZVIZC/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=1634&amp;creative=6738&amp;creativeASIN=B003BZVIZC&amp;linkCode=as2&amp;tag=prodiy-21">Programming and Customizing the Multicore Propeller Microcontroller : The Official Guide</a><img src="http://www.assoc-amazon.co.uk/e/ir?t=prodiy-21&amp;l=as2&amp;o=2&amp;a=B003BZVIZC" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p><a href="http://www.amazon.co.uk/gp/product/B003BZVIZC/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=1634&amp;creative=6738&amp;creativeASIN=B003BZVIZC&amp;linkCode=as2&amp;tag=prodiy-21"><img border="0" src="http://ws.assoc-amazon.co.uk/widgets/q?_encoding=UTF8&amp;ASIN=B003BZVIZC&amp;Format=_SL160_&amp;ID=AsinImage&amp;MarketPlace=GB&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=prodiy-21" ></a><img src="http://www.assoc-amazon.co.uk/e/ir?t=prodiy-21&amp;l=as2&amp;o=2&amp;a=B003BZVIZC" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p>На момент написания этой статьи, первая книга доступна только в формате Киндл
на Амазоне по цене в два доллара, а вот вторую и третью можно найти, если
поискать.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA["Язык ассемблера для IBM PC", Питер Нортон и Джон Соухэ]]></title>
    <link href="http://demin.ws/blog/russian/2012/11/04/norton-assembly-language-book/"/>
    <updated>2012-11-04T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/11/04/norton-assembly-language-book/</id>
    <content type="html"><![CDATA[<p>Продолжаю обзор книг, которые так или иначе оказали на меня значительное
влияние в свое время. Сегодня это книга Питера Нортона и Джона Соухэ про
программирование на ассемблере.</p>

<p>Небольшое лирическое отступление.</p>

<p>Кстати, все знают, что Нортон Коммандер написал не Питер Нортон? Его в
одиночку, по крайне мере до канонической версии 3 включительно, писал и
поддерживал товарищ Соухэ, применяя, как он сам говорил, экстремальный на то
время подход, смешивая С и ассемблер. Это позволяло быстро разрабатывать
эффективные программы, тогда как &ldquo;тру&rdquo;-программисты того времени писали
исключительно на ассемблере.</p>

<p>Кстати, все знают, что &ldquo;за бугром&rdquo; синий текстовый экран с двумя панелями
называют &ldquo;доисторической русской программой&rdquo;? Забавно, что
проникновение Коммандера в умы компьютерщиков на территории бывшего СССР
имеет несравнимые масштабы по отношение к тем местам, где Коммандер родился.</p>

<p>Ладно, вернемся к книге. Мне понравилась тема покупки старых книг практически
за бесценок, просто чтобы подержать их в руках.</p>

<p><img src="http://demin.ws/blog/russian/2012/11/04/norton-assembly-language-book/IMG_1171.jpg" alt="" />
</p>

<p>Снова радость - списанный библиотечный экземпляр, проклеенный скотчем.</p>

<p><img src="http://demin.ws/blog/russian/2012/11/04/norton-assembly-language-book/IMG_1172.jpg" alt="" />
</p>

<p>Я не люблю, когда пишут в книгах или загибают листы, но выглядит это
трогательно. Кто-то это явно зубрил.</p>

<p><img src="http://demin.ws/blog/russian/2012/11/04/norton-assembly-language-book/IMG_1173.jpg" alt="" />
</p>

<p>Ну как можно после такой иллюстрации не понять, как работает EQU?</p>

<p><img src="http://demin.ws/blog/russian/2012/11/04/norton-assembly-language-book/IMG_1174.jpg" alt="" />
</p>

<p>Или DUP.</p>

<p><img src="http://demin.ws/blog/russian/2012/11/04/norton-assembly-language-book/IMG_1175.jpg" alt="" />
</p>

<p>Или стек.</p>

<p><img src="http://demin.ws/blog/russian/2012/11/04/norton-assembly-language-book/IMG_1176.jpg" alt="" />
</p>

<p>Или как перехватывать прерывания в ДОСе.</p>

<p><img src="http://demin.ws/blog/russian/2012/11/04/norton-assembly-language-book/IMG_1178.jpg" alt="" />
</p>

<p>Кстати, это оказалось третье издание книги, в котором очень кратко описывался
защищенный режим 286 и 386-х.</p>

<p><img src="http://demin.ws/blog/russian/2012/11/04/norton-assembly-language-book/IMG_1177.jpg" alt="" />
</p>

<p>В общем, книга отличная.</p>

<p><img src="http://demin.ws/blog/russian/2012/11/04/norton-assembly-language-book/IMG_1180.jpg" alt="" />
</p>

<p>На протяжении всей книги описывается процесс создания визуального посекторного
редактора диска (дискеты или винчестера). В конце вы получаете весьма
нетривиальную программу приличного размера. Начав с самых азов ассемблера,
придется освоить арифметические операции, работу с прерываниями БИОС и ДОС,
прямой доступ в экранную область, клавиатуру. Но самое главное, появляется
понимание как писать действительно большие программы на ассемблере. Для меня,
например, было реальным открытием, что если каждая подпрограмма будет
по умолчанию сохранять регистры, кроме используемых для передачи и возврата
данных, то писать становится разительно проще. Конечно, сейчас это знание
для детского сада, но в детском саду должен быть кто-то, кто это донесет.</p>

<p>В конце приводится полный откомментированный листинг этого редактора.</p>

<p>Еще в третьем издании добавлена отличная глава про смешивание ассемблера
с языками типа С или Паскаля. В деталях разжевывается передача параметров
и использование ассемблерных вставок. На десерт в одном из приложений
дается исходник библиотеки с недвусмысленным названием SOCHALIB. В ней
много разных функций для работы с экраном, мышью, клавиатурой. А еще там
есть некоторые функции с префиксом Fast в имени. Например, те, что работают
с экраном естественно не используют БИОС, а работают напрямую с экранной
областью. Я был приятно удивлен, когда функция вывода символа на экран
вместо умножения Y*80 для вычисления базы строки использовала таблицу
(pre-calc) с уже посчитанными значениями. Не удивлюсь, если код этой
библиотеки живет где-то в коде Коммандера или Утилит Нортона.</p>

<p><img src="http://demin.ws/blog/russian/2012/11/04/norton-assembly-language-book/IMG_1183.jpg" alt="" />
</p>

<p>Кстати, если кому интересно, вот русский перевод первого издания.</p>

<p><a href="http://demin.ws/blog/russian/2012/11/04/norton-assembly-language-book/Norton-Assembly-language-for-the-PC.djvu">Нортон П., Язык ассемблера для IBM PC</a></p>

<p><img src="http://demin.ws/blog/russian/2012/11/04/norton-assembly-language-book/norton-assembly-language-book-cover.png" alt="" />
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pi Bow - самый веселый корпус для Raspberry Pi]]></title>
    <link href="http://demin.ws/blog/russian/2012/10/17/pi-bow/"/>
    <updated>2012-10-17T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/10/17/pi-bow/</id>
    <content type="html"><![CDATA[<p>Я недавно <a href="https://twitter.com/begoon">твитил</a> про прикольный корпус для Raspberry Pi, который
называется <a href="http://www.maplin.co.uk/pibow-colour-raspberry-pi-case-652812">Pibow</a>. Продает его Maplin. Увы, но я не смог сдержаться, и,
несмотря я свое собственно нытье про дороговизну этого корпуса, купил его.</p>

<p>Хотите оценить прикольность девайса?</p>

<p>Итак, оно приехало:</p>

<p><img src="http://demin.ws/images/blog/raspberry-pi/pi-bow/IMG_1130.JPG" alt="" />
</p>

<p>Детали конструкции:</p>

<p><img src="http://demin.ws/images/blog/raspberry-pi/pi-bow/IMG_1102.JPG" alt="" />
</p>

<p>Начинаем послойное &ldquo;введение магнезии&rdquo;:</p>

<p><img src="http://demin.ws/images/blog/raspberry-pi/pi-bow/IMG_1113.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/raspberry-pi/pi-bow/IMG_1114.JPG" alt="" />
</p>

<p>После первых двух слоев пристраиваем плату RPi (помним, что ее конструкция
не имеет даже дырок под стойки):</p>

<p><img src="http://demin.ws/images/blog/raspberry-pi/pi-bow/IMG_1115.JPG" alt="" />
</p>

<p>Далее по слоям:</p>

<p><img src="http://demin.ws/images/blog/raspberry-pi/pi-bow/IMG_1116.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/raspberry-pi/pi-bow/IMG_1117.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/raspberry-pi/pi-bow/IMG_1118.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/raspberry-pi/pi-bow/IMG_1119.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/raspberry-pi/pi-bow/IMG_1120.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/raspberry-pi/pi-bow/IMG_1121.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/raspberry-pi/pi-bow/IMG_1122.JPG" alt="" />
</p>

<p>Берем винты, гайки и ключ&hellip;</p>

<p><img src="http://demin.ws/images/blog/raspberry-pi/pi-bow/IMG_1123.JPG" alt="" />
</p>

<p>Вуяля, девайс в сборе:</p>

<p><img src="http://demin.ws/images/blog/raspberry-pi/pi-bow/IMG_1124.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/raspberry-pi/pi-bow/IMG_1125.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/raspberry-pi/pi-bow/IMG_1126.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/raspberry-pi/pi-bow/IMG_1127.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/raspberry-pi/pi-bow/IMG_1128.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/raspberry-pi/pi-bow/IMG_1129.JPG" alt="" />
</p>

<p>Если честно &ndash; я обожаю Raspberry Pi. Сложно себе представить удобнее
девайс для школ и даже институтов в качестве учебного пособия. С ним может
тягаться разве что <a href="http://demin.ws/blog/russian/2012/01/19/maximite-kit/">Maximite</a>, если речь идет о более &ldquo;железячной&rdquo; работе.</p>

<p>До этого мой &ldquo;корпус&rdquo; для RPi от <a href="http://www.skpang.co.uk/catalog/starter-kita-for-raspberry-pi-pi-not-include-p-1070.html">SK Pang</a> выглядел так:</p>

<p><img src="http://demin.ws/images/blog/raspberry-pi/pi-bow/IMG_1103.JPG" alt="" />
</p>

<p>Офигительно удобная штука, когда нужно иметь быстрый доступ к порту
общего назначения (GPIO), но Pibow бескомпромиссен как обычный корпус.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Как писать на Паскале-Си или ассемблер для Intel 8080]]></title>
    <link href="http://demin.ws/blog/russian/2012/10/09/rewrite-of-as/"/>
    <updated>2012-10-09T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/10/09/rewrite-of-as/</id>
    <content type="html"><![CDATA[<p>Рассмотрим фрагмент кода:</p>

<pre><code>BEGIN
   if (Hi(Code) == 0)
    BEGIN
     BAsmCode[0] = Lo(Code); CodeLen = 1;
     return True;
    END
   else if (MomCPU &lt;= CPU1802)
    BEGIN
     WrError(1500);
     return False;
    END
   else
    BEGIN
     BAsmCode[0] = Hi(Code); BAsmCode[1] = Lo(Code); CodeLen = 2;
     return True;
    END
END
</code></pre>

<p>(взято из <a href="https://github.com/begoon/asl/blob/master/code1802.c#L46">code1802.c</a>).</p>

<p>Если честно, то сходу не совсем понятно, что это за язык. Это, конечно, С,
но изначально исходник был на Паскале, потом автор решил перейти на С,
оставив основную часть кода практически без изменений.</p>

<p>Проект называется &ldquo;<a href="http://john.ccac.rwth-aachen.de:8000/as/">Macro-assembler AS</a>&rdquo;, автор Альфред Арнольд. Я его
использую как макро-ассемблер для Intel 8080, который собирается на Маке,
Линуксе и Windows. Лучшего я пока ничего не нашел.</p>

<p>Как <a href="http://john.ccac.rwth-aachen.de:8000/as/as_EN.html#sect_I_1_">пишет</a> сам автор, изначально проект был на Турбо-Паскале,
но потом автор был вынужден перейти на С, так как Борланд остановил развитие
досовских версий, и нормального Паскаля для Линукса тогда еще тоже не было. В
итоге автор сконвертировал исходники в С и продолжил развивать проект в
нового ключе. Несмотря на всю сомнительность затеи, по мне, сделал он это
весьма удачно, и проект не умер, как это часто бывает в случаях полного
переписывания большого проекта. Но хотя я <a href="https://github.com/begoon/asl">склонировал проект для себя</a>,
собрал на Маке и радостно использую, не испытываю жгучего желания что-либо
контрибьютить, так как для соблюдения стиля надо писать на этом гремучем
Паскале-Си. Увы, это неизбежное следствие конверсии, иначе проект превратится
в помойку. Если поелозить по <a href="https://github.com/begoon/asl">исходникам</a>, можно найти много интересных
трюков типа &ldquo;как сделать так, чтобы Си работал как Паскаль&rdquo;.</p>

<p>Но, повторюсь, всяческих успехов автору, так как проект жив и развивается.
Кстати, у автора есть отличная коллекция <a href="http://john.ccac.rwth-aachen.de:8000/alf/index.html#collection">различного железа</a>,
которой можно реально позавидовать.</p>

<h2>P.S.</h2>

<p>У нас в компании была похожая ситуация. Часть нашего продукта - это
бейсикоподобный язык (DSL), ориентированный на работу с базами данных. На нем
пишется бизнес-логика банковского продукта.</p>

<p>Язык был разработан не вчера и поэтому немного старомоден. Но на нем написаны
мириады строк кода лидирующего на рынке продукта. Разные попытки &ldquo;заменить&rdquo;
язык на что-то &ldquo;более новое и современное&rdquo; и затем сконвертировать основную
кодовую базу, к счастью, не получили хода. Сейчас мы прекрасно компилируем
наш язык в Си, Яву и даже .NET, и очень, очень постепенно вносим крайне
взвешенные незначительные изменения в сам язык. И это работает удивительно
хорошо.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA["Introduction to 8080/8085 assembly language programming", Judi Fernandez, Ruth Ashley]]></title>
    <link href="http://demin.ws/blog/russian/2012/10/08/introduction-to-8080-8085-assembly-language-programming/"/>
    <updated>2012-10-08T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/10/08/introduction-to-8080-8085-assembly-language-programming/</id>
    <content type="html"><![CDATA[<p>Купил очень дешево на Амазоне старую книгу про программирование на ассемблере
для 8080-8085.</p>

<p><a href="http://www.amazon.co.uk/gp/product/0471080098/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=1634&amp;creative=6738&amp;creativeASIN=0471080098&amp;linkCode=as2&amp;tag=prodiy-21">Introduction to 8080-8085 Assembly Language Programming (Self-teaching Guides)</a><img src="http://www.assoc-amazon.co.uk/e/ir?t=prodiy-21&amp;l=as2&amp;o=2&amp;a=0471080098" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p><img src="http://demin.ws/images/covers/english/introduction-to-8080-8085-assembly-language-programming.jpg" alt="" />
</p>

<p>Резонный вопрос - для чего? Особенно в свете того, что за последний месяц
я с нуля переписал два эмулятора Intel 8080, один на С, второй на JavaScript.
Неужели у меня есть вопросы в понимании команд этого процессора?</p>

<p>Если честно, про эту книгу я просто слышал просто как о классном примере
учебника по ассемблеру, что-то в стиле нетленки Морера про ассемблер 6502 для
компьютеров Эппл. Можно было бы просто найти скан, ибо книга аж 1981 года, но
на Амазоне был ее бумажный вариант всего за 300р вместе с доставкой, Б/У,
разумеется.</p>

<p>Не знаю почему, но когда держу подобные книги в руках, то испытываю как-то
детский восторг, особенно от трогательно подрисованных пояснений,<br />
старомодных шрифтов набора кода и записей в форме перфокарт.</p>

<p><img src="http://demin.ws/images/blog/book/introduction-to-8080-8085-assmebly-language-programming/IMG_1069.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/book/introduction-to-8080-8085-assmebly-language-programming/IMG_1070.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/book/introduction-to-8080-8085-assmebly-language-programming/IMG_1071.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/book/introduction-to-8080-8085-assmebly-language-programming/IMG_1072.JPG" alt="" />
</p>

<p>А по сути книга действительно классная. Если вдруг, почему-то, вам захочется
изучить ассемблер 8080, но вы никогда о нем не слышали, да и о
программировании на ассемблере в целом, то эта книга как раз для этого.</p>

<p>Все начинается &ldquo;от печки&rdquo; в виде систем исчисления, и затем подробно
рассматриваются группы команд процессора и примеры применения &ndash; индексирования массивов, умножения/деление, двоично-десятичное представление,
концепция стека и т.д. В каждой главе есть набор мини-задачек и вопросов для
самопроверки.</p>

<p>Очень хорошая книга.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Современный Радио-86РК c 32КБ SRAM]]></title>
    <link href="http://demin.ws/blog/russian/2012/10/07/rk86-sram/"/>
    <updated>2012-10-07T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/10/07/rk86-sram/</id>
    <content type="html"><![CDATA[<p>Итак, после недель ожидания, пока доблестный Parcel Force таки соизволил
довести доставку до логического завершения, оно приехало:</p>

<p><img src="http://demin.ws/images/blog/rk86/sram/IMG_1040.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/rk86/sram/IMG_1042.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/rk86/sram/IMG_1043.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/rk86/sram/IMG_1044.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/rk86/sram/IMG_1045.JPG" alt="" />
</p>

<p>Вы уже догадались, что это за красавец?</p>

<p><img src="http://demin.ws/images/blog/rk86/sram/IMG_1046.JPG" alt="" />
</p>

<p>Да! Он самый!</p>

<p><img src="http://demin.ws/images/blog/rk86/sram/IMG_1047.JPG" alt="" />
</p>

<p>Купил я его <a href="http://zx-pk.ru/market/viewtopic.php?t=224">тут</a> непосредственно у автора.</p>

<p><img src="http://demin.ws/images/blog/rk86/sram/radio-86rk-sram-complete.jpg" alt="" />
</p>

<p>Мой экземпляр, кстати, собран на родных интеловских чипах, поэтому будет
интересно запустить <a href="http://www.idb.me.uk/sunhillow/8080.html">CPU Exerciser</a> и посмотреть, будет ли он отличаться по
результатам от КР580ВМ80A.</p>

<p>Я, конечно, не спец, но внешне плата спаяна классно, а в корпусе смотрится
вообще супер, за что автору большое спасибо.</p>

<p>Сам проект подробно описан тут - <a href="http://radio86rk.pbworks.com/">radio86rk.pbworks.com</a>.</p>

<p>На самом деле на сорока двух дюймах реально вставляет.</p>

<p><img src="http://demin.ws/images/blog/rk86/sram/IMG_1048.JPG" alt="" />
</p>

<p>Записал небольшой видос:</p>

<iframe width="640" height="360" src="https://www.youtube.com/embed/IP6sA-dAnmU" frameborder="0" allowfullscreen></iframe>

<p>Так как сейчас нет никакой возможности ничего залить на этот РК, обдумываю
способы коммуникации. Например, можно сделать эмулятор магнитной ленты, чтобы
файлы брались с карточки, например. Вот так, кстати, выглядит сигнал записи
на ленту.</p>

<p><img src="http://demin.ws/images/blog/rk86/sram/radio-86rk-tapeout.png" alt="" />
</p>

<p>В целом впечатления от проекта отличные. Единственное, что мне не очень
нравится &ndash; это реализация клавиатуры на микроконтроллере. Но увы &ndash; без
этого нельзя было бы использовать готовую PS/2, а пришлось бы собирать
&ldquo;родную&rdquo; на кнопках. Работы было бы больше, но однозначно добавило бы
проекту винтажности.</p>

<p>Я попробую что-нибудь замутить в качестве расширения для Монитора, благо
там стоит восьми килобайтная ППЗУ, поэтому сам Монитор можно не трогать.</p>

<p>Сразу скажу, что не буду отвечать на вопрос, сколько все это мне стоило. Ибо,
дорого. Особенно с учетом доставки в нашу деревню. Если интересно, то
связывайтесь с автором по ссылками ниже. Он продает и платы, и собранные
девайсы. Проблем с покупкой никаких не было &ndash; быстро и четко, так что
рекомендую.</p>

<p>Кстати, я все еще не оставляю надежды обзавестись &ldquo;родным&rdquo; старым РК,
собранным &ldquo;тогда&rdquo;.</p>

<h2>Ссылки</h2>

<ul>
<li><a href="http://radio86rk.pbworks.com/">Проект Радио-86РК SRAM</a></li>
<li><a href="http://zx-pk.ru/market/viewtopic.php?t=224">Купить/связаться с автором Радио-86РК SRAM</a></li>
<li><a href="http://zx.pk.ru/showthread.php?t=9294">Проект эмуляции клавиатур старых компьютеров</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Снова эмулятор Радио-86РК на JavaScript]]></title>
    <link href="http://demin.ws/blog/russian/2012/10/04/rk86-js/"/>
    <updated>2012-10-04T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/10/04/rk86-js/</id>
    <content type="html"><![CDATA[<p>Тесты, тесты, тесты. Прошлое, настоящее и будущее.</p>

<p>Когда я начинал проект эмулятора <a href="http://radio86.googlecode.com">Радио-86РК на JavaScript</a>
написание, собственно, модели процессора Intel 8080 (КР580ВМ80А)
было мучительной задачей. Конечно, в сравнении со современными
процессорами старичок 8080 выглядит как Жигули первой модели
перед новой БМВ. Но все равно, реализовать логику около двух
сотен команд с десятком регистров и при этом нигде не налажать
практически невозможно. Поэтому отладка выглядела так: делается
изменение, затем пробуется парочка программ для РК (в основном
игры), и если игра визуально не глючит, то значит все более
менее нормально.</p>

<p>Так я привел эмулятор примерно в работающее состояние, и
большинство программ для РК типа &ldquo;работали&rdquo;. Но, увы, после
завершения отладки, мне больше не хотелось трогать код эмуляции
процессора, так как перепроверка все была реально мучительной и
более того ненадежной. Но по-хорошему, код эмуляция нуждался
в доработках.</p>

<p>На следующем витке эмуляторного приступа, когда я решил
запустить <a href="http://demin.ws/blog/russian/2012/08/23/radio86-on-maximite/">РК на Maximite</a>,
я разыскал доступные тесты для Intel 8080, написанные на его же
собственном коде, и оформил их прямо в сборке стационарно.
В итоге проект эмулятора процессора отпочковался
в подпроект <a href="http://github.com/begoon/i8080-core">i8080-core</a>. Это чистый эмулятор Intel 8080,
непривязанный к конкретной аппаратуре. В процессе сборки
запускаются четыре теста, один из которых, <a href="http://www.idb.me.uk/sunhillow/8080.html">8080-8085 CPU Exerciser</a>,
является, пожалуй, единственным способ убедиться в &ldquo;похожести&rdquo;
эмулятора на реальный процессор. Он был адаптирован Вячеславом
Славинским в процессе работы над
<a href="http://code.google.com/p/vector06cc/">эмулятором компьютера Вектор на FPGA</a>.</p>

<p>Интересная особенность этого теста в том, что он не проверяет
поведение процессора по документации, а просто проводит
множество вычислений, задействуя как можно больше команд в как
можно большем количестве комбинаций, считает контрольную
сумму (CRC32) результат и сравнивает с эталонной. Эталонные значения
были изначально получены прогоном теста на реальном процессоре.</p>

<p>С одной стороны данный тест не дает точного места, где происходит
сбой, а просто говорит, например, что где-то в командах арифметики
что-то работает не так, поэтому контрольная сумма не совпадает.</p>

<p>В другой стороны этот тест позволяет сравнить реальное поведение
процессора, а не &ldquo;документированное&rdquo;, так как порой, как это
водится, есть недокументированное или плохо документированное
поведение.</p>

<p>Например, есть основные логические операции: OR, AND, XOR. Так как
это неарифметические операции, то флаг половинчатого переноса AC
(из младшей тетрады в старшую) просто обнуляется. Так написано
в документации. Но в реальности команда AND особенная. В ней
флаг AC устанавливается (внимание!) равным третьему биту
операции <strong>OR</strong> между аргументами команды, а не просто в ноль.
Данное поведение, все таки было задокументировано, но в более
поздней документации по 8085.</p>

<p>Или, например, в командах инкремента и сложения, тот же флаг AC
вычисляется как положено по документации. Но в командах декремента
и вычитания этот флаг имеет <strong>инвертированное</strong> значение!</p>

<p>В общем, много интересного, &ldquo;упущенного&rdquo; в официальной документации.</p>

<p>В итоге я использовал &ldquo;простые&rdquo; тесты для начальной минимальной
проверки, и затем CPU Exerciser для окончательной. Кстати,
на реальном процессоре при частоте 2MHz этот тест работает
около двух часов. Это не особо большая проблема для эмулятора на С,
но для версии на JavaScript может стать проблемой.</p>

<p>Итак, после внедрения тестов я мог уже корячить код эмулятора <a href="http://github.com/begoon/i8080-core">i8080-core</a>
без особых проблем, играясь с оптимизацией, структурой и т.д.</p>

<p>И вот я решил вернуться к эмулятору на JavaScript и проверить его
на тестах. Как я и предполагал, ни один из тестов полностью не
проходил.</p>

<p>Я попробовал править существующую реализацию, но в процессе
переписал код эмулятора 8080 практически заново, благо голова была
свежа после работы над <a href="http://github.com/begoon/i8080-core">i8080-core</a>. За пару дней я реализовал
все команды и прикрутил тесты. По ним я выловил все глюки, и теперь
<a href="http://github.com/begoon/i8080-js/">i8080-js</a> проходит все тесты, включая <a href="http://www.idb.me.uk/sunhillow/8080.html">8080-8085 CPU Exerciser</a>,
тем самым являясь реально точной репликой КР580ВМ80А.</p>

<p>В код эмулятора теперь разбит на компоненты (I8080, Memory, IO), что
позволяет его легко использовать для эмуляции конкретной аппаратуры.
Декодирование команд упрощено и теперь работает по принципу
дизассемблера.</p>

<p>Тестирование можно проводить прямо в браузере через JavaScript Console,
или с использованием интерпретаторов JavaScript V8 или SpiderMonkey,
работающих из командной строки. Второй способ предпочтительнее, так как
последний тест <a href="http://www.idb.me.uk/sunhillow/8080.html">8080-8085 CPU Exerciser</a> на V8 работает около получаса,
а на SpiderMonkey около трех часов.</p>

<p>Итак, код эмулятора i8080-js &ndash; <a href="http://github.com/begoon/i8080-js/">http://github.com/begoon/i8080-js/</a></p>

<p>Идем далее, эмулятор Радио-86РК. Я его тоже фактически переписал с нуля,
используя наработки от <a href="http://demin.ws/blog/russian/2012/08/23/radio86-on-maximite/">свежей версии на Maximite</a>.
<a href="http://demin.ws/blog/russian/2009/09/25/radio86rk-emulator-in-javascript/">Старая версия 0.6</a> все еще доступна,
но новый эмулятор (версия 1.0 и выше) теперь будет хоститься на GitHub&rsquo;е.</p>

<p>Код теперь также разбит на модули (UI, Screen, Keyboard, Memory, IO, Runner).
Большая монолитная HTML-страница теперь состоит из нескольких скриптов
и каталога с программами, которые загружаются динамически. Улучшена
работа клавиатурой.</p>

<p>Попробовать эмулятор в деле: <a href="http://demin.ws/rk">demin.ws/rk</a></p>

<p>Исходники на GitHub&rsquo;e: <a href="http://github.com/begoon/rk86-js/">http://github.com/begoon/rk86-js/</a></p>

<p>При отладке эмулятора был интересный эпизод, связанный, конечно,
с тестированием. После отладки эмулятора процессора я был уверен, что
в нем ошибок нет, ибо все тесты проходят. Более того, игровые программы,
на которых я обычно провожу визуальное тестирование, работают. Но вот
незадача &ndash; ни один из Бейсиков не работал. Все выводили на экран
мусор и висли. Путем трассировки я выяснил, что команда RST была
реализована неверно (адрес перехода вычислялся неправильно). Ни один
из тестов эту команду почему-то не проверяет, игровые программы не
используют, а вот Бейсики &ndash; практически все.</p>

<p>Итак, винтажный эмулятор Радио-86РК на JavaScript возвращается.
Обновляйте закладки &ndash; <a href="http://demin.ws/rk">demin.ws/rk</a></p>

<p>Впечатления и эмоции можно высказывать тут, ошибки и предложения лучше
сразу файлить в <a href="http://github.com/begoon/rk86-js/issues">трекер</a>:</p>

<p>Посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2012/08/23/radio86-on-maximite/">Радио-86РК на железе Maximite</a></li>
<li><a href="http://demin.ws/blog/russian/2009/09/25/radio86rk-emulator-in-javascript/">Эмулятор Радио-86РК на JavaScript</a> (первая версия)</li>
<li><a href="http://demin.ws/blog/russian/2009/11/08/radio86rk-emulator-in-javascript-updates/">Вести с полей эмулятора Радио-86РК на JavaScript</a> (первая версия)</li>
<li><a href="http://demin.ws/blog/russian/2012/09/09/sokoban-for-radio86rk/">Сокобан для Радио-86РК</a></li>
<li><a href="http://demin.ws/blog/russian/2012/09/23/pseudo-3d-demo-on-rk86/">Псевдо 3D-демо для Радио-86РК</a></li>
</ul>

<p>P.S. Не премяните заценить мой Сокобан (файл soroban.bin) и демку (файл rk86demo.bin).</p>

<p>P.P.S. Несколько скринов.</p>

<p><img src="http://demin.ws/images/blog/rk86/js/rk86js-chess.png" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/rk86/js/rk86js-sokoban.png" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/rk86/js/rk86js-volcano.png" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/rk86/js/rk86js-assembler.png" alt="" />
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Статистика изменений кода]]></title>
    <link href="http://demin.ws/blog/russian/2012/10/01/git-diff/"/>
    <updated>2012-10-01T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/10/01/git-diff/</id>
    <content type="html"><![CDATA[<p>Задача: узнать статистику по количеству строк кода, количеству добавленных
и удаленных срок, например, по годовым релизам. В git проблема решилась сразу
через <a href="http://www.kernel.org/pub/software/scm/git/docs/git-diff.html">git diff</a>.</p>

<pre><code>git diff --shortstat rel-2010 rel-2011
</code></pre>

<p>Выдает типа:</p>

<pre><code>12 files changed, 2462 insertions(+), 488 deletions(-)
</code></pre>

<p>Если у вас проект не в git, то можно быстренько загрузить в него версии,
требующие анализа.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Как правильно уничтожить банковскую карту]]></title>
    <link href="http://demin.ws/blog/russian/2012/09/29/how-to-destroy-banking-card-properly/"/>
    <updated>2012-09-29T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/09/29/how-to-destroy-banking-card-properly/</id>
    <content type="html"><![CDATA[<p>Хотите знать кучерявый способ уничтожить пластиковую карточку?</p>

<p><img src="http://demin.ws/images/blog/how-to-destroy-banking-card.jpg" alt="" />
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Реализация простого ядра Forth]]></title>
    <link href="http://demin.ws/blog/russian/2012/09/27/fcode/"/>
    <updated>2012-09-27T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/09/27/fcode/</id>
    <content type="html"><![CDATA[<p>Будучи по натуре, как говорится, a low-level guy, я не мог пропустить Форт по
жизни. Этот язык занимает интересную нишу: с одной стороны это вроде
высокоуровнего ассемблера, позволяющего писать практически на ассемблере,
а с другой стороны позволяет быстро строить из примитивов весьма
высокоуровневые интерактивные системы, даже с интроспекцией, при этом
оставаясь на адекватном уровне эффективности.</p>

<p>Знаю, что С - это начало всех начал, и при правильном использовании можно
писать очень близко по эффективности к ассемблеру. Но, все же есть еще
системы, где компилятору С сложно развернуться. Например, захотел я подыскать
компилятор С для Intel 8080, чтобы замутить небанальную программу для
Радио-86РК. Из реально собираемого я нашел только пару наследников
знаменитого <a href="http://en.wikipedia.org/wiki/Small-C">Small-C</a> &ndash; <a href="https://github.com/begoon/smallc-85">smallc-85</a> и <a href="https://github.com/begoon/smallc-scc3">smallc-scc3</a>.</p>

<p>Увы, для простейшей программы типа:</p>

<pre><code>main() {
  static char a;
  for (a = 1; a &lt; 10; ++a) {
     ++a;
  }
}
</code></pre>

<p>Генерируется адъ типа:</p>

<pre><code>;main() {
main:
;  static char a;
    dseg
?2: ds  1
    cseg
;  for (a = 1; a &lt; 10; ++a) {
    lxi h,?2
    push    h
    lxi h,1
    pop d
    call    ?pchar
?3:
    lxi h,?2
    call    ?gchar
    push    h
    lxi h,10
    pop d
    call    ?lt
    mov a,h
    ora l
    jnz ?5
    jmp ?6
?4:
    lxi h,?2
    push    h
    call    ?gchar
    inx h
    pop d
    call    ?pchar
    jmp ?3
?5:
;     ++a;
    lxi h,?2
    push    h
    call    ?gchar
    inx h
    pop d
    call    ?pchar
;  }
    jmp ?4
?6:
;}
?1:
    ret
</code></pre>

<p>Понятно, что много вопросов к компилятору, но в целом, Intel 8080 не очень
удобен для компилятора С: деления/умножения нет, косвенной адресации через
стек тоже нет и т.д.</p>

<p>Ладно, вернемся к Форту. В процессе обдумывания применения Форта для I8080
я написал удобный макро-ассемблер (но об этом будет отдельный пост) и попутно
вспомнил об одном своем старом проекте времен Фидо: F-CODE. В качестве
приема запутывания кода для защиты от отладчика я реализовывал мини-ядро Форта
с <a href="http://ru.wikipedia.org/wiki/%D0%A8%D0%B8%D1%82%D1%8B%D0%B9_%D0%BA%D0%BE%D0%B4">прямым шитым кодом</a>.</p>

<p>&ldquo;Реализовывал мини-ядро&rdquo;, конечно, звучит, круто, но в реальности
интерпретатор шитого кода просто тривиален:</p>

<pre><code>; F-Code Address Interpreter

GetNext$:       cld
                mov     si, IP$
                lodsw
                mov     IP$, si
                retn

CALLR$:         add     RP$, 2
                mov     bp, RP$
                mov     ax, IP$
                mov     [bp], ax
                pop     word ptr IP$
                next

RETR$:          mov     bp, RP$
                mov     ax, [bp]
                mov     IP$, ax
                sub     RP$, 2
                next

NEXT$:          call    GetNext$
                jmp     ax

osPush$:        call    GetNext$
                push    ax
                next

NEXT            MACRO
                jmp     NEXT$
                ENDM
</code></pre>

<p>Плюс несколько примитивов, реализованных также на ассемблере:</p>

<pre><code>; Adc  ( a b -&gt; c isCarry )
; if a+b&gt;FFFF isCarry = FFFF else isCarry=0

osAdc$:         pop     ax  dx          ; -&gt; a b
                add     ax, dx
                sbb     dx, dx
                push    ax  dx          ; c isCarry -&gt;
                NEXT

; osSwap ( a b -&gt; b a )

osSwap$:        pop      ax bx
                push     ax bx
                NEXT

; osRot ( a b c -&gt; b c a )

osRot$:         pop      ax bx cx
                push     bx ax cx
                NEXT

osPut$:         add     RP$, 2
                mov     bp, RP$
                pop     word ptr [bp]
                NEXT

osGet$:         mov     bp, RP$
                push    word ptr [bp]
                sub     RP$, 2
                NEXT

osDrop$:        add     sp, 2
                NEXT

; osNor ( a b -&gt; a NOR b )

osNor$:         pop     ax bx
                or      ax, bx
                not     ax
                push    ax
                NEXT

osTrap$:        int     3
                NEXT

; osPeek ( addr -&gt; value )

osPeek$:        pop     bx
                push    word ptr [bx]
                NEXT

; osPoke ( Value Addr -&gt; )

osPoke$:        pop     bx              ; -&gt; Value Addr
                pop     word ptr [bx]   ; -&gt;
                NEXT
</code></pre>

<p>И мы имеем полноценную стековую машину, на которой можно программировать.
Конечно, когда начинаешь диассемблировать шитный код или трассировать, то
надо думать, а иначе будут видны только бесконечные переходы туда-сюда.
Желающие могут попробовать поковыряться в файле <a href="https://github.com/begoon/fcode/blob/master/FCODE.COM">fcode.com</a>. Правда, это
досовский бинарь, и запускать его надо, например, под DOSBox. Программа
предлагает угадать пароль.</p>

<p>Вот, например, код для вычисления CRC на данной стековой машине:</p>

<pre><code>CalcCRC:        CALLR                 ; -&gt;
                ofPush  0             ; CRC
                ofPush  0             ; CRC 0
                ofPeekb Buffer+1      ; CRC 0 Size
                $For                  ; CRC
                    osI                   ; CRC i
                    ofPush  Buffer+2      ; CRC i Buffer+2
                    osAdd                 ; CRC Addr
                    osPeekb               ; CRC Value
                    osExch                ; CRC Value*256
                    $For    0, 8          ; CRC Value
                        osShl                 ; CRC Value*2 isCarry
                        osRot                 ; Value*2 isCarry CRC
                        osSwap                ; Value*2 CRC isCarry
                        osRcl                 ; Value*2 CRC*2 isCarry
                        $If &lt;&gt;0               ; Value*2 CRC*2
                            ofXor 8408h           ; Value*2 CRC*2^Const
                        $Endif
                        osSwap                ; CRC*2 Value*2
                    $Loop                   ; CRC Value*2
                    osDrop                ; CRC
                $Loop                 ; CRC
                RETR
</code></pre>

<p>Красиво?</p>

<p>В процессе работы над F-CODE родился примитивный препроцессор для ассемблера,
позволявший писать код типа:</p>

<pre><code> lea dx, msg2
 cmp bh, 3
 $if &lt;&gt;0
   lea dx, msg1
 $else
   hlt
 $endif

 cmp dx, 0C0DEh
 $if =0
   lea dx, msg2
 $endif

 mov cx, 2
 $Do
   $Do
   cmp ax, 1
   $EndDo =
   dec cx
 $EndDo Loop

 Store ds, si, ax
     $Do
       cmp al, 1
       $if &lt;&gt;0
         $ExitDo
       $endif
       Store ax, bx, cx, es, bp
         ...
       Restore
       $ContDo
     $EndDo Loop
 Restore
</code></pre>

<p>Как и все утилиты во времена ДОС, препроцессор был написан на старом добром
Турбо Паскале.</p>

<p>Понятно, что проект имеет чисто исторический интерес, хотя ничто не мешает
реализовать интерпретатор Форта хоть на JavaScript&rsquo;е, и использовать все
уже готовые примитивы как есть.</p>

<p>Весь проект F-CODE лежит на GitHub&rsquo;е &ndash; <a href="https://github.com/begoon/fcode">https://github.com/begoon/fcode</a>.
Для сборки нужны TASM/TLINK и Турбо Паскаль для препроцессора. Очевидно, что
надо все делать в ДОСе.</p>

<p>P.S. При всей низкоуровневости, народ пишет на Форте весьма кучерявые
программы. Например, <a href="http://www.nncron.ru/">nnbackup</a>, написан на Форте.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Псевдо 3D-демо для Радио-86РК]]></title>
    <link href="http://demin.ws/blog/russian/2012/09/23/pseudo-3d-demo-on-rk86/"/>
    <updated>2012-09-23T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/09/23/pseudo-3d-demo-on-rk86/</id>
    <content type="html"><![CDATA[<p>Писав <a href="http://demin.ws/blog/russian/2012/09/10/united-crackers-league/">пост про досовскую демку команды UCL</a>, я надеялся, что мне подскажут ее алгоритм. Увы,
сначала были только &ldquo;буу&rdquo; на Хабре, но вот
<a href="http://sensi.org/~svo/">Вячеслав Славинский</a> подогнал не просто алгоритм, а уже готовое решение.</p>

<p>Основные моменты <a href="https://github.com/begoon/rk86-3d-demo/blob/master/svo/wfloat.pde">реализации</a>:</p>

<ul>
<li>Формула &ldquo;волны&rdquo; (функция <a href="https://github.com/begoon/rk86-3d-demo/blob/63a4734c1bde9ea5ec93d90d9240303f70397751/svo/wfloat.pde#L32">z_offset</a>), по которой вычисляется координата Z.</li>
<li>Формула перспективы <a href="https://github.com/begoon/rk86-3d-demo/blob/63a4734c1bde9ea5ec93d90d9240303f70397751/svo/wfloat.pde#L58">zdiv</a> для перевода (X, Y, Z) в плоские координаты
экрана.</li>
<li>Пример работы с библиотекой <a href="http://processingjs.org/">Processing.js</a> для удобного моделирования 3D.
Если посмотреть <a href="https://github.com/begoon/rk86-3d-demo/blob/master/svo/wfloat.pde">исходник</a>, то это не совсем
JavaScript. В это типа Java c типами и отсутствием вольностей типа
опционального &ldquo;;&rdquo;.</li>
</ul>

<p>А вот <a href="http://demin.ws/projects/radio86/demo/svo/">демка в действии</a>.</p>

<p>Изучив ее вдоль и поперек, у меня возник план перенести ее на Радио-86РК.
Напомню: 1.78MHz, 32Кб памяти, символьный экран 78x30 или 156x60 через
псевдографику.</p>

<p>Для начала было интересно посмотреть, как могло бы выглядеть изображения
на экране РК. Например, <a href="http://demin.ws/projects/radio86/demo/static/">вот так</a> (не могу понять
почему, но надо нажать CTRL-R или F5 после перехода по ссылке, а иначе
только черный экран).</p>

<p><img src="http://demin.ws/images/blog/rk86/demo/rk86-demo-static.png" alt="" />
</p>

<p>В принципе, красиво, я решил продолжить. Взяв за основу исходник Вячеслава,
я добавил туда вывод в стиле РК символами псевдографики - 178x60.
<a href="http://demin.ws/projects/radio86/demo/156x60/java/index-float.html">Выглядит неплохо</a>.</p>

<p>Итак, идея работает. Надо думать, как это все потенциально писать на
8-битном ассемблере Intel 8080, где даже деления нет. Надо переводить все
в целые числа, а синус брать по таблице.
<a href="https://github.com/begoon/rk86-3d-demo/blob/master/156x60/java/wfloat-float.pde">Реализация с вещественными числами</a> немного поменялась, стала использовать
<a href="https://github.com/begoon/rk86-3d-demo/blob/master/156x60/java/wfloat.pde">табличный синус</a>. Несмотря на использование
только 128 целых значений синуса на всем интервале от 0 до 2*PI, к тому же
теперь домноженных на 256 и округленных в целое,
<a href="http://demin.ws/projects/radio86/demo/156x60/java/">выглядело тоже неплохо</a>
(случайно вышел забавный эффект в начале демки, когда буквы приезжают сзади).</p>

<p>Дальше надо было уже убирать библиотеку Processing.js, все переводить на
целые и желательно положительные числа. Для целочисленности я все домножил
на 256, а для положительности ввел смещение.
<a href="https://github.com/begoon/rk86-3d-demo/blob/master/156x60/js/index.html">Исходник</a>
уже становился все хуже и хуже, но все еще
<a href="http://demin.ws/projects/radio86/demo/156x60/js/">работал</a>.
Я везде по возможности упрощал константы и вставил проверки на
положительность переменных.</p>

<p>И вот родилась <a href="https://github.com/begoon/rk86-3d-demo/blob/master/156x60/i8080/rk86demo.asm">первая версия на ассемблере</a>, где можно было считать синус.
В качестве эксперимента я попробовал рисовать <a href="http://demin.ws/projects/radio86/demo/156x60/i8080/">синусоиду</a>.</p>

<p>Очевидно, что с такой производительностью полный кадр 156x60 она будет
считать полгода. Первый облом.</p>

<p>Решил я перейти в разрешение 78x30, просто символы, без псевдографики.
Сам исходник на JavaScript <a href="https://github.com/begoon/rk86-3d-demo/blob/master/78x30/js/demo.html">несильно поменялся</a>,
разве что константы. <a href="http://demin.ws/projects/radio86/demo/78x30/js/">Выглядело</a> тоже сносно.</p>

<p>Уже эту версию <a href="https://github.com/begoon/rk86-3d-demo/blob/master/78x30/i8080/pure/rk86demo.asm">я полностью реализовал на ассемблере 8080</a>.
Получился монструозный опус почти на тысячу строк.
А работал он <a href="http://demin.ws/projects/radio86/demo/78x30/i8080/pure/">вот так</a>&hellip; Второй облом.</p>

<p>Он отступать уж совсем поздно было, и я предпринял последнюю, хоть уже
немного &ldquo;нечистую&rdquo; попытку. С помощью <a href="https://github.com/begoon/rk86-3d-demo/blob/master/78x30/i8080/generator/demo.c">генератора на С</a>
я <a href="https://raw.github.com/begoon/rk86-3d-demo/master/78x30/i8080/frames/frames.log">записал все кадры</a> вместе с
<a href="https://github.com/begoon/rk86-3d-demo/blob/master/78x30/i8080/frames/frames.asm">разницей между соседними</a>. Сам же
<a href="https://github.com/begoon/rk86-3d-demo/blob/master/78x30/i8080/rk86demo.asm">плеер этого самопального MPEG&rsquo;а</a> был очень короткий.</p>

<p>В итоге - ОНО! (<a href="http://demin.ws/projects/radio86/demo/78x30/i8080/">на эмуляторе в браузере</a>)</p>

<p>И теперь уже на настоящем РК (почти настоящем):</p>

<iframe width="640" height="360" src="https://www.youtube.com/embed/kVNvI8KrrnM" frameborder="0" allowfullscreen></iframe>

<h2>Мораль</h2>

<p>Уметь найти в себе силы признавать бесперспективность той или иной
затей и вовремя остановиться.</p>

<h2>P.S.</h2>

<p>Исходники все этого мучения доступны - <a href="https://github.com/begoon/rk86-3d-demo/">https://github.com/begoon/rk86-3d-demo/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Загадка: что такое РОЛД?]]></title>
    <link href="http://demin.ws/blog/russian/2012/09/22/rold-quiz/"/>
    <updated>2012-09-22T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/09/22/rold-quiz/</id>
    <content type="html"><![CDATA[<p>Вопрос: что значит РОЛД?</p>

<p>Так как вопрос простой, то тут уж, как говорится, кто первый прочитал и
догадался, тот и папа. Попробуйте ответить на вопрос самостоятельно, без
гугла.</p>

<p>P.S. Кстати, <a href="http://demin.ws/about/">угадывание моего motto</a> хоть и закончено, но так как
ответ не публикуется, у вас все еще шанс подумать.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iPhone 5]]></title>
    <link href="http://demin.ws/blog/russian/2012/09/22/iphone5/"/>
    <updated>2012-09-22T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/09/22/iphone5/</id>
    <content type="html"><![CDATA[<p>Побывал сегодня в Apple Store. Там, как всегда, тусовка. Все прилипли к
iPhone 5.</p>

<p>Легче, тоньше, воздушнее, быстрее.</p>

<p><img src="http://demin.ws/images/blog/iphone5/IMG_0986.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/iphone5/IMG_0992.JPG" alt="" />
</p>

<p>Новый разъем, и наушники теперь снизу.</p>

<p><img src="http://demin.ws/images/blog/iphone5/IMG_0993.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/iphone5/IMG_0995.JPG" alt="" />
</p>

<p>Новый разъем (папа).</p>

<p><img src="http://demin.ws/images/blog/iphone5/IMG_0996.JPG" alt="" />
</p>

<p>Народ прилип к столам с айфоном.</p>

<p><img src="http://demin.ws/images/blog/iphone5/IMG_0997.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/iphone5/IMG_0998.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/iphone5/IMG_0999.JPG" alt="" />
</p>

<p>Кстати, новые 3D-карты в iOS6 &ndash; супер! Увы, на мой iPhone 4 (не S),
это не распространяется.</p>

<p><img src="http://demin.ws/images/blog/iphone5/IMG_0985.JPG" alt="" />
</p>

<p>Ну и традиционная проверка на правильном сайте.</p>

<p><img src="http://demin.ws/images/blog/iphone5/IMG_0984.JPG" alt="" />
</p>

<p>Пара слов.</p>

<p>Я хоть и сижу плотно на продуктах Apple, считаю себя все еще имеющим остатки
здравого смысла. Если какие-то вещи от Apple неудачные или совсем говно
(например, Magic Mouse), я радостно это признаю. Но братья! iPhone 5 &ndash; это
реальное инженерное и дизайнерское чудо. Можно ненавидеть Apple за их пафос
и понты, можно с ними судиться и даже выигрывать. Но! (например, Самсунг)
Пожалуйста! Произведите что-то хотя бы близкое, а не ваши лопатные
андроидофоны. И вы&hellip; займете место Apple!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Миниатюрные библиотеки для компрессии - miniz и minilzo]]></title>
    <link href="http://demin.ws/blog/russian/2012/09/18/miniz-minilzo/"/>
    <updated>2012-09-18T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/09/18/miniz-minilzo/</id>
    <content type="html"><![CDATA[<p>Для <a href="http://demin.ws/blog/russian/2012/08/23/radio86-on-maximite/">эмулятора Радио-86РК на Maximite</a> мне потребовалась
библиотека для сжатия.  У меня там есть виртуальный ROM-диск, а так как
файлов порядочно, около мегабайта в сумме, и так как у PIC32 только
512Кб флэша, я решил попробовать сжать данные в процессе сборки бинаря
и разжимать их налету уже внутри PIC&rsquo;а.</p>

<p>Итак, требования к библиотеке:</p>

<ul>
<li>одиночный исходник без зависимостей</li>
<li>использование для декомпрессии только статической памяти небольшого и
фиксированного размера (никаких глупостей типа malloc/calloc)</li>
<li>ANSI C (надо собирать микрочиповским компилятором XC32)</li>
</ul>

<p>Нашлось два кандидата:</p>

<ul>
<li><a href="http://code.google.com/p/miniz/">miniz</a> (реализует алгоритмы zlib и deflate)</li>
<li><a href="http://www.oberhumer.com/opensource/lzo/#minilzo">minilzo</a> (реализует алгоритм LZO)</li>
</ul>

<p>Обе библиотеки собрались без сучка и задоринки.  miniz дает на моих данных
0.78 сжатия, minilzo - 0.71.  Оба не дают вместить все в 512К.</p>

<p>В целом мне miniz понравился больше с точки зрения функциональности.  К тому
же эта библиотека вообще не требует дополнительной памяти для декомпрессии,
а использует только выходной буфер.  Для minilzo требуется статический
буфер на 16Кб.</p>

<p>P.S. Попробовал я еще <a href="http://tukaani.org/xz/embedded.html">XZ Embedded</a> (LZMA2).  Там, вроде по экспериментам
получалось сжать гораздо сильнее, но там требуется интерфейс malloc/free,
поэтому сходу собрать под PIC32 не получилось.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Buy Round: Мое второе приложение для iPhone]]></title>
    <link href="http://demin.ws/blog/russian/2012/09/16/buyround-app/"/>
    <updated>2012-09-16T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/09/16/buyround-app/</id>
    <content type="html"><![CDATA[<p>В Англии есть замечательная культура пабов. Не стоит путать паб с бездушным
американским баром. В отличие от бара, в пабе нет вышибал на входе и туда
можно ходить с семьей как в обычный ресторан с домашней едой. В пабе не бывает
тыц-тыц и стриптиза, хотя бывает очень шумно, особенно вечерами. В пабы
обычно ходят в местные, в пабах часто стоят камины и все помещение разделено
на уютные закутки.</p>

<p>Внимание! Беспрецедентный случай &ndash; даю несколько тематических ссылок из
своего нетехнического блога.</p>

<ul>
<li><a href="http://english-eggs.blogspot.co.uk/2010/09/pub-walk.html">Pub walk</a></li>
<li><a href="http://english-eggs.blogspot.co.uk/2010/08/blog-post_5624.html">Сидр</a></li>
<li><a href="http://english-eggs.blogspot.co.uk/2010/09/pub-time.html">Pub time</a></li>
</ul>

<p>В Англии при коллективном посещении пабов есть культура так называемых
раундов. Раунд - это когда один человек платит за напитки всей компании.
Посещение паба группой - это череда раундов. Самый массивный - это, конечно,
первый раунд. Каждый новый раунд обычно имеет нового владельца. Традиционно,
когда ты допил и хочешь еще &ndash; ты встаешь и спрашиваешь кто и чего будет.</p>

<p>Вот тут наступает момент, когда народ тебе начинает называть напитки.
У меня буфера хватает на 2-3 элемента, затем по схеме FIFO старые данные
теряются. Поэтому возникла идея приложения, в котором можно было бы
иметь список напитков, которые можно быстро объединять в группу.</p>

<p>Знаю, что есть мириады приложений, делающих что-то подобное. Но тут два
момента: приложение должно быть максимально быстрым и максимально простым.
К тому же мне хотелось написать ну хоть какой-то апп для айфона.</p>

<p>У меня родилось вот такое:</p>

<iframe width="640" height="360" src="https://www.youtube.com/embed/a4FnVG1qUwc" frameborder="0" allowfullscreen></iframe>

<p>Просто и кондово, зато решает задачу на 100%. Лично сам регулярно пользуюсь.
Увы, Apple Store &ldquo;завернул&rdquo; приложение как &ldquo;не имеющее достаточно
функциональности&rdquo;. Ну и ладно.</p>

<p>В процессе написания пришлось освоить следующие классы:</p>

<ul>
<li>UITabBarController для переключения между двумя табами.</li>
<li>UIViewController для работы с таблицами через делегаты
UITableViewDataSource и UITableViewDelegate</li>
<li>Сериализация объектов через NSKeyedArchiver для записи списка напитков
в файл (вещь!).</li>
</ul>

<p>Полностью собираемый проект лежит на GitHub&rsquo;е - <a href="https://github.com/begoon/buyround">https://github.com/begoon/buyround</a>.
Предлагается как учебный материал.</p>

<p>Да, как уже писал в рассказе про свое первое приложение <a href="http://demin.ws/blog/russian/2012/09/05/usvisa-my-first-iphone-app/">US Visa</a>,
для успеха мобильного приложения громадное значение имеет красивая
иконка. Я &ldquo;нашел&rdquo; вот такую, хотя по-хорошему надо рисовать свои.</p>

<p><img src="http://demin.ws/images/blog/buyround/beer-114x114.png" alt="" />
</p>

<p>P.S. Сейчас вот вообще отойду от нормы и приложу картинку, на которой видно,
в каких нечеловеческих условиях писался этот пост:</p>

<p><img src="http://demin.ws/images/blog/buyround/about-buyround.jpg" alt="" />
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Классическая игра "Karateka"]]></title>
    <link href="http://demin.ws/blog/russian/2012/09/15/karateka/"/>
    <updated>2012-09-15T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/09/15/karateka/</id>
    <content type="html"><![CDATA[<p>Риторическое начало: если вы никогда не играли в Каратеку, стоит это сделать.
Можно погуглить файл <code>karateka.dsk.gz</code> и загрузить его в эмулятор AppleWin.</p>

<p><img src="http://demin.ws/images/blog/karateka/karateka-screenshot-applewin.png" alt="" />
</p>

<p>Есть досовская версия. Увы, в ней геймплей искажен. Например, в эпловской
версии бойцы внутри дома сами не подходят, поэтому для атаки на них был
прием &ldquo;шажок вперед и два назад&rdquo;. В досовской же версии можно просто мочить
лоукиком, когда они приближаются.</p>

<p><img src="http://demin.ws/images/blog/karateka/karateka-screenshot.png" alt="" />
</p>

<p>Зато для досовской версии существует мой <a href="http://demin.ws/images/blog/karateka/KARATEKA.XCK">пачт</a>, еще со времен Фидо:</p>

<pre><code>Immortality
KARATEKA.EXE
00003066: 48 90
00003D7E: 48 90

Steel breast
KARATEKA.EXE
0000306E: 83 C6
0000306F: 3E 06
00003072: 3F 01
00003073: 7E 75

Flying kick for humans
KARATEKA.EXE
00002F30: 7E 00

Flying kick for bird
KARATEKA.EXE
00002E2F: 7F 00
00002E30: 01 00
00002E34: 3D 25
00002E35: 04 00
00002E44: 06 00

Kill bird by first kick
KARATEKA.EXE
000031BA: 85 33

Kill humans by first kick
KARATEKA.EXE
00002F3A: 85 33
</code></pre>

<p>С ним можно рубиться, например, так:</p>

<iframe width="480" height="360" src="https://www.youtube.com/embed/HjeuB6pxMzI" frameborder="0" allowfullscreen></iframe>

<p>Зацените, как в конце принцесса нещадно, но тщетно мочит вас ногой.</p>

<p>P.S. Увы и ах, исходников этой игры вроде бы нет, а жаль. Непонятно мне,
почему уже через столько нет нельзя их открыть.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Классическая игра "BOLO"]]></title>
    <link href="http://demin.ws/blog/russian/2012/09/10/bolo/"/>
    <updated>2012-09-10T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/09/10/bolo/</id>
    <content type="html"><![CDATA[<p>Если вы никогда не играли в BOLO, вам стоит это сделать. Рожденная для
Apple II, она, видимо, никогда не умрет. Вы управляете танком, ездите по
лабиринту и уничтожаете базы. Можно скачать эмулятор AppleWin, затем погуглить
файл &ldquo;bolo.dsk.gz&rdquo; и поиграть почти в оригинал.</p>

<p><img src="http://demin.ws/images/blog/bolo/bolo-screenshot-applewin.png" alt="" />
</p>

<p><a href="http://demin.ws/images/blog/bolo/BOLO.COM">Досовская реализация</a>, сделанная какими-то энтузиастами и являющаяся очень
точной репликой, прекрасно работает в DOSBox&rsquo;е:</p>

<pre><code>dosbox -exit BOLO.COM
</code></pre>

<p><img src="http://demin.ws/images/blog/bolo/bolo-screenshot.png" alt="" />
</p>

<p>Еще давно я сделал небольшой <a href="http://demin.ws/images/blog/bolo/BOLO.XCK">патч</a>, чтобы узнать, что будет в конце игры:</p>

<pre><code>Unlimited lives
BOLO.COM
00000174: 4F 00
00000178: DF 4A
00000179: FE FF

Unlimited fuel
BOLO.COM
00000A38: 06 04

Immortality &amp; pass through the walls
BOLO.COM
00000C61: 01 00
0000172D: 01 00
00001817: 01 00
</code></pre>

<p>Теперь можно играть вот так:</p>

<iframe width="480" height="360" src="https://www.youtube.com/embed/pcqygeYP4qs" frameborder="0" allowfullscreen></iframe>

<p>Увы, исходников игры, видимо нет и не будет, поэтому остается только ее
постепенно реверсить, благо, она написана на ассемблере, но все равно,
перенос игры на, например, SDL, нетривиален. Я знаю, есть много
переделок BOLO под Windows, но это все неоригинальные версии.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Демки из прошлого - United Crackers League (UCL)]]></title>
    <link href="http://demin.ws/blog/russian/2012/09/10/united-crackers-league/"/>
    <updated>2012-09-10T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/09/10/united-crackers-league/</id>
    <content type="html"><![CDATA[<p>Во времена расцвета сети Фидо, одной из многочисленных виртуальных групп была
так называемая United Craсkers League или UCL.</p>

<p>В сети как-то немного информации, разве что небольшое
<a href="http://bugtraq.ru/library/underground/ucl.html">интервью-рассказ</a>. Но сейчас немного о другом. Многие группы создавали
(и продолжают создавать) демо. Не все ж в дизассемблере сидеть, можно и
по программировать иногда.</p>

<p>У UCL тоже было несколько демок. У меня <a href="https://github.com/begoon/ucl-demos/">несколько сохранилось</a>. Прекрасно запускаются под dosbox&rsquo;ом.</p>

<p>Вот видео одной, на мой взгляд самой красивой. Произведения человека под
псевдонимом SkullC0Der.</p>

<iframe width="480" height="360" src="https://www.youtube.com/embed/n-egdB0lR-A" frameborder="0" allowfullscreen></iframe>

<p>Есть вопрос к спецам в компьютерной графике &ndash; объясните, пожалуйста, математическую модель преобразований для развивающихся флагом трех букв &ldquo;UCL&rdquo;?</p>

<p>Вроде каждый пиксель там как бы ездит по оси Z (уходящую внутрь экрана)
вперед и назад, а по отношению к соседним точкам там какой-то гармонический
закон. Но, увы, это только догадки, поэтому будут очень признателен
совет эксперта.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Сокобан для Радио-86РК]]></title>
    <link href="http://demin.ws/blog/russian/2012/09/09/sokoban-for-radio86rk/"/>
    <updated>2012-09-09T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/09/09/sokoban-for-radio86rk/</id>
    <content type="html"><![CDATA[<p>Все-таки я не удержался и решил воспользоваться уровнями для Сокобана,
<a href="http://demin.ws/blog/russian/2012/09/04/sokoban-maps/">выуженными из досовской программы &ldquo;pusher.exe&rdquo;</a>.
Сокобан было решено написать на ассемблере Intel 8080 и запустить на
Радио-86РК.</p>

<p>Знаю-знаю, зачем откапывать стюардессу, да еще и по второму разу и все такое,
но все же.</p>

<p>Тут все по-взрослому. Уровни лежат запакованные, и распаковываются на лету.</p>

<p>Конечно, исходник писался и компилировался не на РК, а туда заливался только
готовый бинарь. Это сильно упростило задачу. Хотя для полной аутентичности
надо было писать и ассемблировать на самом же РК. Как-нибудь в другой
раз.</p>

<p>Я, если честно, давно не писал на ассемблере что-то длиннее пары десятков
строк, поэтому сначала было странное ощущение. Потом вспомнилось, что
лучше в подпрограммах всегда сохранять регистры, не гнаться чрезмерной
компактностью кода (по крайней мере сначала), и все пошло на лад.</p>

<p>Ассемблер, особенно старый, где нет разных свистелок типа деления, заставляет
подумать о том, что реально требуется, и отбросить обобщения типа &ldquo;мне это
пригодится потом&rdquo;. Например, подпрограмма вывода аккумулятора в десятичном
виде. Так как значения могут быть только от 0 до 59 (00-3B), номер уровня,
я решил сделать кондово: посчитать сколько раз удастся вычесть 10 &ndash; это будет первая цифра, а результат перед последним вычитанием будет второй цифрой.</p>

<pre class="hl">
<span class="hl kwc">print_dec:</span>
  <span class="hl kwa">push</span> psw
  <span class="hl kwa">push</span> b
  mvi b<span class="hl opt">,</span> <span class="hl num">0</span>ffh
<span class="hl kwc">print_dec_loop:</span>
  inr b
  sui <span class="hl num">10</span>
  <span class="hl kwa">jp</span> print_dec_loop
  adi <span class="hl num">10</span>
  <span class="hl kwa">push</span> psw
  mvi a<span class="hl opt">,</span> <span class="hl str">'0'</span>
  <span class="hl kwa">add</span> b
  <span class="hl kwa">mov</span> c<span class="hl opt">,</span> a
  <span class="hl kwa">call</span> monitor_putchar
  <span class="hl kwa">pop</span> psw
  adi <span class="hl str">'0'</span>
  <span class="hl kwa">mov</span> c<span class="hl opt">,</span> a
  <span class="hl kwa">call</span> monitor_putchar
  <span class="hl kwa">pop</span> b
  <span class="hl kwa">pop</span> psw
  <span class="hl kwa">ret</span>
</pre>

<p><a href="https://github.com/begoon/rk86-maximite/blob/master/programs/sokoban/sokoban.asm">Исходник</a> лежит в составе проекта
&ldquo;<a href="https://github.com/begoon/rk86-maximite/">Эмулятор Радио-86РК на Maximite</a>&rdquo;. На нем же я записал небольшой видос.</p>

<iframe width="640" height="360" src="https://www.youtube.com/embed/VmIIt0_A6Vo" frameborder="0" allowfullscreen></iframe>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Анализатор цифровых сигналов Saleae Logic]]></title>
    <link href="http://demin.ws/blog/russian/2012/09/07/saleae-logic/"/>
    <updated>2012-09-07T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/09/07/saleae-logic/</id>
    <content type="html"><![CDATA[<p>Играясь с <a href="http://demin.ws/blog/russian/2012/07/04/gmc-4/">GMC-4</a> и обдумывая план создания
<a href="http://demin.ws/blog/russian/2012/07/25/gmc4-loader-assembled/">автоматического загрузчика</a>,
стало ясно, что одним тестером я не справлюсь в плане анализа работы
клавиатуры GMC-4. Возникла идея купить осциллограф. Брать &ldquo;настоящий&rdquo;
типа Rigol&rsquo;а как-то не срослось, а <a href="http://sensi.org/~svo/">Вячеслав Славинский</a> навел на вот
такой девайс: <a href="http://www.saleae.com/logic/">Saleae Logic</a>. Конечно, это НЕ осциллограф, а
несложный анализатор цифровых сигналов. И как раз то, что мне было нужно.
Понимает протоколы UART, SPI, I2C и т.д.</p>

<p>Цена вопроса была 128€ + 25.80€ НДС. Удобно было, что у них есть склад
в UK, поэтому доставка была бесплатной, быстрой и без таможни.</p>

<p>Изначально мой план был купить, поерзать немного и вернуть, ибо у них
четко сказано, что в течение месяца можно вернуть <strong>без объяснения причины</strong>.
Вот это, кстати, правильный и современный подход, и не будь этого условия,
я бы может и не купил бы.</p>

<p><img src="http://demin.ws/images/blog/saleae-logic/IMG_0530.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/saleae-logic/IMG_0531.JPG" alt="" />
</p>

<p>Оказалось, что это все на всего маленькая металлическая коробочка со
спичечный коробок.</p>

<p><img src="http://demin.ws/images/blog/saleae-logic/IMG_0532.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/saleae-logic/IMG_0534.JPG" alt="" />
</p>

<p>Комплектация</p>

<p><img src="http://demin.ws/images/blog/saleae-logic/IMG_0535.JPG" alt="" />
</p>

<p>Подключаем&hellip;</p>

<p><img src="http://demin.ws/images/blog/saleae-logic/IMG_0536.JPG" alt="" />
</p>

<p>В качестве теста я подцепил на последовательный порт Raspberry Pi,
по которому в данный момент телнетом сидел в консоли.</p>

<p><img src="http://demin.ws/images/blog/saleae-logic/IMG_0537.JPG" alt="" />
</p>

<p>Фрагмент захвата, где видно, что пролетает командочка <code>ls</code> по одному
проводу и эхом летит назад по другому.</p>

<p><img src="http://demin.ws/images/blog/saleae-logic/saleae-logic-analyser-ls-command.jpg" alt="" />
</p>

<p>Теперь клавиатура GMC-4. Она сделана по
<a href="http://www.learningaboutelectronics.com/Articles/How-does-a-matrix-keyboard-scanning-algorithm-work">классической схеме</a>, когда
по ножкам одного порта последовательно &ldquo;летает&rdquo; единичка, которая
&ldquo;выбирает&rdquo; номер текущего ряда кнопок, а со второго порта просто
считывается маска состояния кнопок выбранного ряда. Это позволяет
значительно сократить количество отведенных под обслуживание
клавиатуры ножек.</p>

<p><img src="http://demin.ws/images/blog/saleae-logic/gmc4-schematic.jpg" alt="" />
</p>

<p>А так как я собирался имитировать клавиатуру, мне надо было понять
временные параметры сканирующего сигнала. Подвесил я на анализ
все четыре сканирующих выхода и вот:</p>

<p><img src="http://demin.ws/images/blog/saleae-logic/saleae-logic-analyser-gmc4-keyboard.jpg" alt="" />
</p>

<p>Сразу видно, что к чему. При анализе можно измерять практически
все параметры сигнала, менять масштаб, сравнивать с предыдущими
замерами и т.д. На сайте <a href="http://www.saleae.com/logic/videos">есть видео в хорошем качестве</a>,
где все это подробно объясняется. У меня в электронике статус
дилетанта, так что меня вставило от простоты анализа, но тот же
товарищ Славинский говорит, что при анализе сложной цифровой схемы
бывает крайне удобно, если можно захватывать не один, не два, а
много сигналов одновременно.</p>

<p>Как вы уже поняли, возвращать девайс я не стал, хотя у меня была претензия
к ним. У меня не получилось делать захват на максимальной частоте
в 24MHz. Программа говорила, что девайс не успевает. Суппорт сказал,
что может быть это связано с конкретно моим USB-хабом, но я разное
перепробовал - проблема не исчезла. Они не отказывались ни разу
взять девайс назад, но я его не отдал. Уж больно он мне понравился,
и все мои текущие задачи он прекрасно решает.</p>

<h2>Итоги</h2>

<h3>Плюсы</h3>

<ul>
<li>Крайне прост в использовании.</li>
<li>Есть управляемые триггеры для начала захвата (по уровню, по фронту и т.д.).</li>
<li>8 или 16 каналов, в зависимости от модели, одновременного захвата.</li>
<li>100% money back в течение месяца, и вообще, у официальной поддержки
крайне человеческое лицо.</li>
</ul>

<h3>Минусы</h3>

<ul>
<li>Нет режима online-просмотра. Сначала делается захват, а потом результат
захвата можно просматривать, анализировать и т.д. Поэтому, не стоит ожидать
ощущения &ldquo;как на настоящем осциллографе&rdquo;.</li>
<li>У меня на Mac Air не получилось делает захват на максимальной частоте 24MHz.
Выглядело, будто не успевает по USB прокачивать данные на должной скорости.</li>
</ul>

<h3>Одним словом</h3>

<p>Рекомендую.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Один из моих старых институтских проектов - Матрицы]]></title>
    <link href="http://demin.ws/blog/russian/2012/09/06/matrix-project-mai/"/>
    <updated>2012-09-06T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/09/06/matrix-project-mai/</id>
    <content type="html"><![CDATA[<p>Наткнулся тут случайно на исходники проекта времен второго курса института.
Это была программа, демонстрирующая различные операции с матрицами. Почему-то
я тогда сделал две версии - графическую и текстовую.</p>

<p><img src="http://demin.ws/images/blog/institute/matrix/matrix1.png" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/institute/matrix/matrix2.png" alt="" />
</p>

<p>Заглянув в <a href="https://github.com/begoon/institute/">исходники</a>, я даже растрогался. Я сам себя удивил подробностью
комментариев и обилием приятного, хотя и мучительного в поддержке,
форматирования. Все ручками: графика, окна, мышка.</p>

<p>Для завершения путешествия в прошлое я даже записал два
небольших видео.</p>

<iframe width="480" height="360" src="https://www.youtube.com/embed/J4Sr_dTQmYo" frameborder="0" allowfullscreen></iframe>

<p>И текстовая версия:</p>

<iframe width="640" height="360" src="https://www.youtube.com/embed/mG4gIixIm90" frameborder="0" allowfullscreen></iframe>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Почтовые синонимы в Gmail]]></title>
    <link href="http://demin.ws/blog/russian/2012/09/06/gmail-aliases/"/>
    <updated>2012-09-06T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/09/06/gmail-aliases/</id>
    <content type="html"><![CDATA[<p>Оказывается, что если, допустим, у вас есть адрес на Gmail&rsquo;е, например,
<code>comrade@gmail.com</code>. Письма, отправленные на адрес <code>com.rade@gmail.com</code> также
придут на исходный адрес. Более того, аналогично для <code>c.o.m.r.a.d.e@gmail.com</code>.</p>

<p>Но это мало полезно. Есть возможность интереснее. Письма, отправленные
на:</p>

<ul>
<li><code>comrade+fred@gmail.com</code></li>
<li><code>comrade+john@gmail.com</code></li>
<li><code>comrade+peter@gmail.com</code>
&hellip;</li>
</ul>

<p>также будут доставлены на <code>comrade@gmail.com</code>. Это удобно, так как можно будет
настроить фильтр на этом ящике, и в зависимости от суффикса после знака <code>+</code>
переадресовывать письма кому-то.</p>

<p>Получается эдакая легкая пародия на собственный почтовый домен на Gmail.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[US Visa: Мое первое приложение для iPhone]]></title>
    <link href="http://demin.ws/blog/russian/2012/09/05/usvisa-my-first-iphone-app/"/>
    <updated>2012-09-05T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/09/05/usvisa-my-first-iphone-app/</id>
    <content type="html"><![CDATA[<h2>Почему, собственно?</h2>

<p>Имея Mac и iPhone, не попытаться написать мобильное приложение? Как-то неправильно. Благо тут подвернулась задачка, которая прекрасно легла в тему, как весьма полезная и в то же время не очень сложная в реализации. Итак, я погрузился в Objective-C и Cocoa.</p>

<h2>Disclaimer</h2>

<p>Прошу помнить, что не только мое первое приложение для iOS, но и первое приложение на Objective-C в принципе. Ни разу не претендую ни качество реализации, ни на эффективность, но хочу сказать, что получился весьма целостный несложный пример, который дает представление об Objective-C и разработке под iOS в целом. Особенно для тех, кто вообще этот язык не знает.</p>

<h2>Disclaimer 2</h2>

<p>Данный пост был изначально опубликован в виде статьи в журнале «The Pragmatic Bookshelf Magazine» на английском языке &ndash; <a href="http://pragprog.com/magazines/2012-09/us-visa-my-first-iphone-app/">US Visa: My First iPhone App</a>. Русская версия, публикуемая здесь, не является точным переводом журнальной версии, так как была написана как отдельный текст несколько позже.</p>

<h2>«Хьюстон! У нас проблема!»</h2>

<p>За последний год я несколько раз вынужден был подавать на американскую визу в посольстве в Лондоне. Каждый раз мне говорили, что конкретно в моем случае требуется «administrative processing». Документы то у тебя принимают, но потом вместо визы дают номерок (batch number) и говорят периодически заглядывать на их сайт, где есть PDF-ка, в которой по данному номеру следует искать указания, что делать дальше (досылать еще документы, посылать паспорт и т.д.). Нажимаешь на <a href="http://photos.state.gov/libraries/unitedkingdom/164203/cons-visa/admin_processing_dates.pdf">ссылку</a>, открывается файл, жмешь CTRL-F, вводишь номер (batch number) и вперед.</p>

<p>Возникла идея автоматизации &ndash; сделать приложение для айфона, в которое может вбить номер заявки один раз, и затем одним нажатием на кнопку получать статус обработки визы. Приложение должно уметь скачивать PDF файл, парсить его и вычленять данные по заявке.</p>

<h2>Что делать, если у меня Windows?</h2>

<p>Не все еще потеряно. Objective-C можно запустить на Windows через Cygwin или MinGW. Более того, проект <a href="http://www.gnustep.org/">GNUstep</a> дает возможность использовать библиотеки AppKit и Foundation для написания графических программ в Windows на Objective-C. Увы, я не буду погружаться столь глубоко в этой статье. Мы сделаем только приложение, работающее в командной строке. Оно будет уметь скачивать PDF и парсить его. Собрать приложение можно будет и на Windows, и на Маке. После, мы практически без изменений будем использовать модули этого приложения для создания полноценной программы для iOS. Но, увы, это уже только для владельцев Маков. Можно, конечно, Хакинтош на виртуалку поставить и гонять приложение на симуляторе айфона в Xcode, но вот загрузить его в реальный айфон вряд ли получится без настоящего Мака.</p>

<h2>Установка GNUstep под Windows</h2>

<p>Я нашел два великолепныx поста:</p>

<ul>
<li>«<a href="http://solarianprogrammer.com/2011/09/14/learn-objective-c-on-windows/">Learn Objective-C on Windows</a>» &ndash; Как поставить GNUstep и попробовать минимальное приложение.</li>
<li>«<a href="http://solarianprogrammer.com/2012/03/21/clang-objective-c-windows/">Clang and Objective-C on Windows</a>» &ndash; Как собрать свежий компилятор Clang под Windows. К сожалению, GCC, идущий на данный момент с GNUstep, не поддерживает уровня языка Objective-C, требуемого Apple&rsquo;ом. К тому же, Apple полностью переключился на Clang с некоторого времени. Так что, надо собирать Clang, так как установщика под Windows у него пока нет. Я просто следовал один в один инструкциям из поста, и все встало без проблем.</li>
</ul>

<h2>Неплохо было бы познакомиться с Objective-C и iOS API</h2>

<p>Я про Objective-C не знал ничего, кроме слухов о его необычном подходе к управлению памятью, поэтому пришлось пролистать следующие книжки.</p>

<p><strong>Предупреждение</strong>: <em>Ссылки снизу содержат мой личный номер партнерской программы с Амазоном. От возможных покупок, совершенных после перехода по этим ссылкам, я могу получить небольшой процент. Если вас это не устраивает, пожалуйста, не нажимайте на ссылки, или вручную «почистите» URL через cut-paste. Спасибо за понимание.</em></p>

<p>1. <a href="http://www.amazon.co.uk/gp/product/B007OWBAB0/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;tag=prodiy-21&amp;linkCode=as2&amp;camp=1634&amp;creative=6738&amp;creativeASIN=B007OWBAB0">iOS Programming: The Big Nerd Ranch Guide, 3/e (Big Nerd Ranch Guides)</a><img src="http://www.assoc-amazon.co.uk/e/ir?t=prodiy-21&amp;l=as2&amp;o=2&amp;a=B007OWBAB0" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p><a href="http://www.amazon.co.uk/gp/product/B007OWBAB0/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;tag=prodiy-21&amp;linkCode=as2&amp;camp=1634&amp;creative=6738&amp;creativeASIN=B007OWBAB0"><img border="0" src="http://ws.assoc-amazon.co.uk/widgets/q?_encoding=UTF8&amp;Format=_SL160_&amp;ASIN=B007OWBAB0&amp;MarketPlace=GB&amp;ID=AsinImage&amp;WS=1&amp;tag=prodiy-21&amp;ServiceVersion=20070822" ></a><img src="http://www.assoc-amazon.co.uk/e/ir?t=prodiy-21&amp;l=as2&amp;o=2&amp;a=B007OWBAB0" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p>2. <a href="http://www.amazon.co.uk/gp/product/0321706285/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;tag=prodiy-21&amp;linkCode=as2&amp;camp=1634&amp;creative=6738&amp;creativeASIN=0321706285">Objective-C Programming: The Big Nerd Ranch Guide (Big Nerd Ranch Guides)</a><img src="http://www.assoc-amazon.co.uk/e/ir?t=prodiy-21&amp;l=as2&amp;o=2&amp;a=0321706285" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p><a href="http://www.amazon.co.uk/gp/product/0321706285/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;tag=prodiy-21&amp;linkCode=as2&amp;camp=1634&amp;creative=6738&amp;creativeASIN=0321706285"><img border="0" src="http://ws.assoc-amazon.co.uk/widgets/q?_encoding=UTF8&amp;Format=_SL160_&amp;ASIN=0321706285&amp;MarketPlace=GB&amp;ID=AsinImage&amp;WS=1&amp;tag=prodiy-21&amp;ServiceVersion=20070822" ></a><img src="http://www.assoc-amazon.co.uk/e/ir?t=prodiy-21&amp;l=as2&amp;o=2&amp;a=0321706285" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p>3. <a href="http://www.amazon.co.uk/gp/product/B006GFZ288/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;tag=prodiy-21&amp;linkCode=as2&amp;camp=1634&amp;creative=6738&amp;creativeASIN=B006GFZ288">Programming in Objective-C (4th Edition) (Developer&rsquo;s Library)</a><img src="http://www.assoc-amazon.co.uk/e/ir?t=prodiy-21&amp;l=as2&amp;o=2&amp;a=B006GFZ288" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p><a href="http://www.amazon.co.uk/gp/product/B006GFZ288/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;tag=prodiy-21&amp;linkCode=as2&amp;camp=1634&amp;creative=6738&amp;creativeASIN=B006GFZ288"><img border="0" src="http://ws.assoc-amazon.co.uk/widgets/q?_encoding=UTF8&amp;Format=_SL160_&amp;ASIN=B006GFZ288&amp;MarketPlace=GB&amp;ID=AsinImage&amp;WS=1&amp;tag=prodiy-21&amp;ServiceVersion=20070822" ></a><img src="http://www.assoc-amazon.co.uk/e/ir?t=prodiy-21&amp;l=as2&amp;o=2&amp;a=B006GFZ288" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p>А еще есть один волшебный бесплатный документ &ndash;  «<a href="http://pierre.chachatelier.fr/programmation/fichiers/cpp-objc-en.pdf">From C++ to Objective-C</a>».</p>

<p>Итак, задача делится на три основные части:</p>

<ul>
<li>Парсер PDF</li>
<li>Скачивалка PDF (желательно ее сделать без привязки к интерфейсу)</li>
<li>Интерфейс под iOS</li>
</ul>

<p>После ознакомления с Objective-C, могу сказать, что для более менее опытного разработчика на C или C++, особенно, если есть опыт разработки UI (я в свое время много возился с Delphi/C++Builder), «въехать» в Objective-C и Cocoa несложно. Достаточно сфокусироваться на весьма необычной полу-ручной модели управления памятью (особенно после RAII в C++ и сборщика мусора в Java). Objective-C сам управляет памятью, но вот контроль за подсчетом ссылок на объекты для их правильного освобождения лежит на вас. Надо понять принцип, иначе утечки памяти неизбежны. У меня именно так и было в начале. Благо отличные инструменты профилировки в Xcode позволяют основные проблемы выявлять практически сразу.</p>

<p>Ниже я приведу несколько личных субъективных впечатлений, как новичка в Objective-C и Cocoa. Вряд ли это будет интересно, если вы уже имеете опыт в них, но вот если нет &ndash; думаю, будет интересно.</p>

<p>Для начала интересно посмотреть, как в Objective-C формируются имена функций-членов класса. Это почти как человеческий язык. Если я по-английски скажу «please, find a needle in a portion of some data and add the result to a list implemented as a mutable array», в Objective-C это будет:</p>

<pre class="hl">
<span class="hl opt">+ (</span><span class="hl kwb">bool</span><span class="hl opt">)</span>findInPortion<span class="hl opt">:(</span>NSMutableData <span class="hl opt">*)</span>someData 
               needle<span class="hl opt">:(</span>NSString<span class="hl opt">*)</span>aNeedle
             andAddTo<span class="hl opt">:(</span>NSMutableArray<span class="hl opt">*)</span>aList <span class="hl opt">{</span>
   ...
<span class="hl opt">}</span>
</pre>

<p>Если прочитать этот код слева направо сверху вниз, то получается почти полноценное предложение. Формально, полное имя этого метода - <code>findInPortion:needle:andAddTo:</code>. Аргументы именованы, и их имена являются частью полного имени метода. Если правильно давать имена переменных аргументов (<code>someData</code>, <code>aNeedle</code> and <code>aList</code>), то можно фактически писать по-английски. Конечно, это все довольно «многословный» подход, но фантастическая система предсказания в Xcode при наборе кода позволяет быстро и просто набивать все эти обороты. Обратите внимание также, что традиционное выравнивание при разбивке длинных строк происходит по двоеточию, разделяющему формальное имя параметра от переменной, его представляющей.</p>

<p>В Objective-C нетрадиционный синтаксис для вызова методов. Например, вместо:</p>

<pre class="hl">
NSMutableArray<span class="hl opt">*</span> list <span class="hl opt">=</span> NSMutableArray.alloc.init<span class="hl opt">;</span>
</pre>

<p>пишется:</p>

<pre class="hl">
NSMutableArray<span class="hl opt">*</span> list <span class="hl opt">= [[</span>NSMutableArray alloc<span class="hl opt">]</span> init<span class="hl opt">];</span>    
</pre>

<p>Выглядит странно, но это вопрос привычки. Опять таки, система предсказания кода при вводе позволяет вводить квадратные скобки даже почти физически не набивая их.</p>

<p>Objective-C и Cocoa используют активно несколько шаблонов программирования, которые просто необходимо освоить. Например, делегаты. Они везде в Cocoa. Делегат &ndash; это класс, содержащий в себе обратные вызовы. Вместе передачи пачки отдельных функций или методов, просто передается один объект, реализующий все требуемые обратные вызовы. Например, я использовал стандартный класс <a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/nsurlconnection_Class/Reference/Reference.html">NSURLConnection</a> для скачивания PDF&rsquo;ки. Этот класс требует предоставление ему делегата <a href="https://developer.apple.com/library/mac/#documentation/Foundation/Reference/NSURLConnectionDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intf/NSURLConnectionDelegate">NSURLConnectionDelegate</a>, методы которого вызываются при различных событиях в процессе скачивания.</p>

<p>Итак, пара недель вечерних бдений за книгами, и я набросал остов моего первого приложения. Но это была только первая часть марлезонского балета. Далее надо было разобраться с форматом PDF.</p>

<h2>Парсер PDF</h2>

<p>Как уже было сказано, файл, содержащий информацию из посольства, в формате PDF. Описание этого формата доступно на <a href="http://www.adobe.com/devnet/pdf/pdf_reference_archive.html">сайте Adobe</a>. Я использовал документ «<a href="http://wwwimages.adobe.com/www.adobe.com/content/dam/Adobe/en/devnet/pdf/pdfs/pdf_reference_archives/PDFReference.pdf">PDF Reference third edition, Version 1.4</a>».</p>

<p>Разбор PDF у меня реализован весьма кондово. Так как данные приходят порциями, то мы будем анализировать документ по частям, последовательно. Каждую новую порцию данных добавляем в буфер и пытаемся в нем разобрать формат PDF. Сначала ищем фрагменты, обрамленные в маркеры <code>stream</code> и <code>endstream</code>. Содержимое каждого такого блока «разжимаем» через <code>zlib/inflate</code>. После это уже чистый текст, и мы в нем ищем наш batch number, конечно, с учетом языка разметки PDF. Если номер обнаружен, то печатаем его и переходим к следующему блоку.</p>

<p>Основные шаги парсера:</p>

<p>1. Если в данных, принятых на текущий момент, есть блок, ограниченных тегами <code>stream\r\n</code> и <code>endstream\r\n</code>, то вырезаем его из буфера и «разжимаем» через <code>zlib/inflate</code>.</p>

<p>2. Разжатый на первом шаге блок являет текстовым. Нам надо найти в нем фрагменты, обрамленные тегами <code>BT\r\n</code> (Begin Text) и <code>ET\r\n</code> (End Text). Находим все такие блоки и объединяем их в список строк.</p>

<p>3. Внутри каждой строки, найденной на шаге 2, удаляем подстроки, неокруженные круглыми скобками. Все что вокруг круглых скобок &ndash; это служебная информация, и она нам не нужна.</p>

<p>4. Итак, мы вычленили чистый текст из PDF&rsquo;ки. Логически информация в этом файле организована в виде таблицы с тремя колонками: номер заявки (batch number), статус и дата. Увы, среди этого еще попадаются колонтитулы страниц. Чтобы их отсеить, мы будем смотреть, что если текущая строка выглядит как batch number (11 цифр), то за ней обязательно идет строка-статус и строка-даты. Берем их и снова ждем нового batch number&rsquo;а.</p>

<p>Как я уже сказал, разбор заточен под конкретный файл, и если в посольстве его изменят, то все сломается. Если хотя бы использовать регулярные выражения, то будет гораздо гибче, но я оставлю это читателям на самостоятельную проработку.</p>

<p><strong>ДОПОЛНЕНИЕ</strong>. В процессе работы над статьей, появилась идея сделать специальный веб-сервис, обращаясь к которому по простым URL&rsquo;ам можно получать данные о заявке, а вся «кухня» по разбору PDF&rsquo;ки происходит «на облаке». В журнале Dr.Dobb&rsquo;s недавно вышла моя статья - <a href="http://www.drdobbs.com/cloud/restful-web-service-in-go-powered-by-the/240006401">RESTful Web Service in Go Powered by the Google App Engine</a>, описывающая данный подход. Желающие могут «допилить» приложение для работы через этот веб-сервис. Можно вообще сделать хитро: сначала обратиться к веб-сервису, и если от него есть ответ, то на этом закончить, а если нет &ndash; запустить процедуру самостоятельного скачивания и разбора PDF&rsquo;ки.</p>

<h2>Приложение для командной строки</h2>

<p>Итак, мы знаем почти все, чтобы написать приложение, которое будет скачивать PDF и вычленять из него информацию по нашей заявке. Приложение будет работать из командной строки. Его можно будет собрать из на Маке, и на Windows через GNUstep и Clang. Далее, исходные файлы этого приложения будут использоваться без изменений для версии под iOS.</p>

<p>Файлы:</p>

<ul>
<li><code>BatchPDFParser.m</code> (и <code>.h</code>) &ndash; PDF-парсер.</li>
<li><code>NSURLConnectionDirectDownload.m</code> (и <code>.h</code>) &ndash; Скачивалка. Тут «обвеска» для <code>NSURLConnection</code> (инициализация, делегаты, цикл обработки событий).</li>
<li><code>DirectDownloadDelegate.m</code> (и <code>.h</code>) &ndash; Делегат для <code>NSURLConnection</code>, принимающий вызовы в различные моменты скачивания.</li>
<li><code>ViewController.m</code> &ndash; прототип ViewController. Это «прослойка» между скачивалкой и будущим графическим интерфейсом. В OSX и iOS используется концепция MVC (Model-View-Controller). «Контроллер» обеспечивает связь между элементами интерфейса и бизнес-логикой приложения. Текущий контроллер в основном содержит заглушки, которые будут реализованы в полной графической версии.</li>
<li><code>main-cli.m</code> &ndash; Точка входа.</li>
</ul>

<h3>BatchPDFParser.h</h3>

<p>Этот файл содержит объявление класса <code>Batch</code>, содержащего информацию об обновлении статуса заявки, и класса <code>BatchPDFParser</code>, который реализует метод <code>findInPortion:needle:andAddTo:</code> (кстати, это статический метод класса, видите <code>+</code> начале строки?).</p>

<pre class="hl">
<span class="hl kwc">&#64;interface</span> Batch<span class="hl opt">:</span> NSObject <span class="hl opt">{</span>
  NSString <span class="hl opt">*</span>batchNumber<span class="hl opt">, *</span>status<span class="hl opt">, *</span>date<span class="hl opt">;</span>
<span class="hl opt">}</span>
<span class="hl kwc">&#64;property</span> <span class="hl opt">(</span>atomic<span class="hl opt">,</span> copy<span class="hl opt">)</span> NSString<span class="hl opt">*</span> batchNumber<span class="hl opt">, *</span>status<span class="hl opt">, *</span>date<span class="hl opt">;</span>
<span class="hl kwc">&#64;end</span>

<span class="hl kwc">&#64;interface</span> BatchPDFParser<span class="hl opt">:</span> NSObject

<span class="hl opt">+ (</span><span class="hl kwb">bool</span><span class="hl opt">)</span>findInPortion<span class="hl opt">:(</span>NSMutableData <span class="hl opt">*)</span>data needle<span class="hl opt">:(</span>NSString<span class="hl opt">*</span> <span class="hl kwb">const</span><span class="hl opt">)</span>needle andAddTo<span class="hl opt">:(</span>NSMutableArray<span class="hl opt">*)</span>list<span class="hl opt">;</span>

<span class="hl kwc">&#64;end</span>
</pre>

<h3>BatchPDFParser.m</h3>

<p>В этом файле реализация парсера PDF.</p>

<pre class="hl">
<span class="hl ppc">#import &lt;Foundation/Foundation.h&gt;</span>
<span class="hl ppc">#import</span> <span class="hl pps">&quot;BatchPDFParser.h&quot;</span><span class="hl ppc"></span>
<span class="hl ppc">#import</span> <span class="hl pps">&quot;zlib.h&quot;</span><span class="hl ppc"></span>

<span class="hl kwc">&#64;implementation</span> Batch
<span class="hl kwc">&#64;synthesize</span> batchNumber<span class="hl opt">,</span> status<span class="hl opt">,</span> date<span class="hl opt">;</span>

<span class="hl opt">- (</span><span class="hl kwb">void</span><span class="hl opt">)</span> dealloc <span class="hl opt">{</span>
    <span class="hl opt">[</span>batchNumber release<span class="hl opt">];</span>
    <span class="hl opt">[</span>status release<span class="hl opt">];</span>
    <span class="hl opt">[</span>date release<span class="hl opt">];</span>
    <span class="hl opt">[</span><span class="hl kwa">super</span> dealloc<span class="hl opt">];</span>
<span class="hl opt">}</span>
<span class="hl kwc">&#64;end</span>

<span class="hl kwc">&#64;implementation</span> BatchPDFParser
</pre>

<p>Метод <code>findInData:fromOffset:needle:</code> ищет подстроку в данном блоке данных (типа <code>strstr()</code>). Поиск примитивный, и его можно ускорить, например, реализовав алгоритм КМП.</p>

<pre class="hl">
<span class="hl opt">+ (</span><span class="hl kwb">int</span><span class="hl opt">)</span> findInData<span class="hl opt">:(</span>NSMutableData <span class="hl opt">*)</span>data fromOffset<span class="hl opt">:(</span><span class="hl kwb">size_t</span><span class="hl opt">)</span>offset needle<span class="hl opt">:(</span><span class="hl kwb">char const</span> <span class="hl opt">*</span> <span class="hl kwb">const</span><span class="hl opt">)</span>needle <span class="hl opt">{</span>
    <span class="hl kwb">int const</span> needleSize <span class="hl opt">=</span> <span class="hl kwd">strlen</span><span class="hl opt">(</span>needle<span class="hl opt">);</span>
    <span class="hl kwb">char const</span><span class="hl opt">*</span> <span class="hl kwb">const</span> bytes <span class="hl opt">= [</span>data mutableBytes<span class="hl opt">];</span>
    <span class="hl kwb">int const</span> bytesLength <span class="hl opt">= [</span>data length<span class="hl opt">] -</span> needleSize<span class="hl opt">;</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> bytesLength<span class="hl opt">;) {</span>
        <span class="hl kwb">char const</span><span class="hl opt">*</span> <span class="hl kwb">const</span> current <span class="hl opt">=</span> <span class="hl kwd">memchr</span><span class="hl opt">(</span>bytes <span class="hl opt">+</span> i<span class="hl opt">,</span> needle<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">],</span> bytesLength <span class="hl opt">-</span> i<span class="hl opt">);</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>current <span class="hl opt">==</span> NULL<span class="hl opt">)</span> <span class="hl kwa">return</span> <span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">;</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">memcmp</span><span class="hl opt">(</span>current<span class="hl opt">,</span> needle<span class="hl opt">,</span> needleSize<span class="hl opt">) ==</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">return</span> current <span class="hl opt">-</span> bytes<span class="hl opt">;</span>
        i <span class="hl opt">=</span> current <span class="hl opt">-</span> bytes <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return</span> <span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Метод <code>isBatchNumber:number:</code> проверяет, является ли строка номером заявки (batch number):</p>

<pre class="hl">
<span class="hl opt">+ (</span><span class="hl kwb">bool</span><span class="hl opt">)</span> isBatchNumber<span class="hl opt">:(</span>NSString<span class="hl opt">*)</span>number <span class="hl opt">{</span>
    <span class="hl kwb">long long const</span> value <span class="hl opt">= [</span>number longLongValue<span class="hl opt">];</span>
    <span class="hl kwa">return</span> value <span class="hl opt">&gt;=</span> <span class="hl num">20000000000L</span> <span class="hl opt">&amp;&amp;</span> value <span class="hl opt">&lt;</span> <span class="hl num">29000000000L</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Метод <code>findBatchNumberInChunk:needle:andAddTo:</code> ищет фрагменты, обрамленные тегами <code>BT</code> и <code>ET</code>. В них выделяет текст в круглых скобках, и уже среди найденного выделяет конкретно номер заявки, строку-статус и строку-дату.</p>

<pre class="hl">
<span class="hl opt">+ (</span><span class="hl kwb">bool</span><span class="hl opt">)</span> findBatchNumberInChunk<span class="hl opt">:(</span><span class="hl kwb">char const</span><span class="hl opt">*)</span>chunk needle<span class="hl opt">:(</span>NSString<span class="hl opt">*)</span>needle andAddTo<span class="hl opt">:(</span>NSMutableArray<span class="hl opt">*)</span>list <span class="hl opt">{</span>
    <span class="hl kwb">enum</span> <span class="hl opt">{</span>
        waitBT<span class="hl opt">,</span> waitText<span class="hl opt">,</span> insideText
    <span class="hl opt">}</span> state <span class="hl opt">=</span> waitBT<span class="hl opt">;</span>
    <span class="hl kwb">enum</span> <span class="hl opt">{</span>
        waitBatchNumber<span class="hl opt">,</span> waitStatus<span class="hl opt">,</span> waitDate
    <span class="hl opt">}</span> batchParserState <span class="hl opt">=</span> waitBatchNumber<span class="hl opt">;</span>
    NSMutableString<span class="hl opt">*</span> line <span class="hl opt">= [[</span>NSMutableString alloc<span class="hl opt">]</span> init<span class="hl opt">];</span>
    Batch<span class="hl opt">*</span> batch <span class="hl opt">=</span> <span class="hl kwa">nil</span><span class="hl opt">;</span>
    <span class="hl kwb">bool</span> found <span class="hl opt">=</span> NO<span class="hl opt">;</span>
    <span class="hl kwa">while</span> <span class="hl opt">(*</span>chunk<span class="hl opt">) {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>state <span class="hl opt">==</span> waitBT<span class="hl opt">) {</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>chunk<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] ==</span> <span class="hl str">'B'</span> <span class="hl opt">&amp;&amp;</span> chunk<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] ==</span> <span class="hl str">'T'</span><span class="hl opt">) {</span>
                state <span class="hl opt">=</span> waitText<span class="hl opt">;</span>
                <span class="hl opt">[</span>line deleteCharactersInRange<span class="hl opt">:</span><span class="hl kwd">NSMakeRange</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">, [</span>line length<span class="hl opt">])];</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>state <span class="hl opt">==</span> waitText<span class="hl opt">) {</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>chunk<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] ==</span> <span class="hl str">'('</span><span class="hl opt">) {</span>
                state <span class="hl opt">=</span> insideText<span class="hl opt">;</span>
            <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>chunk<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] ==</span> <span class="hl str">'E'</span> <span class="hl opt">&amp;&amp;</span> chunk<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] ==</span> <span class="hl str">'T'</span><span class="hl opt">) {</span>
                <span class="hl kwa">if</span> <span class="hl opt">(</span>batchParserState <span class="hl opt">==</span> waitBatchNumber<span class="hl opt">) {</span>
                    <span class="hl kwa">if</span> <span class="hl opt">([</span><span class="hl kwa">self</span> isBatchNumber<span class="hl opt">:</span>line<span class="hl opt">]) {</span>
                        <span class="hl opt">[</span>batch autorelease<span class="hl opt">];</span>
                        batch <span class="hl opt">= [[</span>Batch alloc<span class="hl opt">]</span> init<span class="hl opt">];</span>
                        batch.batchNumber <span class="hl opt">=</span> line<span class="hl opt">;</span>
                        batchParserState <span class="hl opt">=</span> waitStatus<span class="hl opt">;</span>
                    <span class="hl opt">}</span>
                <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>batchParserState <span class="hl opt">==</span> waitStatus<span class="hl opt">) {</span>
                    batch.status <span class="hl opt">=</span> line<span class="hl opt">;</span>
                    batchParserState <span class="hl opt">=</span> waitDate<span class="hl opt">;</span>
                <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>batchParserState <span class="hl opt">==</span> waitDate<span class="hl opt">) {</span>
                    batch.date <span class="hl opt">=</span> line<span class="hl opt">;</span>
                    batchParserState <span class="hl opt">=</span> waitBatchNumber<span class="hl opt">;</span>
                    <span class="hl kwa">if</span> <span class="hl opt">([</span>batch.batchNumber isEqualToString<span class="hl opt">:</span>needle<span class="hl opt">]) {</span>
                        NSString<span class="hl opt">*</span> pair <span class="hl opt">= [</span>NSString stringWithFormat<span class="hl opt">:</span>&#64;<span class="hl str">&quot;%&#64;</span><span class="hl esc">\n</span><span class="hl str">%&#64;&quot;</span><span class="hl opt">,</span> batch.status<span class="hl opt">,</span> batch.date<span class="hl opt">];</span>
                        <span class="hl opt">[</span>list addObject<span class="hl opt">:</span>pair<span class="hl opt">];</span>
                        <span class="hl kwd">NSLog</span><span class="hl opt">(</span>&#64;<span class="hl str">&quot;Found match: '%&#64;' '%&#64;' '%&#64;'&quot;</span><span class="hl opt">,</span> batch.batchNumber<span class="hl opt">,</span> batch.status<span class="hl opt">,</span> batch.date<span class="hl opt">);</span>
                        found <span class="hl opt">=</span> YES<span class="hl opt">;</span>
                    <span class="hl opt">}</span>
                <span class="hl opt">}</span>
                <span class="hl opt">[</span>line autorelease<span class="hl opt">];</span>
                line <span class="hl opt">= [[</span>NSMutableString alloc<span class="hl opt">]</span> init<span class="hl opt">];</span>
                state <span class="hl opt">=</span> waitBT<span class="hl opt">;</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>state <span class="hl opt">==</span> insideText<span class="hl opt">) {</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>chunk<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] ==</span> <span class="hl str">')'</span><span class="hl opt">) {</span>
                state <span class="hl opt">=</span> waitText<span class="hl opt">;</span>
            <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
                <span class="hl kwb">char const</span> c<span class="hl opt">[</span><span class="hl num">2</span><span class="hl opt">] = {</span> chunk<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">],</span> <span class="hl num">0</span> <span class="hl opt">};</span>
                <span class="hl opt">[</span>line appendString<span class="hl opt">:[</span>NSString stringWithUTF8String<span class="hl opt">:&amp;</span>c<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]]];</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span>
        chunk <span class="hl opt">+=</span> <span class="hl num">1</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl opt">[</span>line release<span class="hl opt">];</span>
    <span class="hl opt">[</span>batch release<span class="hl opt">];</span>
    <span class="hl kwa">return</span> found<span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Теперь главный метод <code>findInPortion:needle:andAddTo:</code>. Тут выделяются куски, обрамленные тегами <code>stream\r\n</code> и <code>endstream\r\n</code>, содержимое разжимается через <code>zlib/inflate</code> и передается в <code>findBatchNumberInChunk:needle:andAddTo:</code> на анализ.</p>

<pre class="hl">
<span class="hl opt">+ (</span><span class="hl kwb">bool</span><span class="hl opt">)</span>findInPortion<span class="hl opt">:(</span>NSMutableData <span class="hl opt">*)</span>portion needle<span class="hl opt">:(</span>NSString<span class="hl opt">*)</span>needle andAddTo<span class="hl opt">:(</span>NSMutableArray<span class="hl opt">*)</span>list <span class="hl opt">{</span>
    <span class="hl kwb">static char const</span><span class="hl opt">*</span> <span class="hl kwb">const</span> streamStartMarker <span class="hl opt">=</span> <span class="hl str">&quot;stream</span><span class="hl esc">\x0d\x0a</span><span class="hl str">&quot;</span><span class="hl opt">;</span>
    <span class="hl kwb">static char const</span><span class="hl opt">*</span> <span class="hl kwb">const</span> streamStopMarker <span class="hl opt">=</span> <span class="hl str">&quot;endstream</span><span class="hl esc">\x0d\x0a</span><span class="hl str">&quot;</span><span class="hl opt">;</span>
    <span class="hl kwb">bool</span> found <span class="hl opt">=</span> <span class="hl kwa">false</span><span class="hl opt">;</span>
    <span class="hl kwa">while</span> <span class="hl opt">(</span><span class="hl kwa">true</span><span class="hl opt">) {</span>
        <span class="hl kwb">int const</span> beginPosition <span class="hl opt">= [</span><span class="hl kwa">self</span> findInData<span class="hl opt">:</span>portion fromOffset<span class="hl opt">:</span><span class="hl num">0</span> needle<span class="hl opt">:</span>streamStartMarker<span class="hl opt">];</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>beginPosition <span class="hl opt">== -</span><span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">break</span><span class="hl opt">;</span>
        <span class="hl kwb">int const</span> endPosition <span class="hl opt">= [</span><span class="hl kwa">self</span> findInData<span class="hl opt">:</span>portion fromOffset<span class="hl opt">:</span>beginPosition needle<span class="hl opt">:</span>streamStopMarker<span class="hl opt">];</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>endPosition <span class="hl opt">== -</span><span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">break</span><span class="hl opt">;</span>
        <span class="hl kwb">int const</span> blockLength <span class="hl opt">=</span> endPosition <span class="hl opt">+</span> <span class="hl kwd">strlen</span><span class="hl opt">(</span>streamStopMarker<span class="hl opt">) -</span> beginPosition<span class="hl opt">;</span>

        <span class="hl kwb">char const</span><span class="hl opt">*</span> <span class="hl kwb">const</span> zipped <span class="hl opt">= [</span>portion mutableBytes<span class="hl opt">] +</span> beginPosition <span class="hl opt">+</span> <span class="hl kwd">strlen</span><span class="hl opt">(</span>streamStartMarker<span class="hl opt">);</span>
        z_stream zstream<span class="hl opt">;</span>
        <span class="hl kwd">memset</span><span class="hl opt">(&amp;</span>zstream<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span>zstream<span class="hl opt">));</span>
        <span class="hl kwb">int const</span> zippedLength <span class="hl opt">=</span> blockLength <span class="hl opt">-</span> <span class="hl kwd">strlen</span><span class="hl opt">(</span>streamStartMarker<span class="hl opt">) -</span> <span class="hl kwd">strlen</span><span class="hl opt">(</span>streamStopMarker<span class="hl opt">);</span>

        zstream.avail_in <span class="hl opt">=</span> zippedLength<span class="hl opt">;</span>
        zstream.avail_out <span class="hl opt">=</span> zstream.avail_in <span class="hl opt">*</span> <span class="hl num">10</span><span class="hl opt">;</span>
        zstream.next_in <span class="hl opt">= (</span>Bytef<span class="hl opt">*)</span>zipped<span class="hl opt">;</span>
        <span class="hl kwb">char</span><span class="hl opt">*</span> <span class="hl kwb">const</span> unzipped <span class="hl opt">=</span> <span class="hl kwd">malloc</span><span class="hl opt">(</span>zstream.avail_out<span class="hl opt">);</span>
        zstream.next_out <span class="hl opt">= (</span>Bytef<span class="hl opt">*)</span>unzipped<span class="hl opt">;</span>
        <span class="hl kwb">int const</span> zstatus <span class="hl opt">=</span> <span class="hl kwd">inflateInit</span><span class="hl opt">(&amp;</span>zstream<span class="hl opt">);</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>zstatus <span class="hl opt">==</span> Z_OK<span class="hl opt">) {</span>
            <span class="hl kwb">int const</span> inflateStatus <span class="hl opt">=</span> <span class="hl kwd">inflate</span><span class="hl opt">(&amp;</span>zstream<span class="hl opt">,</span> Z_FINISH<span class="hl opt">);</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>inflateStatus <span class="hl opt">&gt;=</span> <span class="hl num">0</span><span class="hl opt">) {</span>
                found <span class="hl opt">=</span> found || <span class="hl opt">[</span>BatchPDFParser findBatchNumberInChunk<span class="hl opt">:</span>unzipped needle<span class="hl opt">:</span>needle andAddTo<span class="hl opt">:</span>list<span class="hl opt">];</span>
            <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
                <span class="hl kwd">NSLog</span><span class="hl opt">(</span>&#64;<span class="hl str">&quot;inflate() failed, error %d&quot;</span><span class="hl opt">,</span> inflateStatus<span class="hl opt">);</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
            <span class="hl kwd">NSLog</span><span class="hl opt">(</span>&#64;<span class="hl str">&quot;Unable to initialize zlib, error %d&quot;</span><span class="hl opt">,</span> zstatus<span class="hl opt">);</span>
        <span class="hl opt">}</span>
        <span class="hl kwd">free</span><span class="hl opt">(</span>unzipped<span class="hl opt">);</span>
        <span class="hl kwd">inflateEnd</span><span class="hl opt">(&amp;</span>zstream<span class="hl opt">);</span>

        <span class="hl kwb">int const</span> cutLength <span class="hl opt">=</span> endPosition <span class="hl opt">+</span> <span class="hl kwd">strlen</span><span class="hl opt">(</span>streamStopMarker<span class="hl opt">);</span>
        <span class="hl opt">[</span>portion replaceBytesInRange<span class="hl opt">:</span><span class="hl kwd">NSMakeRange</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> cutLength<span class="hl opt">)</span> withBytes<span class="hl opt">:</span>NULL length<span class="hl opt">:</span><span class="hl num">0</span><span class="hl opt">];</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return</span> found<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwc">&#64;end</span>
</pre>

<h3>DirectDownloadViewDelegate.h</h3>

<p>Заголовок делегата для <code>NSURLConnectionDelegate</code>:</p>

<pre class="hl">
<span class="hl kwc">&#64;protocol</span> DirectDownloadViewDelegate<span class="hl opt">&lt;</span>NSObject<span class="hl opt">&gt;</span>

<span class="hl opt">- (</span><span class="hl kwb">void</span><span class="hl opt">)</span>setProgress<span class="hl opt">: (</span><span class="hl kwb">float</span><span class="hl opt">)</span>progress<span class="hl opt">;</span>
<span class="hl opt">- (</span><span class="hl kwb">void</span><span class="hl opt">)</span>appendStatus<span class="hl opt">: (</span>NSString<span class="hl opt">*)</span>status<span class="hl opt">;</span>
<span class="hl opt">- (</span><span class="hl kwb">void</span><span class="hl opt">)</span>setCompleteDate<span class="hl opt">: (</span>NSString<span class="hl opt">*)</span>date<span class="hl opt">;</span>

<span class="hl kwc">&#64;end</span>
</pre>

<h3>DirectDownloadDelegate.h</h3>

<p>Собственно, сам делегат <code>NSURLConnectionDelegate</code>.</p>

<pre class="hl">
<span class="hl ppc">#import</span> <span class="hl pps">&quot;DirectDownloadViewDelegate.h&quot;</span><span class="hl ppc"></span>

<span class="hl kwc">&#64;interface</span> DirectDownloadDelegate <span class="hl opt">:</span> NSObject <span class="hl opt">{</span>
    NSError <span class="hl opt">*</span>error<span class="hl opt">;</span>
    <span class="hl kwa">BOOL</span> done<span class="hl opt">;</span>
    <span class="hl kwa">BOOL</span> found<span class="hl opt">;</span>
    NSMutableData <span class="hl opt">*</span>receivedData<span class="hl opt">;</span>
    <span class="hl kwb">float</span> expectedBytes<span class="hl opt">,</span> receivedBytes<span class="hl opt">;</span>
    <span class="hl kwa">id</span><span class="hl opt">&lt;</span>DirectDownloadViewDelegate<span class="hl opt">&gt;</span> viewDelegate<span class="hl opt">;</span>
    NSString<span class="hl opt">*</span> needle<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl opt">- (</span><span class="hl kwa">id</span><span class="hl opt">)</span> initWithNeedle<span class="hl opt">:(</span>NSString<span class="hl opt">*)</span>aNeedle andViewDelegate<span class="hl opt">:(</span><span class="hl kwa">id</span><span class="hl opt">&lt;</span>DirectDownloadViewDelegate<span class="hl opt">&gt;)</span>aViewDelegate<span class="hl opt">;</span>

<span class="hl kwc">&#64;property</span> <span class="hl opt">(</span>atomic<span class="hl opt">,</span> readonly<span class="hl opt">,</span> getter<span class="hl opt">=</span>isDone<span class="hl opt">)</span> <span class="hl kwa">BOOL</span> done<span class="hl opt">;</span>
<span class="hl kwc">&#64;property</span> <span class="hl opt">(</span>atomic<span class="hl opt">,</span> readonly<span class="hl opt">,</span> getter<span class="hl opt">=</span>isFound<span class="hl opt">)</span> <span class="hl kwa">BOOL</span> found<span class="hl opt">;</span>
<span class="hl kwc">&#64;property</span> <span class="hl opt">(</span>atomic<span class="hl opt">,</span> readonly<span class="hl opt">)</span> NSError <span class="hl opt">*</span>error<span class="hl opt">;</span>

<span class="hl kwc">&#64;end</span>
</pre>

<h3>DirectDownloadDelegate.m</h3>

<p>И его реализация:</p>

<pre class="hl">
<span class="hl ppc">#import &lt;Foundation/Foundation.h&gt;</span>

<span class="hl ppc">#import</span> <span class="hl pps">&quot;DirectDownloadDelegate.h&quot;</span><span class="hl ppc"></span>
<span class="hl ppc">#import</span> <span class="hl pps">&quot;BatchPDFParser.h&quot;</span><span class="hl ppc"></span>

<span class="hl kwc">&#64;implementation</span> DirectDownloadDelegate
<span class="hl kwc">&#64;synthesize</span> error<span class="hl opt">,</span> done<span class="hl opt">,</span> found<span class="hl opt">;</span>
</pre>

<p>Конструктор <code>initWithNeedle:andViewDelegate:</code> создает делегата и параметризирует его другим делегатом, <code>DirectDownloadViewDelegate</code>, который будет использоваться для задачи обновления экрана. Тут, кстати, мы впервые видит и деструктор, <code>(void) dealloc:</code>.</p>

<pre class="hl">
<span class="hl opt">- (</span><span class="hl kwa">id</span><span class="hl opt">)</span> initWithNeedle<span class="hl opt">:(</span>NSString<span class="hl opt">*)</span>aNeedle andViewDelegate<span class="hl opt">:(</span><span class="hl kwa">id</span><span class="hl opt">&lt;</span>DirectDownloadViewDelegate<span class="hl opt">&gt;)</span>aViewDelegate <span class="hl opt">{</span>
    viewDelegate <span class="hl opt">=</span> aViewDelegate<span class="hl opt">;</span>
    <span class="hl opt">[</span>viewDelegate retain<span class="hl opt">];</span>

    needle <span class="hl opt">= [[</span>NSString alloc<span class="hl opt">]</span> initWithString<span class="hl opt">:</span>aNeedle<span class="hl opt">];</span>
    receivedData <span class="hl opt">= [[</span>NSMutableData alloc<span class="hl opt">]</span> init<span class="hl opt">];</span>
    expectedBytes <span class="hl opt">=</span> receivedBytes <span class="hl opt">=</span> <span class="hl num">0.0</span><span class="hl opt">;</span>
    found <span class="hl opt">=</span> NO<span class="hl opt">;</span>

    <span class="hl kwa">return self</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl opt">- (</span><span class="hl kwb">void</span><span class="hl opt">)</span> dealloc <span class="hl opt">{</span>
    <span class="hl opt">[</span>error release<span class="hl opt">];</span>
    <span class="hl opt">[</span>receivedData release<span class="hl opt">];</span>
    <span class="hl opt">[</span>needle release<span class="hl opt">];</span>
    <span class="hl opt">[</span>viewDelegate release<span class="hl opt">];</span>
    <span class="hl opt">[</span><span class="hl kwa">super</span> dealloc<span class="hl opt">];</span>
<span class="hl opt">}</span>
</pre>

<p>Метод <code>connectionDidFinishLoading:</code> вызывается, когда соединение закончено.</p>

<pre class="hl">
<span class="hl opt">- (</span><span class="hl kwb">void</span><span class="hl opt">)</span> connectionDidFinishLoading<span class="hl opt">:(</span>NSURLConnection <span class="hl opt">*)</span>connection <span class="hl opt">{</span>
    done <span class="hl opt">=</span> YES<span class="hl opt">;</span>
    <span class="hl kwd">NSLog</span><span class="hl opt">(</span>&#64;<span class="hl str">&quot;Connection finished&quot;</span><span class="hl opt">);</span>
<span class="hl opt">}</span>
</pre>

<p>Метод <code>connection:didFailWithError:</code> вызывает при ошибке при скачивании файла.</p>

<pre class="hl">
<span class="hl opt">- (</span><span class="hl kwb">void</span><span class="hl opt">)</span> connection<span class="hl opt">:(</span>NSURLConnection <span class="hl opt">*)</span>connection didFailWithError<span class="hl opt">:(</span>NSError <span class="hl opt">*)</span>anError <span class="hl opt">{</span>
    error <span class="hl opt">= [</span>anError retain<span class="hl opt">];</span>
    <span class="hl opt">[</span><span class="hl kwa">self</span> connectionDidFinishLoading<span class="hl opt">:</span>connection<span class="hl opt">];</span>
<span class="hl opt">}</span>
</pre>

<p>Метод <code>connection:didReceiveData:</code> вызывается, когда получена новая порция данных из канала. Каждую такую порцию мы добавляем в буфер, обновляем индикатор прогресса скачивания (через еще один делегат, <code>viewDelegate</code>), затем пробуем вычленить фрагменты данных по PDF формату, и, наконец, печатаем то, что было найдено.</p>

<pre class="hl">
<span class="hl opt">- (</span><span class="hl kwb">void</span><span class="hl opt">)</span> connection<span class="hl opt">:(</span>NSURLConnection <span class="hl opt">*)</span>connection didReceiveData<span class="hl opt">:(</span>NSData <span class="hl opt">*)</span>someData <span class="hl opt">{</span>
    receivedBytes <span class="hl opt">+= [</span>someData length<span class="hl opt">];</span>
    <span class="hl opt">[</span>viewDelegate setProgress<span class="hl opt">:(</span>receivedBytes <span class="hl opt">/</span> expectedBytes<span class="hl opt">)];</span>
    <span class="hl opt">[</span>receivedData appendData<span class="hl opt">:</span>someData<span class="hl opt">];</span>

    NSMutableArray<span class="hl opt">*</span> list <span class="hl opt">= [[</span>NSMutableArray alloc<span class="hl opt">]</span> init<span class="hl opt">];</span>
    <span class="hl kwb">bool</span> foundInCurrentPortion <span class="hl opt">= [</span>BatchPDFParser findInPortion<span class="hl opt">:</span>receivedData needle<span class="hl opt">:</span>needle andAddTo<span class="hl opt">:</span>list<span class="hl opt">];</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">id</span> batch <span class="hl kwa">in</span> list<span class="hl opt">) {</span>
        <span class="hl kwd">NSLog</span><span class="hl opt">(</span>&#64;<span class="hl str">&quot;[%&#64;]&quot;</span><span class="hl opt">, [</span>batch stringByReplacingOccurrencesOfString<span class="hl opt">:</span>&#64;<span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> withString<span class="hl opt">:</span>&#64;<span class="hl str">&quot;</span><span class="hl esc">\\</span><span class="hl str">n&quot;</span><span class="hl opt">]);</span>
        <span class="hl opt">[</span>viewDelegate appendStatus<span class="hl opt">:</span>batch<span class="hl opt">];</span>
    <span class="hl opt">}</span>
    <span class="hl opt">[</span>list release<span class="hl opt">];</span>
    found <span class="hl opt">=</span> found || foundInCurrentPortion<span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Последний обратный вызов делегата <code>NSURLConnectionDelegate</code>, что мы используем, называется <code>connection:didReceiveResponse:</code>. Он вызывается, когда получен информационный ответ по HTTP, содержащий заголовки. Мы из заголовка «Content-Length» берем длину будущего файла, чтобы позже сообразно обновлять индикатор скачивания.</p>

<pre class="hl">
<span class="hl opt">- (</span><span class="hl kwb">void</span><span class="hl opt">)</span>connection<span class="hl opt">:(</span>NSURLConnection <span class="hl opt">*)</span>connection didReceiveResponse<span class="hl opt">:(</span>NSHTTPURLResponse <span class="hl opt">*)</span>someResponse <span class="hl opt">{</span>
    NSDictionary <span class="hl opt">*</span>headers <span class="hl opt">= [</span>someResponse allHeaderFields<span class="hl opt">];</span>
    <span class="hl kwd">NSLog</span><span class="hl opt">(</span>&#64;<span class="hl str">&quot;[didReceiveResponse] response headers: %&#64;&quot;</span><span class="hl opt">,</span> headers<span class="hl opt">);</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>headers<span class="hl opt">) {</span>
        <span class="hl kwa">if</span> <span class="hl opt">([</span>headers objectForKey<span class="hl opt">:</span> &#64;<span class="hl str">&quot;Content-Length&quot;</span><span class="hl opt">]) {</span>
            <span class="hl kwd">NSLog</span><span class="hl opt">(</span>&#64;<span class="hl str">&quot;Content-Length: %&#64;&quot;</span><span class="hl opt">, [</span>headers objectForKey<span class="hl opt">:</span> &#64;<span class="hl str">&quot;Content-Length&quot;</span><span class="hl opt">]);</span>
            expectedBytes <span class="hl opt">= [[</span>headers objectForKey<span class="hl opt">:</span> &#64;<span class="hl str">&quot;Content-Length&quot;</span><span class="hl opt">]</span> floatValue<span class="hl opt">];</span>
        <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
            <span class="hl kwd">NSLog</span><span class="hl opt">(</span>&#64;<span class="hl str">&quot;No Content-Length header found&quot;</span><span class="hl opt">);</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>
<span class="hl opt">}</span>
</pre>

<h3>NSURLConnectionDirectDownload.h</h3>

<p>В этом файле находится метод <code>donwloadAtURL:searching:viewingOn:</code>, который мы добавляем к классу <code>NSURLConnection</code>. Интересно тут то, что через понятие категорий в Objective-C можно «примешивать» новые методы к существующим классам. Тут мы к классу <code>NSURLConnection</code> добавляем категорию <code>DirectDownload</code>.</p>

<pre class="hl">
<span class="hl kwc">&#64;interface</span> <span class="hl kwd">NSURLConnection</span> <span class="hl opt">(</span>DirectDownload<span class="hl opt">)</span>

<span class="hl opt">+ (</span><span class="hl kwa">BOOL</span><span class="hl opt">)</span> downloadAtURL<span class="hl opt">:(</span>NSURL <span class="hl opt">*)</span>url searching<span class="hl opt">:(</span>NSString<span class="hl opt">*)</span>batchNumber viewingOn<span class="hl opt">:(</span><span class="hl kwa">id</span><span class="hl opt">)</span>viewDelegate<span class="hl opt">;</span>

<span class="hl kwc">&#64;end</span>
</pre>

<h3>NSURLConnectionDirectDownload.m</h3>

<p>Ну и финальная часть скачивалки PDF. Метод <code>donwloadAtURL:searching:viewingOn:</code> создает соединение и запускает скачивание. Затем происходит ожидание в цикле <code>NSRunLoop</code>, пока скачивание не закончится. Этот цикл позволяет приложению реагировать на события в процессе скачивания. Обратите внимание, это до сих пор скачивалка ни как не привязана к графическому интерфейсу. Она использует делегат <code>viewDelegate</code> для общения с «мордой» приложения.</p>

<pre class="hl">
<span class="hl ppc">#import &lt;Foundation/Foundation.h&gt;</span>
<span class="hl ppc">#import</span> <span class="hl pps">&quot;DirectDownloadDelegate.h&quot;</span><span class="hl ppc"></span>

<span class="hl kwc">&#64;implementation</span> <span class="hl kwd">NSURLConnection</span> <span class="hl opt">(</span>DirectDownload<span class="hl opt">)</span>

<span class="hl opt">+ (</span><span class="hl kwa">BOOL</span><span class="hl opt">)</span> downloadAtURL<span class="hl opt">:(</span>NSURL <span class="hl opt">*)</span>url searching<span class="hl opt">:(</span>NSString<span class="hl opt">*)</span>batchNumber viewingOn<span class="hl opt">:(</span><span class="hl kwa">id</span><span class="hl opt">)</span>viewDelegate <span class="hl opt">{</span>
    NSMutableURLRequest <span class="hl opt">*</span>request <span class="hl opt">= [[</span>NSMutableURLRequest alloc<span class="hl opt">]</span> initWithURL<span class="hl opt">:</span>url<span class="hl opt">];</span>

    DirectDownloadDelegate <span class="hl opt">*</span>delegate <span class="hl opt">= [[[</span>DirectDownloadDelegate alloc<span class="hl opt">]</span> initWithNeedle<span class="hl opt">:</span>batchNumber andViewDelegate<span class="hl opt">:</span>viewDelegate<span class="hl opt">]</span> autorelease<span class="hl opt">];</span>
    NSURLConnection <span class="hl opt">*</span>connection <span class="hl opt">= [[</span>NSURLConnection alloc<span class="hl opt">]</span> initWithRequest<span class="hl opt">:</span>request delegate<span class="hl opt">:</span>delegate<span class="hl opt">];</span>
    <span class="hl opt">[</span>request release<span class="hl opt">];</span>

    <span class="hl kwa">while</span> <span class="hl opt">([</span>delegate isDone<span class="hl opt">] ==</span> NO<span class="hl opt">) {</span>
        <span class="hl opt">[[</span>NSRunLoop currentRunLoop<span class="hl opt">]</span> runUntilDate<span class="hl opt">:[</span>NSDate dateWithTimeIntervalSinceNow<span class="hl opt">:</span><span class="hl num">1.0</span><span class="hl opt">]];</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">if</span> <span class="hl opt">([</span>delegate isFound<span class="hl opt">] !=</span> YES<span class="hl opt">) {</span>
        <span class="hl opt">[</span>viewDelegate appendStatus<span class="hl opt">:</span>&#64;<span class="hl str">&quot;This batch number is not found.&quot;</span><span class="hl opt">];</span>
        <span class="hl kwd">NSLog</span><span class="hl opt">(</span>&#64;<span class="hl str">&quot;This batch number is not found.&quot;</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>

    <span class="hl kwd">NSLog</span><span class="hl opt">(</span>&#64;<span class="hl str">&quot;PDF is processed&quot;</span><span class="hl opt">);</span>
    <span class="hl opt">[</span>connection release<span class="hl opt">];</span>

    NSDateFormatter<span class="hl opt">*</span> dateFormatter <span class="hl opt">= [[</span>NSDateFormatter alloc<span class="hl opt">]</span> init<span class="hl opt">];</span>
    dateFormatter.dateFormat <span class="hl opt">=</span> &#64;<span class="hl str">&quot;yyyy/MM/dd HH:mm:ss&quot;</span><span class="hl opt">;</span>
    NSString<span class="hl opt">*</span> lastUpdateDate <span class="hl opt">= [</span>dateFormatter stringFromDate<span class="hl opt">:[</span>NSDate date<span class="hl opt">]];</span>
    <span class="hl kwd">NSLog</span><span class="hl opt">(</span>&#64;<span class="hl str">&quot;Last update at: %&#64;&quot;</span><span class="hl opt">,</span> lastUpdateDate<span class="hl opt">);</span>
    <span class="hl opt">[</span>viewDelegate setCompleteDate<span class="hl opt">:</span>lastUpdateDate<span class="hl opt">];</span>
    <span class="hl opt">[</span>dateFormatter release<span class="hl opt">];</span>

    NSError <span class="hl opt">*</span>error <span class="hl opt">= [</span>delegate error<span class="hl opt">];</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>error <span class="hl opt">!=</span> <span class="hl kwa">nil</span><span class="hl opt">) {</span>
        <span class="hl kwd">NSLog</span><span class="hl opt">(</span>&#64;<span class="hl str">&quot;Download error: %&#64;&quot;</span><span class="hl opt">,</span> error<span class="hl opt">);</span>
        <span class="hl kwa">return</span> NO<span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">return</span> YES<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwc">&#64;end</span>
</pre>

<h3>ViewController.m</h3>

<p>Как уже было сказано, в приложении для командной строки контроллер будет содержать только заглушки, которые мы реализуем позже в полной версии программы.</p>

<pre class="hl">
<span class="hl ppc">#import &lt;Foundation/Foundation.h&gt;</span>

<span class="hl ppc">#import</span> <span class="hl pps">&quot;DirectDownloadViewDelegate.h&quot;</span><span class="hl ppc"></span>

<span class="hl ppc">#define IBAction void</span>
</pre>

<p>Пустой класс-заглушка <code>ViewController</code>.</p>

<pre class="hl">
<span class="hl kwc">&#64;interface</span> ViewController <span class="hl opt">:</span> NSObject <span class="hl opt">&lt;</span>DirectDownloadViewDelegate<span class="hl opt">&gt;</span>
<span class="hl kwc">&#64;end</span>

<span class="hl ppc">#import</span> <span class="hl pps">&quot;NSURLConnectionDirectDownload.h&quot;</span><span class="hl ppc"></span>
</pre>

<p>Адрес, откуда качать файл.</p>

<pre class="hl">
<span class="hl kwb">static char const</span><span class="hl opt">*</span> <span class="hl kwb">const</span> pdf <span class="hl opt">=</span> <span class="hl str">&quot;http://photos.state.gov/libraries/unitedkingdom/164203/cons-visa/admin_processing_dates.pdf&quot;</span><span class="hl opt">;</span>
</pre>

<p>И mock-реализация класса-контроллера.</p>

<pre class="hl">
<span class="hl kwc">&#64;implementation</span> ViewController
</pre>

<p>Тестовый обратный вызов <code>appendStatus:</code> вызывается, когда обнаружено очередное обновление по заявке. Тут мы просто логируем, а в полном приложении будем обновлять экранную форму.</p>

<pre class="hl">
<span class="hl opt">- (</span><span class="hl kwb">void</span><span class="hl opt">)</span> appendStatus<span class="hl opt">:(</span>NSString<span class="hl opt">*)</span>status <span class="hl opt">{</span>
    <span class="hl kwd">NSLog</span><span class="hl opt">(</span>&#64;<span class="hl str">&quot;appendStatus(): '%&#64;'&quot;</span><span class="hl opt">, [</span>status stringByReplacingOccurrencesOfString<span class="hl opt">:</span>&#64;<span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> withString<span class="hl opt">:</span>&#64;<span class="hl str">&quot;</span><span class="hl esc">\\</span><span class="hl str">n&quot;</span><span class="hl opt">]);</span>
    <span class="hl slc">// Some code is skipped here because not required for the command line mode.</span>
<span class="hl opt">}</span>
</pre>

<p>Тестовый обратный вызов <code>setProgress:</code> вызывается, когда после принятия очередной порции данных надо обновить индикатор скачивания.</p>

<pre class="hl">
<span class="hl opt">- (</span><span class="hl kwb">void</span><span class="hl opt">)</span> setProgress<span class="hl opt">:(</span><span class="hl kwb">float</span><span class="hl opt">)</span>progress <span class="hl opt">{</span>
    <span class="hl slc">// Some code is skipped here because not required for the command line mode.</span>
<span class="hl opt">}</span>
</pre>

<p>Тестовый обратный вызов <code>setCompleteDate:</code> вызывается, когда анализ PDF полностью закончен. Тут, опять, мы просто логируем.</p>

<pre class="hl">
<span class="hl opt">- (</span><span class="hl kwb">void</span><span class="hl opt">)</span> setCompleteDate<span class="hl opt">:(</span>NSString<span class="hl opt">*)</span>date <span class="hl opt">{</span>
    <span class="hl kwd">NSLog</span><span class="hl opt">(</span>&#64;<span class="hl str">&quot;setCompleteDate(): '%&#64;'&quot;</span><span class="hl opt">,</span> date<span class="hl opt">);</span>
    <span class="hl slc">// Some code is skipped here because not required for the command line mode.</span>
<span class="hl opt">}</span>
</pre>

<p>Ну и финальный метод, который все запускает, <code>updateBatchStatus:</code>. В полной программе он будет вызываться при нажатии кнопки на форме. Тут он вызывается из <code>main()</code>.</p>

<pre class="hl">
<span class="hl opt">- (</span><span class="hl kwb">bool</span><span class="hl opt">)</span> updateBatchStatus<span class="hl opt">:(</span>NSString<span class="hl opt">*)</span>batchNumber <span class="hl opt">{</span>
    NSURL <span class="hl opt">*</span>url <span class="hl opt">= [[[</span>NSURL alloc<span class="hl opt">]</span> initWithString<span class="hl opt">:[</span>NSString stringWithCString<span class="hl opt">:</span>pdf encoding<span class="hl opt">:</span>NSASCIIStringEncoding<span class="hl opt">]]</span> autorelease<span class="hl opt">];</span>
    <span class="hl kwa">return</span> <span class="hl opt">[</span>NSURLConnection downloadAtURL<span class="hl opt">:</span>url searching<span class="hl opt">:</span>batchNumber viewingOn<span class="hl opt">:</span><span class="hl kwa">self</span><span class="hl opt">];</span>
<span class="hl opt">}</span>

<span class="hl kwc">&#64;end</span>
</pre>

<h3>main-cli.m</h3>

<p>Запуск из командной строки.</p>

<pre class="hl">
<span class="hl ppc">#import &lt;Foundation/Foundation.h&gt;</span>
<span class="hl ppc">#import</span> <span class="hl pps">&quot;DirectDownloadDelegate.h&quot;</span><span class="hl ppc"></span>

<span class="hl kwc">&#64;interface</span> ViewController <span class="hl opt">:</span> NSObject <span class="hl opt">&lt;</span>DirectDownloadViewDelegate<span class="hl opt">&gt;</span>
<span class="hl opt">- (</span><span class="hl kwb">bool</span><span class="hl opt">)</span> updateBatchStatus<span class="hl opt">:(</span>NSString<span class="hl opt">*)</span>batchNumber<span class="hl opt">;</span>
<span class="hl kwc">&#64;end</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span> <span class="hl opt">*</span>argv<span class="hl opt">[]) {</span>
    <span class="hl kwc">&#64;autoreleasepool</span> <span class="hl opt">{</span>
        ViewController<span class="hl opt">*</span> viewController <span class="hl opt">= [</span>ViewController alloc<span class="hl opt">];</span>
        <span class="hl opt">[</span>viewController updateBatchStatus<span class="hl opt">:[</span>NSString stringWithCString<span class="hl opt">:</span>argv<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]</span> encoding<span class="hl opt">:</span>NSASCIIStringEncoding<span class="hl opt">]];</span>
        <span class="hl opt">[</span>viewController release<span class="hl opt">];</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<h3>Попробуем все это собрать и запустить?</h3>

<p><code>Makefile</code> для Мак:</p>

<pre class="hl">
files <span class="hl opt">=</span> \
    ViewController.m \
    BatchPDFParser.m \
    NSURLConnectionDirectDownload.m \
    DirectDownloadDelegate.m
    main-cli.m

<span class="hl kwa">all</span><span class="hl opt">:</span> build run

build<span class="hl opt">:</span>
    clang <span class="hl opt">-</span>o USVisaTest <span class="hl opt">-</span>DTESTING <span class="hl opt">-</span>framework Foundation <span class="hl opt">-</span>lz <span class="hl opt">$(</span>files<span class="hl opt">)</span>

run<span class="hl opt">:</span>
    .<span class="hl opt">/</span>USVisaTest <span class="hl num">20121456171</span>
</pre>

<p>Makefile <code>GNUmakefile</code> для GNUstep:</p>

<pre class="hl">
<span class="hl kwb">include</span> <span class="hl opt">$(</span>GNUSTEP_MAKEFILES<span class="hl opt">)/</span>common.make

TOOL_NAME <span class="hl opt">=</span> USVisa
USVisa_OBJC_FILES <span class="hl opt">=</span> \
    ..<span class="hl opt">/</span>ViewController.m \
    ..<span class="hl opt">/</span>BatchPDFParser.m \
    ..<span class="hl opt">/</span>NSURLConnectionDirectDownload.m \
    ..<span class="hl opt">/</span>DirectDownloadDelegate.m \
    ..<span class="hl opt">/</span>main-cli.m
USVisa_TOOL_LIBS <span class="hl opt">= -</span>lz
ADDITIONAL_OBJCFLAGS <span class="hl opt">= -</span>DTESTING
CC <span class="hl opt">=</span> clang

<span class="hl kwb">include</span> <span class="hl opt">$(</span>GNUSTEP_MAKEFILES<span class="hl opt">)/</span>tool.make

run<span class="hl opt">:</span>
    .<span class="hl opt">/</span>obj<span class="hl opt">/</span>USVisa <span class="hl num">20121456171</span>
</pre>    

<p>Набираем <code>make</code>. Windows:</p>

<pre><code>This is gnustep-make 2.6.2. Type 'mmake print-gnustep-make-help' for help.
Making all for tool USVisa...
 Creating obj/USVisa.obj/../...
 Compiling file ViewController.m ...
 Compiling file BatchPDFParser.m ...
 Compiling file NSURLConnectionDirectDownload.m ...
 Compiling file DirectDownloadDelegate.m ...
 Compiling file main-cli.m ...
 Linking tool USVisa ...
</code></pre>

<p>Можно запустить проверить реальную заявку:</p>

<pre><code>make run
</code></pre>

<p>У меня вывелось следующее:</p>

<pre><code>This is gnustep-make 2.6.2. Type 'mmake print-gnustep-make-help' for help.
./obj/USVisa 20121456171
2012-06-19 17:27:11.472 USVisa[3420] [didReceiveResponse] response headers: {&quot;Accept-Ranges&quot; = bytes; &quot;Cache-Control&quot; = &quot;max-age=600&quot;; Connection = &quot;keep-alive&quot;; &quot;Content-Length&quot; = 2237242; &quot;Content-Type&quot; = &quot;application/pdf&quot;; Date = &quot;Tue, 19 Jun 2012 16:27:11 GMT&quot;; ETag = &quot;\&quot;4b2ca3e41de5ba4ae45670e776edfc3b:1339778351\&quot;&quot;; &quot;Last-Modified&quot; = &quot;Fri, 15 Jun 2012 16:06:15 GMT&quot;; Server = Apache; }
2012-06-19 17:27:11.604 USVisa[3420] Content-Length: 2237242
2012-06-19 17:27:12.093 USVisa[3420] Found match: '20121456171' 'send passport &amp; new travel itinerary' '14-Jun-12'
2012-06-19 17:27:12.104 USVisa[3420] [send passport &amp; new travel itinerary\n14-Jun-12]
2012-06-19 17:27:12.111 USVisa[3420] appendStatus(): 'send passport &amp; new travel itinerary\n14-Jun-12'
2012-06-19 17:27:13.769 USVisa[3420] Connection finished
2012-06-19 17:27:13.774 USVisa[3420] PDF is processed
2012-06-19 17:27:13.961 USVisa[3420] Last update at: 2012/06/19 16:27:13
2012-06-19 17:27:13.972 USVisa[3420] setCompleteDate(): '2012/06/19 16:27:13'
</code></pre>

<p>Итак, все работает: скачивалка и парсер PDF. Теперь займемся версией под iOS. Увы, только для пользователей Mac.</p>

<h2>Макет экранной формы</h2>

<p>Я сделал приложение крайне простым: одна форма с полем ввода, кнопкой и местом для вывода обновлений.</p>

<p><img src="http://demin.ws/images/blog/usvisa/app/usvisa-application-screenshot.png" alt="" />
</p>

<p>Индикатор скачивания и крутящийся бегунок появляются временно.</p>

<h3>ViewController.h</h3>

<p>Вот сейчас это полная реализации контроллера. Через макрос <code>TESTING</code> я сделал разделение между упрощенной и полной версией.</p>

<pre class="hl">
<span class="hl ppc">#import &lt;Foundation/Foundation.h&gt;</span>
<span class="hl ppc">#import</span> <span class="hl pps">&quot;DirectDownloadViewDelegate.h&quot;</span><span class="hl ppc"></span>

<span class="hl ppc">#ifdef TESTING</span>
<span class="hl ppc">#define IBAction void</span>
<span class="hl kwc">&#64;interface</span> ViewController <span class="hl opt">:</span> NSObject <span class="hl opt">&lt;</span>DirectDownloadViewDelegate<span class="hl opt">&gt;</span>
<span class="hl kwc">&#64;end</span>
<span class="hl ppc">#else</span>
<span class="hl ppc">#import</span> <span class="hl pps">&quot;ViewController.h&quot;</span><span class="hl ppc"></span>
<span class="hl ppc">#endif</span>

<span class="hl ppc">#import</span> <span class="hl pps">&quot;NSURLConnectionDirectDownload.h&quot;</span><span class="hl ppc"></span>

<span class="hl kwb">static char const</span><span class="hl opt">*</span> <span class="hl kwb">const</span> pdf <span class="hl opt">=</span> <span class="hl str">&quot;http://photos.state.gov/libraries/unitedkingdom/164203/cons-visa/admin_processing_dates.pdf&quot;</span><span class="hl opt">;</span>

<span class="hl kwc">&#64;implementation</span> ViewController

<span class="hl ppc">#ifndef TESTING</span>
<span class="hl kwc">&#64;synthesize</span> updateProgressView<span class="hl opt">,</span> batchNumberTextField<span class="hl opt">,</span> statusTextView<span class="hl opt">,</span> lastUpdatedLabel<span class="hl opt">,</span> updateButton<span class="hl opt">;</span>
<span class="hl ppc">#endif</span>

NSString<span class="hl opt">*</span> <span class="hl kwb">const</span> PropertiesFilename <span class="hl opt">=</span> &#64;<span class="hl str">&quot;Properties&quot;</span><span class="hl opt">;</span>

NSString <span class="hl opt">*</span><span class="hl kwd">pathInDocumentDirectory</span><span class="hl opt">(</span>NSString <span class="hl opt">*</span>fileName<span class="hl opt">) {</span>
    NSArray <span class="hl opt">*</span>documentDirectories <span class="hl opt">=</span> <span class="hl kwd">NSSearchPathForDirectoriesInDomains</span><span class="hl opt">(</span>NSDocumentDirectory<span class="hl opt">,</span> NSUserDomainMask<span class="hl opt">,</span> YES<span class="hl opt">);</span>
    NSString <span class="hl opt">*</span>documentDirectory <span class="hl opt">= [</span>documentDirectories objectAtIndex<span class="hl opt">:</span><span class="hl num">0</span><span class="hl opt">];</span>
    <span class="hl kwa">return</span> <span class="hl opt">[</span>documentDirectory stringByAppendingPathComponent<span class="hl opt">:</span>fileName<span class="hl opt">];</span>
<span class="hl opt">}</span>
</pre>

<p>Сейчас обратный вызов <code>appendStatus:</code> не только логирует, но и обновляет экранную форму.</p>

<pre class="hl">
<span class="hl opt">- (</span><span class="hl kwb">void</span><span class="hl opt">)</span> appendStatus<span class="hl opt">:(</span>NSString<span class="hl opt">*)</span>status <span class="hl opt">{</span>
    <span class="hl kwd">NSLog</span><span class="hl opt">(</span>&#64;<span class="hl str">&quot;appendStatus(): '%&#64;'&quot;</span><span class="hl opt">, [</span>status stringByReplacingOccurrencesOfString<span class="hl opt">:</span>&#64;<span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> withString<span class="hl opt">:</span>&#64;<span class="hl str">&quot;</span><span class="hl esc">\\</span><span class="hl str">n&quot;</span><span class="hl opt">]);</span>
<span class="hl ppc">#ifndef TESTING</span>
    <span class="hl kwa">if</span> <span class="hl opt">([[</span>statusTextView text<span class="hl opt">]</span> length<span class="hl opt">] ==</span> <span class="hl num">0</span><span class="hl opt">)</span>
        <span class="hl opt">[</span>statusTextView setText<span class="hl opt">:</span>&#64;<span class="hl str">&quot;Status:</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">];</span>
    <span class="hl opt">[</span>statusTextView setText<span class="hl opt">:[[</span>statusTextView text<span class="hl opt">]</span> stringByAppendingString<span class="hl opt">:</span>status<span class="hl opt">]];</span>
    <span class="hl opt">[</span>statusTextView setText<span class="hl opt">:[[</span>statusTextView text<span class="hl opt">]</span> stringByAppendingString<span class="hl opt">:</span>&#64;<span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">]];</span>
<span class="hl ppc">#endif</span>
<span class="hl opt">}</span>
</pre>

<p><code>setProcess:</code> обновляет индикатор скачивания.</p>

<pre class="hl">
<span class="hl opt">- (</span><span class="hl kwb">void</span><span class="hl opt">)</span> setProgress<span class="hl opt">:(</span><span class="hl kwb">float</span><span class="hl opt">)</span>progress <span class="hl opt">{</span>
<span class="hl ppc">#ifndef TESTING</span>
    updateProgressView.progress <span class="hl opt">=</span> progress<span class="hl opt">;</span>
<span class="hl ppc">#endif</span>
<span class="hl opt">}</span>
</pre>

<p><code>setCompleteDate:</code> выводит дату обновления в текстовое поле на экране.</p>

<pre class="hl">
<span class="hl opt">- (</span><span class="hl kwb">void</span><span class="hl opt">)</span> setCompleteDate<span class="hl opt">:(</span>NSString<span class="hl opt">*)</span>date <span class="hl opt">{</span>
    <span class="hl kwd">NSLog</span><span class="hl opt">(</span>&#64;<span class="hl str">&quot;setCompleteDate(): '%&#64;'&quot;</span><span class="hl opt">,</span> date<span class="hl opt">);</span>
<span class="hl ppc">#ifndef TESTING</span>
    <span class="hl opt">[</span>lastUpdatedLabel setText<span class="hl opt">:</span>date<span class="hl opt">];</span>
<span class="hl ppc">#endif</span>
<span class="hl opt">}</span>

<span class="hl opt">- (</span><span class="hl kwb">bool</span><span class="hl opt">)</span> updateBatchStatus<span class="hl opt">:(</span>NSString<span class="hl opt">*)</span>batchNumber <span class="hl opt">{</span>
    NSURL <span class="hl opt">*</span>url <span class="hl opt">= [[[</span>NSURL alloc<span class="hl opt">]</span> initWithString<span class="hl opt">:[</span>NSString stringWithCString<span class="hl opt">:</span>pdf encoding<span class="hl opt">:</span>NSASCIIStringEncoding<span class="hl opt">]]</span> autorelease<span class="hl opt">];</span>
    <span class="hl kwa">return</span> <span class="hl opt">[</span>NSURLConnection downloadAtURL<span class="hl opt">:</span>url searching<span class="hl opt">:</span>batchNumber viewingOn<span class="hl opt">:</span><span class="hl kwa">self</span><span class="hl opt">];</span>
<span class="hl opt">}</span>
</pre>

<p>Теперь несколько вызовов, специфичных для iOS. Метод <code>viewDidLoad:</code> вызывается системой, когда экранная форма загружена и готова к использованию. Тут мы вручную создаем крутящийся бегунок и подправляем высоты двух элементов, кнопки и поля ввода, так как почему-то Xcode Interface Builder не позволяет менять их при дизайне формы.</p>

<pre class="hl">
<span class="hl ppc">#ifndef TESTING</span>
<span class="hl opt">- (</span><span class="hl kwb">void</span><span class="hl opt">)</span>viewDidLoad
<span class="hl opt">{</span>
    <span class="hl opt">[</span><span class="hl kwa">super</span> viewDidLoad<span class="hl opt">];</span>
    <span class="hl slc">// Do any additional setup after loading the view, typically from a nib.</span>
    spinnerActivityIndicatorView <span class="hl opt">= [[</span>UIActivityIndicatorView alloc<span class="hl opt">]</span> initWithActivityIndicatorStyle<span class="hl opt">:</span>UIActivityIndicatorViewStyleWhiteLarge<span class="hl opt">];</span>
    <span class="hl opt">[</span>spinnerActivityIndicatorView setColor<span class="hl opt">:[</span>UIColor blueColor<span class="hl opt">]];</span>
    CGSize size <span class="hl opt">= [[</span><span class="hl kwa">self</span> view<span class="hl opt">]</span> frame<span class="hl opt">]</span>.size<span class="hl opt">;</span>
    <span class="hl opt">[</span>spinnerActivityIndicatorView setCenter<span class="hl opt">:</span><span class="hl kwd">CGPointMake</span><span class="hl opt">(</span>size.width <span class="hl opt">/</span> <span class="hl num">2</span><span class="hl opt">,</span> size.height <span class="hl opt">/</span> <span class="hl num">2</span> <span class="hl opt">+</span> <span class="hl num">60</span><span class="hl opt">)];</span>
    <span class="hl opt">[</span><span class="hl kwa">self</span>.view addSubview<span class="hl opt">:</span>spinnerActivityIndicatorView<span class="hl opt">];</span>

    CGRect rect <span class="hl opt">= [</span><span class="hl kwa">self</span>.updateButton bounds<span class="hl opt">];</span>
    rect.size.height <span class="hl opt">+=</span> <span class="hl num">10</span><span class="hl opt">;</span>
    <span class="hl opt">[</span><span class="hl kwa">self</span>.updateButton setBounds<span class="hl opt">:</span>rect<span class="hl opt">];</span>

    rect <span class="hl opt">= [</span><span class="hl kwa">self</span>.batchNumberTextField bounds<span class="hl opt">];</span>
    rect.size.height <span class="hl opt">+=</span> <span class="hl num">20</span><span class="hl opt">;</span>
    <span class="hl opt">[</span><span class="hl kwa">self</span>.batchNumberTextField setBounds<span class="hl opt">:</span>rect<span class="hl opt">];</span>

<span class="hl ppc">#ifdef DEBUG</span>
    <span class="hl kwd">NSLog</span><span class="hl opt">(</span>&#64;<span class="hl str">&quot;DEBUG mode&quot;</span><span class="hl opt">);</span>
<span class="hl ppc">#endif</span>
<span class="hl opt">}</span>
</pre>

<p><code>viewDidUnload</code> вызывается, когда форма становится неактивной.</p>

<pre class="hl">
<span class="hl opt">- (</span><span class="hl kwb">void</span><span class="hl opt">)</span>viewDidUnload
<span class="hl opt">{</span>
    <span class="hl opt">[</span><span class="hl kwa">super</span> viewDidUnload<span class="hl opt">];</span>
    <span class="hl slc">// Release any retained subviews of the main view.</span>
<span class="hl opt">}</span>
</pre>

<p>Метод <code>shouldAutorotateToInterfaceOrientation:</code> позволяет контролировать поведение для смене ориентации аппарата. Тут мы разрешаем только портретное положение, не вверх ногами.</p>

<pre class="hl">
<span class="hl opt">- (</span><span class="hl kwa">BOOL</span><span class="hl opt">)</span>shouldAutorotateToInterfaceOrientation<span class="hl opt">:(</span>UIInterfaceOrientation<span class="hl opt">)</span>interfaceOrientation
<span class="hl opt">{</span>
    <span class="hl kwa">return</span> <span class="hl opt">(</span>interfaceOrientation <span class="hl opt">==</span> UIInterfaceOrientationPortrait<span class="hl opt">);</span>
<span class="hl opt">}</span>
<span class="hl ppc">#endif</span>
</pre>

<p>Метод <code>launchUpdate:</code> вызывает при нажатии на кнопку <code>Update</code> на форме. Мы блокируем кнопку от повторного нажатия, вывод индикатор скачивания и крутящийся бегунок.</p>

<pre class="hl">
<span class="hl opt">- (</span>IBAction<span class="hl opt">)</span>launchUpdate<span class="hl opt">:(</span><span class="hl kwa">id</span><span class="hl opt">)</span>sender <span class="hl opt">{</span>
    <span class="hl opt">[</span><span class="hl kwa">self</span> setProgress<span class="hl opt">:</span><span class="hl num">0.0</span><span class="hl opt">];</span>
<span class="hl ppc">#ifndef TESTING</span>
    <span class="hl opt">[</span>updateButton setEnabled<span class="hl opt">:</span> NO<span class="hl opt">];</span>
    <span class="hl opt">[</span>updateProgressView setHidden<span class="hl opt">:</span>NO<span class="hl opt">];</span>

    NSString<span class="hl opt">*</span> previousStatus <span class="hl opt">= [</span>statusTextView text<span class="hl opt">];</span>
    <span class="hl opt">[</span>statusTextView setText<span class="hl opt">:</span>&#64;<span class="hl str">&quot;&quot;</span><span class="hl opt">];</span>

    NSString<span class="hl opt">*</span> batchNumber <span class="hl opt">= [</span>batchNumberTextField text<span class="hl opt">];</span>

    <span class="hl opt">[</span>spinnerActivityIndicatorView startAnimating<span class="hl opt">];</span>
    <span class="hl kwa">BOOL</span> <span class="hl kwb">const</span> ok <span class="hl opt">= [</span><span class="hl kwa">self</span> updateBatchStatus<span class="hl opt">:</span>batchNumber<span class="hl opt">];</span>
    <span class="hl opt">[</span>spinnerActivityIndicatorView stopAnimating<span class="hl opt">];</span>

    <span class="hl kwa">if</span> <span class="hl opt">(!</span>ok<span class="hl opt">) {</span>
        UIAlertView <span class="hl opt">*</span>alert <span class="hl opt">=</span> 
            <span class="hl opt">[[</span>UIAlertView alloc<span class="hl opt">]</span> initWithTitle<span class="hl opt">:</span>&#64;<span class="hl str">&quot;Error&quot;</span>
                                       message<span class="hl opt">:</span>&#64;<span class="hl str">&quot;Internet connectivity problem&quot;</span>
                                      delegate<span class="hl opt">:</span><span class="hl kwa">self</span> cancelButtonTitle<span class="hl opt">:</span><span class="hl kwa">nil</span>
                             otherButtonTitles<span class="hl opt">:</span>&#64;<span class="hl str">&quot;OK&quot;</span><span class="hl opt">,</span> <span class="hl kwa">nil</span><span class="hl opt">];</span>
        <span class="hl opt">[</span>alert show<span class="hl opt">];</span>
        <span class="hl opt">[</span>alert release<span class="hl opt">];</span>
        <span class="hl opt">[</span>statusTextView setText<span class="hl opt">:</span>previousStatus<span class="hl opt">];</span>
    <span class="hl opt">}</span>

    <span class="hl opt">[</span>updateProgressView setHidden<span class="hl opt">:</span>YES<span class="hl opt">];</span>
    <span class="hl opt">[</span>updateButton setEnabled<span class="hl opt">:</span> YES<span class="hl opt">];</span>
<span class="hl ppc">#endif</span>
<span class="hl opt">}</span>
</pre>

<p>Методы <code>saveProperties:</code> и <code>loadProperties:</code> сохраняют и восстанавливают содержимое формы при запуске и остановке приложения. Обратите внимание, что для сохранения данных в файле надо запросить у системы положение предназначенного для этого каталога.</p>

<pre class="hl">
<span class="hl opt">- (</span><span class="hl kwb">void</span><span class="hl opt">)</span> saveProperties <span class="hl opt">{</span>
    NSDictionary <span class="hl opt">*</span>props <span class="hl opt">= [[</span>NSDictionary alloc<span class="hl opt">]</span> initWithObjectsAndKeys<span class="hl opt">:</span>
<span class="hl ppc">#ifndef TESTING</span>
                          batchNumberTextField.text<span class="hl opt">,</span> &#64;<span class="hl str">&quot;batchNumberTextField&quot;</span><span class="hl opt">,</span>
                          statusTextView.text<span class="hl opt">,</span> &#64;<span class="hl str">&quot;statusTextView&quot;</span><span class="hl opt">,</span>
                          lastUpdatedLabel.text<span class="hl opt">,</span> &#64;<span class="hl str">&quot;lastUpdatedLabel&quot;</span><span class="hl opt">,</span>
<span class="hl ppc">#endif</span>
                           <span class="hl kwa">nil</span><span class="hl opt">];</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span>NSString<span class="hl opt">*</span> key <span class="hl kwa">in</span> props<span class="hl opt">) {</span>
        <span class="hl kwd">NSLog</span><span class="hl opt">(</span>&#64;<span class="hl str">&quot;%&#64; - %&#64;&quot;</span><span class="hl opt">,</span> key<span class="hl opt">, [</span>props objectForKey<span class="hl opt">:</span>key<span class="hl opt">]);</span>
    <span class="hl opt">}</span>

    NSString<span class="hl opt">*</span> filename <span class="hl opt">=</span> <span class="hl kwd">pathInDocumentDirectory</span><span class="hl opt">(</span>PropertiesFilename<span class="hl opt">);</span>
    <span class="hl kwa">if</span> <span class="hl opt">([</span>props writeToFile<span class="hl opt">:</span>filename atomically<span class="hl opt">:</span>YES<span class="hl opt">] ==</span> NO<span class="hl opt">)</span>
        <span class="hl kwd">NSLog</span><span class="hl opt">(</span>&#64;<span class="hl str">&quot;Unable to save properties into file [%&#64;]&quot;</span><span class="hl opt">,</span> filename<span class="hl opt">);</span>

    <span class="hl opt">[</span>props release<span class="hl opt">];</span>
<span class="hl opt">}</span>

<span class="hl opt">- (</span><span class="hl kwb">void</span><span class="hl opt">)</span> loadProperties <span class="hl opt">{</span>
    NSDictionary <span class="hl opt">*</span>props <span class="hl opt">= [[</span>NSDictionary alloc<span class="hl opt">]</span> initWithContentsOfFile<span class="hl opt">:</span><span class="hl kwd">pathInDocumentDirectory</span><span class="hl opt">(</span>PropertiesFilename<span class="hl opt">)];</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span>NSString<span class="hl opt">*</span> key <span class="hl kwa">in</span> props<span class="hl opt">) {</span>
        <span class="hl kwd">NSLog</span><span class="hl opt">(</span>&#64;<span class="hl str">&quot;%&#64; - %&#64;&quot;</span><span class="hl opt">,</span> key<span class="hl opt">, [</span>props objectForKey<span class="hl opt">:</span>key<span class="hl opt">]);</span>
    <span class="hl opt">}</span>

<span class="hl ppc">#ifndef TESTING</span>
    <span class="hl opt">[</span>batchNumberTextField setText<span class="hl opt">:[</span>props objectForKey<span class="hl opt">:</span>&#64;<span class="hl str">&quot;batchNumberTextField&quot;</span><span class="hl opt">]];</span>
    <span class="hl opt">[</span>statusTextView setText<span class="hl opt">:[</span>props objectForKey<span class="hl opt">:</span>&#64;<span class="hl str">&quot;statusTextView&quot;</span><span class="hl opt">]];</span>
    <span class="hl opt">[</span>lastUpdatedLabel setText<span class="hl opt">:[</span>props objectForKey<span class="hl opt">:</span>&#64;<span class="hl str">&quot;lastUpdatedLabel&quot;</span><span class="hl opt">]];</span>
<span class="hl ppc">#endif</span>
    <span class="hl opt">[</span>props release<span class="hl opt">];</span>
<span class="hl opt">}</span>

<span class="hl opt">- (</span>IBAction<span class="hl opt">)</span>textFieldReturn<span class="hl opt">:(</span><span class="hl kwa">id</span><span class="hl opt">)</span>sender <span class="hl opt">{</span>
<span class="hl ppc">#ifndef TESTING</span>
    <span class="hl opt">[</span>sender resignFirstResponder<span class="hl opt">];</span>
<span class="hl ppc">#endif</span>
<span class="hl opt">}</span>

<span class="hl opt">-(</span>IBAction<span class="hl opt">)</span>backgroundTouched<span class="hl opt">:(</span><span class="hl kwa">id</span><span class="hl opt">)</span>sender <span class="hl opt">{</span>
<span class="hl ppc">#ifndef TESTING</span>
    <span class="hl opt">[</span>batchNumberTextField resignFirstResponder<span class="hl opt">];</span>
<span class="hl ppc">#endif</span>
<span class="hl opt">}</span>

<span class="hl kwc">&#64;end</span>
</pre>

<p>Все! Мы рассмотрели все основные файлы. Приложение полностью готово. Можно собирать и заливать в аппарат (не забыв купить у Apple лицензию разработчика).</p>

<p>Я выложил полный проект на GitHub &ndash; <a href="https://github.com/begoon/usvisa-app/">usvisa-app</a>. Замечания и мысли принимаются.</p>

<p>Можно заценить видео:</p>

<p><a href="https://www.youtube.com/watch?v=fxKlXDsDANU">https://www.youtube.com/watch?v=fxKlXDsDANU</a></p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/fxKlXDsDANU" frameborder="0" allowfullscreen></iframe>

<h2>И еще!</h2>

<p>Если вы подумываете о том, чтобы ваше приложение было распродано миллионным тиражом, стоит начать с красивой иконки. Для приложения обычно надо их несколько: 57x57 и 114x114 для непосредственно приложения, и 512x512 и 1024x1024 для публикации в AppStore.</p>

<p>Мы поступим проще и возьмем иконку из открытых источников &ndash; <a href="http://en.wikipedia.org/wiki/Great_Seal_of_the_United_States">The Great Seal of the United States</a>.</p>

<p><img src="http://demin.ws/images/blog/usvisa/app/USVisa-icon-114x114.png" alt="" />
</p>

<h2>P.S.</h2>

<p>Я решил написать пост про это приложение после того, как цензоры AppStore его «завернули», сославшись на пункт в правилах, где говорится, что приложения с минимальной функциональной нагрузкой, которые можно реализовать через HTML5, не будут допущены. Видимо, они более не хотят видеть пукающих или просто отображающих статическую картинку приложений. Можно было бы поспорить с цензорами на тему минимальной функциональной нагрузки или реализации через HTML5, но я забил. Во-первых, лично мне нравится, что Apple старается не пропускать бесполезные и некачественные приложения, и во-вторых &ndash; я и так получил массу удовольствия от освоения Objective-C, и на данный момент работаю еще над двумя приложениями.</p>

<h2>P.P.S.</h2>

<p>Скоро будет еще статейка про разработку приложений для iOS для новичков, так что <a href="http://demin.ws/">следите за анонсами</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Первый "взлом" моего девиза]]></title>
    <link href="http://demin.ws/blog/russian/2012/09/05/first-hack-of-motto/"/>
    <updated>2012-09-05T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/09/05/first-hack-of-motto/</id>
    <content type="html"><![CDATA[<p>Сегодня с удовольствием получил письмо c девизом, который закодирован
у меня на странице &ldquo;<a href="http://demin.ws/about/">Автор</a>&rdquo;. Первая ласточка.</p>

<p>Сразу скажу, что никакого приза за решение этой задачки не полагается, кроме
почета и ссылки, которую я могу поставить вместе с именем решившего.</p>

<p>Просьба не постить решение нигде в комментарии, чтобы не портить другим
возможность решить самостоятельно.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Уровни для Сокобана]]></title>
    <link href="http://demin.ws/blog/russian/2012/09/04/sokoban-maps/"/>
    <updated>2012-09-04T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/09/04/sokoban-maps/</id>
    <content type="html"><![CDATA[<p>Во времена XTшек и ДОС был у меня вариант Сокобана, реализованный в виде
махонького бинаря, размером менее десяти килобайт. Называлось это чудо <a href="http://demin.ws/files/pusher.zip">pusher.exe</a> и выглядело вот так:</p>

<p><img src="http://demin.ws/images/blog/pusher-sokoban-level-01.png" alt="" />
</p>

<p>Это был простой уровень, но как насчет вот такого?</p>

<p><img src="http://demin.ws/images/blog/pusher-sokoban-level-59.png" alt="" />
</p>

<p><em>Элементарно запускается через DOSEmu: <code>DOSEmu -exit pusher.exe</code>.</em></p>

<p>Кому лень запускать можно посмотреть демку:</p>

<iframe width="640" height="360" src="https://www.youtube.com/embed/3zi-ZuL6GKI" frameborder="0" allowfullscreen></iframe>

<p>И стало мне интересно, как шестьдесят уровней помещаются в столь небольшой
бинарь. Поковырявшись немного IDA&rsquo;ой, я написал программку, которая выдирает
из бинаря <code>pusher.exe</code> все уровни и печатает их в текстовом виде:</p>

<pre><code>*************************************
Maze: 1
File offset: 148C, DS:00FC, table offset: 0000
Size X: 22
Size Y: 11
End: 14BD
Length: 50

    XXXXX
    X   X
    X*  X
  XXX  *XXX
  X  *  * X
XXX X XXX X     XXXXXX
X   X XXX XXXXXXX  ..X
X *  *             ..X
XXXXX XXXX X@XXXX  ..X
    X      XXX  XXXXXX
    XXXXXXXX

*************************************
</code></pre>

<p>Можно <a href="https://raw.github.com/begoon/sokoban-maps/master/maps/sokoban-maps-60-plain.txt">скачать сразу все уровни</a>.</p>

<p>Уровни сжаты чем-то вроде Хаффмана &ndash; битовыми цепочками переменной длины.
Каждый уровень кодируется следующим образом:</p>

<ul>
<li>Размер карты по X (1 байт).</li>
<li>Размер карты по Y (1 байт).</li>
<li>X*Y байт самой карты, которая представлена последовательностью пар
&lt;СЧЕТЧИК&gt;&lt;КОД СИМВОЛА&gt;. СЧЕТЧИК - это либо один бит 0, если символ
только один, либо четыре бита <code>1 D3 D2 D1</code>, и тогда количество повторений
рассчитывается по формуле <code>N = 2 + D3*4 + D2*2 + D1</code>, то есть от 2-х до
9-и символов. КОД СИМВОЛА имеет пять разных значений: 00 - пустое место,
01 - стена, 10 - бочка, 110 - место для бочки, 111 - бочка, уже стоящая
на месте.</li>
<li>Начальная позиция игрока по X (1 байт).</li>
<li>Начальная позиция игрока по Y (1 байт).</li>
</ul>

<p>И так все 60 уровней.</p>

<p>В файле <a href="https://github.com/begoon/sokoban-maps/blob/master/pushermaps.c">pushermaps.c</a> можно увидеть весь нехитрый декомпрессор.</p>

<p>В процессе <a href="https://github.com/begoon/sokoban-maps/blob/master/disasm/pusher.lst">дизассемблирования</a> образовались уровни в удобном
текстовом, но все еще сжатом виде, например:</p>

<pre><code>level_01        db 16h, 0Bh, 0A2h, 0DFh, 38h, 32h, 1Fh, 38h, 2Ah, 3, 0E6h
                db 12h, 0C0h, 0A5h, 0F2h, 83h, 2, 81h, 3, 0E4h, 12h, 82h
                db 25h, 6, 0CDh, 64h, 22h, 51h, 0ACh, 11h, 0A1h, 0Ah, 5
                db 0E5h, 11h, 0B1h, 14h, 82h, 29h, 82h, 31h, 0A0h, 0E1h
                db 2Ch, 18h, 0D1h, 0CFh, 80h, 0Ch, 8
level_02        db 0Eh, 0Ah, 0F6h, 58h, 0Ch, 68h, 0Dh, 94h, 0C6h, 80h
                db 85h, 2, 82h, 18h, 0D0h, 15h, 4Ch, 10h, 0C6h, 0C2h, 18h
                db 21h, 8Dh, 1, 6, 4, 39h, 10h, 0A0h, 81h, 80h, 85h, 2
                db 8, 20h, 60h, 34h, 1Bh, 0Ch, 1Eh, 0CAh, 7, 4
level_03        db 11h, 0Ah, 0E3h, 9Fh, 0Eh, 7, 0C2h, 11h, 42h, 1Fh, 8
                db 50h, 23h, 0E0h, 85h, 4, 0Ch, 1Eh, 84h, 8, 0A6h, 0B4h
                db 10h, 85h, 2, 82h, 59h, 0D4h, 28h, 14h, 90h, 0D6h, 83h
                db 0DFh, 7Ch, 0Eh, 1
</code></pre>

<p>И т.д.</p>

<p>Так что если захочется где-нибудь забацать свой простенький и компактный
Сокобан, какое-то количество уровней можно
<a href="https://github.com/begoon/sokoban-maps/blob/master/maps/sokoban-maps-60-compressed.txt">взять готовыми</a>.</p>

<p>Знаю, что в интернете полно уровней для Сокобана, и автоматические решалки
имеются, но это совершенно не отменяет фан копания дизассемблером в бинаре
более чем двадцати летней давности.</p>

<p>Проект на GitHub&rsquo;e &ndash; <a href="https://github.com/begoon/sokoban-maps">https://github.com/begoon/sokoban-maps</a>, если кому
интересно.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Родной Sinclair ZX Spectrum]]></title>
    <link href="http://demin.ws/blog/russian/2012/09/01/sinclair-zx-spectrum/"/>
    <updated>2012-09-01T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/09/01/sinclair-zx-spectrum/</id>
    <content type="html"><![CDATA[<p>Не удержался я и купил таки на Ebay&rsquo;е за 50 фунтов (2500р) ЕГО &ndash; родной Sinclair ZX Spectrum, модель с 48КБ ОЗУ. Когда-то у меня он был, но в отечественном исполнении &ldquo;Ленинград&rdquo; по схеме Зонова.</p>

<p><em>(фото из Википедии)</em></p>

<p><img src="http://demin.ws/images/blog/sinclair-zx-spectrum/sinclair-zx-specturm-leningrad-board.jpg" alt="" />
</p>

<p>А тут &ndash; родной!</p>

<p><img src="http://demin.ws/images/blog/sinclair-zx-spectrum/IMG_0702.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/sinclair-zx-spectrum/IMG_0705.JPG" alt="" />
</p>

<p>Конечно, надо было открыть. Шлейфы отсоединять я побоялся, поэтому фотографировал сбоку с двух ракурсов.</p>

<p><img src="http://demin.ws/images/blog/sinclair-zx-spectrum/IMG_0708.JPG" alt="" />
</p>

<p>Справа внизу видна надпись &ldquo;1982 ISSUE TWO&rdquo;.</p>

<p><img src="http://demin.ws/images/blog/sinclair-zx-spectrum/IMG_0709.JPG" alt="" />
</p>

<p>Совершенно очаровательно навешаны странные элементы прямо на корпусах микросхем. Может &ldquo;доводили&rdquo; при наладке, а может бывший владелец лазил.</p>

<p><img src="http://demin.ws/images/blog/sinclair-zx-spectrum/IMG_0711.JPG" alt="" />
</p>

<p>В комплекте товарищ надавал родных кассет. Лично я до этого никогда не видел кассет по 15 минут.</p>

<p><img src="http://demin.ws/images/blog/sinclair-zx-spectrum/IMG_0713.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/sinclair-zx-spectrum/IMG_0714.JPG" alt="" />
</p>

<p>&ldquo;Мафон&rdquo;, увесистый блок питания и джойстик.</p>

<p><img src="http://demin.ws/images/blog/sinclair-zx-spectrum/IMG_0715.JPG" alt="" />
</p>

<p>Очаровательные книжечки.</p>

<p><img src="http://demin.ws/images/blog/sinclair-zx-spectrum/IMG_0812.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/sinclair-zx-spectrum/IMG_0813.JPG" alt="" />
</p>

<p>Не стеснялись раньше давать правильные фотографии в руководствах.</p>

<p><img src="http://demin.ws/images/blog/sinclair-zx-spectrum/IMG_0814.JPG" alt="" />
</p>

<p>Купил для такого случая на блошином рынке старый телек за фунт (50р).</p>

<p><img src="http://demin.ws/images/blog/sinclair-zx-spectrum/IMG_0811.JPG" alt="" />
</p>

<p>Увы, этот Спектрум так и не завелся. При включении пищал и выводил мусор. Так как я не боец в такого рода починке, пришлось все вернуть. Продавец хоть и понудел что-то там на тему проблем с синхронизацией видеоизображения, но после просмотра видео (ниже) согласился, и я, скрепя сердце, отослал все назад. Остались только фотографии для поста.</p>

<p><img src="http://demin.ws/images/blog/sinclair-zx-spectrum/IMG_0808.JPG" alt="" />
</p>

<iframe width="640" height="360" src="https://www.youtube.com/embed/ODSrvOOc_xg" frameborder="0" allowfullscreen></iframe>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Интервью с Чарльзом Уэзереллом]]></title>
    <link href="http://demin.ws/blog/russian/2012/08/25/interview-with-charles-wetherell/"/>
    <updated>2012-08-25T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/08/25/interview-with-charles-wetherell/</id>
    <content type="html"><![CDATA[<p>Сегодня у меня в гостях Чарльз Уэзерелл, автор книги «Этюды для программистов», изданной в 1978 году. До сих пор эта книга остается отличным источником интересных реальных задач из разных областей информатики для студентов, изучающих программирование. Сейчас Чарльз работает в компании Оракл, и любезно согласился рассказать немного о себе и о книге.</p>

<p><strong>Предупреждение</strong>: Данная статья является переводом с английского.
Я не профессиональный переводчик, поэтому в тексте могут встречаться
мелкие неточности. Желающие всегда могут прочитать
<a href="http://demin.ws/blog/english/2012/08/25/interview-with-charles-wetherell/">оригинал на английском</a>.</p>

<hr />

<p><img src="http://demin.ws/images/blog/charles-wetherell.jpg" alt="" />
</p>

<blockquote>
<p>Программы должны быть в форме понятных комментариев, объясняющих назначение кода, который следует за этими комментариями. Форматирование должно быть таковым, чтобы читателю было легко и просто понять ваш код. А компилятору без разницы. В частности, следуйте соглашениям, принятым в математике и вашем естественном языке, а не вычитанным в каком-то непонятном руководстве по языку программирования. Сначала пишите комментарии, а затем код, и не наоборот. Если вы не знаете точно, что хотите получить и почему, любой код, который вы напишете, будет по определению, неверным.</p>
</blockquote>

<hr />

<p><strong>«Этюды» не похожи на другие учебники по программированию. В них есть задачи из наиболее важных областей, и преподнесены они весьма нетрадиционным образом. Как родилась идея собрать реалистичные задачи и обыграть их в виде законченных игровых ситуаций? Можете рассказать вкратце как родились «Этюды»?</strong></p>

<p>С 1974 по 1979 я преподавал в университете UC Davis. Там была новая группа выпускников по специальности «Информатика», призванных составить учебную программу по этому предмету, но в реальности это была просто группа людей из разных факультетов. Департамент прикладных наук нанял меня как первого профессора по этой специальности для создания учебной программы. Вместе с небольшой группой других профессоров и преподавателей мы создали новый учебный план с учетом требований по специальности и начали преподавать новые и переработанные курсы.</p>

<p>Работая над учебной программой, мы сошлись во мнении, что студентам стоит иметь опыт работы над реальными задачами в дополнение к теоретическим знаниям. Но под «реальными» задачами я не имею в виду коммерческие или прикладные задачи, так как я убежден, что такие знания очень быстро устаревают. Вместо этого я хотел дать студентам задачи, в которых надо было понять требования и поработать над спецификациями. Кроме этого, необходимо было научить студентов работать в группе. Например, задача по созданию компилятора давалась группе студентов из 2-3 человек, и оценка ставилась всей группе. Также надо было описать, как они поделили работу, и был ли выбор удачным.</p>

<p>Через некоторое время мы решили начать курс программирования проектов, чтобы закрепить знания студентов по созданию законченных приложений. Я сформулировал несколько проектов, которые мы придумали. Но, когда потребовались еще идеи, вокруг были только книги с примитивными задачами, например, распечатать таблицу истинности булевых функций и пару задач, используемых в университете Карнеги-Меллон. Так, сам того не замечая, я уже писал «Этюды». Так вышло, что я ушел из университета UC Davis практически сразу после публикации книги и точно не знаю, продолжили ли они использовать книгу в курсе по проектам.</p>

<p><strong>Сколько длилась работа над книгой?</strong></p>

<p>Я работал над «Этюдами» полтора-два года. Вначале уже было несколько готовых глав от курсовых. Договор с издательством подписали очень быстро, как я помню, где-то за месяц. Затем около года я писал остальные главы. Конечно, приходилось это делать вместе с основной работой. Рецензирование и корректура заняли еще месяцев шесть. И через пару месяцев после окончания работы я получил первую копию.</p>

<p><strong>Почему вы не писали книг после «Этюдов», и почему «Этюды» не переиздавались?</strong></p>

<p>Из университета UC Davis я ушел работать в Bell Labs. Там я вел проект по созданию первых компиляторов языка Ада. Мы публиковали техническое отчеты, но писать книгу реально не было времени. После Bell Labs я переехал в Силиконовую Долину работать в стартапе, и опять для книги не было времени. Далее появилась семья, а дети, как большинство родителей знает, требуют времени. Ну, а дальше вы и сами знаете.</p>

<p>В семидесятых Юрис Хартманис, один из моих любимых учителей, сказал мне, что если написать учебник по информатике, то должно хватить денег на новую машину. В те времена было много библиотек, которые все были готовы купить хотя бы по одной копии, обеспечивая минимальный уровень дохода хотя бы на Фольксваген (Фольксваген Жук тогда еще выпускался!). Если повезет, то могло хватить и на Мерседес. Естественно, если написать что-то вроде «Экономикс» Самуэльсона, то можно ежегодно покупать Ламборгини.</p>

<p>Но успех учебникам приходит, только когда они используются в учебных курсах. Увы, только несколько колледжей в Штатах начали использовать «Этюды», поэтому денег это приносило немного. Издательство не горело желанием работать над переизданием. Книга хорошо продавалась индивидуальным покупателям, но для учебников это - несущественный бизнес.</p>

<p>Но кое-что необычное произошло. Сразу после публикации «Этюдов» советское министерство образования посмотрело книгу и решило купить права на переиздание на территории Советского Союза. Если честно, это был настоящий дипломатический прорыв. Обычно Советский Союз просто игнорировал авторские права. Данный платеж был приятным сюрпризом.</p>

<p>Увы, в абсолютном эквиваленте сделка была не очень прибыльной. Они заплатили за права 1200 долларов США, что даже в семидесятых было не очень много. Я получил половину, $600. Конечно, было здорово, что «Этюды» были переведены на русский, после чего весьма широко использованы в советской учебной программе. Например, я работал с двумя русскими, использовавшими книгу, будучи студентами. Александр, вы третий! В целом, было напечатано около 60-ти тысяч экземпляров на русском языке.</p>

<p>И какую же машину с этого мне было купить? В итоге, я купил новое пианино, которое до сих пор стоит у меня в гостиной.</p>

<p><strong>Как вы находили темы для этюдов?</strong></p>

<p>По-разному. Пара задач были просто взяты из жизни. Например, задачи для этюдов про расчет расхода бензина и дохода от инвестирования я использовал сам. Часть задач родилась из моего увлечения компьютерными играми и искусственным интеллектом, например, про игры Калах и Менеджмент. Задачи про языки программирования в конце книги были вариантами из нашего курса по компиляторам. Какие-то этюды были классическими теоретическими задачами, просто немного завуалированными: машины Тьюринга, раскрашивание карты, сканер форматов.</p>

<p>В четвертой главе задача про автоматическое форматирование текста придумана моим коллегой из Ливерморской лаборатории. Он создал один из самых первых форматировщиков текста, который я использовал, работая над диссертацией и над черновиками «Этюдов». Не стоит забывать, что это было до того, как UNIX стал популярным, и даже программа nroff был чем-то «продвинутым». Поэтому задача, поставленная в этой главе, выглядела актуальной.</p>

<p>Приведенные в книге решения выбраны среди тех, что «умещались» в физический размер книги. Я также хотел показать студентам реальный код. Помните, в последней задаче даже говорилось, что решение является неполным.</p>

<p><strong>Для каждого этюда вы рекомендовали время исполнения. С 1978 года языки программирования «немного» изменились, став «чуть более» развитыми. Но даже сейчас ваши рекомендации выглядят весьма жестко. Вы пробовали «проиграть» этюды, работая над книгой? Есть ли у вас любимый этюд?</strong></p>

<p>Сейчас понятно, что это было ошибкой. Даже по нынешним меркам, даже на таком языке как Руби (кстати, моем любимом на сегодняшний день), который так много делает за вас, рекомендованные длительности исполнения остаются весьма суровыми. Не стоит забывать, что когда «Этюды» создавались, UNIX только набирал популярность, Бейсик, Фортран и Паскаль были основными языками обучения, а C только появился. Фактически не было интерактивных терминалов для программирования, и студенты готовили программы на перфокартах (хотя у моих студентов был доступ к терминалам, благодаря связям в Ливерморской лаборатории).</p>

<p>Сложно сказать, какой этюд у меня любимый. Мне нравится интерпретатор языка TRAC, так как приходится возвращаться к основам языков программирования, а эти вопросы часто упускаются в учебной программе. Языки TRAC и макрогенератор Strachey были придуманы в одно и то же время, независимо друг от друга. Оба автора опубликовали свои работы с интервалом в несколько месяцев. Языки очень похожи и демонстрируют, как работа с текстовыми данными может решать сложные задачи. Очень полезно изучать их вместе, чтобы увидеть, в чем эти языки отличаются, а в чем, напротив, похожи. Еще мне нравится этюд про перемещающий загрузчик, так как он решает все еще актуальные задачи в трансляции языков программирования. Мне до сих пор непонятно, почему подобные приемы все еще не используются сплошь и рядом.</p>

<p>Если честно, у меня не было достаточно времени прорешать все задачи в процессе работы над книгой. Однако, работая в Bell Labs, я был вынужден изучать UNIX и ее утилиты. Так, например, я решил реализовать этюд про расход бензина на awk’е. Забавно, я нашел ошибку в самом awk’е и отписал об этом Брайну Кернигану. Он сказал, что знал об этой проблеме, но никому не удавалось ее локализовать. Ошибка была классической – использование памяти после ее освобождения.</p>

<p><strong>Не могу не спросить про этюд о шифре Виженера. Там была парочка «подстав», например «незначительная» опечатка в виде пропущенной строки в середине зашифрованного текста и также «немного неверный» метод взлома, предлагаемый как вариант решения. Конечно, ничто из этого не остановило читателей от успешного взлома, и даже сделало этюд еще более интересным. Все же, что там произошло с этой главой?</strong></p>

<p>Да, неудобно вышло. При подготовке текста книги в издательстве все черновики перенабирались заново, но вот картинки печатались с оригинала как есть. Увы, моя картинка с зашифрованным текстом содержала ошибку. Интересно, что до перевода на русский никто не жаловался (или по крайней мере мне не сообщали). А неточности в самой задаче были скорее всего из-за моего изложения. Хотелось бы надеяться, что это единственное подобное место в книге.</p>

<p><strong>Мне кажется, что подготовка и возможно прорешивание задач для книги в целом было задачей не из простых. Есть ли еще подобные сюрпризы в книге?</strong></p>

<p>Задуманных сюрпризов нет. Когда я решал задачу про расход бензина, я осознал, что постановка недостаточно четкая. Возможно, было еще несколько мест, где могли требоваться уточнения.</p>

<p>Думаю, в целом получилось не так уж и плохо. Конечно, подготовка решабельных задач заняла гораздо больше времени, чем требовалось студентам на их решение. Мне не хотелось глупо выглядеть перед читателями.</p>

<p>К счастью, мне помогали, чтобы было очень кстати. Текст и картинки были изначально подготовлены с использованием новых средств форматирования и рисования, разработанных Хэнком Моллом и Джоном Битти. Это очень упрощало работу. Я писал сам текст на «формулярах», специальных листах для перфокарт. Эти листы затем отправлялись людям в группу «набивки», которые заодно еще и отчитывали текст. Если им казалось, что я допустил ошибку (или явную несуразицу), они набивали оба варианта, исходный и исправленный, чтобы я мог выбрать правильный.</p>

<p>Издатель попросил нескольких сторонних людей прочитать книгу и высказать свое мнение. Один из них оставил комментарии фактически на каждой строке текста. Именно он помог сделать книгу значительно лучше. Тогда я не знал, кто именно это был. Позже обнаружилось, что это был Стив Мачник (известный своей книгой про оптимизацию в компиляторах). Я был ему очень благодарен.</p>

<p><strong>Если бы вы писали Этюды сегодня, что бы вы добавили?</strong></p>

<p>Для начала, я определенно хотел бы исправить ошибки в задаче про шифр.</p>

<p>Электронная подпись и криптография с открытым ключом могли бы стать новой задачей. Также я бы подправил главу про арифметику высокой точности. Однозначно я бы изменил главу по языкам программирования и компиляторам с учетом современных подходов. Еще идея (изначально от Джона Флетчера) – сделать пару этюдов по написанию интерпретатора Лиспа на Руби (например) и упрощенный Руби на Лиспе. Или что-то в этом роде.</p>

<p>Я бы, возможно, убрал один или два простых этюда. Есть много задач из области искусственного интеллекта (в частности, генетического программирования), которые пришлись бы в тему. Можно было взять что-нибудь из нового в области структур данных (например, насколько красно-черные деревья производительнее простых двоичных деревьев). Если честно, сложно однозначно сказать, какая б задача точно подошла, до тех пор, пока не поработаешь над ней.</p>

<p><strong>Большинство этюдов сфокусированы на реализации, нежели на том, как в целом подступиться к задаче, так как почти всегда вы даете подробное описание метода решения. Как вы думаете, нужно ли также давать студентам задачи без какой-либо подсказки о возможном решении? Что это могли бы быть за задачи? И как следовало бы их оценивать по-вашему?</strong></p>

<p>В жизни всегда встречаются проблемы, в которых сначала надо понять, в чем именно проблема. Было бы неплохо обучить студентов подобному анализу, так как в реальности подобный навык – редкость. Но это не было изначальной идеей «Этюдов», так как это тема достойна целого отдельного курса. В «Этюдах» предполагалось давать студентам осмысленную задачу для практики полного цикла разработки. Здесь все еще очень много того, что студент должен самостоятельно решить. Например, решения оценивались по качеству кода, по умению автора объяснить результаты и по производительности программы.</p>

<p>Тут возможно сделать целый курс из задач того типа, что вы предлагаете, но тогда на лекциях надо разбирать методы подобного анализа, и книга также должна включать в себя соответствующие материалы. Это получится совсем другая книга.</p>

<p><strong>Чарльз, в плане ваших интересов и работы вне «Этюдов». Я знаю, вы эксперт в области компиляторов. Вы работали, например, над созданием компилятора языка XPL. Над чем вы сейчас работаете в Оракле? Все еще программируете?</strong></p>

<p>Да, программирую. Что мне нравится в программировании, так это то, что можно реально сделать то, о чем думаешь.</p>

<p>Моя основная область знаний – это теория, разработка и реализация языков программирования. Когда я был студентом, информатика как таковая еще не существовала, и моей специальностью была прикладная математика. Но мой диплом был связан с добавлением новых возможностей в язык TRAC (не напоминает один из этюдов?). Я работал над XPL, над полной компилирующей средой для Ада, над LR-генератором парсеров грамматик (вместе в Элом Шэнноном), над предложениями по добавлению массивов в Фортран, над новым языком описания потоков данных (вместе с Джимом МакГроу), и (довольно недавно) над новым генератором кода и оптимизатором для ораклового языка PL/SQL. Последнее время я работаю над некоторыми специальными проектами Оракле в области языков программирования. Если все получится, вы сможете прочитать об этом.</p>

<p><strong>Глядя на тематику задачи в вашей книге, трудно угадать вашу личную область интересов. Даже в разделе по компиляторам вы даете задачу про интерактивный функциональный язык TRAC наряду с классическим процедурным языком. Так какие же области информатики вас интересуют больше всего?</strong></p>

<p>Больше всего меня интересуют:</p>

<ol>
<li><p>Языки программирования, в частности, определение их семантики.</p></li>

<li><p>Структуры данных и их производительность.</p></li>

<li><p>Игры и искусственный интеллект.</p></li>
</ol>

<p>В основном, конечно, моя работа связана с первой темой. Я много занимался  производительностью компиляторов, что, несомненно, связано и со второй темой. Еще в средней школе, я интересовался компьютерами и любил игры. Отсюда появился и третий интерес. Для меня компьютеры всегда были и остаются интересным развлечением. Хотя мне уже не понять всего того, что мой младший сын принимает как должное, имея айпад.</p>

<p>Мой интерес в компьютерных играх можно увидеть в паре статей, которые я написал (с друзьями) про разновидность шахмат, называемую Кригшпиль (Kriegspiel). Они были опубликованы в журнале «Computer Journal». В одной из них была приведена полная программа для проверки правильности ходов в Кригшпиле. На тот момент было несколько обучающих программ для студентов, но в которых, увы, проверялись далеко не все тонкости шахматных правил. Были, конечно, шахматные программы, но до времен открытого программного обеспечения было еще далеко, а авторы шахматных программ не хотели раскрывать своих секретов, так как продавали их. Поэтому, насколько я знаю, моя программа была первой открытой реализацией для проверки шахматных ходов. Может быть, и последней. Здесь, в Силиконовой Долине, об этом проекте есть мое аудио интервью в компьютерном музее.</p>

<p>Обычно, мой подход следующий: сначала я пытаюсь подобрать подходящую теоретическую модель для задачи, а затем разобраться, как применить ее на практике.</p>

<p><strong>За все эти годы вы видели язык программирования, который могли бы назвать лучшим?</strong></p>

<p>На текущий момент мне очень нравится Руби. Я написал много кода на С, но мне не нравится низкий уровень безопасности в нем. Раньше мне нравился XPL, который похож на С (конечно, он был создан независимо), но гораздо более безопасен.</p>

<p>Будучи студентом, я написал одну длинную программу на Сноболе. Я моделировал на нем исследовательскую задачу по оптимизации кода. Получилось записать формальное доказательство теорем прямо в виде процедур на Сноболе. Это было откровением. Так я заинтересовался языками, в которых есть интересные динамические свойства.</p>

<p>Я хотел бы уделить время на изучение Haskell или схожего языка для какого-нибудь хорошего проекта. Уверен, там есть чему поучиться. Надо понимать, что написание простого примера вовсе не означает знание и понимание языка. Используя Руби около года в одном проекте, я каждый день узнаю что-то новое.</p>

<p><strong>Создавая языки типа С, люди хотели быть ближе к компьютерному железу, понимание работы которого было обязательным для любого профессионального программиста в те дни. И, как следствие этого, влияло на учебную программу. Как стоит учить программированию сейчас? Его чисто прикладной стороне?</strong></p>

<p>Я никогда особо не интересовался железом, хотя и писал на ассемблере, в котором даже не было мнемонического обозначения машинных команд в трансляторе.</p>

<p>Мне кажется, что вопрос поставлен неверно. Проблема не в программировании как таковом, а в анализе и процессе разработки. Можно написать все что угодно на любом языке. Вопрос в том, правильно ли выбран язык для конкретной задачи или нет.</p>

<p>Поэтому, я бы учил принципам программирования и затем просил студентов применять их в разных языках. Например, вы знаете, что компилятор Фортрана всегда включает в себя интерпретатор? (для форматов). Более того, в Фортране 77 надо реализовать в интерпретаторе возможность вызова по имени. Или, например, вы захотите добавить механизм исключений в интерпретатор. Видите, базовые вещи могут всплывать в самых неожиданных местах.</p>

<p>(Кстати, это объясняет, почему я добавил этюд про интерпретатор форматов. В свое время мне пришлось написать два разных интерпретатора форматов для Фортрана).</p>

<p><strong>Мы начали интервью с вашей книги. А у вас есть своя «версия» Этюдов? Какие-то книги или люди, которые оказали на вас большое влияние?</strong></p>

<p>Когда я учился в школе, друг моих родителей устроил меня на летом на подработку. В итоге я работал в школьном компьютерном центре. Тогда это означало ленты, перфокарты и подобные вещи. Но следующим летом школьный центр купил IBM 1401. И так как никто вокруг не знал это лучше меня, мне разрешили стать одним из программистов. Через несколько недель я уже работал над программой расчета зарплат для одного крупного государственного проекта.</p>

<p>Этот опыт помог мне получить работу в колледже, где тоже использовали 1401. С тех пор моя жизнь была плотно связана с компьютерами, и я решил получить высшее образование по информатике вместо того, чтобы идти работать после колледжа. Не столько благодаря знаниям, сколько везению, я попал в Корнелльский университет. На факультете мне также повезло с очень отзывчивыми людьми. Возможно, самую большую поддержку в учебе мне оказали Юрис Хартманис и Джон Хопкрофт. Я думаю, что даже сейчас книги Хопкрофта по теории языков являются классикой (в первом или втором издании). Но, как я уже сказал, все на факультете всячески помогали студентам. Если посмотреть на выпускников Корнелла с 60-х по 70-е, то можно увидеть много известных людей.</p>

<p>Если говорить о книгах, моим любимым автором является Кнут. Настоятельно рекомендую его «Искусство программирования». Сначала вы скорее всего мало что поймете. По моей теории эту книгу надо читать снова и снова, по несколько страниц. И с каждым разом будет открываться что-то новое.</p>

<p>Будучи классе десятом, я впервые увидел книгу Ньюмана «Мир математики». Она помогла мне разобраться в истории математики и информатики. Уверен, даже сейчас, для молодежи (не говоря уже о людях постарше), эта книги актуальна.</p>

<p><strong>Все попадают в мир компьютеров по-разному. Возможно, сейчас это значительно проще, так как они везде. Как так получилось, что вы занялись компьютерами во времена мейнфреймов и перфокарт?</strong></p>

<p>Частично я уже ответил в предыдущем вопросе. У моего отца было небольшой механический калькулятор, чем-то похожий на описанный в книге Феликса Клейна. Отцовский появился у нас от компании Ориент (я полагаю, отец получил его во время Второй Мировой), без каких-либо инструкций, и на японском языке. К счастью, цифры были арабские. Я часами пытался в нем разобраться.</p>

<p>В средней школе я уже интересовался компьютерами и математикой. Однажды мне достался игрушечный «компьютер», сделанный из мазонита, скрепок, винтов, цветных лампочек, батареек и проводов. Сейчас это можно было б назвать логическим симулятором, но на нем можно было собирать простые схемы, используя выключатели как входы и лампы накаливания как выходы. Я был в восторге. Я нашел несколько книг про компьютеры того времени, и это было несказанно интересно.</p>

<p>В первый год в старшей школе я поехал в летний лагерь, где мы изучали алгебру, теорию множеств, немного о конечных разностях (для меня все это было загадкой), и даже программировали компьютер. Там я научился играть в бридж, чтобы иметь деньги на девушек (в школе девушки являются сильным мотиватором!).</p>

<p>К моменту окончания школы, благодаря всему вышеописанному и нескольким курсам из колледжа (преимущественно с Томом Читемом), я был уже достаточно увлечен.</p>

<p><strong>Под занавес, есть выражение про три вещи, которые каждый мужчина обязан сделать. Есть ли такие три вещи для программистов?</strong></p>

<p>Не уверен, что могу назвать то, что каждый программист должен сделать. Но я знаю, что каждый программист должен знать или уметь делать.</p>

<ol>
<li><p>Иметь познания в формальной математике. Уровня для понимания книг Хопкрофта и Ульмана, дополненного немного теорией графов, будет достаточно. Дискретная математика крайне необходима; математический анализ может понадобится в некоторых областях.</p></li>

<li><p>Умение понятно писать на родном языке. Дейкстра говорил, что человек, не умеющий писать на собственном языке, не может писать хорошие программы (надеюсь, Дейкстра это действительно говорил!). Написание программ, по сути, -  как написание прозы. Если вы не можете связно излагать на родном языке, сделать это, например, на С, будет еще сложнее.</p></li>

<li><p>Стоит помнить, что программа предназначена для общения людей, а не компьютеров. Что вы напишете, то компьютер и сделает. Ему все равно, что именно. Ваша задача убедить других людей, что то, что вы попросили компьютер исполнить, правильно. Помните, компьютеру на правильность наплевать.</p></li>

<li><p>(Бонус, четыре по цене трех). Ответ на последний вопрос значит, что программы должны быть в форме понятных комментариев, объясняющих назначение кода, который следует за этими комментариями. Форматирование должно быть таковым, чтобы читателю было легко и просто понять ваш код. А компилятору без разницы. В частности, следуйте соглашениям, принятым в математике и вашем естественном языке, а не вычитанным в каком-то непонятном руководстве по языку программирования. Сначала пишите комментарии, а затем код, и не наоборот. Если вы не знаете точно, что хотите получить и почему, любой код, который вы напишете, будет, по определению, неверным.</p></li>
</ol>

<p>Я надеюсь, что если посмотреть на главы «Этюдов», будет видно, что даже в те времена я старался применять эти принципы.</p>

<p><strong>Спасибо, Чарльз, за ответы. Мы, поклонники «Этюдов», все еще надеемся увидеть ваши новые книги. А пока, если вы, дорогие читатели, все еще не знакомы с книгой «Этюды для программистов» Чарльза Уэзерелла, не поленитесь, прочтите. Эта книга того стоит.</strong></p>

<p>&#9632;</p>

<p><em>// Чарльз Уэзерелл, Александр Дёмин</em></p>

<p><em>// Август 2012</em></p>

<p>P.S. Если вы хотите задать какие-то вопросы Чарльзу, можно это сделать в комментариях на <a href="http://demin.ws/blog/english/2012/08/25/interview-with-charles-wetherell/">странице с оригиналом интервью на английском</a>. Чарльз постарается лично на них ответить.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Английские слова, представимые шестнадцатеричными цифрами]]></title>
    <link href="http://demin.ws/blog/russian/2012/08/25/english-words-in-hex/"/>
    <updated>2012-08-25T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/08/25/english-words-in-hex/</id>
    <content type="html"><![CDATA[<p>Программисты любят &ldquo;волшебные&rdquo; числа с нестандартным, часто вербальным смыслом. Шестнадцатеричная система подходит для этого как нельзя лучше.</p>

<p>Например, если нужно число-заглушка для 16-и или 32-x битного указателя, используются слова из следующего набора:</p>

<pre><code>ABBE
ACED
BABE
BADE
BEAD
BEEF
BODE
CADE
CAFE
CEDE
COCA
CODA
CODE
DACE
DADO
DEAD
DEAF
DECO
DEED
DODO
FACE
FADE
FEED
FOOD
OBOE
</code></pre>

<p>Например:</p>

<pre><code>DEADFACE
ACEDFEED  
</code></pre>

<p>Можно пойти дальше и не ограничиваться симметричным разделением. В этом случае слов будет больше:</p>

<pre><code>ABBE
ABE
ABODE
ACCEDE
ACCEDED
ACE
ACED
ADD
ADDED
ADO
ADOBE
BAA
BABE
BAD
BADE
BAOBAB
BE
BEAD
BEADED
BED
BEDDED
BEE
BEEF
BOA
BOB
BOBBED
BODE
BODED
BOO
BOOBOO
BOOED
CAB
CACAO
CAD
CADE
CAFE
CEDE
CEDED
COB
COCA
COCOA
COD
CODA
CODE
CODED
COFFEE
COO
COOED
DAB
DABBED
DACE
DAD
DADO
DEAD
DEAF
DEB
DECADE
DECAF
DECO
DECODE
DECODED
DEE
DEED
DEFACE
DEFACED
DO
DOC
DODO
DOE
DOFFED
EBB
EBBED
EFFACE
EFFACED
FAB
FACADE
FACE
FACED
FAD
FADE
FADED
FED
FEE
FEED
FOB
FOBBED
FOE
FOOD
OAF
OBOE
ODD
ODE
OF
OFF
</code></pre>

<p>Например:</p>

<pre><code>BADCOCOA
BADCODED
FADEDDOC
CODEDBOB
</code></pre>

<p>Ну а на 64-битной системе можно писать почти предложения.</p>

<pre><code>EBBEDDEADBAOBAB
</code></pre>

<p>Кто предложит фразу для следующего, 128-и битного поколения?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Радио-86РК на железе Maximite]]></title>
    <link href="http://demin.ws/blog/russian/2012/08/23/radio86-on-maximite/"/>
    <updated>2012-08-23T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/08/23/radio86-on-maximite/</id>
    <content type="html"><![CDATA[<p>Сначала было слово, затем оригинальный Радио-86РК, который собрал старший брат вместо или во время диплома. Это был хардкор в виде трех разных питаний, вечно горевших микросхем памяти РУ3, загрузки бейсика с кассет (желательно, хромовых) и т.д.</p>

<p>Потом был <a href="http://demin.ws/projects/radio86/emulator/dos/">эмулятор под ДОС</a>, потом <a href="http://demin.ws/projects/radio86/emulator/windows/">под Windows</a>, потом <a href="http://radio86.googlecode.com/hg/online/radio86.html">на JavaScript&rsquo;е</a>.</p>

<p>Но мы возвращаемся к истокам, к железу. Итак, четвертая реинкарнация Радио-86РК в новом, на этот раз железом теле. Увы, для &ldquo;пощупать&rdquo; надо иметь это железо, поэтому для демонстрации ничего не оставалось, как только записать видео.</p>

<iframe width="640" height="360" src="https://www.youtube.com/embed/dIwQQYhqNQg" frameborder="0" allowfullscreen></iframe>

<iframe width="640" height="360" src="https://www.youtube.com/embed/KSUZ2yjPuU0" frameborder="0" allowfullscreen></iframe>

<p>К слову сказать, ядро эмуляции I8080 (КР580), которое было у меня аж в самом первом ДОСовском эмуляторе, используется на Maximite почти без изменений.</p>

<p>На всякий случай ссылочка на <a href="http://geoffg.net/maximite.html">проект Maximite</a>.</p>

<p>P.S. Кстати, если кто отдаст, продаст или поможет достать родной РК, например, в Москве, буду рад пообщаться.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Algorithms: Design and Analysis, Part I]]></title>
    <link href="http://demin.ws/blog/russian/2012/08/15/algorithms-design-and-analysis-part1/"/>
    <updated>2012-08-15T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/08/15/algorithms-design-and-analysis-part1/</id>
    <content type="html"><![CDATA[<p><a href="http://demin.ws/files/education/2012/coursera/stanford/algo1/statement-of-accomplishment.pdf">Закончил</a> онлайновый курс <a href="https://class.coursera.org/algo-2012-002/class/index">Algorithms: Design and Analysis, Part I</a> на <a href="http://coursera.org">coursera.org</a>.</p>

<p>Если сказать, что я полном отпаде &ndash; это ни чего не сказать. Причем, в отпаде я не сколько от материала. Он на высоте, но этим удивить сложно. А в восторге я от формата самого обучения, качества подготовки материалов и онлайновой технологии проведения.</p>

<p>Вкратце.</p>

<p>Курс длится шесть недель. На каждую неделю дается около полутора часов видеолекций, разбитых на эпизоды по 10-20 минут. Видео интерактивное, и в некоторых есть моменты, когда оно останавливается, и предлагаются вопросы для закрепления прослушанного. Для каждой лекций есть две соответствующие PDF&rsquo;ки со слайдами: одна с надписями вручную, которые по ходу видеолекции появляются постепенно со объяснениями лектора, а вторая с текстом, набранном привычными шрифтами. Видео можно смотреть сколько угодно раз. Можно прямо в браузере, но можно скачать видеофайлы (правда, тут я не уверен, будут ли работать интерактивные вопросы). Есть английские субтитры и транскрипт. А еще у видео, которое смотришь в браузере, есть мега возможность &ndash; менять скорость просмотра в пределах от 0.5 до 1.5. Когда начинается много &ldquo;бла-бла&rdquo; можно ускорить, на время.</p>

<p>Также на каждую неделю дается список теоретических вопросов и практическое задания. На вопросы надо ответить, а для практики написать программу и засабмитить что требуется. Есть ограничения на количество попыток сдачи. Учитывается лучший данный ответ.</p>

<p>Реально ограничений на время сдачи нет, но ответы и решения, сданные с запозданием (по истечению недели), будут оценивать с 50%-й &ldquo;скидкой&rdquo;, поэтому если охота получить сертификат в конце, лучше все сделать вовремя.</p>

<p>В конце &ndash; последний тест-экзамен. На него есть ограничение по времени - 3 часа. Поэтому стоит выбрать время так, чтобы все можно было закончить.</p>

<p>Есть форумы, где наряду со студентами появляются и ведущие курса.</p>

<p>Мое личное субъективное мнение, что можно было б сделать курс немного &ldquo;по-жестче&rdquo;, но в целом баланс нагрузки для факультативного вечернего время провождения пару раз в неделю замечательный.</p>

<p><strong>Вывод</strong>: всем советую. Конечно, не этот конкретно курс (интересы у всех разные), а технологию в целом.</p>

<p>Если сейчас кто-то скажет, что нет денег на обучение в дорогом ВУЗе &ndash; посоветуйте найти денег на интернет и недорогой компьютер. Этого достаточно.</p>

<p>Хочу следующим попробовать <a href="https://www.edx.org/courses/MITx/6.002x/2012_Fall/about">6.002x: Circuits and Electronics</a>. Интересно, чем и как они заменят в онлайне практические занятия, без которых электроника невозможна.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RAID из USB флешек]]></title>
    <link href="http://demin.ws/blog/russian/2012/08/10/usb-stick-raid/"/>
    <updated>2012-08-10T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/08/10/usb-stick-raid/</id>
    <content type="html"><![CDATA[<p>Нашел я тут пакетик с USB флешками разных лет использования. Как обычно, в работе только две самые последние и самых больших размеров. Остальные &ndash; тут.</p>

<p><img src="http://demin.ws/images/blog/usb-stick-raid/bunch-of-usb-stricks.jpg" alt="" />
</p>

<p>Размеры от 64 мегов до 32 гигов.</p>

<p><img src="http://demin.ws/images/blog/usb-stick-raid/usb-stricks-sorted.jpg" alt="" />
</p>

<p>И возникла идея сделать из них RAID, например, просто &ldquo;concatenated disk&rdquo;, ибо в OSX это делается очень просто. Идеи тут минимум, но было интересно попробовать.</p>

<p>Купил я вот такой девайс на двенадцать сосков.</p>

<p><a href="http://www.amazon.co.uk/gp/product/B0051PGX2I/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=1634&amp;creative=6738&amp;creativeASIN=B0051PGX2I&amp;linkCode=as2&amp;tag=prodiy-21">Satechi 12 Port USB Hub with Power Adapter &amp; 2 Control Switches</a><img src="http://www.assoc-amazon.co.uk/e/ir?t=prodiy-21&amp;l=as2&amp;o=2&amp;a=B0051PGX2I" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p><img src="http://demin.ws/images/blog/usb-stick-raid/satechi-12-usb-port-extender.jpg" alt="" />
</p>

<p>Втыкаем&hellip;</p>

<p><img src="http://demin.ws/images/blog/usb-stick-raid/usb-stricks-raid-assembled.jpg" alt="" />
</p>

<p>И запускаем Disk Utility. Все флешки, вроде, видятся.</p>

<p><img src="http://demin.ws/images/blog/usb-stick-raid/disk-utility-disks-connected.png" alt="" />
</p>

<p>Создаем диск типа &ldquo;concatenated disk&rdquo; с именем &ldquo;Crazy RAID&rdquo; и добавляем туда флешки, предварительно их отформатировав в HPFS+ для единообразия.</p>

<p><img src="http://demin.ws/images/blog/usb-stick-raid/disk-utility-crazy-raid-created.png" alt="" />
</p>

<p>Подтверждаем&hellip;</p>

<p><img src="http://demin.ws/images/blog/usb-stick-raid/disk-utility-crazy-raid-confirmation.png" alt="" />
</p>

<p>Ждем минут пять и готово.</p>

<p><img src="http://demin.ws/images/blog/usb-stick-raid/disk-utility-crazy-raid-completed.png" alt="" />
</p>

<p>В системе видится.</p>

<p><img src="http://demin.ws/images/blog/usb-stick-raid/df-crazy-raid.png" alt="" />
</p>

<p>Можно теперь чего-нибудь туда скопировать.</p>

<p><img src="http://demin.ws/images/blog/usb-stick-raid/mc-crazy-raid-copying.png" alt="" />
</p>

<p>Конечно, конструктивного применения тут реально ноль, ибо все флешки разные и кроме их объединения в один диск сложно что-то еще сделать в плане RAID. Скорость записи будет определяться той флешкой, на которую идет запись в данный момент. При параллельном чтении, возможно, будет ускорение.</p>

<p>Но выглядит приколько!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Национальный компьютерный музей в Блечли Парке]]></title>
    <link href="http://demin.ws/blog/russian/2012/08/10/national-museum-of-computing/"/>
    <updated>2012-08-10T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/08/10/national-museum-of-computing/</id>
    <content type="html"><![CDATA[<p>В <a href="http://demin.ws/blog/russian/2012/07/06/bletchley-park-colossus/">прошлый раз</a> в музей <a href="http://www.tnmoc.org/">The National Museum of Computing</a> я не попал, поэтому в этот раз пять раз проверил их расписание и &ndash; попал.</p>

<p>Далее будет набор выборочных фотографий того, за что у меня лично зацепился взгляд. Естественно, экспонатов там в разы больше.</p>

<p>Настоящая BBS, хоть и на Windows.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0716.JPG" alt="" />
</p>

<p>Родоначальник(и) эпохи.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0717.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0718.JPG" alt="" />
</p>

<p>NeXT CUBE.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0719.JPG" alt="" />
</p>

<p>Модем, братья, на 1200! или 300 full duplex.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0720.JPG" alt="" />
</p>

<p>Матрицу смотрели? Помните, через какой модем они там телепортировались?</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0721.JPG" alt="" />
</p>

<p>Удивительно, если б в британском музее не было бы Raspberry Pi.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0722.JPG" alt="" />
</p>

<p>Портативный лазеровод.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0723.JPG" alt="" />
</p>

<p>Эх, купить себе эту легенду что-ли?</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0724.JPG" alt="" />
</p>

<p>Братья! Пристегните ремни. Это <strong>целый</strong> класс <strong>работающих</strong> BBC Micro. Книги и мануалы &ndash; на выбор. Можно присесть и по программировать.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0725.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0726.JPG" alt="" />
</p>

<p>Что я и сделал.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0731.JPG" alt="" />
</p>

<p>BBC Micro изнутри.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0732.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0738.JPG" alt="" />
</p>

<p>Везде книги, новые, старые.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0733.JPG" alt="" />
</p>

<p>RML 380Z</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0727.JPG" alt="" />
</p>

<p>PET Commodore</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0728.JPG" alt="" />
</p>

<p>ELIZA умеет задавать вопросы и отвечать.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0729.JPG" alt="" />
</p>

<p>История компьютерной памяти, от лампы до SIMM&rsquo;ов и DIMM&rsquo;ов.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0734.JPG" alt="" />
</p>

<p>Флешка из прошлого.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0735.JPG" alt="" />
</p>

<p>Макетные микрокомпьютеры с кишками наружу (подборочка). У меня к ним слабость.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0736.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0737.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0741.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0743.JPG" alt="" />
</p>

<p>Хотели б на таком учиться в свое время? Я тоже.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0730.JPG" alt="" />
</p>

<p>Эргономичные клавиатуры не вчера придумали.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0739.JPG" alt="" />
</p>

<p>Дорогущий бизнес-компьютер восьмидесятых.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0740.JPG" alt="" />
</p>

<p>На огромной полке с различными мануалами нежно припаркованы кассеты. Оказывается, их использовали не только для дома и для семьи.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0742.JPG" alt="" />
</p>

<p>Переходим в полусредний вес. Уже не настольные, а напольные компьютеры.</p>

<p>Cray</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0744.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0745.JPG" alt="" />
</p>

<p>PDP-8</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0772.JPG" alt="" />
</p>

<p>PDP-11</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0746.JPG" alt="" />
</p>

<p>Рабочая станция XEROX.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0747.JPG" alt="" />
</p>

<p>VAX. В годы учебы я его &ldquo;видел&rdquo;, точнее представлял его, через призму удаленного терминала.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0748.JPG" alt="" />
</p>

<p>Графическая станция.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0749.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0750.JPG" alt="" />
</p>

<p>Терминалы, терминалы.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0751.JPG" alt="" />
</p>

<p>В зале эпохальных персоналок.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0752.JPG" alt="" />
</p>

<p>Помните этого кроссавца?</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0753.JPG" alt="" />
</p>

<p>В углу? Мы то его в основном &ldquo;знаем&rdquo; по схеме Зонова. А это оригинал.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0754.JPG" alt="" />
</p>

<p>В действии.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0758.JPG" alt="" />
</p>

<p>Оказывается, что на самом деле машин в формфакторе &ldquo;клавиатура&rdquo; было очень много.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0755.JPG" alt="" />
</p>

<p>Вот эта машина сделала Билла Гейтса знаменитым.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0756.JPG" alt="" />
</p>

<p>А вот эта &ndash; двух Стивов, и позволила создать чудесный Mac Air, с которого я пишу сейчас этот пост, роняя на клавиатуру слезы умиления.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0757.JPG" alt="" />
</p>

<p>Можно присесть на банкеточку и порубиться в раритетные игрушки. Тут собраны основные эпохальные игровые компьютеры 80-90x.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0773.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0759.JPG" alt="" />
</p>

<p>В отдельной комнате можно порубиться во Flight Simulator.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0760.JPG" alt="" />
</p>

<p>Мейнфреймы.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0761.JPG" alt="" />
</p>

<p>UNIX. Начало всех начал.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0762.JPG" alt="" />
</p>

<p>Реальный монитор радара.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0763.JPG" alt="" />
</p>

<p>Кстати, какой же компьютерный музей без вайфая.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0764.JPG" alt="" />
</p>

<p>PDP-11</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0765.JPG" alt="" />
</p>

<p>Аналоговый компьютер. В цифровых компьютерах вы разбиваете задачу на элементарные двоичные операции. В аналоговых вы стоите модель вычислений на основе свойств усилителей и обратных связей, заставляя их складывать электрические сигналы, вычитать, интегрировать, дифференцировать и т.д.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0766.JPG" alt="" />
</p>

<p>Удобно, однако.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0767.JPG" alt="" />
</p>

<p>Новый, пока неготовый зал.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0771.JPG" alt="" />
</p>

<p>Хотя что-то там уже есть.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0770.JPG" alt="" />
</p>

<p>Машинки для пробивки перфокарт.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0768.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0769.JPG" alt="" />
</p>

<p>А вот пример (внимание) калькулятора!</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0774.JPG" alt="" />
</p>

<p>Архивы журнала Computer Weekly, сделанные вручную, кстати.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/tnmoc/IMG_0775.JPG" alt="" />
</p>

<p>Братья! Это нереальный музей. К сожалению, туристам до него сложно добираться, но настоящих фанатов это не должно останавливать. Какая там Trafalgar Square или London Eye? Вот что надо смотреть.</p>

<p>У меня было всего сорок минут на все про все. Чертовски мало. Если удастся, съезжу еще.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MOXA NPort 5150]]></title>
    <link href="http://demin.ws/blog/russian/2012/08/08/moxa-nport-5150/"/>
    <updated>2012-08-08T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/08/08/moxa-nport-5150/</id>
    <content type="html"><![CDATA[<p>Брат подарил вот такого зверя &ndash; <a href="http://www.moxa.com/product/nport_5150.htm">MOXA NPort 5150</a>.</p>

<p><img src="http://demin.ws/images/blog/moxa/nport/5150/IMG_0699.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/moxa/nport/5150/IMG_0697.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/moxa/nport/5150/IMG_0698.JPG" alt="" />
</p>

<p>Этот девайс позволяет старые устройства, которые умеют работать, например, только c модемом по RS232 через AT-команды, подключить в мир TCP/IP. Мы такие использовали в бытность мою в Автобанке для подключения POS-терминалом и банкоматов, которые многие под сих пор модемами пользуются, в Ethernet. Меняешь скрипты дозвона, например, <code>ATDT12345678</code> на что-то типа <code>ATD192.168.1.1</code> и вперед.</p>

<p>Ума не приложу, что с ним делать. У меня COM-порта то нет нормального, только через USB-шланг. Но в свое время такие устройства денег стоили реальных.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA["Programming 32-bit Microcontrollers in C, Exploring the PIC32", Lucio Di Jasio]]></title>
    <link href="http://demin.ws/blog/russian/2012/08/08/exploring-pic32/"/>
    <updated>2012-08-08T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/08/08/exploring-pic32/</id>
    <content type="html"><![CDATA[<p>Работая с Джефом Грэхемом <a href="http://demin.ws/blog/russian/2012/08/07/interview-with-geoff-graham/">над интервью</a>, я узнал от него про книгу, идеи и готовые части кода из которой стали основой некоторых подсистем программой части Maximite.</p>

<p><a href="http://www.amazon.co.uk/gp/product/B005VO36UG/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=1634&amp;creative=6738&amp;creativeASIN=B005VO36UG&amp;linkCode=as2&amp;tag=prodiy-21">Programming 32-bit Microcontrollers in C: Exploring the PIC32 (Embedded Technology)</a><img src="http://www.assoc-amazon.co.uk/e/ir?t=prodiy-21&amp;l=as2&amp;o=2&amp;a=B005VO36UG" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p><a href="http://www.amazon.co.uk/gp/product/B005VO36UG/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=1634&amp;creative=6738&amp;creativeASIN=B005VO36UG&amp;linkCode=as2&amp;tag=prodiy-21"><img border="0" src="http://ws.assoc-amazon.co.uk/widgets/q?_encoding=UTF8&amp;ASIN=B005VO36UG&amp;Format=_SL160_&amp;ID=AsinImage&amp;MarketPlace=GB&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=prodiy-21" ></a><img src="http://www.assoc-amazon.co.uk/e/ir?t=prodiy-21&amp;l=as2&amp;o=2&amp;a=B005VO36UG" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p>Мой личный опыт с микроконтроллерами PICmicro закончился лет десять назад, когда с братом делами автомобильную сигнализацию на основе GSM телефона. В сердце был PIC16, DTFM декодер (уникальная, кстати на тот момент фича, когда можно было рулить сигнализацией, позвонив на ее номер и пикая с трубку циферьки) и датчики.</p>

<p><img src="http://demin.ws/images/blog/sms-alarm-system.jpg" alt="" />
</p>

<p>Потом было еще насколько проектов на PIC12. Меня реально перло, что микруху с несчастными восемью ногами можно <strong>программировать</strong>, на <strong>С</strong>!</p>

<p>Потом как-то все засохло. Я переехал, и многое из &ldquo;добра&rdquo; не взял с собой. Но вот недавно, после сборки <a href="http://demin.ws/blog/russian/2012/01/19/maximite-kit/">Maximite</a> и <a href="http://demin.ws/blog/english/2012/07/11/raspberry-pi-arrived/">покупки</a> <a href="http://demin.ws/blog/english/2012/07/26/raspberry-pi-links/">Raspberry Pi</a>, вся эта тема вернулась. Но время не стоит на месте, и современные PIC32 уже на ядре MIPS, все из себя 32-х битные, плюс с какой никакой виртуализацией адресов, что позволяет делать несложные операционные системы с разделением ядра и пользовательских процессов (например, RetroBSD, которая, кстати,
<a href="http://demin.ws/blog/russian/2012/05/11/retrobsd-on-maximite/">прекрасно работает на Maximite</a>).</p>

<p>Так вот, возвращаясь к книге. В желании освежить в памяти эту тему, я отрыл ее. К моему удивлению, я, не отрываясь, с удовольствием прочитал ее по диагонали за пару вечеров.</p>

<p>Книга очень грамотно построена и рассчитана на людей с минимальными знаниями о микроконтроллерах. Там даже есть экскурс в язык С для желающих. Начиная &ldquo;от печки&rdquo; в виде примитивных примеров с картинками и подробными объяснениями, автор постепенно раскрывает весьма недетский набор тем:</p>

<ul>
<li>модель памяти</li>
<li>прерывания (например, для таймера или портов ввода/вывода)</li>
<li>последовательные и параллельные интерфейсы (например, подключение LCD-экранчика или PS/2 клавиатуры)</li>
<li>аналогово-цифровые и цифро-аналоговые преобразования (подключение, например, датчика температуры или джойстика для игры)</li>
<li>генерация черно-белого видео сигнала (например, для композитного или VGA-сигнала) с небанальным использованием прямого доступа в память (DMA), кстати, еще одной модной примочки PIC32, для быстрого пропихивания битов из буфера в основной памяти в канал SPI</li>
<li>работа SD/MMC картами</li>
<li>реализация файловой FAT</li>
<li>генерация звука через модуль ШИМ (PWM)</li>
</ul>

<p>Все примеры законченные и работающие. Особенно будет удобно, если иметь диск от книги.</p>

<p>Одним небольшим неудобством было то, что автор использует среду MPLAB и компилятор С32 (все-таки книга вышла аж в 2008 году), а Microchip последнее время всех активно пересаживает на MPLAB-X, который есть не только для Windows, но и Linux и OSX, и компилятор XC32 на базе GCC. Хотя файлы проектов несложно импортируются в новую среду, в книге явно не хватает объяснений про элементарные makefile&rsquo;ы. Но это компенсируется подробными картинками окон конфигурации, отладчика и симулятора. В принципе, книгу можно читать даже не имея компьютера под рукой.</p>

<p>Итак, проглядев книгу, вы будете понимать что и как возможно сделать на PIC32. А если решите собрать и запрограммировать реальный проект, у вас будет достаточно начального работающего кода и понимания, как запустить кристалл.</p>

<p><strong>Вывод</strong>: настоятельно рекомендуемая книга. Кстати, вышла она не недавно, так что можно найти в хорошем PDF-ном качестве, хотя купив ее, вы негласно скажете автору спасибо.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Интервью с Джефом Грэхемом]]></title>
    <link href="http://demin.ws/blog/russian/2012/08/07/interview-with-geoff-graham/"/>
    <updated>2012-08-07T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/08/07/interview-with-geoff-graham/</id>
    <content type="html"><![CDATA[<p><strong>Disclaimer</strong>: Данная статья является переводом с английского. Я не
профессиональный переводчик, так что в тексте могут встречаться
небольшие неточности. Желающие всегда могут прочитать
<a href="http://demin.ws/blog/english/2012/08/07/interview-with-geoff-graham/">оригинал интервью на английском</a>. Предложения по улучшению перевода
принимаются.</p>

<hr />

<p>Сегодня у меня в гостях Джеф Грэхем, создатель популярного
самодельного микрокомпьютера <a href="http://geoffg.net/maximite.html">Maximite</a>.  На данный момент мы
наблюдаем бум проектов, основанных на микроконтроллерах.  Мы все еще
называем их &ldquo;микроконтроллерами&rdquo; по привычке, но по сути они ими уже
не являются.  Например, кристалл PIC32 компании Микрочип содержит в
себе больше возможностей, чем в восьмидесятых мы имели в &ldquo;полноценных&rdquo;
компьютерах типа Эппл 2 или Спектрум 48.</p>

<p><img src="http://demin.ws/images/blog/maximite/geoff-graham/interview/geoff-graham.jpg" alt="" />
</p>

<blockquote>
<p>Я занимался электроникой, мини-компьютерами и
Бейсиком долгое время.  Поэтому, когда я понял, что PIC32 может
работать с VGA-дисплеем и клавиатурой, самой собой получилось, что
я решил вспомнить молодость и воссоздать один их моих первых
компьютеров.</p>
</blockquote>

<hr />

<p>Джеф создал Maximite на основе PIC32. Maximite является полностью
законченным бытовым компьютером, оснащенным современными интерфейсами,
такими как VGA, PS/2, SD, USB, а управляет всем этим &ndash; Бейсик!  Вам
это ничего не напоминает?  По мне, Maximite является превосходным
инструментом для изучения микроэлектроники, в котором можно пощупать,
где и как железо соприкасается с программным обеспечением.</p>

<p>У нас есть возможность лично задать Джефу несколько вопросов.
Джеф живет в пригороде Кенсингтон города Перт в западной части
Австралии.  Перт весьма далеко расположен от других городов, но
благодаря интернету и FedEx&rsquo;у, расстояния не кажутся такими уж и
большими в наши дни, так что это не мешает Джефу в работе над его
проектами.</p>

<p><strong>Здравствуйте, Джеф, спасибо за интервью.  Почему &ldquo;Maximite&rdquo;?
Как родилось это название?</strong></p>

<p>Изначально, когда проект начинался, я хотел назвать его &ldquo;The
Mighty Mite&rdquo;, что значит что-то небольшое (mite) и одновременно
что-то &ldquo;продвинутое&rdquo; (mighty).  Когда проект готовился к публикации
в журнале &ldquo;Silicon Chip&rdquo;, редакторы выяснили, что предложенное мной
имя уже зарегистрировано каким-то производителем продуктов, и
предложили изменить его на Maximite.  На тот момент у меня не было
других идей, и мы приняли это имя.  Кроме того, имя стало похоже
на название взрывчатки в некотором роде, что тоже было неплохо.</p>

<p><strong>Maximite очень популярен.  Вы знаете, хотя бы примерно, сколько
их вообще сделано?  И как и когда вы вдруг поняли, что проект стал
хитом?</strong></p>

<p>Обычно я говорю, что их собрано тысячи, хотя если поточнее,
где-то между тремя и четырьмя тысячами.  Около половины собраны
энтузиастами самостоятельно, а другая половина с помощью готовых плат
от компаний, скопировавших разработку.</p>

<p>Я понял, что проект популярен, по статистике посещаемости моего сайта.
В первые дни после выхода статьи в журнале количество посетителей
увеличилось в сто раз, и после этого постепенно закрепилось где-то на
отметке в двадцать раз по сравнению с до Maximite&rsquo;овскими временами.
Забавно, что в первой опубликованной статье не было ссылки на мой
сайт, что говорило о том, что люди самостоятельно начинали гуглить
после прочтения.</p>

<p>Начиная разрабатывать Maximite, я представлял компьютеры
восьмидесятых, с которыми мне довелось поиграться в те времена.
Они были очень популярны в свое время до появления более современных
моделей, которые стали гораздо сложнее в конструкции и использовании.
Ниша простых и понятных компьютеров исчезла.</p>

<p><strong>Для Maximite вы спроектировали железо и написали софт, что весьма
необычно в наши дни.  Программисты нечасто занимаются железками,
а инженеры-железячники &ndash; программами. Лично вы кто больше:
программист или железячник?</strong></p>

<p>Да, это одна из вещей, с которой я столкнулся с момента выхода
Maximite.  Люди часто смотрят на проект однобоко: либо они пытаются
изменить принципиальную схему без учета прошивки, либо наоборот.
Про себя могу сказать, что все-таки я программист, но с хорошим
пониманием электроники.</p>

<p>Еще одна вещь, которую люди часто пытаются сделать с Maximite &ndash; это
изменить его целостность как устройства, его взаимодействие с
пользователем, но делаться это должно с учетом и железа и программного
обеспечения.  Эти три составляющие важны все вместе, что
часто упускается из виду и программистами, и специалистами по
аппаратной части.</p>

<p><strong>Я лично был поражен, насколько целостным и законченным является
проект Maximite. Вы разработали все: прототип, корпус, программное
обеспечение. Можно купить даже конструкторы для любителей.  В мире
любительских проектов люди часто не доводят их до законченной формы
из-за потери интереса.  Как вы справились с этой проблемой?</strong></p>

<p>Изначально настрой все закончить был из-за желания опубликовать
проект в журнале Silicon Chip.  Большинство проектов в нем являются
законченными профессиональными продуктами, и мне пришлось следовать
стандартам.  Подобное внимание к деталям весьма необычно в наши дни,
и журналы часто не публикуют ни документации, ни модели корпуса, ни
тем более красивой лицевой панели.</p>

<p>Мне понравился столь дисциплинированный подход конкретно этого
журнала.  У меня есть несколько проектов (например, из
неопубликованных) в полузаконченном состоянии, на которые у меня
не хватает терпения довести все до ума.</p>

<p><strong>Джеф, вы занялись микроэлектроникой после выхода на пенсию.
Сколько времени, например, в день вы тратите на это хобби? Опять-таки,
чтобы довести проект Maximite до столь вылизанного состояния, видимо,
потребовалось ощутимое время.</strong></p>

<p>Да, я действительно потратил на проект много времени после выхода
на пенсию, но, что интересно, мне в некотором роде пришлось это
сделать.  Я почувствовал, что в моей прошлой профессиональной
карьере мне не удалось реализовать скрытый во мне потенциал инженера,
а вот на пенсии этой реализовалось.</p>

<p>С Maximite все происходило волнообразно. Я работал по двенадцать
часов в течении месяца, а потом практически ничего не делал несколько
недель.  Это здорово, что мне нравится работать над проектами вроде
этого, которые требуют много времени.  Я бы оценил трудозатраты на
Maximite как девять месяцев полноценной работы по восемь часов в
день, сорок часов неделю.</p>

<p><strong>MMBasic. Я знаю, что вы пытались начала найти готовую версию
Бейсика для Maximite, но после нескольких неуспешных попыток
адаптировать некоторые готовые реализации, вы решили написать свою.
По какой лицензии распространяется MMBasic?  Есть ли планы
разработать библиотеку драйверов для аппаратуры Maximite, чтобы можно
было проще создавать альтернативные прошивки, например, RetroBSD
или Lua?</strong></p>

<p>Да, я начал Maximite в надежде найти открытую версию Бейсика в
интернете и использовать ее.  Но, увы, так и не нашел подходящей
доступной реализации. Везде были какие-то сложности.  В итоге, решил
написать все сам.</p>

<p>Сначала я выпустил свой вариант Бейсика, названного MMBasic, под
лицензией GPL GNU, но был неприятный эпизод, когда некая фирма просто
удалила мое имя из авторских прав, выдав программу за свою. В довершение они даже изменили название Бейсика.  Я был вынужден создать
свою собственную лицензию, по которой код являет открытым, но не
может распространяться без моего согласия.</p>

<p>Это сработало, и сейчас несколько университетов и коммерческих
организаций используют MMBasic по договоренности со мной на тему
вариантов использования кода.  Это намного лучше, чем разрешать кому
угодно анонимно скачивать исходные тексты, а потом видеть их в сети
под чужим именем и авторскими правами.</p>

<p>На данный момент у меня нет планов создавать драйвера для аппаратуры
Maximite.  Главной причиной тому является ограниченность объема
памяти PIC32 на сегодняшний день.  Одновременно для всех устройств
(VGA, клавиатура, USB и т.д.) просто нет места сделать полноценные
загружаемые драйвера.  Можно было бы использовать более мощный
микроконтроллер, но я хотел бы пока остаться с PIC32.  Для компьютеров
типа Raspberry Pi можно сделать загружаемые драйвера, но это требует
гораздо более развитой операционной системы, а мне хотелось бы сохранить Maximite простым.</p>

<p><strong>Немного о вашем профессиональном прошлом. Например, когда и как вы
первый раз взяли в руки паяльник?  Я знаю многих людей, которые были
б не против заняться электроникой, но для которых факт пайки выглядит
очень трудной или даже невозможной задачей.  Чтобы вы посоветовали
таким людям в качестве отправной точки?</strong></p>

<p>Не могу точно вспомнить, когда я впервые взял в руки паяльник,
возможно мне было около двенадцати.  Может я не самый удачный
консультант в этом вопросе, но как мне кажется, все что нужно для
пайки &ndash; это недорогой паяльник и немного припоя.</p>

<p>Одна из хороших сторон увлечения электроникой, что это весьма дешевое
хобби.  Я бы посоветовал начать с чего-нибудь простого, например,
схемы бегущего огонька или добавления часов в Ардуино, попутно купив,
непосредственно, паяльник.  Конечно, первый блин может выйти комом,
но это неважно, так как к проекту третьему вы будете чувствовать себя
почти профессионалом.</p>

<p><strong>Можете посоветовать какие-нибудь книги или веб-сайты для
начинающих, по которым можно сделать первые шаги в электронике?
И какой, например, уровень подготовки нужен для сборки или создания
проекта типа Maximite?</strong></p>

<p>Я бы посоветовал начать с журналов, например Silicon Chip (Австралия),
Elektor (Европа) и Nuts and Volts (США).  На все эти журналы можно
подписаться и из-за границы.  Если вы полный новичок, то скорее всего
Nuts and Volts подойдет лучше всего.   Подписавшись на журнал, вы
будете постоянно иметь поток свежих идей для проектов, и, возможно,
придумаете что-нибудь свое.  Так что подписаться однозначно стоит.</p>

<p>Уровень знаний для изготовления Maximite нужен не такой уж и большой,
так как все уже готово.  Конечно, для создания подобного проекта с
нуля безусловно требуется некоторый опыт.  У меня он был.
Изначально  я учился на инженера-электронщика, а затем тридцать лет
работал в области системного программирования &ndash; так что у меня были
все необходимые знания.</p>

<p><strong>Сейчас существует множество веб-сайтов, на которых частные
разработчики железа могу продавать свои идеи и готовые проекты,
например, SparkFun.com. Интернет позволяет им за свое хобби получать
деньги. Как человек, чьи разработки активно продаются в интернете,
как вы считаете, возможно ли на подобных сайтах зарабатывать
на жизнь?</strong></p>

<p>Будет очень трудно заработать достаточное количество денег таким
образом.  Некоторым разработчикам, например, создателям Arduino,
это удалось, но большинству все-таки приходится иметь
постоянную работу еще где-то.  Отчасти проблема в том, что люди как я,
создающие сложные устройства и затем бесплатно их распространяющие,
не могут реально конкурировать.  И покупатели привыкли получать
результаты их труда по очень низким ценам.</p>

<p><strong>Расскажите немного лично о себе. Есть ли какие-то люди, например,
инженеры или программисты, у которых вам довелось или хотелось бы
поучиться?</strong></p>

<p>Если говорить о программистах, то для меня это Брайн Керниган,
который вместе с Деннисом Ритчи создал язык С и написал книгу
&ldquo;The C Programming Language&rdquo; в 1978 году. До сих пор эта книга
является прекрасным введением в С и стоит того, чтобы ее прочитать.
Когда я пишу статьи для журналов, я стараюсь писать в таком же простом
и понятном стиле.</p>

<p>Джим Роув, возможно, является инженером, оказавшим на меня
значительное влияние. Он писал статьи для журналов по электронике
в Австралии, когда я был подростком.  Спустя пятьдесят лет, он
все еще продолжает этим заниматься, и его проекты и статьи всегда
грамотно спроектированы, и при этом просты и понятны.  Он еще один
человек, кому я стараюсь подражать.</p>

<p><strong>Кстати, что привело вас в мир компьютеров и электроники?
Каким был ваш первый компьютер, и на каком языки вы начали
программировать?</strong></p>

<p>Давайте попробуем сориентироваться во времени (мне сейчас 64).
Я помню, как появился Altair, и немногим позже компания, где я
работал, стала дистрибутором Intel в Австралии.  Я учился на
инженера-электронщика и свой первый компьютер спаял сам.  Он был на
процессоре Intel 8080 и имел 512 байт памяти.</p>

<p>Тогда Бейсик был, пожалуй, единственным языком программирования из-за
ограниченных аппаратных возможностей и небольшого объема памяти.
Гораздо позже, когда появились жесткие диски, мы стали использовать
более сложные языки, и в свое время я программировал на большинстве
из них (Fortran, COBOL, PL/1, ассемблер, Pascal и т.д.)</p>

<p>Как я уже говорил, я занимался электроникой, мини-компьютерами и
Бейсиком долгое время.  Поэтому, когда я понял, что PIC32 может
работать с VGA-дисплеем и клавиатурой, самой собой получилось, что
я решил вспомнить молодость и воссоздать один их моих первых компьютеров.</p>

<p><strong>Под конец, не могли бы вы рассказать немного о своих планах.
Будет ли новая версия Maximite, например, с Ethernet или WiFi?</strong></p>

<p>В сентябрьском выпуске журнала Silicon Chip будет опубликован
проект нового Maximite с поддержкой цветного дисплея.  Он будет
поддерживать восемь цветов на VGA-дисплее, синтезированный стерео
звук и иметь разъем, совместимый в Arduino, плюс все остальные
возможности оригинального Maximite (USB, Бейсик и т.д.).  Данный
проект занял  у меня прилично времени и сил, так что я после
публикации хочу немного отдохнуть, прежде чем браться за что-то новое.</p>

<p>Вот пара эксклюзивных фотографий нового цветного Maximite.</p>

<p><img src="http://demin.ws/images/blog/maximite/geoff-graham/interview/maximite-colour.jpg" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/maximite/geoff-graham/interview/maximite-colour-tv-keyboard.jpg" alt="" />
</p>

<p><strong>Спасибо, Джеф, за интервью и за проект Maximite. Очень ждем ваших
новых разработок.</strong></p>

<p><strong>Лично я очень рад, что в последнее время люди стали понимать, что
обучение компьютерам, это не  только Word и Excel, а также знания о
том, как все это работает изнутри.  И такие проекты, как Raspberry Pi
или Maximite очень  помогают новичкам понять, как работает &ldquo;железо&rdquo;
компьютеров.</strong></p>

<p>&#9632;</p>

<p><em>// Джеф Грэхем, Александр Дëмин</em></p>

<p><em>// Август 2012</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Карманный WiFi роутер WA-6220]]></title>
    <link href="http://demin.ws/blog/russian/2012/08/02/mini-wireless-n-pocket-router/"/>
    <updated>2012-08-02T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/08/02/mini-wireless-n-pocket-router/</id>
    <content type="html"><![CDATA[<p>Бывает, придешь куда-то, а там только ethernet, например, в гостинице. А хочется и телефон, и планшет интернетом покормить. Купил я как-то вот такого зверя:</p>

<p><a href="http://www.amazon.co.uk/gp/product/B004YNK9O6/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=1634&amp;creative=6738&amp;creativeASIN=B004YNK9O6&amp;linkCode=as2&amp;tag=prodiy-21">Palm-Size Portable Mini Travel 2 in 1 Wireless N 802.11n/g WLAN Network Router / Client Adapter</a><img src="http://www.assoc-amazon.co.uk/e/ir?t=prodiy-21&amp;l=as2&amp;o=2&amp;a=B004YNK9O6" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p><a href="http://www.amazon.co.uk/gp/product/B004YNK9O6/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=1634&amp;creative=6738&amp;creativeASIN=B004YNK9O6&amp;linkCode=as2&amp;tag=prodiy-21"><img border="0" src="http://ws.assoc-amazon.co.uk/widgets/q?_encoding=UTF8&amp;ASIN=B004YNK9O6&amp;Format=_SL160_&amp;ID=AsinImage&amp;MarketPlace=GB&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=prodiy-21" ></a><img src="http://www.assoc-amazon.co.uk/e/ir?t=prodiy-21&amp;l=as2&amp;o=2&amp;a=B004YNK9O6" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p>Называется <a href="http://www.ccandc.com.tw/products_2.php?prod=100">WA-6220</a>.</p>

<p>На официальном сайте пишут:</p>

<p>WA-6220-V1 WLAN 11n Router is designed for people on the go, user can carry it travelling around and work at anywhere. It is compliant with 802.11n specifications, up to 300Mbps data rate, provides multi-functional capabilities, particularly the high performance throughput and high-quality security. Incorporating fast Ethernet ports and is compatible to other wireless (802.11a/b/g/ n) networking device, It enables your whole network sharing a high-speed cable or DSL. Its high performance is ideal for media-centric applications like streaming video, gaming and Voice over IP technology.</p>

<ul>
<li>Provides wireless speed up to 300Mbps data rate.</li>
<li>Supports WEB based management and configuration.</li>
<li>Supports UPnP, IGMP Snooping &amp; Proxy.</li>
<li>Supports Dynamic DNS, NTP client service.</li>
<li>Supports Log table and remote Log service.</li>
<li>Supports Setup Wizard mode.</li>
<li>Supports Wireless schedule.</li>
<li>Compatible with IEEE 802.11a/b/g/n Specifications.</li>
<li>Supports multiple AP, provides maximum 5 groups of SSID.</li>
<li>Supports IEEE 802.3x full duplex flow control on 10/100M Ethernet interface.</li>
<li>Supports bridging, routing and WISP functions between wireless and wired Ethernet interfaces.</li>
<li>Supports IEEE 802.1x, 64-bit and 128-bit WEP, WPA, WPA2 encryption/decryption and WPA with Radius.</li>
<li>Supports DHCP server to provide clients auto IP addresses assignment and static DHCP functions.</li>
<li>Supports DHCP client, static IP, PPPoE, PPTP, L2TP of WAN Interface.</li>
<li>Supports firewall security with port filtering, IP filtering, MAC filtering, port forwarding, URL Filtering and DMZ hosting functions.</li>
<li>Supports AP mode, Client mode, WDS, AP+WDS and Universal Repeater.</li>
<li>Supports QoS which controls the bandwidth by IP or MAC address.</li>
<li>Supports Denial-of-Service.</li>
<li>Supports WPS (Wi-Fi Protected Setup).</li>
<li>Supports WAPI (Wireless Authentication Privacy Infrastructure).</li>
<li>Supports Green Ethernet, IEEE802.3az draft2.0, EEE (Energy Efficient Ethernet).</li>
</ul>

<p>Размером со спичечный коробок.</p>

<p><img src="http://demin.ws/images/blog/wa-6220/IMG_0630.JPG" alt="" />
</p>

<p>Питается от разъема USB. Я подключал прямо у ноуту.</p>

<p><img src="http://demin.ws/images/blog/wa-6220/IMG_0631.JPG" alt="" />
</p>

<p>С лица.</p>

<p><img src="http://demin.ws/images/blog/wa-6220/IMG_0632.JPG" alt="" />
</p>

<p>Переключатель режимов и кнопка сброса.</p>

<p><img src="http://demin.ws/images/blog/wa-6220/IMG_0634.JPG" alt="" />
</p>

<p>Краткая инструкция.</p>

<p><img src="http://demin.ws/images/blog/wa-6220/IMG_0635.JPG" alt="" />
</p>

<p>Увы, лично я не встречал ни одной гостиницы, где был бы WiFi в номере без геморроя. Провод кинуть могут все, а вот нормальное беспроводное покрытие &ndash; никто. А с этим устройством (которое, кстати, может питаться прямо от USB ноутбука) &ndash; ты сам себе переносная WiFi-точка.</p>

<p>P.S. Кстати, один вопрос меня давно волнует. Железо, стоящее, например, в ноутах и полноценных WiFi-точках доступа, принципиально отличается? Ведь если канал двунаправленный &ndash; вроде не должно же. Если так &ndash; как сделать из ноута полноценную точку доступа? Я пробовал на Windows 7 использовать программы типа <a href="http://connectify.me/">Connectify</a>. Увы, реально это не работало. А есть же еще Linux и OSX. Как там быть?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Пайка для начинающих]]></title>
    <link href="http://demin.ws/blog/russian/2012/07/28/soldering-for-beginners/"/>
    <updated>2012-07-28T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/07/28/soldering-for-beginners/</id>
    <content type="html"><![CDATA[<p>Мои отношения с радио- и микроэлектроникой можно описать прекрасным
анекдотом про Льва Толстого, который любил играть на балалайке, но не
умел. Порой пишет очередную главу Войны и Мира, а сам думает
&ldquo;тренди-бренди тренди-бренди&hellip;&rdquo;. После курсов электротехники и
микроэлектроники в любимом МАИ, плюс бесконечные объяснения брата,
которые я забываю практически сразу, в принципе, удается собирать
несложные схемы и даже придумывать свои, благо сейчас, если
неохота возиться с аналоговыми сигналами, усилениями, наводками и т.д.
можно подыскать готовую микро-сборку и остаться в более-менее понятном
мире цифровой микроэлектроники.</p>

<p>К делу. Сегодня речь пойдет о пайке. Знаю, что многих новичков,
желающих поиграться с микроконтроллерами, это отпугивает. Но,
во-первых, можно воспользоваться <a href="http://en.wikipedia.org/wiki/Breadboard">макетными платами</a>,
где просто втыкаешь детали в панель, без даже намека на пайку,
как в конструкторе.</p>

<p><img src="http://demin.ws/images/blog/soldering/for-beginners/breadboard-counter-example.jpg" alt="" />
</p>

<p>Так можно собрать весьма кучерявое устройство.</p>

<p><img src="http://demin.ws/images/blog/soldering/for-beginners/breadboard-complex-example.jpg" alt="" />
</p>

<p>Но иногда хочется таки сделать законченное устройство. Опять-таки, не
обязательно &ldquo;травить&rdquo; плату. Если деталей немного, то можно
использовать монтажную плату без дорожек (я использовал такую для
<a href="http://demin.ws/blog/russian/2012/07/25/gmc4-loader-assembled/">загрузчика GMC-4</a>).</p>

<p><img src="http://demin.ws/images/blog/soldering/for-beginners/breadboard-solderless.png" alt="" />
</p>

<p>Но вот паять таки придется. Вопрос как? Особенно, если вы этого никогда
раньше не делали. Я, возможно, открою Америку, но буквально несколько
дней назад я сам для себя открыл волшебный мир пайки без особого
геморроя.</p>

<p>До сего времени мое понимание сути процесса ручной пайки было следующим.
Берется паяльник (желательно с жалом не в форме шила, а с небольшим
уплощением, типа лопаточки), припой и канифоль. Для запайки пятачка,
ты берешь капельку припоя <strong>на паяльник</strong>, макаешь паяльник в канифоль,
происходит &ldquo;пшшшшш&rdquo;, и пока он идет, ты быстро-быстро касаешься
паяльником места пайки (деталь, конечно, должна быть уже вставлена),
и после нескольких мгновений разогрева припой должен каким-то волшебным
образом переходить на место пайки.</p>

<p>Увы, у меня такой метод работал <strong>очень</strong> плохо, практически не работал.
Детали нагревались, но припой никуда с паяльника не переходил. Очевидно,
что проблема была в катализаторе, то есть канифоли. Того &ldquo;пшшшшш&rdquo;, что
я делал, опуская конец паяльник в канифоль, явно не хватало, чтобы
&ldquo;запустить&rdquo; процесс пайки. Пока ты тащишь паяльник к месту пайки, вся
почти канифоль успевает сгореть. Именно поэтому, кстати, мне была
совершенно непонятна природа припоя, внутри которого уже содержится
флюс (какой-то вид катализатора, типа канифоли). Все равно, в момент
набирания припоя на паяльник весь флюс успевает сгореть.</p>

<p>Экспериментальным путем я нашел несколько путей улучшить процесс:</p>

<ul>
<li>Лудить места пайки заранее. Реально, при пайке деликатных вещей, типа
микросхем это крайне непрактично. Тем более, обычно, их ножки уже
луженые.</li>
<li>Крошить канифоль прямо на место пайки. Аккуратно кладешь кристаллик
канифоли прямо на место пайки, и тогда &ldquo;пшшшшш&rdquo; происходит прямо
там, что позволяет припою нормально переходить с паяльника. Увы,
после такой пайки плата вся обгажена черными заплесами горелой
канифоли. Хотя она и изолятор, но порой не видно дефектов пайки.
Поэтому плату надо мыть, а это отдельный геморрой. Да и само
выкрашивание делает пайку крайне медленной. Так я паял <a href="http://demin.ws/blog/russian/2012/01/19/maximite-kit/">Maximite</a>.</li>
<li>Использовать жидкой флюс. По аналогии с выкрашиваем канифоли, можно
аккуратно палочкой класть капельку жидкого флюса (обычно, он гораздо
&ldquo;сильнее&rdquo; канифоли), и тогда будет активный &ldquo;пшшшшш&rdquo;, и пайка
произойдет. Увы, тут тоже есть проблемы. Не все жидкие флюсы являются
изоляторами, и плату тоже надо мыть, например, ацетоном. А те, что
являются изоляторами все равно остаются на плате, растекаются и
могут мешать последующей внешней &ldquo;прозвонке&rdquo;. Выход &ndash; мыть.</li>
</ul>

<p>Итак, мы почти уже у цели. Я так подробно все пишу, так как, честно,
для меня это было прорыв. Как я случайно открыл, все, что нужно для
пайки несложных компонент &ndash; это паяльник, самый обычный с жалом в
виде шила:</p>

<p><img src="http://demin.ws/images/blog/soldering/for-beginners/soldering-iron.jpg" alt="" />
</p>

<p>и припой <strong>c флюсом внутри</strong>:</p>

<p><img src="http://demin.ws/images/blog/soldering/for-beginners/solder-with-flux.jpg" alt="" />
</p>

<p>ВСЕ!</p>

<p>Все дело в процессе. Делать надо так:</p>

<ul>
<li>Деталь вставляется в плату и должна быть закреплена (у вас не
будет второй руки, чтобы держать).</li>
<li>В одну руку берется паяльник, в другую - проволочка припоя (удобно,
если он в специальном диспенсере, как на картинке).</li>
<li>Припой на паяльник брать <strong>НЕ НАДО</strong>.</li>
<li>Касаетесь кончиком паяльника места пайки и греете его. Обычно, это
секунды 3-4.</li>
<li>Затем, не убирая паяльника, второй рукой касаетесь кончиком
проволочки припоя с флюсом места пайки. В реальности, в этом месте
соприкасаются сразу все три части: элемент пайки и его отверстие на
плате, паяльник и припой. Через секунду происходит &ldquo;пшшшшш&rdquo;, кончик
проволочки припоя плавится (и из него вытекает немного флюса)
и необходимое его количество переходит на место пайки. После секунды
можно убирать паяльник с припоем и подуть.</li>
</ul>

<p>Ключевой момент тут, как вы уже поняли, это подача припоя и флюса
прямо на место пайки. А &ldquo;встроенный&rdquo; в припой флюс дает его необходимое
минимальное количество, сводя засирание платы к минимуму.</p>

<p><img src="http://demin.ws/images/blog/soldering/for-beginners/soldering.jpg" alt="" />
</p>

<p>Ясное дело, что время ожидания на каждой фазе требует хотя бы
минимальной практики, но не более того. Уверен, что любой новичок по
такой методике сам запаяет <a href="http://demin.ws/blog/russian/2012/01/19/maximite-kit/">Maximite</a> за час.</p>

<p>Напомню основные признаки хорошей пайки:</p>

<ul>
<li>Много припоя еще не значит качественного контакта.
Капелька припоя на месте контакта должна закрывать его со всех
сторон, не имея рытвин, но не быть чрезмерно огромной бульбой.</li>
<li>По цвету пайка должна быть ближе к блестящей, а не к матовой.</li>
<li>Если плата двухсторонняя, и отверстия неметаллизированные, надо
пропаять по указанной технологии с обоих сторон.</li>
</ul>

<p>Стоит заметить, что все выше сказанное относится к пайке элементов,
которые вставляются в отверстия на плате. Для пайки планарных деталей
процесс немного более сложен, но реален. Планарные элементы занимают
меньше места, но требуют более точного расположения &ldquo;пятачков&rdquo; для них.</p>

<p>Планарные элементы (конечно, не самые маленькие) даже проще для пайки
в некотором роде, хотя для самодельных устройств уже придется травить
плату, так как на макетной плате особого удобства от использования
планарных элементов не будет.</p>

<p>Итак, небольшой, почти теоретический бонус про пайку планарных
элементов. Это могут быть микросхемы, транзисторы, резисторы, емкости
и т.д. Повторюсь, в домашних условиях есть объективные ограничения
на размер элементов, которых можно запаять обычным паяльником. Ниже
я приведу список того, что лично я паял обычным паяльником-шилом на
220В.</p>

<p>Для пайки планарного элемента уже не получится использовать припой
на ходу, так как его может &ldquo;сойти&rdquo; слишком много, &ldquo;залив&rdquo; сразу
несколько ножек. Поэтому надо предварительно в некотором роде
залудить пятачки, куда планируется поставить компонент. Тут, увы, уже
не обойтись без жидкого флюса (по крайне мене у меня не получилось).</p>

<p>Фаза 1</p>

<p>Капаете немного жидкого флюса на пятачек (или пятачки), берете на
паяльник совсем немного припоя (можно без флюса). Для планарных
элементов припоя вообще надо очень мало. Затем легонько касаетесь
концом паяльника каждого пятачка. На него должно сойти немного припоя.
Больше чем надо, каждый пятачек &ldquo;не возьмет&rdquo;.</p>

<p>Фаза 2</p>

<p>Берете элемент пинцетом. Во-первых, так удобнее, во-вторых пинцет будет
отводить тепло, что очень важно для планарных элементов. Пристраиваете
элемент на место пайки, держа его пинцетом. Если это микросхема, то
надо держать за ту ножку, которую паяете. Для микросхем теплоотвод
особенно важен, поэтому можно использовать два пинцета. Одним держишь
деталь, а второй прикрепляешь к паяемой ножке (есть такие пинцеты с
зажимом, которые не надо держать руками). Второй рукой снова наносишь
каплю жидкого флюса на место пайки (возможно немного попадет на
микросхему), этой же рукой берешь паяльник и на секунду касаешься
места пайки. Так как припой и флюс там уже есть, то паяемая ножка
&ldquo;погрузится&rdquo; в припой, нанесенный на стадии лужения. Далее процедура
повторяется для всех ног. Если надо, можно подкапывать жидкого флюса.</p>

<p><img src="http://demin.ws/images/blog/soldering/for-beginners/smd-soldering.jpg" alt="" />
</p>

<p>Когда будете покупать жидкий флюс, купите и жидкость для мытья плат.
Увы, при жидком флюсе лучше плату помыть после пайки.</p>

<p>Сразу скажу, я ни разу не профессионал, и даже не продвинутый любитель
в пайке. Все это я проделывал обычным паяльником. Профи имеют свои
методы и оборудование.</p>

<p>Конечно, пайка планарного элемента требует куда большей сноровки. Но
все равно вполне реально в домашних условиях. А если не паять
микросхемы, а только простейшие элементы, то все еще упрощается.
Микросхемы можно покупать уже впаянные в колодки или в виде готовых
сборок.</p>

<p>Вот картинки того, что я лично успешно паял после небольшой тренировки.</p>

<p>Это самый простой вид корпусов. Такие можно ставить в колодки,
которые по сложности пайки такие же. Эти элементарно паяются по первой
инструкции.</p>

<p><img src="http://demin.ws/images/blog/soldering/for-beginners/pdip.jpg" alt="" />
 <img src="http://demin.ws/images/blog/soldering/for-beginners/spdip.jpg" alt="" />
</p>

<p>Следующие два уже сложнее. Тут уже надо паять по второй инструкции с
аккуратным теплоотводом и жидким флюсом.</p>

<p><img src="http://demin.ws/images/blog/soldering/for-beginners/soic.jpg" alt="" />
 <img src="http://demin.ws/images/blog/soldering/for-beginners/qsop.jpg" alt="" />
</p>

<p>Элементарные планарные компоненты, типа резисторов ниже, весьма просто паяются:</p>

<p><img src="http://demin.ws/images/blog/soldering/for-beginners/smd-resistors.jpg" alt="" />
</p>

<p>Но есть, конечно, предел. Вот это добро уже за пределами моих
способностей.</p>

<p><img src="http://demin.ws/images/blog/soldering/for-beginners/pqfp.jpg" alt="" />

<img src="http://demin.ws/images/blog/soldering/for-beginners/ssop.jpg" alt="" />

<img src="http://demin.ws/images/blog/soldering/for-beginners/tsop.jpg" alt="" />
</p>

<p>Под занавес, пару дешевых, но очень полезных вещей, которые стоит
купить в дополнение к паяльнику, припою, пинцету и кусачкам:</p>

<ul>
<li>Отсос. Изобретателю этого устройства стоит поставить памятник.
Налепили много припоя или запаяли не туда? Сам припой, увы, обратно
на паяльник не запрыгнет. А вот отсосом убирается элементарно.
Одной рукой разогреваете паяльником место &ldquo;отпайки&rdquo;. Второй держите
рядом взведенный отсос. Как &ldquo;оттает&rdquo;, нажимаете на кнопку, и припой
прекрасным образом спрыгивает в отсос.</li>
</ul>

<p><img src="http://demin.ws/images/blog/soldering/for-beginners/solder-pump.jpg" alt="" />
</p>

<ul>
<li>Очки. Когда имеешь дело с ножками и проводами, может случиться, что
разогретая ножка отпружинит, и припой с нее куда-то полетит,
возможно, в глаз. С этим лучше не шутить.</li>
</ul>

<p><img src="http://demin.ws/images/blog/soldering/for-beginners/soldering-safety-glasses.jpg" alt="" />
</p>

<p>Успехов в пайке! Запах канифоли &ndash; это круто!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Полезные обороты для английского]]></title>
    <link href="http://demin.ws/blog/russian/2012/07/26/useful-english-phrases/"/>
    <updated>2012-07-26T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/07/26/useful-english-phrases/</id>
    <content type="html"><![CDATA[<p>Программисты просто обязаны знать английский, хотя бы письменный. Но порой хочется сделать речь, как письменную, так и устную немного &ldquo;поживее&rdquo;. Я тут для себя собрал небольшую коллекцию, которую стараюсь держать перед глазами, когда что-то пишу. А для устной речи совет традиционный &ndash; зубрить в контексте.</p>

<p>If you ask me, …</p>

<p>Speaking of …,</p>

<p>As I was saying, …</p>

<p>But further - it is more. &ndash; Дальше - больше</p>

<p>I very much appreciate discussion. &ndash; Я очень ценю дискуссию.</p>

<p>Besides (in addition, furthermore, moreover) &ndash; К тому же, помимо</p>

<p>Everything, except the former &ndash; Все, кроме последнего</p>

<p>Exactly for this purpose &ndash; Именно для этого</p>

<p>Hence &ndash; Следовательно</p>

<p>Hardly &ndash; Вряд ли</p>

<p>By the way… &ndash; Между прочим.</p>

<p>A drop in the bucket &ndash; Капля в море</p>

<p>And so on and so forth &ndash; И т.д. и т.п.</p>

<p>As drunk as a lord &ndash; Пьян в стельку</p>

<p>As I said before… &ndash; Как я говорил…</p>

<p>As innocent as a babe unborn &ndash; Совсем как ребенок</p>

<p>As sure as eggs is eggs &ndash; Как дважды два</p>

<p>As to… (As for…) &ndash; Что касается…</p>

<p>Believe it or not, but &ndash; Верите или нет, но</p>

<p>Did I get you right? &ndash; Я правильно понял?</p>

<p>Don’t mention it &ndash; Не благодарите</p>

<p>Don’t take it to heart &ndash; Не принимай близко к сердцу</p>

<p>Forgive me, please, I meant well. &ndash; Извините, я хотел как лучше</p>

<p>He is not a man to be trifled with &ndash; С ним лучше не шутить</p>

<p>I am afraid you are wrong &ndash; Боюсь, что Вы не правы</p>

<p>I didn’t catch the last word &ndash; Я не понял последнее слово</p>

<p>I mean it &ndash; Именно это я имею в виду</p>

<p>I was not attending &ndash; Я прослушал</p>

<p>If I am not mistaken &ndash; Если я не ошибаюсь</p>

<p>If I remember rightly &ndash; Если я правильно помню</p>

<p>In other words… &ndash; Другими словами</p>

<p>In short… &ndash; Вкратце</p>

<p>It does you credit &ndash; Это делает вам честь</p>

<p>It doesn’t matter &ndash; Это не важно</p>

<p>It is a good idea &ndash; Это хорошая мысль</p>

<p>It is new to me &ndash; Это новость для меня</p>

<p>Let us hope for the best &ndash; Давайте надеяться на лучшее</p>

<p>May I ask you a question? &ndash; Могу я спросить?</p>

<p>Mind your own business &ndash; Занимайся своим делом</p>

<p>Most likely &ndash; Наиболее вероятно</p>

<p>Neither here nor there &ndash; Ни то, ни се</p>

<p>Next time lucky &ndash; Повезет в следующий раз</p>

<p>Nothing much &ndash; Ничего особенного</p>

<p>Oh, that. That explains it &ndash; Это все объясняет</p>

<p>On one hand … &ndash; С одной стороны</p>

<p>On the other hand … &ndash; С другой стороны</p>

<p>Say it again, please &ndash; Повторите еще раз, пожалуйста</p>

<p>That&rsquo;s where the trouble lies &ndash; Вот в чем дело!</p>

<p>Things happen &ndash; Всякое бывает</p>

<p>What do you mean by saying it? &ndash; Что Вы имеете ввиду?</p>

<p>What is the matter? &ndash; В чем дело?</p>

<p>Where were we? &ndash; На чем мы остановились?</p>

<p>You were saying? &ndash; Вы что-то сказали?</p>

<h2>P.S.</h2>

<p>Лично я регулярно отвисаю на <a href="http://www.engvid.com/">engvid.com</a>.
Там есть просто шедевральные уроки, особенно в разделе slang.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Загрузчик для GMC-4 в сборе]]></title>
    <link href="http://demin.ws/blog/russian/2012/07/25/gmc4-loader-assembled/"/>
    <updated>2012-07-25T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/07/25/gmc4-loader-assembled/</id>
    <content type="html"><![CDATA[<p>Захотелось мне тоже смастерить загрузчик для <a href="http://demin.ws/blog/russian/2012/07/04/gmc-4/">GMC-4</a>. По совету того же Сергея Вакуленко решено было использовать вот такого зверя:</p>

<p><img src="http://demin.ws/images/blog/gmc4-loader/ubw-proto-pic.jpg" alt="" />
</p>

<p>Это <a href="http://www.sparkfun.com/products/762">USB Bit Whacker</a>. Сборка на PIC18, которая со своей стандартной прошивкой позволяет управлять пачкой входов и выходов через простейший <a href="http://schmalzhaus.com/UBW/Doc/FirmwareDDocumentation_v149.html">&ldquo;птичий&rdquo; язык</a>, команды которого подаются через виртуальный последовательный порт.</p>

<p>Схема.</p>

<p><img src="http://demin.ws/images/blog/gmc4-loader/gmc4-loader-schematic.jpg" alt="" />
</p>

<p>Сначала макет.</p>

<iframe width="640" height="360" src="https://www.youtube.com/embed/eg6OZMAI5mg" frameborder="0" allowfullscreen></iframe>

<p>Травить плату было лень, поэтому слепил на макетной. Выглядит неказисто, но работает.</p>

<p><img src="http://demin.ws/images/blog/gmc4-loader/IMG_0586.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/gmc4-loader/IMG_0587.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/gmc4-loader/IMG_0588.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/gmc4-loader/IMG_0590.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/gmc4-loader/IMG_0589.JPG" alt="" />
</p>

<p>В работе.</p>

<iframe width="640" height="360" src="https://www.youtube.com/embed/F2tciUH0NFg" frameborder="0" allowfullscreen></iframe>

<p>Все таки GMC-4 &ndash; вещь!</p>

<p>P.S. Выложил исходник на Github &ndash; <a href="https://github.com/begoon/gmc4-loader/">gmc4-loader</a>. Если написать на Питоне или Руби,  будет еще проще. А программирование последовательных портов в UNIX &ndash; это круто.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Интервью с Энтони Уильямсом]]></title>
    <link href="http://demin.ws/blog/russian/2012/07/24/interview-with-anthony-williams/"/>
    <updated>2012-07-24T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/07/24/interview-with-anthony-williams/</id>
    <content type="html"><![CDATA[<p>Сегодня у меня в гостях <a href="http://www.boost.org/users/people/anthony_williams.html">Энтони Уильямс</a>, автор
недавно вышедшей книги &ldquo;C++ Concurrency in Action&rdquo;. Он живет и
работает в Западном Корнуэлле, Великобритания, и из окон его офиса
можно увидеть море. Энтони занимается библиотеками для С++, в
частности boost::thread, принимает участие в работе над стандартом
С++ и попутно работает в своей собственной компании
&ldquo;<a href="http://www.justsoftwaresolutions.co.uk/">Just Software solutions</a>&rdquo;.</p>

<p>Я недавно приобрел его книгу о многопоточности в С++. Если честно,
я пока не встречал лучшего материала по модели памяти в C++ 2011.
Сейчас у нас возможность задать Энтони несколько вопросов, в
частности про С++.</p>

<p><strong>Предупреждение</strong>: Данная статья является переводом с английского.
Я не профессиональный переводчик, поэтому в тексте могут встречаться
мелкие неточности. Желающие всегда могут прочитать <a href="http://demin.ws/blog/english/2012/07/24/interview-with-anthony-williams/">оригинал на английском</a>.</p>

<hr />

<p><img src="http://demin.ws/images/blog/anthony-williams.jpg" alt="" />
</p>

<blockquote>
<p>До тех пор, пока многопоточный код не будет очевидно быстрее,
создание однопоточного кода избавит вас от значительной головном боли.</p>
</blockquote>

<hr />

<p><strong>Здравствуйте, Энтони, спасибо, что согласились дать интервью.
Разрешите мне начать издалека. Программирование, компьютеры, С++&hellip;
Почему вы решили этим заниматься? Что привело вас на путь битов
и байтов.</strong></p>

<p>Я всегда интересовался компьютерами. И к тому же у меня получалось.
Дома у нас был Sinclair ZX81 и BBC Micro в школе, когда мне было 7-8
лет, и вот там все и началось. Разбирался с играми, пытаясь понять,
как они работают. Когда пришло время устраиваться на работу после
учебы, я уже весьма четко представлял, что буду заниматься
программированием. Это приколько, интересно, заставляет думать, и
тебе еще за это платят.</p>

<p><strong>Я подозреваю, что С++ не был первым языком программирования,
который вы выучили. Приходилось программировать на необычных языках
поначалу?</strong></p>

<p>С++ там не было, когда я начал программировать, поэтому это мой не
первый язык. Я начал с Бейсика. Все домашние компьютеры снабжались
разновидностями Бейсика, и тогда я еще не знал, что существует что-то
иное. Некоторые программы были в машинных кодах, и я научился
переводить на них язык ассемблера Z80 и вводить из в виде операторов
DATA в программе-загрузчике на Бейсике.</p>

<p>Не думаю, что я программировал на чем-то по-настоящему необычном, хотя
приходилось поработать на многих языках и на разнообразных системах.
Программировать на PICе, имея только 100 байт на код, было непросто,
и я подозреваю, не много людей программировали Psion Organizer II,
хотя язык программирования там был во многом близок к Бейсику.</p>

<p><strong>Можете вспомнить какие-то значительные или может даже
выдающиеся книги, которые повлияли на вас в карьере?</strong></p>

<p>Хм&hellip; Это могло быть описание программирования для Z80, когда мне
было 10-11 лет. Не могу вспомнить ее названия, но я буквально
вызубрил эту книгу. Я помнил каждую инструкцию, включая
шестнадцатеричные коды и количество тактов процессора. Я нашел
схожее описание для 8086 на диске от PC, распечатал его и также
вызубрил.</p>

<p>Сейчас у меня на полке стоят, например, Design Patterns,
Refactoring, и The Art of Computer Programming, хотя я все еще люблю
быть поближе к железу, например, с Intel&rsquo;s Software
Optimization Cookbook.</p>

<p><strong>Теперь С++ и многопоточность. Было бы неразумно упустить
возможность спросить про это у эксперта. Для начала: есть что-то в
С++ 2011, что вам не нравиться в плане поддержки многопоточности?</strong></p>

<p>Хороший вопрос! Сходу не могу назвать ничего, про что бы сказал
&ldquo;Мне не нравится, как это сделано&rdquo;. Немного огорчает, что функция
&ldquo;is_ready()&rdquo; была удалена из future и shared_future. Хотя ее можно
реализовать через wait_for(seconds(0)).</p>

<p><strong>Вы мейнтейнер библиотеки boost::thread. Одновременно с этим вы
разрабатываете собственную библиотеку, <a href="http://www.stdthread.co.uk/">just::thread</a>. Что в ней
такого особенного?</strong></p>

<p>Just::Thread - это строгая реализация библиотеки потоков C++ 2011,
значительно оптимизированная для каждой платформы, тогда как в
Boost.Thread отдается предпочтение переносимости, и местами ее
интерфейс и семантика отличаются от Стандарта. Например, до сих пор отсутствует std::async, который реализован в Just::Thread.</p>

<p>Just::Thread также имеет специальный режим сборки для выявления
deadlock&rsquo;ов.</p>

<p><strong>Actor&rsquo;ы и идея разделение ресурсов через сообщения. В С++ 2011 их
явно их не хватает. Можете порекомендовать библиотеку, где эта
функциональность есть?</strong></p>

<p>Just::thread Pro, которая сейчас на стадии разработки, реализует
Actor&rsquo;ы. В моей книге есть пример использования очередей сообщений
для создания кода в стиле Actor&rsquo;ов.</p>

<p><strong>Я помню ваше высказывание, что целесообразность использования
многопоточности может быть нетривиальна, так как смысл в ней
начинает появляться только с определенного объема данных. Можете
посоветовать, как решить - стоит ли озадачиваться многопоточностью
в каком-то конкретном случае, или нет?</strong></p>

<p>Да, надо всегда принимать во внимание накладные расходы при
многопоточности. Если какая-то задача и так работает достаточно быстро,
то лучше ее так и оставить однопоточной. До тех пор, пока
многопоточный код не будет очевидно быстрее, создание однопоточного
кода избавит вас от значительной головном боли.</p>

<p>Как и всегда &ndash; ключевая идея оптимизации производительности (а тут
мы рассматриваем многопоточность именно как оптимизацию) - это
профилирование приложения. Где больше всего тратиться времени?
Как можно распараллелить? Джейсон МакГинесс (Jason McGuiness)
продемонстрировал на ACCU 2012, что если распараллелить не ту
часть приложения, то много сил уйдет впустую без ощутимого результата.</p>

<p><strong>Давайте теперь поговорим о TDD. Используете ли вы Test Driven
Development? Применимо ли это для разработки многопоточных библиотек,
например, для C++</strong></p>

<p>Я люблю TDD и стараюсь использовать этот подход все время. Это
стимулирует работу небольшими шагами, а набор уже разработанных
тестов гарантирует, что существующий функционал &ldquo;не сломан&rdquo; новым
кодом.</p>

<p>Для многопоточных библиотек применение TDD может быть не совсем
прозрачно, но все же возможно. Главное, это выстроить код так, чтобы
тестировать то, что нужно. Обычно, требуется что-то по типу барьера
(я часто использую std::promise и std::share_future), когда
подготавливаете потоки в нужно состояние и говорите &ldquo;поехали!&rdquo;.
Лучший способ тестирования многопоточного кода &mdash; это убрать
многопоточность. Вместо этого обеспечить прозрачные механизмы обмена
между потоками, и тестировать их по отдельности.</p>

<p><strong>Считаете ли вы, что код обязан быть безупречным, без компромисов к
неаккуратности или отсутствия красоты? Как вы решаете для себя, когда
код готов к релизу или нет?</strong></p>

<p>Всегда стоит стремиться, чтобы код бы идеален. Если этого не делать,
то это обычно заканчивается корявым немодифицируемым кодом.</p>

<p>Однако, не всегда получается писать идеальный код. Порой не ясно, как
можно сделать лучше, или надо очень много времени на изменения. Всегда
лучше иметь код, которые работает правильно, нежели который выглядит
красиво. Если есть достаточно тестов, то можно поработать над красотой
кода позже, без опаски что-нибудь сломать.</p>

<p>Я лично сужу о готовности кода по невозможности найти потенциальных
путей его сломать. Если таковы пути находятся, я пишу тест и
исправляю проблему.</p>

<p><strong>Можете назвать три самый больших &ldquo;Никогда этого не делай!&rdquo; для
программистов? на С++?</strong></p>

<p>Хех, &ldquo;Никогда&rdquo; &ndash; это сильное слово.</p>

<p>Вот некоторые вещи, которые не стоит сделать часто (в произвольном
порядке):</p>

<ul>
<li><p>Использование глобальных переменных. Передавайте все как параметры
или используйте члены класса вместо глобальных переменных, так
как они делают код сложным для понимания.</p></li>

<li><p>Использование синглтонов. Опять, это глобальные переменные, которых
следует избегать.</p></li>

<li><p>Написание многопоточного кода без тщательного продумывания методов
доступа к данным их разных потоков. На это стоит потратить время,
так как оно окупится в далекой перспективе.</p></li>
</ul>

<p>Конкретно для С++, не стоит часто:</p>

<ul>
<li><p>Использовать malloc и free. Это С++, я не С.</p></li>

<li><p>Писать код, требующий использования &ldquo;delete&rdquo;. Если вам приходится
использовать &ldquo;new&rdquo;, то стоит использовать умные указатели, например,
std::shared_ptr или std::unique_ptr для управления памятью. Также
часто лучше просто взять std::vector для хранения чего угодно.</p></li>

<li><p>Перегружать операторы нетрадиционным образом. Иногда это может быть
действительно удобно (например, &lt;&lt; для вывода в поток), но если
a+b значит что-то отличное от сложения, то это прямой путь все
запутать.</p></li>
</ul>

<p><strong>Вы написали книгу. Можно об этом немного поподробнее. Сколько
времени заняло создание &ldquo;C++ Concurrency in Action&rdquo;, и почему вы
вообще решили взяться за ее написание? Что было самым трудным?</strong></p>

<p>С книгой просто все удачно сложилось. Я плотно занимался сообразными
главами стандарта С++ и оказался в нужном месте в нужное время.</p>

<p>В итоге, все заняло четыре года. Так как стандарт еще на был принят,
когда я начал писать книгу, мне приходилось перерабатывать главы по
мере изменения стандарта. Хотя и без этого это была весьма объемная
работа. Самым непростым было переписывать некоторые глава после
получение отзывов.</p>

<p><strong>Можете порекомендовать еще книги про многопоточность и многозадачность?</strong></p>

<p>&ldquo;Patterns for Parallel Programming&rdquo; от Mattson, Sanders и Masingill
является хорошим обзором по созданию параллельных программ.</p>

<p>&ldquo;The Art of Multiprocessor Programming&rdquo; от Herlihy и Shavit тоже
неплохо, но более на низком уровне. Тут описываются такие понятия, как
видимость, атомарность и согласованность, и реализация низкоуровневых
структур таких как очереди, спин-блокировки и мониторы.</p>

<p><strong>А теперь вопрос, который я спрашиваю всех: спортивное
программирование и соревнования по программированию. Важно но ли для
любого разработчика регулярно тренироваться в решении алгоритмических
задач? И приходилось ли вам разрабатывать или реализовывать
замысловатые алгоритмы?</strong></p>

<p>Я люблю всякие задачки. Если разобраться, программирование по себе
является большой одной задачей, что и делает его интересным.</p>

<p>Я думаю, головоломки требуют схожего мыслительного процесса как и
программирование, поэтому регулярное их решение положительно повлиять
на &ldquo;умение&rdquo; программировать. Любая практика в чем-либо всегда полезна,
и задачи и соревнования по программированию позволяют вырваться
из привычных шаблонов и попробовать что-то еще. Мне нравится
&ldquo;Intel Threading Challenge&rdquo; последние пару лет. Даже не учавствуя
напрямую, полезно поработать с задачами &ndash; это забавно и реально
заставляет задуматься.</p>

<p>Я получил большое удовольствие, работая над алгоритмом, помогающим
вертолетным инженерам проводить обслуживание. Они снимали показания
с вертолета, используя специальное оборудование в процессе полета при
разных условиях. Затем программа анализировала пути улучшения полета.
Так как реальные полеты на вертолете дороги, была задача настроить
вертолет за минимальное количество пробных полетов.</p>

<p><strong>Вы предпочитаете IDE или vi/make? Возможно ли все еще, используя
vi, создавать программное обеспечение современного уровня сложности,
или среды разработки являются неизбежным шагом для создания программ
промышленного уровня?</strong></p>

<p>Я использую emacs и make. Я пока еще не нашел среды разработки лучше.
Уверен, что в Eclipse/СDT очень много потенциала, особенно благодаря
усилиям команды <a href="http://demin.ws/blog/russian/2012/05/19/peter-sommerlad-interview/">Питера Соммерлада</a>,
но для меня этого пока недостаточно.</p>

<p><strong>Существует ли идеальный язык программирования? Может ли он вообще
существовать? Может это C++?</strong></p>

<p>Всегда есть моменты, которые можно было бы улучшить в любом языке.
Не думаю, что идеальный язык существует. Если удастся создать
достаточно развитый искусственный интеллект, то мы в итоге придем
к использованию естественных языков, нежели языков программирования.
Но, я думаю, до этого еще далеко.</p>

<p><strong>Давайте поговорим о найме на работу. Если вам надо нанять хорошего
С++ программиста, какие вопросы вы бы спрашивали?</strong></p>

<p>В некотором роде это зависит от того, для чего именно я нанимаю. Если
есть время обучить человека, то конкретные знания по С++ не проблема,
и я бы сфокусировался на том, что называется &ldquo;общие способности&rdquo;.</p>

<p>Если же требуется кто-то, знающий С++, можно и конкретно по С++
спросить.</p>

<p><strong>Под занавес, можете назвать три вещи, которые, по вашему мнению,
каждый разработчик просто обязан написать?</strong></p>

<p>Не совсем уверен про три вещи для <em>каждого</em> разработчика, но
однозначно стоит попробовать реализовать базовые структуры данных,
например, список или хеш. Пусть это будет номер один.</p>

<p>Второе, я думаю, что парсер языка может дать хорошее понимание того,
как надо использовать структуры данных, даже если это парсер для
разбора простого конфигурационного файла, а не языка типа С++.
Например, парсер арифметических выражений может быть неплохим
упражнением.</p>

<p>И наконец, я думаю, стоит написать клиент-серверное приложение.
Например, вэб-приложение на JavaScript, работающее в браузере,
и что-то на северной стороне. Хотя любая задача, где делаются вызовы
со стороны клиента к серверу также подойдет. Суть тут в том, что
удаленные вызовы всегда заметно дороже локальных, поэтому придется
подумать о накладных расходах при создании такого интерфейса. Если
речь идет о пользовательском интерфейсе, то это может быть упражнением
для минимизации задержек на сервере, что бы интерфейс не &ldquo;замирал&rdquo;.</p>

<p><strong>Спасибо, Энтони, за интервью. С нетерпением ждем ваших новых
выступлений и книг, и появления на конференциях</strong></p>

<p>&#9632;</p>

<p><em>// Энтони Уильямс, Александр Дёмин</em></p>

<p><em>// Июль 2012</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Энигма, Колоссус или история Британской криптографии в Блетчли-парке]]></title>
    <link href="http://demin.ws/blog/russian/2012/07/06/bletchley-park-colossus/"/>
    <updated>2012-07-06T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/07/06/bletchley-park-colossus/</id>
    <content type="html"><![CDATA[<p>Сегодня ездил в <a href="http://www.bletchleypark.org.uk/">Bletchley Park</a>, благо час на машине от дома. Это место было объектом максимальной секретности в годы Второй Мировой. На этой военном базе, например, Алан Тьюринг взламывал коды <a href="http://ru.wikipedia.org/wiki/%D0%AD%D0%BD%D0%B8%D0%B3%D0%BC%D0%B0">Энигмы</a>, и тут был построен <a href="http://en.wikipedia.org/wiki/Colossus_computer">Колоссус</a>, ламповый компьютер, использовавшийся для взлома шифров.</p>

<p>Сейчас тут музей криптографии и шифрования. Недавно Колоссус был восстановлен, и можно посмотреть его в действии. У меня была цель посмотреть Колоссус и Энигму.</p>

<p>В этот день была как назло нормальная английская погода &ndash; лил дождь. Мой любимый билайновский зонт пришелся как всегда кстати.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/IMG_0508.JPG" alt="" />
</p>

<p>Тут старались сохранить дух времен войны &ndash; если б не наклейка на стекле, сошло бы за фотографию того времени.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/IMG_0492.JPG" alt="" />
</p>

<p>Иллюстрации в прошлом всегда выполнялись с любовью и внимаем к деталям.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/IMG_0494.JPG" alt="" />
</p>

<p>Какой-то револьвер. Глаз зацепился, так как он был так близко.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/IMG_0495.JPG" alt="" />
</p>

<p>Интересно, что лично я &ldquo;<a href="http://ru.wikipedia.org/wiki/MP_38">Шмайсер</a>&rdquo; видел так близко первый раз в жизни.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/IMG_0496.JPG" alt="" />
</p>

<p>Вам это ничего не напоминает? Обжимку для витой пары? Это устройство времен Второй Мировой.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/IMG_0498.JPG" alt="" />
</p>

<p>Видимо, это диск-ключ Энигмы, вернее какой-то энигма-подобной машины.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/IMG_0499.JPG" alt="" />
</p>

<p>Собственно, Энигма, вернее их тут очень много. Я то представлял себе, что Энигма - это конкретный аппарат, который я знаю по американскому ремиксу фильма &ldquo;Das Boot&rdquo;. Оказывается, их выпускали все кому не лень.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/IMG_0501.JPG" alt="" />
</p>

<p>Шифровальный аппарат от Сименса.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/IMG_0502.JPG" alt="" />
</p>

<p>Или вот уже портативная версия.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/IMG_0503.JPG" alt="" />
</p>

<p>Тут все экспонаты реальные, им по 70 лет и более. Их просто вежливо просят руками не трогать.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/IMG_0504.JPG" alt="" />
</p>

<p>А вот машина <a href="http://ru.wikipedia.org/wiki/Turing_Bombe">Bombe</a>, конкретно используемая для взлома кода Энигмы.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/IMG_0505.JPG" alt="" />
</p>

<p>Вид сзади.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/IMG_0506.JPG" alt="" />
</p>

<p>Ее фрагмент в действии.</p>

<iframe width="640" height="360" src="https://www.youtube.com/embed/yzxyn5G6cno" frameborder="0" allowfullscreen></iframe>

<p>В радиорубке.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/IMG_0509.JPG" alt="" />
</p>

<p>И вот я уже на полпути к заветной цели &ndash; Колоссусу.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/IMG_0510.JPG" alt="" />
</p>

<p>И так, вот Он &ndash; супер-секретный компьютер британских спецслужб времен войны. Усилиями энтузиастов девайс был недавно восстановлен и запущен. Представляет собой две панели, набитые в основном лампами. Это передняя панель, слева.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/IMG_0512.JPG" alt="" />
</p>

<p>Передняя панель, справа.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/IMG_0513.JPG" alt="" />
</p>

<p>Сзади справа. Так как все это трещит и шевелится (перфоленты, ролики всякие), то стоит реальный гул. Напольные вентиляторы уже нашего времени охлаждают лампы.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/IMG_0514.JPG" alt="" />
</p>

<p>Сзади слева.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/IMG_0515.JPG" alt="" />
</p>

<p>С боку между панелями. На осциллографе даже показывается какой-то сигнал.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/IMG_0516.JPG" alt="" />
</p>

<p>Как работает Колоссус.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/IMG_0518.JPG" alt="" />
</p>

<p>Если честно, то я как-то не впечатлился. Ну гудит, ну что-то там ездит туда-сюда. Наверное, если б можно было б программу закодить прямо на месте, может бы и вставило бы.</p>

<p>В том же здании, где стоит Колоссус, находится <a href="http://www.tnmoc.org/">The National Museum of Computing</a>. Увы, сегодня он был закрыт. Даже взятка в размере 50$ лично в руки дежурному не состоялась. А так хотелось заглянуть в зал мейнфреймов и персоналок.</p>

<p>Грустная фотка через решетку.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/IMG_0511.JPG" alt="" />
</p>

<p>В любом музее есть всегда магазин сувенирки. Тут, на удивление, процентов на 80 &ndash; книги про историю криптографии. А вот то, что должно быть в любом уважающем себя книжном магазине &ndash; диван.</p>

<p><img src="http://demin.ws/images/blog/bletchley-park/IMG_0507.JPG" alt="" />
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Микрокомпьютер GMC-4]]></title>
    <link href="http://demin.ws/blog/russian/2012/07/04/gmc-4/"/>
    <updated>2012-07-04T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/07/04/gmc-4/</id>
    <content type="html"><![CDATA[<p><a href="http://ramlamyammambam.livejournal.com/190698.html">По наводке Сергея Вакуленко</a>, я купил <a href="http://en.wikipedia.org/wiki/GMC-4">GMC-4</a>. Все-таки в подобных устройствах есть какой-то неповторимый шарм. Заказал в забавном японском магазине гаджетов <a href="http://www.japantrendshop.com/gmc4-microcomputer-p-789.html">Japan Trend Shop</a>.</p>

<p><img src="http://demin.ws/images/blog/gmc4/gmc4.jpg" alt="" />
</p>

<p>GMC-4 &ndash; это четырехбитный микрокомпьютер. Характеристики компьютера:</p>

<ul>
<li>размер слова 4 бита</li>
<li>восемь регистров, один регистр-флаг</li>
<li>15 однословных и 16 двухсловных машинных инструкций</li>
<li>память программ 80 слов</li>
<li>память данных 16 слов</li>
<li>ПЗУ c набором из 7 игр: орган, угадай мелодию, дави моль, теннис, таймер, музыкальный плеер, генератор морзе</li>
<li>семь светодиодов - порт вывода шины адреса</li>
<li>семисегментный индикатор - порт вывода шины данных</li>
<li>20-кнопочная клавиатура - порт ввода</li>
<li>динамик для вывода звука</li>
<li>кнопка сброса</li>
<li>питание от 3-х батареек AA</li>
</ul>

<p>Вся архитектура описывается одним небольшим документом &ndash; <a href="http://tsoj.manga.org/gakken/otona_gmc.html">Programming the Gakken GMC-4 Microcomputer</a>.</p>

<p>Сегодня приехала моя посылка. GMC-4 является приложением к одному из выпусков журнала &ldquo;Otona no Kagaku&rdquo; издательства Gakken, 24-й номер за 2009 год. Коробка с конструктором приклеена к журналу. Все на японском.</p>

<p><img src="http://demin.ws/images/blog/gmc4/IMG_0458.JPG" alt="" />
</p>

<p>Забавно, на обратной стороне коробки изображены машинные инструкции GMC-4. Все умещается в одну таблицу.</p>

<p><img src="http://demin.ws/images/blog/gmc4/IMG_0459.JPG" alt="" />
</p>

<p>Плата, пищалка, подставка, фрагменты клавиатуры и винты.</p>

<p><img src="http://demin.ws/images/blog/gmc4/IMG_0460.JPG" alt="" />
</p>

<p>Инструкция на японском &ndash; это жестко.</p>

<p><img src="http://demin.ws/images/blog/gmc4/IMG_0469.JPG" alt="" />
</p>

<p>Ставим батарейки и закрепляем пищалку.</p>

<p><img src="http://demin.ws/images/blog/gmc4/IMG_0463.JPG" alt="" />
</p>

<p>Плата.</p>

<p><img src="http://demin.ws/images/blog/gmc4/IMG_0461.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/gmc4/IMG_0462.JPG" alt="" />
</p>

<p>Наклеиваем клавиатуру.</p>

<p><img src="http://demin.ws/images/blog/gmc4/IMG_0464.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/gmc4/IMG_0466.JPG" alt="" />
</p>

<p>Включаем&hellip; It&rsquo;s alive! Alive!!!</p>

<p><img src="http://demin.ws/images/blog/gmc4/IMG_0468.JPG" alt="" />
</p>

<p>Итак: клавиатура, семисегментник, под ним процессор, затем пипка &ldquo;hard reset&rdquo;. Сверху семь  светодиодов, управляемых индивидуально. Они, например, используются для отображения текущего адреса. Мне это все напомнило <a href="http://ru.wikipedia.org/wiki/%D0%AE%D0%A2-88">ЮТ-88</a>. В его <a href="http://junetech.chat.ru/kollection/ut88/1step.htm">первой модификации</a> был только семисегментный индикатор и похожая клавиатура.</p>

<p><img src="http://demin.ws/images/blog/gmc4/ut88-minimal.jpg" alt="" />
</p>

<p>Попробуем чего-нибудь написать. Например, простая программа, которая ждет нажатия на клавиатуре и затем отображает код нажатой кнопки на семисегментном индикаторе.</p>

<pre><code>00: 0     KA 0       ; Считываем код кнопки (0-F) в A. Если нажата, то Flag=0, иначе Flag=1.
01: F00   JUMP 00    ; Если Flag=1 (не нажата), то переходим на 00.   
04: 1     AO         ; Выводим A на семисегментник и устанавливаем Flag=1
05: F00   JUMP 00    ; Если Flag=1 (тут всегда 1), то переходим на 00.
</code></pre>

<p>Для ввода жмем: <code>RESET 0 INCR F INCR 0 INCR 0 INCR 1 INCR F INCR 0 INCR 0 INCR RESET</code></p>

<p>Для запуска: <code>RESET 1 RUN</code></p>

<iframe width="640" height="360" src="https://www.youtube.com/embed/t-S86rICAPk" frameborder="0" allowfullscreen></iframe>

<p>Интересно, эта железка позволяет <strong>пошагово трассировать</strong> программу. Если запустить программу через <code>RESET 6 RUN</code>, то она будет останавливаться после каждой инструкции, и текущий адрес будет на верхних светодиодах в двоичном коде. Для выполнения следующей инструкции надо нажать <code>INCR</code> и т.д. Можно прервать программу, нажав <code>RESET</code>, и, например, посмотреть содержимое регистров. Они являются ячейками памяти. Какая никакая отладка.</p>

<p>Теперь программа по сложнее: бегущий огонек по верхним семи светодиодам с отображением текущего номера на семисегментнике.</p>

<pre><code>00: 80    TIA 0     ; A=0
02: 1     AO        ; Выводим A на семисегментник.
03: 3     CY        ; Сохраняем A в Y.
04: E1    CAL SETR  ; Зажигаем светодиод, номер которого в Y.
06: 84    TIA 4     ; A=4
08: EC    CAL TMR   ; Задержка (A+1)*0.1 секунд (0.5 сек).
0A: E2    CAL RSTR  ; Гасим светодиод, номер которого в Y.
0C: 3     CY        ; Восстанавливаем A из Y.
0D: 91    AIA 1     ; A = A + 1
0F: C7    CIA 7     ; Если A=7, то Flag=0. Иначе Flag=1.
11: F02   JUMP 02   ; Переход на 02, если Flag=1. Также устанавливаем Flag=1.
13: F00   JUMP 00   ; Безусловный переход на 00 (Flag=1 после предыдущей команды).
</code></pre>

<p>Коды: <code>8 0 1 3 E 1 8 4 E C E 2 3 9 1 C 7 F 0 2 F 0 0</code></p>

<iframe width="640" height="360" src="https://www.youtube.com/embed/bdEUUtv93r0" frameborder="0" allowfullscreen></iframe>

<h2>Что есть из средств разработки?</h2>

<p>Увы, почти все ресурсы на японском, но Google Translate творит чудеса.</p>

<h2><a href="http://dansan.air-nifty.com/blog/gmc4-simulator.html">Симулятор</a></h2>

<p><img src="http://demin.ws/images/blog/gmc4/gmc4simulator.png" alt="" />
</p>

<h3>Автоматический загрузчик</h3>

<iframe width="420" height="315" src="https://www.youtube.com/embed/lagnC5CpsUE" frameborder="0" allowfullscreen></iframe>

<h3>Языки программирования</h3>

<ul>
<li><a href="http://musashinodenpa.com/misc/GMC4/">Ассемблер</a></li>
<li><a href="http://terus.jp/engineering/gmc4cc/">Компилятор C</a> и
<a href="http://terus.jp/engineering/gmc4cc/gmc4as.html">Ассемблер</a></li>
<li><a href="http://softyasu.net/g4cbasic.html">Бейсик</a></li>
</ul>

<h1>Вместо заключения</h1>

<p>Классная игрушка. Я начал программировать на <a href="http://radio86.googlecode.com/hg/online/radio86.html">Радио-86РК</a> в машинных кодах, набивая их в Мониторе. Тут почти такие же ощущения. Выпуск журнала, приложением которого является GMC-4, судя по картинкам (я по-японски не читаю, увы), содержит иллюстрированную историю микропроцессоров, начиная с <a href="http://en.wikipedia.org/wiki/Intel_4004">Intel 4004</a>. Далее идут десятки различных примеров программ и проектов, в которых используется GMC-4. Красота!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Может ли Java быть быстрее C++?]]></title>
    <link href="http://demin.ws/blog/russian/2012/07/03/can-java-be-faster-cpp/"/>
    <updated>2012-07-03T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/07/03/can-java-be-faster-cpp/</id>
    <content type="html"><![CDATA[<p>Есть у меня друг, <a href="http://stas-blogspot.blogspot.com/">Стас</a>, с которым мы частенько, как настоящие программисты, особенно при наличии разных средств внутреннего подогрева, регулярно имеем традиционные пузомерки C++ (я) vs Java (он). Понятно, что социальная составляющая является основной в данных беседах, и, очевидно, полного конценсуса тут нет и быть не может, что и хорошо.</p>

<p>Но иногда, уже на трезвую голову, когда я думаю о подобном сравнении, при всем моем желании понять, почему Java в принципе может быть не то что быстрее, а хотя бы не медленнее C++, у меня не хватает аргументов даже для себя самого.</p>

<p>Для начала несколько &ldquo;дано&rdquo;:</p>

<ul>
<li>Мы сравниваем С++ 2011, компилируемый в машинный код, и обычную Java 7 (не real-time, embedded или что-то в этом роде), компилируемую в JVM-код, который только в процессе выполнения будет налету через JIT тоже компилироваться в машинный код.</li>
<li>Допустим, компиляторы C++ и Java генерируют максимально эффективный код, насколько семантика языка позволяет оптимизировать.</li>
</ul>

<p>Положим, <code>A</code> &ndash; это линейная скорость выполнения машинного когда. <code>B</code> &ndash; скорость компиляции байт-кода JVM в машинный код. Тогда общая скорость выполнения кода:</p>

<pre><code>V(C++) = A1 + B1
V(Java) = A2 + B2
</code></pre>

<p>Очевидно, что <code>B1 = 0</code>, так как С++ генерирует машинный код напрямую и не требует дополнительной работы в процессы выполнения. Но <code>B2</code> стопроцентно НЕ ноль, так как каким бы эффективным не был компилятор JIT, он ВСЕГДА требует какого-то времени для компиляцию. Более того, JIT не компилирует все сразу, а &ldquo;подкомпилирует&rdquo; по мере прохождения путей выполнения. Получается, всегда есть ненулевая вероятность, что неожиданно придется выполнить код, ранее не требуемый, и потребуется время на его компиляцию. Даже если предположить, что компилятор JIT применяет изощренные способы предсказания путей выполнения и делает все, чтобы уменьшить <code>B2</code>, но <code>B2</code> по определению не 0. Если был бы 0, то не было бы JVM, а был бы чистый машинный код.</p>

<p>Далее, рассмотрим <code>A1</code> и <code>A2</code>. Эти параметры определяют, насколько эффективно компилятор создает код (или байт-код). По моему личному, субъективному и предвзятому мнению, у С++ (не С) больше шансов на оптимизацию благодаря шаблонам (компилятор имеет полноценную семантическую информацию для проведения inline&rsquo;а) и генерация машинного кода под конкретную платформу (компилятор точно знает, какие машинные инструкции были бы максимально эффективны в каждом случае). Увы, я не особо силен в generic&rsquo;ах Java, и руководствуюсь только слухами, что в Java они &ldquo;ненастоящие&rdquo;, добавленные гораздо позже и уступающие шаблонам C++. И так как компилятор обязан выдать стандартный переносимый JVM-код, то нет возможности оптимизировать под конкретную платформу. Есть надежда, что это сделает JIT, но там уже не будет семантической информации для более глубокой оптимизации. А еще JIT должен быть быстр, то есть будет компромисс между качеством оптимизации и скоростью компиляции. В С++ такой проблемы нет, так как компилировать можно как угодно долго.</p>

<p>Итак, это мои доводы для меня самого, измеренные в виртуальных попугаях. Не получается у меня убедить самого себя, что Java может быть быстрее или хотя бы на уровне с С++ по скорости. Буду рад за помощь в понимании этого вопроса.</p>

<p>Мы со Стасом проводили несколько несложных сравнений, в основном на реализации QuickSort, и Java по линейной скорости кода проигрывала где-то на 10%.</p>

<p>До C++ 2011 можно было говорить, у С++ нет модели памяти и стандартной библиотеки для потоков, поэтому у Java есть шанс выиграть на многопоточности, но сейчас у С++ все на месте. А подходы к многопоточности у С++ и Java, как мне кажется, одинаково неудобные (хотя <code>std::async()</code> &ndash; это очень сильная возможность), и им обоим далеко до goroutines в Go, actor&rsquo;ов в Scala и т.д.</p>

<p>Понятно, что 10% не всегда делают погоду. Иногда важнее развитые инструменты интроспекции, среды разработки, контролируемое выполнение, замена кода налету и много другое, что дает <em>платформа</em> Java, и не дает &ldquo;молотилка&rdquo; C++. Но зачем говорить про скорость то?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Интервью с Сергеем Вакуленко]]></title>
    <link href="http://demin.ws/blog/russian/2012/06/29/sergey-vakulenko-interview/"/>
    <updated>2012-06-29T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/06/29/sergey-vakulenko-interview/</id>
    <content type="html"><![CDATA[<p>Сегодня у меня в гостях Сергей Вакуленко &ndash; программист, специалист по
встраиваемым операционным системам и аппаратному обеспечению, в
частности по различным микроконтроллерам. Ничто так не представляет
человека, как его проекты. Проекты Сергея можно найти на его <a href="http://vak.ru/doku.php/proj">домашней
странице</a>. Недавно Сергей переехал в США и работает в MIPS.
У нас есть шанс побеседовать с Сергеем.</p>

<hr />

<p><img src="http://demin.ws/images/blog/sergey-vakulenko.jpg" alt="" />
</p>

<blockquote>
<p>Если на просьбу написать несколько строчек кода человек начинает
вместо этого уходить в объяснения &ndash; дело тухлое.  Рыбак не может
не любить держать в руках удочку.</p>
</blockquote>

<hr />

<p>Спасибо, Сергей, за интервью.</p>

<p><strong>Сергей, первый вопрос не будет оригинальным, но это не делает его
менее интересным. Расскажите, как судьба привела вас в мир компьютеров
и программирования? Поделитесь вашей историей.</strong></p>

<p>Сейчас забавно вспоминать, но компьютеры стали моей специальностью не
случайно.  Можно даже сказать, это было первое мое серьезное
самостоятельное решение в жизни. :)  В 1983 году я заканчивал
выпускной класс физмат-школы-интерната (сейчас это физ-мат лицей при
Киевском университете) и выбирал вуз и будущую профессию.  Подошел к
вопросу основательно: сначала сузил все, чем увлекался в детстве, до
пяти тем.  Это были электроника, программирование, химия, астрономия
и, кажется, биология.  Несколько месяцев осмысливал эти области, пока
окончательно не остановился на программировании.  И даже конкретнее:
роботы.  Поступил на физтех, и попал в самую точку.  Правда, роботами
заниматься так и не довелось, но это уже другая история.</p>

<p>Нельзя сказать, что на физтехе в то время как-то особенно хорошо учили
программированию.  Но там существовал кружок, неформальный клуб людей,
очень увлеченных этим.  Назывался &ldquo;НСО&rdquo; - научное студенческое
общество.  Немного, может быть человек пятнадцать на весь институт: от
первокурсников до аспирантов.  В среднем два-три человека с каждого
курса.  Народ регулярно собирался в общаге или в аудиториях, обсуждали
всякие интересные вещи, старшекуры читали лекции для младших и т.п.
Именно там я узнал про языки Лисп, Рефал, Си, систему Юникс.
Участвовали мы и в студенческих олимпиадах по программированию.
Физтех регулярно брал первое место в командном зачете.</p>

<p><strong>Вы были одним из первых программистов, которые начали использовать
UNIX в СССР. Что это был за UNIX и на каких машинах он работал?</strong></p>

<p>Впервые я увидел живой Юникс в Курчатовском институте в 1986 году.  В
то время наша физтовская команда вместе с Курчатником занималась
развитием системного софта для БЭСМ-6.  В ИТМиВТ готовилась к выпуску
новая машина этого ряда: Эльбрус-Б.  Курчатовцы предложили не тащить
на нее старую замшелую БЭСМовскую операционку, а сразу поставить
Юникс.  Нашей команде было предложено разработать систему
программирования: Си-компилятор, ассемблер, загрузчик, библиотекарь и
прочую мелочевку.  Для меня потом это стало темой диплома.</p>

<p>В качестве инструментальной машины на первых порах использовалась
СМ-1470.  Довольно медленная машинка, со съемными 2.5-мегабайтными
дисками.  Но через год, в 1987 на физтехе появился учебный класс с
машиной Labtam - классический юникс System V на процессоре NS32032.
Это уже было кое-что.  Я быстренько перенес туда экранный редактор RE
из ОС Демос, к радости преподавателей, разобрался с русификацией
терминалов (цветные графические, не хухры-мухры).  И за это получил
возможность использовать компьютер для своих разработок, в любое время
кроме учебных занятий.  Там и создавалась большая часть Си-компилятора
для БЭСМ-6 и Эльбруса-Б.</p>

<p>В курчатнике тем временем народ перенес ОС Демос на &ldquo;Электронику-85&rdquo;,
а также занялся разработкой версии Unix по заказу французской фирмы
Utec - на процессоре Motorola 68000.  Процесс шел успешно, система
быстро стала стабильной, и одна из машинок Utec долгое время была
нашей основной рабочей лошадкой.  В первый раз я установил Emacs
именно на нее.</p>

<p>Чуть позже, где-то в 1988 стали появляться персоналки с i286, на
которых работал Xenix.  Вполне юникс, но архитектура процессора
ограничивала программные сегменты размером 64к.  Мне в конце концов
удалось собрать на нем gcc, но ценой перелопачивания приличной части
кода.  Зато с i386 уже никаких проблем не было.  Главной системой
сразу стал Interactive Unix, который Курчатник честно купил на Западе.</p>

<p>Юникс на БЭСМ-6 и Эльбрус-Б сделали в Новосибирском филиале ИТМиВТ.
Мой компилятор пригодился.  Но потом пришла волна писишек, и большие
машины потеряли смысл.</p>

<p><strong>У вас есть целый раздел в проектах - Ретрокомпьютинг. Видно, что
вы целенаправленно собираете информацию о компьютерах прошлого и часто
создаете их симуляторы, как программные, так и аппаратные. Что вас так
привлекает в этом? В основной работе помогает?</strong></p>

<p>Древние компьютеры - это же так интересно!  :)
Дело в том, что в них сохранилась и видна красота технических идей.
Которую современные компьютеры, к сожалению, утеряли: стали слишком
сложными и запутанными.  Взляд назад помогает увидеть красоту в
простоте, чего так не хватает в современных разработках.  И в работе
помогает, конечно: симуляторы и виртуальные машины сейчас самый
передний фронт.  Собственно, моя основная работа в MIPS - симуляторы.</p>

<p><strong>Попробую задать провокационный вопрос. На моем личном опыте,
особенно сейчас, когда сложность &ldquo;железа&rdquo; и программ увеличивается
семимильными шагами с каждым днем, есть весьма четкое разделение между
&ldquo;железячниками&rdquo; и программистами. Часто спецы по железу ужасно
программируют, а программисты, в большинстве своем, не способны
создавать &ldquo;железо&rdquo;. Но вы являетесь редким исключением. Как вы
считаете &ndash; существует ли такая грань? Должен ли, например, спец по
железу уметь написать алгоритм &ldquo;min-cost-max-flow&rdquo;, а программист
спаять Спектрум?</strong></p>

<p>Разделение существует, несомненно.  Все известные мне серьезные
инженеры четко делятся на электроников и программеров.  Две разные
наклонности: орудовать паяльником или возиться с формулами.  Наверное,
между ними заложено определенное противоречие.  Структурное мышление
и алгоритмическое.  Строим или двигаемся.  Но самое интересное
происходит на стыке.</p>

<p>Странно слышать, что программистам на Java или PHP трудно дается
понятие указателя.  Наверное, им забыли рассказать про шины адреса и
данных, счетчик команд, фрейм стека, прерывания и многое другое.
Программисту необязательно уметь держать в руках паяльник, но читать
схемы и разбираться в архитектуре процессоров, я считаю, важно.  Как и
для электроника разбираться в софте.  Вряд ли можно спроектировать
эффективную микропроцессорную схему, не зная как (а главное - зачем) в
операционной системе происходит переключение процессов.</p>

<p><strong>Все-таки, кто вы больше: программист или &ldquo;железячник&rdquo;? Когда есть
выбор &ndash; каким типом проектов вам больше нравится заниматься?</strong></p>

<p>Мне всегда было интересно происходящее на стыке.  Паяльник был моим
настольным инструментом лет с 12-ти.  Простые схемы, от приемников до
цветомузыки.  Постоянно сканировал журнал Радио и другие в поисках
интересных решений.  Больше теоретически: нужные детали добыть было
неоткуда.  С литературой тоже напряг.  В девятом классе моей
настольной книжкой стал &ldquo;Снобол-4&rdquo;.  Про другие языки тоже знал,
конечно, но эта штука меня основательно увлекла.  Все-таки я больше
программист: алгоритмы и исходники мне ближе, чем паяльник и
осциллограф.  Вот чем симуляторы подкупают: вы получаете виртуальный
хардвер по цене софтвера.  :)</p>

<p><strong>Можете назвать каких-нибудь известных программистов, которые для
вас являются примером?</strong></p>

<p>Да, конечно: главными учебниками для меня были идеи и исходные тексты
великих мастеров.  Деннис Ритчи и Кен Томпсон, Unix v6.  Стивен
Джонсон, компилятор pcc.  Маршалл Кирк Маккузик, BSD Unix.  Ричард
Столлман, компилятор gcc.  Эндрю Таненбаум, Minix. Это, так сказать,
удаленные авторитеты, а еще коллеги и старшие товарищи, передавшие,
так сказать, живой опыт: Сергей Рыжков, Алексей Руднев, Вадим Антонов,
Сергей Аншуков, Валерий Бардин.  Люди, создававшие ОС Демос и
российский Интернет.  Это были интереснейшие технологические задачки,
с борьбой идей и бурной внутренней жизнью.</p>

<p><strong>У вас в проектах есть несколько реализаций этюдов (язык ТРАК и
игра Калах) из эпохальной (по крайне мере для меня) книги &ldquo;Этюды для
программистов&rdquo; Чарльза Уэзерелла. Есть ли еще этюды, которые все еще
хочется реализовать? Может взломать шифр Виженера?</strong></p>

<p>Эту книжку я зачитал до дыр на первом-втором курсах физтеха.  Она и
сейчас стоит под рукой, на полке.  Шифр Виженера взломал мой друг Леня
Брухис.  Он мне красочно рассказал всю историю в подробностях, что мое
любопытство оказалось полностью удовлетворено.  :)  И задачку сжатия
он тоже решил, так в NetBSD появилась утилита freeze.</p>

<p>Я сейчас перелистал - оказывается, остальные задачи я уже более-менее
все решал, от бухгалтерии до компиляторов.  Но по жизни появляется
много других интересных идей, типа RetroBSD.  Пока самая долгосрочная
из них - создание RTOS для микроконтроллеров с защитой памяти, но без
MMU.</p>

<p><strong>Есть еще книги, про которые сильно повлияли на вас?</strong></p>

<p>Snobol-4, как я уже говорил.  Это был поворотный момент в осознании
того, чем может быть компьютер.  Интересно, что сейчас существует
более современный язык того же автора - Icon.</p>

<p>&ldquo;Операционная система Unix&rdquo; Стива Баурна.  После БЭСМ-6 и ЕС это был
культурный шок: я не сразу поверил, что ОС может быть настолько
простой и эффективной.</p>

<p>&ldquo;Язык программирования Си&rdquo; Кернигана и Ритчи.  После Фортрана и
Паскаля - ощущение свободы, как будто кандалы сняли.</p>

<p>&ldquo;Структура и интерпретация компьютерных программ&rdquo; Абельсона и Сассман
- тогда еще в оригинале, ее только недавно перевели.  Великая книга, с
которой надо начинать всякое преподавание программирования.</p>

<p>Эндрю Таненбаум: &ldquo;Операционные системы. Разработка и реализация&rdquo;
(Minix) и другие его книги.  Это просто энциклопедия компьютерных
знаний.</p>

<p>Когда появилась возможность заказывать книжки с amazon.com - примерно
с 1996 года Сбербанк начал выдавать кредитки Visa - это было еще один
глоток свободы.  Сейчас уже много хороших переводных изданий
появилось.</p>

<p><strong>У вас еще еще <a href="http://code.google.com/p/vak-opensource/">одна страничка</a>, где среди множества
прочих интересных вещей, есть каталог &ldquo;languages&rdquo;, где вы пробуете
различные языки. Как вы выбираете задачи, чтобы &ldquo;пощупать&rdquo; язык? И как
вы, собственно, выбираете языки для изучения? Любимый язык есть?</strong></p>

<p>Да, там я складываю небольшие примерчики, чтобы попробовать,
&ldquo;почувствовать&rdquo; всякие интересные языки.  Иногда попадается интересная
задачка, из книжек или из ленты друзей в ЖЖ.  Возникает идея сравнить
ее на разных языках.  Все языки интересны, а некоторые часто еще и
имеют реальную практическую ценность.  Например, D и Go - си-подобные
компилирующие языки с автоматическим управлением памятью - удобнее чем
Си++ и Java для большинства задач.  Обдумываю применить Objective C
для встроенных систем - он имеет прекрасную компонентную модель,
достаточно поменять семантику runtime.</p>

<p>Языки, которыми обычно пользуюсь - Си и Питон.  Избегаю и другим не
рекомендую Си++ и Перл для реальных разработок, из чисто практических
соображений.  Посматриваю на Хаскель и Эрланг, как источник идей на
будущее.  Все языки интересны, и радует, что развитие не
останавливается.</p>

<p><strong>Уверен, вы слышали про Raspberry Pi. Можете прокомментировать как
человек, знающий процесс изнутри &ndash; реально ли создать подобное
устройство за те деньги, за которые его продают? Или это убыточный
проект? Просто если это не так, почему такие проекты не являются
массовыми?</strong></p>

<p>Цена примерно соответствует себестоимости.  В целом это хороший
маркетинговый проект Broadcom и ARM, с пользой для социума.  Они не
массовые, потому что отсутствует коммерческая составляющая, и вокруг не
образуется эко-система из фирм, развивающих и поддерживающих проект.
В отличие от Ардуино, например.</p>

<p><strong>На каком языке стоит начинать учиться программированию? Есть
подходы, например, используя диалекты Лиспа, когда люди учатся
программировать, практически не тратя времени на изучение самого языка
(синтаксис Лиспа объясняется за пару минут).</strong></p>

<p>Здесь у меня нет однозначного мнения.  Я пробовал давать своим
сыновьям и Лого, и варианты Лиспа, но лучший результат получается, все
же, с Паскалем.  Си и Джава хорошо идут позже, в студенческом
возрасте.  Для школьников, возможно, Питон был бы лучшим выбором.</p>

<p><strong>Императивное и функциональное. В мире современного &ldquo;железа&rdquo; есть
ли применение для функционального подхода? Оправдано ли оно, или это
дань моде?</strong></p>

<p>Сейчас это активная область исследований.  Например, Bluespec - новый
язык для разработки хардвера вместо или вместе с SystemVerilog -
разрабатывался как расширение Haskell.  Сложность хардвера растет, и
повышение уровня абстракций может сильно помочь - если не будет идти
во вред таймингу.  Полезность надо еще подтвердить практикой, но
надежда всегда есть.</p>

<p><strong>Разработка и тестирование. Расскажите, как вы тестируете (на
работе или дома) &ldquo;железячные&rdquo; проекты? Применимо ли TDD (test driven
development) в разработке аппаратуры? Как автоматизируется
тестирование аппаратуры?</strong></p>

<p>Всякие домашние проекты я обычно тестирую кое-как: хобби оно и есть
хобби.  Даже название придумал: тяп ляп инжиниринг лтд.  Но на работе
- совсем другое дело.  Поработав в MIPS, теперь я понимаю, как надо
вести разработку:  это действительно test driven development, ровный
процесс с выходом ожидаемого качества.  Ценный опыт.  Но очень высокие
требования к составу и уровню команды.</p>

<p>Разработка системы на кристалле происходит примерно так.  Архитектор
разрабатывает внешнюю спецификацию и архитектуру.  Это постоянный
процесс: к концу разработки подробно известно, что происходит в каждом
блоке системы на каждом такте.  Инженеры-электроники собственно
проектируют систему, создавая синтезируемый код на Верилоге.  Группа
тестирования дополняет его до полной системы, создавая RTL-симулятор.
Отдельно программисты делают функциональный симулятор системы, исходя
из внешней спецификации.  Параллельно делаются подробные тесты для
каждого элемента или функции системы, в соответствии с архитектурой.
Тесты гоняются на RTL-симуляторе и на софтверном симуляторе, и
проверяется их идентичность.  Ошибки означают расхождение или в
аппаратуре, или в архитектуре.  Процесс разработки и тестирования
итеративный, и когда он завершается, заказчик получает: описание
архитектуры и ее программный симулятор, функционально полный хардвер и
точный его симулятор, плюс огромный набор верификационных тестов.
Хотите что-то доработать?  Нет проблем: вносите изменения, прогоняйте
тесты, чините сломавшиеся места.  Очень технологично.</p>

<p><strong>На чем вы работаете? Например дома. Судя по проектам, вы
используете и Windows, и Linux, и Mac.</strong></p>

<p>На работе Linux на столе и большинстве серверов, дома Mac-mini и
Windows на виртуальной машине.  Ноутбуки я постепенно перестал
уважать, iPad закрыл все потребности.  Раньше основной домашней
машиной был Линукс, но приходилось при каждом серьезном обновлении
системы решать проблемы с драйверами.  То звук отвалится, то USB, то
видео.  С переходом на Мак жизнь упростилась.</p>

<p><strong>Кстати, вы &ldquo;социальный&rdquo; программист? У вас есть G+ и Facebook,
Твиттера вроде нет. Какие блоги вы читаете? И еще более интересно &ndash;
сколько? Ведь время всегда ограничено, и как-то приходится выбирать
между проектами и работой, и чтением новостей.</strong></p>

<p>Лента друзей в ЖЖ и фейсбуке для меня главные источники информации о
мире.  G+ пока не прижился, еще менее удобный, чем ФБ.  С утра, как
проснусь, хватаю iPad и читаю все новости за ночь. :)  И днем тоже
частенько отвлекаюсь от работы на ЖЖ, в качестве перекура.  Пишу и
комментирую реже, когда находится что-то интересное.  Еще активно
использую Google Reader, собираю в кучу RSS-ленты разных газет,
новостевых сайтов, elementy.ru, anekdot.ru, dirty.ru - сейчас
практически все поддерживают эту фишку.</p>

<p><strong>Если вы вам надо было бы нанять толкового программиста &ndash; какие
бы вопросы вы задавали?</strong></p>

<p>Какими своими проектами вы гордитесь?  Какой проект вы бы хотели
сделать?  Ну и код полистать, конечно.</p>

<p>Мне приходилось интервьюировать программистов.  Если на просьбу
написать несколько строчек кода человек начинает вместо этого уходить
в объяснения - дело тухлое.  Рыбак не может не любить держать в руках
удочку.</p>

<p><strong>Сложно было найти работу в США? И в моральном, и техническом
смысле? Много ли русско-говорящих в MIPS?</strong></p>

<p>Нельзя сказать, что я ее целенаправленно искал, просто оказия
подвернулась (и даже две сразу).  Мне очень помог Юра Панчул,
с которым мы знакомы еще со времен учебы на физтехе.  Он меня
давно звал, уже лет пятнадцать, но в этот раз звёзды правильно
встали.  Насколько я вижу, найти работу несложно - при
определенном уровне квалификации.  Здесь точно так же не
хватает специалистов, как и в России.  А поскольку MIPS начинает
строить планы сотрудничества с российскими разработчиками,
пополнение команды русскими инженерами приветствуется.</p>

<p>В моральном плане переезжать нет никаких проблем: все тебя
поддерживают и одобряют.  Труднее было пережить развал, останов
и прекращение всех дел, в которые я был включен в Москве, но это
происходило независимо и до решения о переезде.  Как в известном
анекдоте: говорят, у нас кризиса не будет.  Как не будет, только
что ведь уже не было?</p>

<p>В техническом плане пришлось поднапрячься, чтобы уладить все дела,
передать жилье и заботы по хозяйству на старших детей.  Они хоть уже
взрослые и живут самостоятельно, все равно волнительно.</p>

<p>Русскоговорящих в MIPS шесть человек, включая меня.  Из них четверо из
exUSSR и двое американцев, изучавших русский язык.  Плюс много старых
знакомых из Курчатника и ИТМиВТ, плюс новые знакомства - по родной
речи скучать не приходится.</p>

<p><strong>Ну и под занавес, вы сам выбрали профессию, или она таки сама
выбрала вас?</strong></p>

<p>Я выбрал, однозначно.  Но мне очень повезло с людьми, с которыми
сводила судьба.  Вообще, в каждом человеке заложено зерно, которое
стремится прорасти.  Важно попасть на правильную почву.  Тут мне грех
жаловаться.</p>

<p><strong>Сергей, спасибо за интервью. Ждем ваших новых проектов. Удачи.</strong></p>

<p>Большое спасибо за интересные вопросы.</p>

<p>Всего хорошего,</p>

<p>Сергей</p>

<hr />

<h2>Ссылки на сайты Сергея</h2>

<ul>
<li><a href="http://vak.ru/doku.php/proj">Домашняя страница проектов</a></li>
<li><a href="http://code.google.com/p/vak-opensource/">Разнообразные исходные тексты на Google Code</a></li>
</ul>

<p><em>// Сергей Вакуленко, Александр Дёмин // Июнь 2012.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Не прячьте ваши логи, или система анализа логов Splunk]]></title>
    <link href="http://demin.ws/blog/russian/2012/06/25/splunk/"/>
    <updated>2012-06-25T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/06/25/splunk/</id>
    <content type="html"><![CDATA[<blockquote>
<p><strong>Disclaimer</strong>: Этот пост ни как не связан ни с компанией Splunk, ни c моим работодателем. Все это мое личное мнение о продукте на основе свободной информации с сайта Splunk и посещения открытой бесплатной конференции SplunkLive 2012.</p>
</blockquote>

<p>Грамотные логи &ndash; это практически все, ну или почти все. Если логирование сделано по уму, то и разработчикам будет легче, а службе поддержки еще легче.</p>

<p>&ldquo;Ну а теперь &ndash; два слова о себе!&rdquo;. Мы делаем банковский софт, серверная часть которого &ndash; это долгоиграющие неинтерактивные процессы. Логи (и иногда coredump&rsquo;ы) &ndash; это единственный способ их мониторить. С некоторого времени мы используем Google Log в качестве механизма ведения логов с некоторой небольшой самодельной прослойкой сверху для интерфейса к C и прикладному уровню (у нас собственный язык для написания бизнес логики, типа как у 1C).</p>

<p>Итак, логи ведутся. Прикладной уровень тоже все больше и больше служебной информации пишет в них, что отлично. Более того, логи в виде текстовых файлов &ndash; это удобно (даже на Windows, и не говорите мне про недоразумение, называемое Windows Events).</p>

<p>Но вот удобства заканчиваются, и начинаются проблемы. Для начала, при многосерверной распределенной системе, чтобы централизировано анализировать логи, их надо выуживать с разных машин. Кроме того, разные подсистемы в силу разных, часто исторических причин, пишут информацию в совершенно разных форматах. И как прикажете их анализировать? хардкодить? Изобретать всякие rule engine&rsquo;ы? А клиенты (читай, банки), хотят красивые, удобные и наглядные dashboard&rsquo;ы, конфигурируемые системы оповещения, триггеры, интеграцию с другими продуктами, возможность горизонтально расширятся (не знаю, как по-русски сказать &ldquo;to scale horizontally&rdquo;) и т.д. Как я уже говорил, мы делаем банковский софт, делаем его хорошо, и совершенно не хотим тратить силы на побочные продукты, связанные с инфраструктурой. Было несколько попыток создать собственную систему мониторинга, но, увы, для банков уровня Tier 1 &ndash; это не та задача, которая может быть решена одним пальцем левой ноги. Вывод: нужно хорошее third-party решение, причем которое будет работать одинаково на UNIX&rsquo;ах и Windows.</p>

<p>Надеюсь я достаточно нагнал страху. К делу.</p>

<p>Был обнаружен продукт, называемый <a href="http://splunk.com">Splunk</a>. Удивительно, но суть этого продукта можно описать одним абзацем. А если вообще одним предложением, то это развитая система анализа неформатных текстовых данных, чем логи и являются. Входными данными являются произвольные текстовые данные, разбитые на строки. Способы их доставки в Splunk весьма гибкие. Самое простое &ndash; установить на сервера агент Splunk, указать ему каталоги или конкретные файлы, которые надо мониторить, и он будет автоматически отсылать обновления на центральный сервер. Можно самостоятельно доставлять логи на сервер Splunk, например, посылая их туда через по HTTP, TCP, UDP. Еще Splunk умеет брать данные из Windows (Logs, Events, Performance Counters). В общем, путей много. Мы остановились на агентах.</p>

<p>Итак, сервер Splunk постоянно получает актуальные обновления. Он как-то их сам хранит и индексирует. Есть возможность развернуть кластер Splunk-машин, и они будут распределено использоваться для хранения данных и поиска.</p>

<p>Но самое интересное начинается дальше. У Splunk есть специальный язык запросов, предназначенный для анализа неструктурированной текстовой информации. Основной принцип &ndash; это разнообразные фильтры, применяемые построчно к указанному куску данных, и результаты данных можно через pipe (<code>|</code>) как в unix&rsquo;е &ldquo;нанизывать&rdquo; один на другой.</p>

<p>Например:</p>

<pre><code>sourcetype=access_* | redup by user_id | transaction by tran_id | sort by duration desc | head 10
</code></pre>

<p>Берем файлы, начинающиеся с <code>access_</code>, затем &ldquo;сжимаем&rdquo; повторяющиеся записи по критерию повторяющегося значения поля <code>user_id</code>, затем группирует записи по полю <code>tran_id</code> (фактически логически &ldquo;сжимаем&rdquo; строки с одинаковыми значениям поля <code>tran_id</code> в транзакции), затем сортируем по длительности (поле <code>duration</code> автоматически добавляется фильтром <code>transaction</code>) и отбираем первые десять сверху. Итак, в итоге мне имеем десять самых длинных транзакций от уникальных пользователей. А всего то, написали один запрос.</p>

<p>Откуда берутся так называемые поля? Поля вычленяются из строк данных. По умолчанию разделителем полей является пробел, для разделения имени поля и значения является &ldquo;равно&rdquo;. Но все это, конечно, конфигурируемо. Фактически, любой формат, который можно разобрать программно, можно настроить. Специальными фильтрами можно создавать вычисляемые поля, причем ссылать можно не только на данных из текущей строки, но и на другие строки, отобранные по какому-то критерию. Все очень похоже на SQL, только источником данных являются не таблицы в базе данных, а тестовые строки. На выходе &ndash; табличные данные, которые можно трансформировать в новые таблицы (точнее, представления, view) и т.д. Результат можно оформить в виде красивой таблички или графической диаграммы. Да, чуть не забыл. Можно делать подстановки полей на основе запросов во внешние источники, например, RDBMS или RESTful-сервис. Все налету.</p>

<p>После того, как запрос отлажен, его можно запомнить и добавить в dashboard. Настроенный dashboard можно оформить в виде так называемого приложения (фактически, это набор xml-файлов) и, например, передать клиенту. На сайте Splunk&rsquo;а есть даже магазин приложений (хотя большинство из них бесплатны). Можно, например, взять готовое приложение для анализа логов Microsoft Exchange&rsquo;а, воткнуть и начать сразу получать удовольствие.</p>

<p>Путей для визуализации результатов поиска много: таблицы, графики, выгрузка во внешние источники, даже интеграция с Google Maps. Я видел живое демо, где человек из логов веб сервера вытащил информацию о положении пользователей, отсортировал и отфильтровал по вкусу, и в конце представил в виде Google Maps виджета, где было видно, откуда были запросы. И все это через несложные Splunk-запросы. Тот пример, что привел я &ndash; это микрочастичка того, что можно сделать запросами. Вкратце можно <a href="http://docs.splunk.com/Documentation/Splunk/latest/SearchReference/ListOfSearchCommands">ознакомится со списком команд</a>, так, чтобы понимать примерно возможности.</p>

<p>По-хорошему, имея Splunk и логи веб сервера, такие вещи как Google Analytics могут больше не понадобится. Splunk говорит, что многие их большие клиенты, кто работает c веб, так и делает, так как можно автоматически привязывать аналитику к любым внутренними данным, идущих от разных источников.</p>

<p>Если так задуматься, то если использовать Splunk, то логирование само по себе упрощается. Например, не надо придумывать, как именовать логи. Системе логирования достаточно использовать время в имени и порядковый номер, если лог был обрезан по длине. Но все это только ради уникальности файла в файловой системе. После &ldquo;скормления&rdquo; файла в Splunk имя будет уже не важно. Далее, можно не париться в вычислении длительности событий (это бывает удобно для профилирования). Это можно сделать через вычисляемые поля в запросе.</p>

<p>Важно, что для информации, проиндексированной Splunk&rsquo;ом, нет различия в доступности в зависимости от ее возраста. Все данные доступны для запросов с одинаковой скоростью, ограниченной производительностью только вашего сервера или серверов, где развернут Splunk.</p>

<p>Идем далее. Как можно продукт попробовать? Бесплатно скачать с официального сайта (требуется свободная регистрация). У Splunk следующая ценовая политика: цена продукта определяется только объемом данных, прогоняемых через систему в день. Если ниже какого-то минимального порога, то можно использовать бесплатно.</p>

<p>У меня время от скачивания дистрибутива под Windows, установкой, подсосом локальных логов с той же машины (пока без агентов) и началом игры с запросами по ним было около получаса.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Мини-компьютеры: MK802, CuBox, Raspberry PI]]></title>
    <link href="http://demin.ws/blog/russian/2012/06/20/mk802-cubox-raspberry-pi/"/>
    <updated>2012-06-20T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/06/20/mk802-cubox-raspberry-pi/</id>
    <content type="html"><![CDATA[<p>Тема микрокомпьютеров однозначно пошла на взлет. Про <a href="http://demin.ws/blog/russian/2012/01/19/maximite-kit/">сборку Maximite я уже писал</a>.</p>

<p>За последнее время удалось пощупать еще несколько мини машин, правда несколько иного класса, чем Maximite, построенных на ARMах.</p>

<p>Сразу извиняюсь за качество фоток, но нормально фотографировать яркий экран у меня не получилось ни на айфон, ни на мыльницу.</p>

<h1>MK802 (он же Mini Android 4.0)</h1>

<p>Этот я купил сам. Цена вопроса - 70$ + доставка. На <a href="https://www.miniand.com">официальном сайте</a> уже продается более современная модель с гигом памяти. У меня только 512МБ.</p>

<p>Мои фотки:</p>

<p><img src="http://demin.ws/images/blog/mini-computers/mk802/IMG_0362.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/mini-computers/mk802/IMG_0363.JPG" alt="" />
</p>

<p><img src="http://demin.ws/images/blog/mini-computers/mk802/IMG_0364.JPG" alt="" />
</p>

<p>USB номер один. Через него можно также питать, но говорят, что требуется два ампера, так что просто от компьютера может не получится. Я через этот разъем подключал клавиатуру.</p>

<p><img src="http://demin.ws/images/blog/mini-computers/mk802/IMG_0366.JPG" alt="" />
</p>

<p>Mini HDMI. Через переходник также получилось подключить к DVI-монитору.</p>

<p><img src="http://demin.ws/images/blog/mini-computers/mk802/IMG_0368.JPG" alt="" />
</p>

<p>На торце еще USB и внешнее питание.</p>

<p><img src="http://demin.ws/images/blog/mini-computers/mk802/IMG_0369.JPG" alt="" />
</p>

<p>Разъем микро-SD. По размеру весь корпус чуть больше флешки обычного дизайна.</p>

<p><img src="http://demin.ws/images/blog/mini-computers/mk802/IMG_0371.JPG" alt="" />
</p>

<p>Подключил к телеку. Андроид вшит, время загрузки до этой заставки ~5 секунд.</p>

<p><img src="http://demin.ws/images/blog/mini-computers/mk802/IMG_0372.JPG" alt="" />
</p>

<p>Время полной загрузки ~25 секунд.</p>

<p><img src="http://demin.ws/images/blog/mini-computers/mk802/IMG_0374.JPG" alt="" />
</p>

<p>Подключил мышь, кое-как на виртуальной клавиатуре ввел пароль WiFi и сразу зашел на правильный сайт.</p>

<p><img src="http://demin.ws/images/blog/mini-computers/mk802/IMG_0379.JPG" alt="" />
</p>

<p>Десктоп ориентирован на использование как медиа-центра, поэтому все такое громадное на экране. Немного поёрзав со шрифтами, получил такое.</p>

<p><img src="http://demin.ws/images/blog/mini-computers/mk802/IMG_0386.JPG" alt="" />
</p>

<p>Теперь еще один правильный сайт.</p>

<p><img src="http://demin.ws/images/blog/mini-computers/mk802/IMG_0380.JPG" alt="" />
</p>

<p>Параметры внутреннего хранилища.</p>

<p><img src="http://demin.ws/images/blog/mini-computers/mk802/IMG_0383.JPG" alt="" />
</p>

<p>Что за андроид.</p>

<p><img src="http://demin.ws/images/blog/mini-computers/mk802/IMG_0384.JPG" alt="" />
</p>

<p>Предустановленные приложения.</p>

<p><img src="http://demin.ws/images/blog/mini-computers/mk802/IMG_0385.JPG" alt="" />
</p>

<p>Под занавес еще один правильный сайт. Увы, JSLinux не смог запуститься. Наверное, дело в браузере.</p>

<p><img src="http://demin.ws/images/blog/mini-computers/mk802/IMG_0387.JPG" alt="" />
</p>

<p>Вшитый андроид работает флешки не требует. Если подготовить флешку с другим линуксом, то он с нее загрузится. А попробовал образы Ubuntu 12.04 и Lubuntu с официального сайта. Увы, реально все шевелится очень неотзывчиво. Нужен нормальный дистрибутив, оптимизированный под эту платформу.</p>

<p>Можно поглядеть еще картинки на <a href="https://www.miniand.com/forums/forums/2/topics/1">официальном форуме</a>. Также есть <a href="https://www.miniand.com/forums/forums/2/topics/19">процедура разбора</a>.</p>

<p>Вывод: не совсем ясно, для чего нужно такое устройство. С Maximite можно хоть на аппаратном уровне поиграться. А тут: разве что запустить <a href="http://xbmc.org/">XBMC</a> и использовать машину подобного рода как медиа-центр.</p>

<h1>CuBox</h1>

<p>Производится <a href="http://solid-run.com/">SolidRun</a>. Этот девайс купил коллега, уставший ждать Raspberry PI (я свой тоже еще не получил), и дал мне поиграться.</p>

<p>Тут процессор немного послабее, но <a href="http://solid-run.com/products/cubox">больше периферии</a> (хотя нет WiFi), и тоже обещают 1080p видео. Этот больше тянет на роль медиа-центра.</p>

<p>Представляет собой кубик, со стороной примерно как спичечный коробок.</p>

<p><img src="http://demin.ws/images/blog/mini-computers/cubox/image_0.jpeg" alt="" />
</p>

<p>Питание, сеть, HDMI, micro-SD, два USB, eSATA.</p>

<p><img src="http://demin.ws/images/blog/mini-computers/cubox/image_1.jpeg" alt="" />
</p>

<p>SPDIF, micro-USB (консоль).</p>

<p><img src="http://demin.ws/images/blog/mini-computers/cubox/image_2.jpeg" alt="" />
</p>

<p>Девайс выполнен как-то кустарно. Корпус, судя по второй картинке, точили явно руками, и не очень прямо. Но в целом &ndash; работает отлично. На борту Ubuntu 10.04.</p>

<h1>Raspberry PI</h1>

<p>Этот девайс мне дал другой коллега, таки дождавшийся заветной платки. Она продается как есть, без блока питания и флешки для загрузки. Надо самому ее готовить, хотя информации в сети полно.</p>

<p><img src="http://demin.ws/images/blog/mini-computers/raspberry-pi/raspberry-pi.jpg" alt="" />
</p>

<p>Из интересного: у PI есть порты-пины общего назначения (GPIO) (на фотке в левом верхнем углу), к которым можно теоретически подключать всякие самоделки. Вообще, PI задумывался как образовательное устройство, а не конечное.</p>

<h1>Вместо заключения</h1>

<p>Какой-то прям бум наблюдается с подобными миниатюрными компьютерами. Растут как грибы. И ARM - это здорово. Одна с ними пока засада &ndash; Хром на них не работает по понятным причинам.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Что быстрее: поиск в list, deque и forward_list или удаление из vector]]></title>
    <link href="http://demin.ws/blog/russian/2012/06/14/selecting-container-in-stl-for-intensive-lookup-and-deletion/"/>
    <updated>2012-06-14T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/06/14/selecting-container-in-stl-for-intensive-lookup-and-deletion/</id>
    <content type="html"><![CDATA[<p>Задача: есть контейнер, в котором надо находить произвольные элементы и удалять их. Если оставить за рамками обсуждения общую резонность данной задачи и ее альтернативные решения, например, через дополнительный индекс для исключения линейного поиска, то получается, надо выяснить, что быстрее: искать по списку за O(N) и удалять за O(1), или получить элемент в векторе за O(1) и удалять за O(N). Как-то интуиция подсказывает, то если хода нет, то надо ходить с бубей, то есть, если не знаешь что использовать, сначала попробуй вектор. Блочная сдвижка элементов вектора выглядит более оптимизируемой, нежели проход по связному списку. Но мне хотелось немного цифр.</p>

<p>Итак:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;future&gt;</span>
<span class="hl ppc">#include &lt;vector&gt;</span>
<span class="hl ppc">#include &lt;deque&gt;</span>
<span class="hl ppc">#include &lt;list&gt;</span>
<span class="hl ppc">#include &lt;forward_list&gt;</span>
<span class="hl ppc">#include &lt;typeinfo&gt;</span>
<span class="hl ppc">#include &lt;iterator&gt;</span>
<span class="hl ppc">#include &lt;iostream&gt;</span>

<span class="hl kwc">template</span> <span class="hl opt">&lt;</span>typename T<span class="hl opt">&gt;</span>
<span class="hl kwb">void</span> <span class="hl kwd">go</span><span class="hl opt">(</span>T f<span class="hl opt">) {</span>
  <span class="hl kwc">auto</span> start <span class="hl opt">=</span> std<span class="hl opt">::</span>chrono<span class="hl opt">::</span>high_resolution_clock<span class="hl opt">::</span><span class="hl kwd">now</span><span class="hl opt">();</span>
  <span class="hl kwd">f</span><span class="hl opt">();</span>
  <span class="hl kwc">auto</span> stop <span class="hl opt">=</span> std<span class="hl opt">::</span>chrono<span class="hl opt">::</span>high_resolution_clock<span class="hl opt">::</span><span class="hl kwd">now</span><span class="hl opt">();</span>
  <span class="hl kwc">auto</span> duration <span class="hl opt">=</span> std<span class="hl opt">::</span>chrono<span class="hl opt">::</span>duration<span class="hl opt">&lt;</span><span class="hl kwb">double</span><span class="hl opt">&gt;(</span>stop <span class="hl opt">-</span> start<span class="hl opt">).</span><span class="hl kwd">count</span><span class="hl opt">();</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> duration <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">erase</span><span class="hl opt">(</span>std<span class="hl opt">::</span>forward_list<span class="hl opt">&lt;</span><span class="hl kwb">int</span><span class="hl opt">&gt;&amp;</span> c<span class="hl opt">,</span> std<span class="hl opt">::</span>forward_list<span class="hl opt">&lt;</span><span class="hl kwb">int</span><span class="hl opt">&gt;::</span>iterator i<span class="hl opt">) {</span>
  c<span class="hl opt">.</span><span class="hl kwd">erase_after</span><span class="hl opt">(</span>i<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwc">template</span> <span class="hl opt">&lt;</span>typename T<span class="hl opt">&gt;</span> <span class="hl kwb">void</span> <span class="hl kwd">erase</span><span class="hl opt">(</span>T<span class="hl opt">&amp;</span> c<span class="hl opt">,</span> typename T<span class="hl opt">::</span>iterator i<span class="hl opt">) {</span>
  c<span class="hl opt">.</span><span class="hl kwd">erase</span><span class="hl opt">(</span>i<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwc">template</span> <span class="hl opt">&lt;</span>typename T<span class="hl opt">&gt;</span> <span class="hl kwb">void</span> <span class="hl kwd">test</span><span class="hl opt">() {</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl kwc">typeid</span><span class="hl opt">(</span>T<span class="hl opt">).</span><span class="hl kwd">name</span><span class="hl opt">() &lt;&lt;</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">;</span>
  <span class="hl kwb">size_t const</span> N <span class="hl opt">=</span> <span class="hl num">100000</span><span class="hl opt">;</span>
  T <span class="hl kwd">v</span><span class="hl opt">(</span>N<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">);</span>
  std<span class="hl opt">::</span><span class="hl kwd">srand</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">);</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwc">auto</span> t <span class="hl opt">=</span> N<span class="hl opt">;</span> t <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">; --</span>t<span class="hl opt">) {</span>
    <span class="hl kwc">auto</span> i <span class="hl opt">=</span> v<span class="hl opt">.</span><span class="hl kwd">begin</span><span class="hl opt">();</span>
    std<span class="hl opt">::</span><span class="hl kwd">advance</span><span class="hl opt">(</span>i<span class="hl opt">,</span> std<span class="hl opt">::</span><span class="hl kwd">rand</span><span class="hl opt">() %</span> t<span class="hl opt">);</span>
    <span class="hl kwd">erase</span><span class="hl opt">(</span>v<span class="hl opt">,</span> i<span class="hl opt">);</span>
  <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
  <span class="hl kwd">go</span> <span class="hl opt">(</span>test<span class="hl opt">&lt;</span>std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span><span class="hl kwb">int</span><span class="hl opt">&gt;&gt;);</span>
  <span class="hl kwd">go</span> <span class="hl opt">(</span>test<span class="hl opt">&lt;</span>std<span class="hl opt">::</span>list<span class="hl opt">&lt;</span><span class="hl kwb">int</span><span class="hl opt">&gt;&gt;);</span>
  <span class="hl kwd">go</span> <span class="hl opt">(</span>test<span class="hl opt">&lt;</span>std<span class="hl opt">::</span>forward_list<span class="hl opt">&lt;</span><span class="hl kwb">int</span><span class="hl opt">&gt;&gt;);</span>
  <span class="hl kwd">go</span> <span class="hl opt">(</span>test<span class="hl opt">&lt;</span>std<span class="hl opt">::</span>deque<span class="hl opt">&lt;</span><span class="hl kwb">int</span><span class="hl opt">&gt;&gt;);</span>
<span class="hl opt">}</span>
</pre>

<p>Перегруженная функция <code>erase</code> сделана для единоообразия функции <code>test</code>.</p>

<p>Компилируем в VS11:</p>

<pre><code>cl /O2 /EHsc test.cpp &amp;&amp; test
</code></pre>

<p>Результат:</p>

<pre><code>class std::vector&lt;int,class std::allocator&lt;int&gt; &gt;
1.40678
class std::list&lt;int,class std::allocator&lt;int&gt; &gt;
8.85827
class std::forward_list&lt;int,class std::allocator&lt;int&gt; &gt;
8.70124
class std::deque&lt;int,class std::allocator&lt;int&gt; &gt;
9.19784
</code></pre>

<p>Разница, конечно, не в разы, но и не совсем уже незаметная, как для <code>list</code> и <code>forward_list</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA["iWoz: How I Invented the Personal Computer and Had Fun Along the Way", Gina Smith]]></title>
    <link href="http://demin.ws/blog/russian/2012/05/28/iwoz-how-i-invented-the-personal-computer/"/>
    <updated>2012-05-28T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/05/28/iwoz-how-i-invented-the-personal-computer/</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.uk/gp/product/140015328X/ref=as_li_tf_il?ie=UTF8&tag=prodiy-21&linkCode=as2&camp=1634&creative=6738&creativeASIN=140015328X"><img border="0" src="http://ws.assoc-amazon.co.uk/widgets/q?_encoding=UTF8&Format=_SL160_&ASIN=140015328X&MarketPlace=GB&ID=AsinImage&WS=1&tag=prodiy-21&ServiceVersion=20070822" ></a><img src="http://www.assoc-amazon.co.uk/e/ir?t=prodiy-21&l=as2&o=2&a=140015328X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p>Начну с цитаты из этой книги:</p>

<blockquote>
<p>I don&rsquo;t believe anything really revolutionary has ever been invented by committee.</p>
</blockquote>

<p>Каково!? Только ради этой цитаты книгу стоит прочитать.</p>

<p><a href="http://demin.ws/blog/russian/2011/12/27/steve-jobs-biography/">Биография Стива Джобса</a> была интересным чтивом, хотя и весьма длинным. Книга Стива Возняка гораздо короче. И гораздо ближе читателям с инженерными интересами.</p>

<p>Стив Возняк рассказывает, как все произошло. Как он школьными ночами на бумаге проектировал, перепроектировал, снова и снова перепроектировал несуществующие пока компьютеры. Как ему это помогло развить удивительный навык всегда использовать минимальный возможный набор микросхем, а когда надо - подключать программную часть. Примером может служить первый контроллер гибкого диска для старших версий Эппл 2. Вместо сложного и дорого аппаратного решения, реализующего полный протокол обмена с приводом, он поставил всего несколько чипов, а остальное реализовал программно на ассемблере 6502, виртуозно выполнив требования к длительности сигналов. В дополнение собрал еще на нескольких чипах state-машину, программу для которой написал на самим же придуманном &ldquo;птичьем&rdquo; четырех битном машинном коде (эдакая самопальная перепрограммируемая логика). В итоге, в какой-то момент Стив в одиночку создал Эппл 2, революционный персональный компьютер с цветным дисплеем-телевизором и полноценной клавиатурой. Кстати, вопреки расхожему мнению, Джобс вообще не участвовал в самой разработке. Через несколько лет эта машина сделает Возняка мультимиллионером и запустит компанию Эппл. Неудивительно, этот компьютер обошел по простоте, функционалу и цене всё, что выпускалось на тот момент корпорациями.</p>

<p>Но история на этом не кончается. После этого Стив попадет в авиакатастрофу, управляя небольшим самолетом и некоторое время будет страдать амнезией. Потом уход из Эппл, и опять, вопреки расхожему мнению, не потому, что они там все переругались, а просто он захотел реализовать идею универсального программируемого пульта дистанционного управления. Формально, он никогда не увольнялся из Эппл и по сей день даже какую-то заплату там получает.</p>

<p>История и на этом не заканчивается. Стив почему-то решил организовать гигантский рок-фестиваль. В итоге их было несколько. И тут не обошлось без технологических инноваций. На фестивале впервые был организовал спутниковый телемост с СССР (использовалось оборудование, установленное во время олимпиады в Москве), прямо через все еще существующий &ldquo;железный занавес&rdquo;.</p>

<p>После этого Стив около десяти лет преподавал основы компьютеров школьникам и занимался благотворительностью.</p>

<p>Целый пласт книги также посвящен шуткам, которые Стив реализовывал самостоятельно на протяжении всех этих лет (с применением технологий и без). Например, сервис анекдотов по телефону, который Стив организовал у тебя дома. Или портативный источник помех для телевизора, которым он донимал соседей по общежитию в колледже. Или целая эпопея по роспуску слухов на конференции, где выставлялись продукты Эппл, о некой компании Золтéйр, также якобы принимающий участие в конференции и имеющей крайне мощный продукт. Даже Джобс купился на это и узнал о подставе многими годами позже.</p>

<p>Итак, если у вас есть хоть какой-то интерес к биографиям, то эта книга отличное чтиво про настоящего гения компьютерной индустрии.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Шаблон "Предвзятое отношение к собственному продукту"]]></title>
    <link href="http://demin.ws/blog/russian/2012/05/23/biased-attitude-to-your-own-product/"/>
    <updated>2012-05-23T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/05/23/biased-attitude-to-your-own-product/</id>
    <content type="html"><![CDATA[<p>Модно придумывать шаблоны. Ну, типа подметил ситуацию, увидел, как она повторяется не только у тебя &ndash; вот тебе их шаблон. У меня тоже есть идея шаблона. Называется &ldquo;Предвзятое отношение к собственному продукту&rdquo;.</p>

<p>Вот пример мыслей в процессе подготовки релиза собственного продукта: &ldquo;Блин, вот тут косячок, тут проблемка, тут потенциально может вылезти что-нибудь, тут немного недоделано, тут опечаточка в документации&rdquo; и т.д. Так как ты знаешь всю подноготную, то часто переоцениваешь проблемы.</p>

<p>Когда же ты берешь красивый весь такой запакованный архив чужого продукта, думаешь &ndash; вот, блин, как у них все классно сделано! Хотя, понятно, что этот продукт кто-то паковал со схожими мыслями, и просто тебе со стороны никогда не обнаружить маленькие и не очень проблемки, которые там, конечно, есть.</p>

<p>По роду текущей работы я вовлечен в процесс релизов, сортировки багрепортов, разбора полетов и т.д. Я обычно делаю так: продажи растут? Да. Количество жалоб на последний релиз со стороны клиентов уменьшилось? Да. Аналогично для внутренних пользователей? Да. Вывод: все в норме. А остальное &ndash; нормальный процесс разработки со своими особенностями.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Партнерские ссылки в данном блоге]]></title>
    <link href="http://demin.ws/blog/russian/2012/05/23/partner-links-in-this-blog/"/>
    <updated>2012-05-23T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/05/23/partner-links-in-this-blog/</id>
    <content type="html"><![CDATA[<p>Вчера добавил партнерский идентификатор в ссылки на книги на Амазоне. Озоновский у меня уже стоит с некоторого времени. Понятия не имею, что из этого выйдет. Буду сообщать, если что-то интересное получится.</p>

<p>Далее, внизу каждого поста есть ссылка &ldquo;Disclaimer&rdquo;, чтобы не было недопонимания. Я обычно ссылаюсь на книги, которые читал или рецензировал сам, и их рекомендация ни как не связана издателями или автором.</p>

<p>Информация, размещенная на коммерческой основе, будет явно указана прямо в теле поста со словом &ldquo;Реклама&rdquo;.</p>

<p>Есть желание обсудить? Прошу в комментарии.</p>

<h3>Ссылки по теме</h3>

<ul>
<li><a href="https://affiliate-program.amazon.co.uk/">Amazon affiliate program</a></li>
<li><a href="http://www.ozon.ru/context/partner/">Партнерская программа Озона</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Интервью с Питером Соммерладом]]></title>
    <link href="http://demin.ws/blog/russian/2012/05/19/peter-sommerlad-interview/"/>
    <updated>2012-05-19T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/05/19/peter-sommerlad-interview/</id>
    <content type="html"><![CDATA[<p><strong>Замечание:</strong> Данный материал является переводом с английского. Перевод выполнен мной, а я не профессиональный переводчик. Замечания и предложения по улучшению перевода принимаются. Как вариант, вы можете читать <a href="http://demin.ws/blog/english/2012/05/19/peter-sommerlad-interview/">оригинал на английском</a>.</p>

<hr />

<p><img src="http://demin.ws/images/blog/peter-sommerlad.jpg" alt="" />
</p>

<blockquote>
<p>Если у вас есть класс, для которого, как вам кажется, надо реализовать конструктор копирования или оператор присваивания, что-то вы делаете явно не так. // <strong>Питер Соммерлад</strong></p>
</blockquote>

<hr />

<p>Сегодня в гостях у моего блога <a href="http://wiki.hsr.ch/PeterSommerlad">Питер Соммерлад</a>. Мне довелось недавно побывать на его выступлении на ежегодной конференции ACCU в Оксфорде. Питер давно занимается C++, и более того, принимает участие в работе над стандартом C++. Будучи профессором университета HSR (Рапперсвиль, Швейцария), вместе со своими студентами и аспирантами он работает над разнообразными библиотеками и средствам разработки для С++ и ряда других языков под Eclipse.</p>

<p>У нас будет возможность задать Питеру вопросы, которые не являются частью его выступлений или публикаций.</p>

<h3>Здравствуйте Питер, спасибо за интервью. Я не буду оригинальным с первым вопросом, но пропустить его не могу. Как так случилось, что вы начали заниматься компьютерами и стали программистом? Расскажите нам свою историю.</h3>

<p>У меня были очень хорошие оценки по математике в школе, и в выпускном году был дополнительный курс, где надо было работать с программируемым калькулятором HP 33, в основанного на стеке операндов. В отличие от своих друзей, у которых уже были калькуляторы Casio и TI-59, или даже домашний компьютер Commodore V(I)C 20, я ничего не знал о программировании. Однако, благодаря своему учителю, мне удалось портировать игру &ldquo;lunar lander&rdquo;, о которой я прочитал в журнале, с основанного на регистрах калькулятора TI-59 на школьный HP 33. В итоге у меня получилась баллистическая &ldquo;стрелялка&rdquo;, где надо было с определенного расстояния поразить цель, загороженную препятствиями. Эдакие Angry Birds восьмидесятых для карманного калькулятора с семисегментным жидкокристаллическим экраном в десять разрядов. Требовалось определенное воображение, чтобы понять эту игру: вводится два числа, угол и скорость, и программа сообщает, попали ли вы в препятствие или насколько было отклонение от цели. Такая вот была моя первая программа.</p>

<p>Тот курс программирования для HP 33 и также идея старшей сестры, знавшая людей, изучавших информатику и при этом зарабатывающих неплохие деньги, будучи студентами, подтолкнули меня записаться на курс математики и начать изучать информатику во Франкфурте. Перед началом учебы я получил свой первый домашний, &ldquo;настоящий&rdquo; компьютер, Sinclair ZX Spectrum, c невообразимым тогда объемом памяти в 48Кб и кассетным магнитофоном. Тут уже можно было программировать на Бейсике, что означало, как говорил наш учитель математики, &ldquo;компьютер мог сам распределять память под переменные, и не надо было помнить, что ты поместил в регистры R1 и R2&rdquo;. Одной из моих первых программ для ZX Spectrum была отрисовка фигуры в форме сердца (да, &ldquo;заливка&rdquo; цветом подобной области была непростой задачей). Я показал это подруге, но, честно говоря, не уверен, что она оценила это, так как я начал уделять компьютеру больше времени, чем ей. Мы женаты уже более двадцати лет, но иногда я напоминаю ей эту историю. :-)</p>

<p>Затем пришло время университета, и в первом семестре мне пришлось научиться программировать на ассемблере для Univac 1100. После лекции про косвенную адресацию, мы с другом написали программку из двух команд, которая в бесконечном цикле загружала свои собственные команды. Когда мы ее запустили, через 2 секунды получили &ldquo;watchdog error&rdquo;, что на мейнфрейме означает, что все остальные программы были остановлены на две секунды. После трех таких запусков, в зал &ldquo;влетел&rdquo; оператор из серверной и начал выяснять, кто работает под нашим с товарищем логином. Мы медленно подняли руки. Он препроводил нас к себе в кабинет, и после расспросов как и что мы делали, таки отпустил нас с миром, взяв обещание не рассказывать другим студентам про этот &ldquo;прием&rdquo;. Во втором семестре начался Паскаль и &ldquo;настоящие&rdquo; программы. Указатели в Паскале были реальной задачей, так как они появились без какого-либо объяснения, для чего они нужны, или примера, типа связанного списка. Только после этого я смог понять их. Через нескольких семестров я начал подрабатывать в небольшой фирме, созданной старшими сокурсниками. Там у меня была возможность реально применять полученные знания и набираться опыта на реальным задачах и языках (dBaseII, Dataflex, UCSD Pascal и Microsoft Pascal). Например, на Microsoft Pascal под DOS я написал библиотеку для создания баз данных, основанной на B*-дереве.</p>

<p>Очень большое влияние, я полагаю, на меня оказала возможность во время диплома работать с исходными текстами UNIX, и особенно утилит из нее, таких как make, awk и т.д. Я написал фронтенд для Modula-2 на С с использованием lex и yacc. Чтобы иметь возможность работать из дома, мне пришлось портировать все необходимые утилиты на шестнадцатибитный компьютер с DOS. На было разобраться, как все работает изнутри, и работы Денниса Ритчи и его коллег были отличным примером. Возможно, оттуда берет начало моя любовь к простому и элегантному коду.</p>

<h3>Можете вспомнить свою &ldquo;Первую Книгу&rdquo; про компьютеры и программирование? И какая книга оказала на вас набольшее влияние?</h3>

<p>Одной из первых книг, что я помню, были &ldquo;Pascal User Manual and Report&rdquo;, Kathleen Jensen и Niklaus Wirth, и &ldquo;Algorithms and Data Structures = Programs&rdquo;, Niklaus Wirth. Кстати, в последней было много ошибок, если слепо набивать примеры. Например, в той редакции, что была у меня, сортировка слиянием была нестабильной, вопреки сути этого алгоритма.</p>

<p>В целом, было много книг, повлиявших на мои взгляды в программировании, и непросто выбрать что-то конкретное. Могу рассказать про книгу, где я являюсь соавтором: &ldquo;Pattern-oriented Software Architecture: A System of Patterns&rdquo;. В процессе ее написания, я очень многое узнал о программном обеспечении в целом, его архитектуру и работу в команде. Уже после публикации, выступая на конференциях и рассказывая о книге, я познакомился со множеством интересных людей, которые без сомнения повлияли мои взгляды. С некоторыми мы стали друзьями.</p>

<h3>Мне очень понравилось ваше высказывание на ACCU, что перед тем, как использоваться &ldquo;крутые&rdquo; возможности C++, мне нужно сначала получить у вас лицензию. Мне эта идея показалась очень полезной при обучении C++ или, например, при составлении стандарта кодирования в компании. Но как именно вы разделяете язык на &ldquo;разрешенные и рекомендованные&rdquo; возможности и на лицензированные?</h3>

<p>Сложный вопрос. Я имел в виду C++11 и множество приемов, которые люди использовали раньше, и которые более не нужны, если вы не разрабатываете библиотеки. Но лучше привести пример.</p>

<p>В книге Страуструпа &ldquo;The C++ Programming Language&rdquo; в качестве примера создания класса рассказывается про класс Vector, и как там происходит управление памятью через указатели. Проблема в том, что правильная и безопасная с точки зрения исключений реализация такого класса является очень сложной даже для экспертов C++. Рядовой же читатель, решив сделать подобный класс или, например, класс для строчек, скорее всего сделает это неверно. Более того, делать это совершенно не нужно.</p>

<p>Это похоже на ситуацию с книгой Вирта про алгоритмы и структуры данных. &ldquo;Все&rdquo; студенты, кому приходилось ее изучать, хотят реализовать свой связный список просто потому, что он им &ldquo;все равно нужен&rdquo;. Может на C это и имело смысл, но в библиотеках современных языков (не только в С++) есть множество хороших и проверенных структур данных. Я был мог &ldquo;порассуждать&rdquo; про качество библиотек в Java, но я оставлю это моему коллеге, преподающему алгоритмы и структуры данных в Java в нашем университете.</p>

<p>Сейчас, после того как мы поняли, чего делать не надо, я бы рекомендовал просто использовать стандартную библиотеку C++, особенно алгоритмы, так как с помощью них даже циклы, которым нас учили, можно не использовать. В С++11 нам более не требуется управлять ресурсами вручную. Можно просто использовать std::vector, std::string, std::shared_ptr/std::unique_ptr и т.д., и компилятор сам создаст правильные конструкторы и деструкторы. Если у вас есть класс, для которого, как вам кажется, надо реализовать конструктор копирования или оператор присваивания, что-то вы делаете явно не так. Кстати, с boost это также почти всегда верно и для C++03.</p>

<p>Так что, до тех пор, пока вы глубоко не изучили приемы создания библиотек, просто используйте стандартные и не изобретайте своих. И даже после этого, избегайте &ldquo;ручного&rdquo; управления ресурсами. Чем больше я погружался в проблему создания надежным переносимых стандартных библиотек, тем больше проникался  уважением к тем, кто имеет навыки и терпение для этого. Это реально сложно. А большинство прикладных задач, решаемых на С++, не требуют подобных знаний, если вы используете стандартную библиотеку. Хотя, ничто не мешает вам стать разработчиком библиотек.</p>

<h3>Над чем именно в C++ 2011 вы работали?</h3>

<p>Мне не очень много удалось сделать для C++ 2011, так как я весьма поздно подключился к проекту. Однако, мне удалось получить финансирование от нашей школы (спасибо директору, профессору Херману Меттлеру) для проведения собрания комитета стандартизации C++ в Рапперсвиле в Августе 2010-го. Несколько предложений в разделе про std::async были переписаны мной при поддержке многих других членов комитета. В процессе написания книги &ldquo;Simple C++&rdquo; я часто ссылаюсь на стандарт и периодически нахожу незначительные ошибки, которые будут исправлены в следующей редакции.</p>

<h3>Есть ли что-то в С++ 2011, что вам реально не нравится?</h3>

<p>Что значит &ldquo;не нравится&rdquo;? Я могу принять стандарт как есть, так как я знаю, чего стоило его создать. Все недостатки, которые могли бы меня касаться, будут исправлены в следующей редакции, и я работаю над этим. Порой вы должны идти на компромисс с комитетом.</p>

<p>Если б я, будучи вовлеченным в процесс раньше, предложил что-то, и мое предложение было бы отклонено другими членам, я был расстроился. Размышляя на эту тему, я бы сказал, мне не нравится, что const разрешено ставить слева, тогда как логика подсказывает, что это должно быть справа. Оба варианта синтаксически одинаковы. Я спрашивал, что будет, если я сделаю подобное предложение. Скорее всего оно будет отклонено &ldquo;старшими товарищами&rdquo;.</p>

<h3>Давайте поговорим про TDD. Я знаю, что вы разработали библиотеку для unit-тестирования CUTE. Наверное, у вас были серьезные на то причины. Что такого интересного есть в вашей библиотеке?</h3>

<p>Для начала, библиотека состоит только из заголовочных файлов, и поэтому не надо думать о линковке. Это особенно важно для моих студентов. Я написал статью про CUTE в журнале &ldquo;<a href="http://accu.org/var/uploads/journals/Overload75.pdf">ACCU Overload #75</a>&rdquo; (слегка измененный вариант статьи можно скачать с <a href="http://wiki.hsr.ch/PeterSommerlad/wiki.cgi?CuTe">http://wiki.hsr.ch/PeterSommerlad/wiki.cgi?CuTe</a>). Главная причина в том, что меня сильно не устраивала библиотека CppUnit и также другая unit-тест библиотека, разработанная мной ранее в девяностых. Вдохновленный Кевлином Хенни я попробовал использовать стандартную библиотеку и минимизировать использование макросов, даже если это означало, что тесты должны быть вручную &ldquo;зарегистрированы&rdquo;, а не автоматически, используя статическую инициализацию (например, GoogleTest использует для этого макросы). Я хотел избежать статической инициализации, так как я уже имел с ней проблемы в прошлом при использовании разделяемых библиотек и их зависимостей. Проблема регистрации тестов решается нашим плагином CUTE для Eclipse CDT (http://cute-test.com). Плагин сгенерирует необходимый код для регистрации теста и также проверит на случай, если вы забыли сделать это вручную. Конечно удобно, когда есть возможность просматривать различия, регистрируемые через ASSERT_EQUAL(), но это требует возможность печати значений в поток std::ostream&amp;. Это является проблемой для разработчиков встраиваемых систем, если они хотят запускать тесты на &ldquo;железе&rdquo;, так как из-за ограничений по размеру кода не удается использовать iostream. Однако, у меня в планах выпустить в этом году версию CUTE, где можно будет конфигурировать использование iostream.</p>

<p>Двое моих студентов реализовали поддержку TDD в Eclipse CDT, а один из аспирантов довел до состояния законченного продукта. Например, наш модуль TDD может автоматически создавать объявления переменных, которые используются в коде, но еще не объявлены. Аналогично для новых необъявленных классов, перечислений (enums), свободных функций или членов классов. Это очень удобно вне зависимости от стиля разработки: TDD или сверху вниз. Скоро в плагине CUTE будет добавлена еще одна возможность: Mockator. Mockator генерирует код и фрагменты конфигурации Eclipse CDT для применения техники &ldquo;dependency injection&rdquo; в уже существующем коде на С или С++ с использованием так называемых швов. Идея швов описывается в отличной книге Майкла Физерса &ldquo;Эффективная работа с унаследованным кодом&rdquo; (Michael Feathers, &ldquo;Working Effectively with Legacy Code&rdquo;). По этой методике Mockator может создавать шаблоны тестов и mock&rsquo;и для функций и типов. Про Mockator можно прочитать в выпуске <a href="http://accu.org/var/uploads/journals/overload108.pdf">108 журнала &ldquo;ACCU Overload</a>&rdquo;.</p>

<h3>IDE против Vi. Я знаю, вы активно используете и дорабатываете Eclipse, чтобы можно было удобно работать с тестами и проводить рефакторинг. Как вы думаете, возможно ли все еще, используя Vi и make, эффективно разрабатывать сложные системы? или среды разработки вроде Eclipse уже просто необходимы из-за сложности современных программных проектов?</h3>

<p>Я использую vi с 1985 года, и все еще создаю в нем небольшие файлы, разнообразные одноразовые скрипты. Мне нравится, что vi есть везде.</p>

<p>Однако, для серьезного программирования хорошая автоматизированные среда (IDE) просто необходима. Это как ехать на сотни миль на мощной машине или на детском трехколесном велосипеде. Конечно, есть люди, ездящие на детском велике очень быстро, но на машине просто в разы удобнее. Наверное, аналогия с машиной не самая удачная, и вертолет лучше бы тут подошел, так как хорошая среда разработки (например, Eclipse CDT) позволяет быстро перемещаться по коду, поэтому можно очень легко разбираться, даже если его очень много. Чтобы перейди от объявления к определению достаточно навести мышку или кликнуть, при этом среда помнит, где вы были, и можно быстро вернуться. Любой программист на Java, использующий Eclipse, наверное захочет использовать другой язык, только если для него будут похожие инструменты. Мы стараемся сделать Eclipse CDT таким же удобным для C++, как и для Java. Это непросто, и мы рады любому спонсорству.</p>

<h3>Как вы думаете, является ли спортивное программирование и соревнования по нему обязательными для любого, изучающего информатику?</h3>

<p>В нашей университетской программе мы всегда даем студентам очень много лабораторных работ в курсах программирования. Как минимум 3-4 больших проекта являются частью диплома бакалавра. Выполнение лаб нетривиальным образом реально помогает студентам. Например, я часто даю упражнения на С++, которые надо выполнять без циклов или рекурсии, а только используя алгоритмы из STL. Решение с циклом может быть очевидным, но найти красивый алгоритм несравнимо полезнее.</p>

<p>Увы, некоторые соревнования по программированию ориентированы исключительно на скорость, а не на качество кода в далекой перспективе. Поэтому я всегда, а не только на лабах, но и на экзаменах прошу студентов писать unit-тесты.</p>

<h3>Мы учимся на примерах. Можете посоветовать начинающим, где можно посмотреть примеры хорошего современного кода?</h3>

<p>Для C++11 такие примеры найти пока непросто, так как компиляторы появились только недавно. В дополнение к этому, много примеров на C++11 с новыми возможностями языка, например, семантика перемещения, которые не объясняют где и как стоит применять эти возможности. Надо помнить, что многие реализации стандартной библиотеки гораздо сложнее, чем код, с которым вам хотелось бы работать, так как приходится иметь дело с макросами, обеспечивать обратную совместимость и разбираться с недостатками компиляторов. Решение подобных проблем не для новичка, и к тому же дает неверное представление о том, как надо писать код. Если честно, даже в CUTE, так как я пытался поддержать C++03/boost, std::tr1 и C++11, есть несколько &ldquo;нехороших&rdquo; мест.</p>

<h3>Как вы думаете, разработка программного обеспечение &ndash; это ремесло или искусство? Считаете ли вы, что &ldquo;правильная&rdquo; программа обязана иметь красивые исходники? Или все что нужно, это чтобы требования были удовлетворены, тесты пройдены, стандарт кодирования соблюден, а дальше &ndash; трава не расти?</h3>

<p>Программное обеспечение одновременно искусство и ремесло. Тут однозначно требуется теория и практика в ее совершенствовании. В реальности, невозможно отделить искусство от ремесла.</p>

<p>Я верю в красоту кода. Хотя это относительно, так как то, что хорошо для новичка, часто лишено элегантности кода, написанного профессионалом. Знание доступных инструментов просто необходимо, чтобы освоить их. Например, только знание std::vector без алгоритмов из STL позволит написать работающий, но не элегантный код, даже если это оценивается только метрикой сложности McCabe&rsquo;а (кстати, это еще один плагин для C++ CDT, разработанные нашим студентом).</p>

<p>Мы были первыми после Билла Опдайка, кто попытался реализовать рефакторинг для C++. Для этого мы переделали большие куски внутренностей CDT и реализовали генерацию кода на основе AST (abstract syntax tree). Так что только запуска тестов не достаточно &ndash; код еще должен быть &ldquo;очищен&rdquo;. Я много рецензирую код и вижу, как часто можно сделать лучше. Я правда не уверен, что талант можно автоматизировать, так как это смесь вкуса и опыта. Тут требуется не только видеть саму проблему, но и пути ее решения. С другой стороны, если посмотреть на примеры &ldquo;дурно пахнущего&rdquo; кода по Мартину Фаулеру, часто можно встретить противоречивые примеры.</p>

<p>Некоторые стандарты кодирование часто промоутируют то, что я называю &ldquo;плохим&rdquo; стилем, и привносят ненужные усложнения. Например, Гугл предлагает так называемые выходные параметры передавать через указатели, даже в С++. Это может делаться для того, чтобы на вызывающей стороне приходилось писать foo(&amp;var), явно передавая переменную по указателю, тем самым улучшая читабельность. Однако, этот прием, необходимый в С, где не было ссылок, снова привносит проблемы, уже решенные введением ссылок в С++. В такой функции надо проверять указатель на nullptr (в терминах C++11), и никогда нельзя быть уверенным, что этот указатель правильный в случае ошибки в вызывающем коде, и надо игнорировать проблему, просто аварийно завершая программу, если был передан nullptr. Если решать проблему в стиле С++, то надо  использовать ссылки, void foo(type &amp; var);, и среда разработки покажет это, когда наведете мышкой на параметр, без явного использования амперсанда. Стандарт кодирования должен помогать использовать возможности языка и среды разработки для создания более компактного и простого кода, а не рассчитывать на старые редакторы, или просто на незнание их возможностей.</p>

<p>Стандарт кодирования или правила хороши только когда они выполняются. Средства, какие как (PC-)lint могут в этом помочь. Часто подобные классические утилиты работают из командной строки и применяются на стадии сборки. Более современные их варианты встроены в среду и делают не только анализ, но и предлагают на месте исправить проблему, например, FingBugs для Java или FXCop для C#. Их настройка, чтобы исключить ложные срабатывания, всегда непростая задача. Чтобы упростить применение lint мы создали Linticator, плагин для Eclipse, который автоматически настраивает lint и визуализируют результаты его работы в IDE (http://linticator.com).</p>

<h3>Можете назвать три самых больших &ldquo;нет&rdquo; для программистов в целом?</h3>

<p>Быть слишком самоуверенным, вместо написания (unit) тестов и регулярного их запуска. Любая разработка без автоматизированного тестирования является, на мой взгляд, непрофессиональным подходом.</p>

<p>Отсутствие архитектуры или знаний о ней является одной из больших проблем, которые я часто наблюдаю при рецензировании кода.</p>

<p>Ну и простая вещь: глобальные переменные под соусом синглтонов. Передавайте все зависимости извне как аргументы. Это также позволит понять, где зависимостей слишком много. Использование шаблонов, решающих эту проблему, и написание unit-тестов поможет избежать проблемы в целом на ранних стадиях.</p>

<h3>Какие языки программирования вы бы порекомендовали для начинающих?</h3>

<p>Вариантов очень много. Я не хотел бы рекомендовать что-то конкретное, так как в каждом есть свои недостатки. Важнее изучить несколько языков, причем которые основаны на разных парадигмах: функциональные, объектно-ориентированные, динамические или со статическом типизацией, компилируемые, интерпретируемые, использующие виртуальную машину или компилируемые в машинный код. Говорят, что на любом языке можно написать программу на Фортране. Этого можно и не делать со множеством языков, но важно знать и применять языковые идиомы.</p>

<h3>В наше время очень много обучающих материалов доступно в онлайне. Так можно даже диплом получить. Как вы думаете, очное обучение все еще имеет смысл?</h3>

<p>Да. Работа со студентами очень важна. И не только для их пользы, но и для моей, как преподавателя. Это позволяет улучшать программу обучения. Непосредственное взаимодействие очень важно для обеих сторон. Заочное обучение не дает этого, но является удобным, для тех, кто по каким-то причинам не может присутствовать лично. Но мне кажется, что сделать качественное заочное обучение весьма дорого.</p>

<h3>В боевых искусствах есть концепция школ, стилей, направлений. И каждый старается доказать свое превосходство. Есть ли что-то подобное в мире программирования?</h3>

<p>Я слышал, люди используют аналогии из боевых искусств, например, упражнения по программированию (coding dojos). Я не владею боевыми искусствами, и мой единственный спорт, за исключением кардио-тренировок &ndash; это горные лыжи. Это не командный спорт, но позволяющий &ldquo;поймать поток&rdquo; и забыть обо всем. С работой тоже самое. Но программное обеспечение &ndash; это командный спорт, и отработка стандартных движений, вроде &ldquo;ката&rdquo;, помогает развивать подсознательный вкус к хорошему коду и стилю, но только если он у вас уже есть, или кто-то помогает вам его развить. По мой взгляд, есть проблема &ndash; многие преподаватели, обучающие новичков, не имеют практического опыта программирования (это относится и ко мне, но я по крайней мере стараюсь регулярно работать с кодом).</p>

<h3>Если б вам надо было нанять хорошего программиста на С++, как бы вы это делали? C++ &ndash; очень сложный язык, так что, как бы вы оценивали знания по нему?</h3>

<p>Я всегда прошу примеры кода от человека. Однажды, я завернул хорошую кандидатскую по той простой причине, что код был плохо написан.</p>

<p>В наши дни также важно уметь адаптироваться к изменениям и быть подкованным с точки зрения архитектуры. Кандидат должен понимать шаблоны программирования и знать, что  существует больше, чем 23 GOF (Gang of Four Design Patterns) шаблона.</p>

<h3>Ну и напоследок, завершающий вопрос: как вы думаете, в области программного обеспечения, мы выбираем профессию, или профессия выбирает нас?</h3>

<p>Я начал с выбора курса в университете. Однако, чем хорошо программное обеспечение, что мы можем создавать свои собственные инструменты. Это как бы если пекарь мог бы испечь себе новую печь или миксер для теста. Так что поучившись немного, я выбрал профессию. Я занимаюсь этим уже 30 лет, из них 25 лет преподаю (я начал это, когда был еще студентом), пишу об этом книги и статьи уже около 18 лет и все еще обожаю свою профессию. Я хочу сделать этот мир лучше для программистов и надеюсь это сделать, убрав плохие программы. Знаю, это, конечно, невозможно, но это дает мне понять, куда двигаться.</p>

<p>&#9632;</p>

<p><strong>Спасибо Питер. С нетерпением ждем ваши новые проекты и выступления.</strong></p>

<p><em>// Май 16, 2012</em></p>

<p><em>// Питер Соммерлад, Александр Дёмин</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Печать std::string через printf() в Visual Studio]]></title>
    <link href="http://demin.ws/blog/russian/2012/05/18/printing-std-string-via-printf-in-visual-studio/"/>
    <updated>2012-05-18T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/05/18/printing-std-string-via-printf-in-visual-studio/</id>
    <content type="html"><![CDATA[<p>В ходе нескольких code review уже неоднократно встречаю вот такое:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;string&gt;</span>
<span class="hl ppc">#include &lt;cstdio&gt;</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
  std<span class="hl opt">::</span>string s <span class="hl opt">=</span> <span class="hl str">&quot;12345678&quot;</span><span class="hl opt">;</span>
  std<span class="hl opt">::</span><span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;[%s]</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> s<span class="hl opt">);</span>
<span class="hl opt">}</span>
</pre>

<p>Явная опечатка с пропущеным вызовом <code>s.c_str()</code>. Но странно, что Студия, даже с <code>/Wall</code> не дает никакого предупрежнения, и более того &ndash; код не падает. Но вот <code>gcc</code> предупреждает:</p>

<pre><code>warning: cannot pass objects of non-POD type 'struct std::string' through '...'; call will abort at runtime
</code></pre>

<p>и программа при запуске благополучно падает с <code>Illegal instruction</code>.</p>

<p>Неужели в Студии специально сделали, что работал такое глюк просто потому, что это слишком распространенная опечатка?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Veracity - альтернатива git, Mercurial, Bazaar и fossil]]></title>
    <link href="http://demin.ws/blog/russian/2012/05/17/veracity/"/>
    <updated>2012-05-17T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/05/17/veracity/</id>
    <content type="html"><![CDATA[<p>Некоторое время назад я услышал про &ldquo;еще одну&rdquo; распределенную систему контроля версий, называемую <a href="http://veracity-scm.com">Veracity</a>. Заявлялось, что это достойный кандидат побиться со всеми ведущими DVCS.</p>

<p>Итак, сразу же пузомерка с официального сайта.</p>

<p><img src="http://demin.ws/images/blog/veracity-comparison.png" alt="" />
</p>

<p>Мне все-таки хотелось понять, что у них тут есть такого, ради чего они замутили этот проект. Я посмотрел их презентацию с OSCON 2011:</p>

<p>#1</p>

<iframe width="560" height="420" src="https://www.youtube.com/embed/1qCIff0N3Yw?color=white&theme=light"></iframe>

<p>#2</p>

<iframe width="560" height="420" src="https://www.youtube.com/embed/iqDu7s7hSsg?color=white&theme=light"></iframe>

<p>#3</p>

<iframe width="560" height="420" src="https://www.youtube.com/embed/HH8nFadt9SA?color=white&theme=light"></iframe>

<p>Вот мои субъективные заметки:</p>

<ul>
<li>Явный отказ от GPL (камень в огород git, hg, bazaar). Говорят, это более привлекательно для корпоративного использования.</li>
<li>Возможность использования внешнего хранилища для репозитория (например, MSSQL или Oracle). Опять таки, это может порадовать корпорации, который любят хранить данные так, как они хотят.</li>
<li>File locks (сомнительная возможность в целом, по мне).</li>
<li>Bug tracking (fossil это тоже умеет).</li>
<li>Build tracking (вроде как уникальная (пока) возможность).</li>
<li>Система написана на чистом С и изначально поддерживает Windows, Linux и Mac.</li>
</ul>

<p>А вот пара принципиальных решений:</p>

<ul>
<li>Нет и не будет индекса как в git.</li>
<li>Нет и не будет какой-либо возможности менять историю (то есть даже опечатку в описании последнего коммита исправить нельзя).</li>
</ul>

<p>Лично для меня эти два пункта являются ключевыми, и они не вписываются в мой стиль использования DVCS (именно по этой причине я отказался от fossil для своих проектов, хоть мне и очень нравилось иметь локальные Wiki и баг-трекер).</p>

<p>В итоге получается, ключевыми возможностями остаются &ldquo;не-GPL&rdquo; и внешние хранилища. То есть явная атака на корпоративное использование. Кстати, у основателя компании (Eric Sink) уже была компания и продукт по контролю версий, которые был куплены Майкрософтом.</p>

<p>Итак, мой субъективный вывод: это попытка привнести DVCS в мир корпораций.</p>

<h3>Традиционная рубрика &ldquo;Чтобы два раза не вставать&rdquo;</h3>

<p>Eric Sink написал книгу &ldquo;<a href="http://www.ericsink.com/vcbe/">Version Control by Example</a>&rdquo;, в которой есть более менее честное сравнение Veracity с основными VCS. Я пролистал ее за полчасика. Наткнулся на мега-цитату, суть которой яростно исповедую и активно продвигаю вокруг (выделение жирным мое).</p>

<blockquote>
<p>11. Don’t comment out code</p>

<p>When using a VCS, you shouldn’t comment out a big section of code simply because you think you might need it someday. <strong>Just delete it</strong>. The previous version of the file is still in your version control history, so you can always get it back if and when you need it. This practice is particularly important for web developers, where the commented-out stuff may adversely affect your page load times.</p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Почему геттеру не нужен префикс "get"]]></title>
    <link href="http://demin.ws/blog/russian/2012/05/17/why-getter-does-not-need-get-prefix/"/>
    <updated>2012-05-17T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/05/17/why-getter-does-not-need-get-prefix/</id>
    <content type="html"><![CDATA[<h3>Идея</h3>

<p>Никогда не использовать префикс <code>get</code> для функций-getter&rsquo;ов.</p>

<h3>Почему?</h3>

<p>Обычно геттерами называют микро-функции или методы, которые элементарно возвращают ссылку или указатель на член класса, просто ради идеи не давать прямой доступ к нему. В них обычно нет какой логики.</p>

<p>Получается, эта функция, &ldquo;геттер&rdquo;, ничего не делает, что может описываться глаголом <code>get</code>. Геттер &ndash; это просто синоним члена класса. Смысловая нагрузка слова <code>get</code> тут начисто отсутствует. Префикс <code>get</code> нужен только если под ним скрывается <strong>реальное</strong> действие или вычисление, например, <code>getLastTick()</code> или <code>getFullUserName()</code>. А еще лучше заменить слово <code>get</code> на что-нибудь более информативное: <code>extractLastTick()</code> или <code>buildFullUserName()</code>.</p>

<p>&#9632;</p>

<p>Посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2010/11/09/how-to-name-getters-and-setters/">Как называть getter&rsquo;ы и setter&rsquo;ы</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Стоячее офисное место]]></title>
    <link href="http://demin.ws/blog/russian/2012/05/13/standing-office-desk/"/>
    <updated>2012-05-13T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/05/13/standing-office-desk/</id>
    <content type="html"><![CDATA[<p>Как обычно происходит при офисной работе? Мы сидим без отрыва на задах весьма длительное время. Увы, особенность программистской работы. Встать просто лень. Иногда, когда уж совсем припрет, можно сгонять в гальюн или на кухню. Все это не очень полезно. Но есть решение - можно использовать стоячие рабочие места. Если погуглить, то можно найти полно вариантов. Вот как это сделал я.</p>

<p>Получилось это случайно. Когда мы снимали жилье, на кухне не было место, что пристроить компьютер (да, не удивляйтесь, нам с женой на кухне нужен компьютер). И Ольга как-то нашла небольшой, но высокий стол и к нему барный стул в Икее. Кстати, когда дети были поменьше, такой стол еще и служил примитивной защитой от детей.</p>

<p><a href="http://www.ikea.com/gb/en/catalog/products/90087541/">BJÖRKUDDEN</a></p>

<p><img src="http://demin.ws/images/blog/bjorkudden-bar-table.jpg" alt="" />
</p>

<p><a href="http://www.ikea.com/gb/en/catalog/products/S79873080/">HENRIKSDAL</a></p>

<p><img src="http://demin.ws/images/blog/henriksdal-bar-stool-with-backrest.jpg" alt="" />
</p>

<p>И мы начали использовать эту парочку как хотспот для &ldquo;погуглить&rdquo;, еду заказать и т.д. И как-то со временем мне эта идея нравилась все больше и больше. Работая таким образом, ты не зависаешь. Конечно, когда &ldquo;идет процесс&rdquo; и клавиатура дымится, то можно пристроить зад на барный стул. После переезда, на кухне уже полно места, и я забрал эти стол и стул к себе в &ldquo;кабинет&rdquo;. Вот как это выглядит:</p>

<p><img src="http://demin.ws/images/blog/standing-desk-at-home.jpg" alt="" />
</p>

<p>Кстати, к ножкам стола прекрасно крепятся хомутами всякие удлинители, провода и т.д. Так я работаю уже более двух лет.</p>

<p>А вот для сравнения старые стол и стул.</p>

<p><img src="http://demin.ws/images/blog/standing-desk-at-home-regular.jpg" alt="" />
</p>

<p>P.S. Традиционная рубрика &ldquo;ну чтобы два раза не вставать&rdquo;. Я сугубо убежден, что человек, придумавший компьютерные столы с выдвижной подставкой для клавиатуры, никогда не работал на клавиатуре. Сложно представить неудобнее позиции для рук. И еще, лично я не могу использовать офисные стулья, на которых неудобно сидеть, подсунув под себя ногу.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Суета вокруг REST или Richardson L., Ruby S., "RESTful Web Services"]]></title>
    <link href="http://demin.ws/blog/russian/2012/05/12/restful-web-services/"/>
    <updated>2012-05-12T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/05/12/restful-web-services/</id>
    <content type="html"><![CDATA[<p>В упор не пойму, как можно писать книги про REST. Зачем мучить клавиатуру и рожать аж целую книгу про тему, которую можно выразить в паре предложений?</p>

<p><a href="http://shop.oreilly.com/product/9780596529260.do">Leonard Richardson, Sam Ruby, &ldquo;RESTful Web Services&rdquo;</a></p>

<p><img src="http://demin.ws/images/covers/english/restful-web-services-cover.gif" /></p>

<p>Итак, если опустить нудное описание HTTP библиотек Ruby, Python, Java и curl, еще более нудное описание форматов HTML4, XHTML, HTML5, Atom, XML, чуть менее нудное описание нескольких Ajax-библиотек, крайне нудное описание стандартных response-кодов HTTP, нереально нудное описание стандартных заголовков HTTP, то суть книги можно выразить весьма кратко. Вот REST в моем превратном, но кратком изложении.</p>

<p>При проектировании web-сервиса следует:</p>

<ol>
<li>(Самое главное) При проектировании структуры URL&rsquo;ов вложить в нее максимальное количество смысла, представляя это как некий язык запросов к вашим данным, читаемый и понимаемый <strong>человеком</strong>. Например, вместо <code>http://domain/engine.php?func=123&amp;id=test</code> для получения данных о пользователе, должно быть <code>http://domain/users/test</code>.</li>
<li>Максимально полно использовать стандартные команды и коды ответов HTTP. Не только GET и POST, но и, например, PUT, DELETE, OPTION, HEAD, и не только коды ответа 200 и 500, а <a href="http://en.wikipedia.org/wiki/List_of_HTTP_status_codes">множество других</a>.</li>
<li>При проектировании HTTP-ответов следует добавлять в ответ информацию о возможных переходах из текущего состояния сессии в другие состояния.</li>
</ol>

<p>Все! Вы знаете содержимое этой книги.</p>

<p>Редкий случай, когда ну очень хочется попросить деньги назад за книгу. Продать ее не получится, ибо электронная она.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RetroBSD на Maximite]]></title>
    <link href="http://demin.ws/blog/russian/2012/05/11/retrobsd-on-maximite/"/>
    <updated>2012-05-11T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/05/11/retrobsd-on-maximite/</id>
    <content type="html"><![CDATA[<p>Я <a href="http://demin.ws/blog/russian/2012/01/19/maximite-kit/">уже писал</a>, как собирал Maximite.</p>

<p>Вчера как-то был настрой, и решил я поставить туда <a href="http://retrobsd.org/">RetroBSD</a>.</p>

<p>RetroBSD &ndash; это настоящий UNIX, являющийся наследником 2.11BSD и предназначенный для встраиваемых систем с фиксированной структурой памяти. На текущий момент работает на микроконтроллере Microchip PIC32 с 128 килобайтами памяти и 512 килобайтами Flash. Данный процессор позволяет разделять адресное пространство ядра и пользовательских процессов.</p>

<p>RetroBSD обеспечивает защиту памяти ядра, используя аппаратные возможности микропроцессора, полноценную вытесняющую многозадачность, POSIX API (fork, exec, wait4 и т.д.). Можно писать программы прямо на устройстве, так как есть компилятор С. Ядро системы прошивается в кристалл, а файловая система загружается с SD-карты.</p>

<p>RetroBSD поддерживает не только аппаратуру Maximite, но и ряд альтернативных устройств на базе PIC32 (chipKIT Max32, Sparkfun UBW32, Microchip Explorer 16, Microchip PIC32 USB/Ethernet Starter Kit, Olimex Duinomite, Duinomite-Mini и Duinomite-Mega, eflightworks).</p>

<p>После небольшой возни с <a href="http://code.google.com/p/mphidflash/">программой-загрузчиком</a> и <a href="http://retrobsd.org/wiki/installation-2/">установкой необходимых библиотек</a>, получилось все собрать и залить на устройство.</p>

<p>Торжественный момент включения, и&hellip;</p>

<p><img src="http://demin.ws/images/blog/retrobsd-on-maximite-login.png" alt="" />
</p>

<p>Это UNIX!</p>

<p>Сначала, конечно, игры. Питон, он же Червяк.</p>

<p><img src="http://demin.ws/images/blog/retrobsd-on-maximite-worm.png" alt="" />
</p>

<p>Пасьянс:</p>

<p><img src="http://demin.ws/images/blog/retrobsd-on-maximite-canfield.png" alt="" />
</p>

<p>Я теперь немного посерьезнее &ndash; Forth.</p>

<p><img src="http://demin.ws/images/blog/retrobsd-on-maximite-forth.png" alt="" />
</p>

<p>На данный момент RetroBSD работает только через последовательный порт и не поддерживает VGA и PS/2, но у Сергея Вакуленко, автора RetroBSD, есть планы написать эти драйвера.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Как подкорректировать DOM/CSS налету в браузере?]]></title>
    <link href="http://demin.ws/blog/russian/2012/05/06/how-to-fix-dom-css-on-the-fly-in-browser/"/>
    <updated>2012-05-06T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/05/06/how-to-fix-dom-css-on-the-fly-in-browser/</id>
    <content type="html"><![CDATA[<p>Мне нравится translate.ru. На мой субъективный взгляд, качество перевода в среднем лучше, чем у Google или Яндекс translate. Но сейчас не об этом. У translate.ru просто ужасная страница. Вот такой вот вырви глаз:</p>

<p><img src="http://demin.ws/images/blog/translate-ru-normal.png" /></p>

<p>Но! Если в Хроме открыть Developer Tools, и, поелозив по странице, немного подкрутить CSS, в основном добавив <code>display: none</code> там-сям, то получается вот такая вот красота:</p>

<p><img src="http://demin.ws/images/blog/translate-ru-clean.png" /></p>

<p>Вопрос: кто-нибудь может указать на какой-нибудь API в Хроме или готовое расширение, которым можно было автоматически править CSS? Я видел подобные расширения для Хрома, которыми можно менять и убирать элементы Gmail и Google Reader, но они были заточены именно под продукты Гугла. Универсального я никак не могу найти.</p>

<h3>Обновление</h3>

<p>Решение найдено. Надо поставить <a href="https://chrome.google.com/webstore/detail/oiaejidbmkiecgbjeifoejpgmdaleoha/">Stylebot</a> и добавить в нем CSS-фильтр на адрес www.translate.ru. Текст CSS-добавки ниже. После этого страничка будет содержать только минимальный набор нужных элементов.</p>

<pre class="hl">
<span class="hl kwd">#contentBlock</span> header <span class="hl opt">{</span>
    <span class="hl kwa">display</span><span class="hl opt">:</span> none<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwd">#ctl00_SiteContent_templatesBlock</span> <span class="hl opt">{</span>
    <span class="hl kwa">display</span><span class="hl opt">:</span> none<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwd">#passportMenu</span> <span class="hl opt">{</span>
    <span class="hl kwa">display</span><span class="hl opt">:</span> none<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwd">#bott_link</span> <span class="hl opt">{</span>
    <span class="hl kwa">display</span><span class="hl opt">:</span> none<span class="hl opt">;</span>
<span class="hl opt">}</span>

topAdvert <span class="hl opt">{</span>
    <span class="hl kwa">display</span><span class="hl opt">:</span> none<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwd">#topAdvert</span> <span class="hl opt">{</span>
    <span class="hl kwa">display</span><span class="hl opt">:</span> none<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwd">#subscribeForm</span> <span class="hl opt">{</span>
    <span class="hl kwa">display</span><span class="hl opt">:</span> none<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwd">#adv4Blocks</span> <span class="hl opt">{</span>
    <span class="hl kwa">display</span><span class="hl opt">:</span> none<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwd">#bottomAdvSection</span> <span class="hl opt">{</span>
    <span class="hl kwa">display</span><span class="hl opt">:</span> none<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwd">#blogRSS</span> <span class="hl opt">{</span>
    <span class="hl kwa">display</span><span class="hl opt">:</span> none<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwd">#rightSection</span> <span class="hl opt">{</span>
    <span class="hl kwa">display</span><span class="hl opt">:</span> none<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwd">#viewMode</span> <span class="hl opt">{</span>
    <span class="hl kwa">display</span><span class="hl opt">:</span> none<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwd">#viewModeBlock</span> <span class="hl opt">{</span>
    <span class="hl kwa">display</span><span class="hl opt">:</span> none<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwd">#tmOther</span> <span class="hl opt">{</span>
    <span class="hl kwa">display</span><span class="hl opt">:</span> none<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwd">#resultBlock</span> <span class="hl opt">{</span>
    <span class="hl kwa">float</span><span class="hl opt">:</span> none<span class="hl opt">;</span>
    <span class="hl kwa">width</span><span class="hl opt">:</span> <span class="hl num">100</span><span class="hl opt">%;</span>
<span class="hl opt">}</span>

<span class="hl kwd">#sourceBlock</span> <span class="hl opt">{</span>
    <span class="hl kwa">float</span><span class="hl opt">:</span> none<span class="hl opt">;</span>
    <span class="hl kwa">width</span><span class="hl opt">:</span> <span class="hl num">100</span><span class="hl opt">%;</span>
<span class="hl opt">}</span>

<span class="hl kwd">#mainSection</span> <span class="hl opt">{</span>
    <span class="hl kwa">margin</span><span class="hl opt">:</span> <span class="hl num">0px</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwd">#contentBlock</span> <span class="hl opt">{</span>
    <span class="hl kwa">border</span><span class="hl opt">:</span> none<span class="hl opt">;</span>
    <span class="hl kwa">border-radius</span><span class="hl opt">:</span> <span class="hl num">0px</span><span class="hl opt">;</span>
    <span class="hl kwa">box-shadow</span><span class="hl opt">:</span> <span class="hl num">0 0</span><span class="hl opt">;</span>
    <span class="hl kwa">margin</span><span class="hl opt">:</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">max-width</span><span class="hl opt">:</span> <span class="hl num">100</span><span class="hl opt">%;</span>
<span class="hl opt">}</span>

<span class="hl kwd">#dir_set</span> <span class="hl opt">{</span>
    <span class="hl kwa">margin</span><span class="hl opt">:</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwd">#dmenu</span> <span class="hl opt">{</span>
    <span class="hl kwa">float</span><span class="hl opt">:</span> none<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwd">#btr_web</span> <span class="hl opt">{</span>
    <span class="hl kwa">float</span><span class="hl opt">:</span> none<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwc">.selDiv</span> <span class="hl opt">{</span>
    <span class="hl kwa">padding</span><span class="hl opt">:</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">float</span><span class="hl opt">:</span> none<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwd">#ctl00_SiteContent_rLang</span> <span class="hl opt">{</span>
    <span class="hl kwa">min-width</span><span class="hl opt">:</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwd">#ctl00_SiteContent_sLang</span> <span class="hl opt">{</span>
    <span class="hl kwa">min-width</span><span class="hl opt">:</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwb">select</span> <span class="hl opt">{</span>
    <span class="hl kwa">border</span><span class="hl opt">:</span> <span class="hl num">1px</span> solid<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwc">.wrapp</span> <span class="hl opt">{</span>
    <span class="hl kwa">padding</span><span class="hl opt">:</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwd">#bTranslate</span> <span class="hl opt">{</span>
    <span class="hl kwa">margin-left</span><span class="hl opt">:</span> <span class="hl num">1em</span><span class="hl opt">;</span>
    <span class="hl kwa">padding</span><span class="hl opt">:</span> <span class="hl num">2px</span><span class="hl opt">;</span>
    <span class="hl kwa">font-weight</span><span class="hl opt">:</span> normal<span class="hl opt">;</span>
    <span class="hl kwa">background-color</span><span class="hl opt">:</span> <span class="hl num">#ccc</span><span class="hl opt">;</span>
    <span class="hl kwa">-webkit-border-radius</span><span class="hl opt">:</span> <span class="hl num">2px</span><span class="hl opt">;</span>
    <span class="hl kwa">color</span><span class="hl opt">:</span> <span class="hl num">#003333</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwb">body</span> <span class="hl opt">{</span>
    <span class="hl kwa">background</span><span class="hl opt">:</span> none<span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Сравнение скорости atomic, spinlock и mutex]]></title>
    <link href="http://demin.ws/blog/russian/2012/05/05/atomic-spinlock-mutex/"/>
    <updated>2012-05-05T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/05/05/atomic-spinlock-mutex/</id>
    <content type="html"><![CDATA[<p>Было мне интересно сравнить скорость разных вариантов блокировок: atomic, spinlock, mutex.</p>

<h2>Без синхронизации</h2>

<p>Для начала вариант вообще без какой-либо синхронизации:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;future&gt;</span>
<span class="hl ppc">#include &lt;iostream&gt;</span>

<span class="hl kwc">volatile</span> <span class="hl kwb">int</span> value <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>

<span class="hl kwb">int</span> <span class="hl kwd">loop</span><span class="hl opt">(</span><span class="hl kwb">bool</span> inc<span class="hl opt">,</span> <span class="hl kwb">int</span> limit<span class="hl opt">) {</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;Started &quot;</span> <span class="hl opt">&lt;&lt;</span> inc <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot; &quot;</span> <span class="hl opt">&lt;&lt;</span> limit <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> limit<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>inc<span class="hl opt">) {</span> 
      <span class="hl opt">++</span>value<span class="hl opt">;</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
      <span class="hl opt">--</span>value<span class="hl opt">;</span>
    <span class="hl opt">}</span>
  <span class="hl opt">}</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
  <span class="hl kwc">auto</span> f <span class="hl opt">=</span> std<span class="hl opt">::</span><span class="hl kwd">async</span><span class="hl opt">(</span>std<span class="hl opt">::</span>launch<span class="hl opt">::</span>async<span class="hl opt">,</span> std<span class="hl opt">::</span><span class="hl kwd">bind</span><span class="hl opt">(</span>loop<span class="hl opt">,</span> <span class="hl kwa">true</span><span class="hl opt">,</span> <span class="hl num">20000000</span><span class="hl opt">));</span>
  <span class="hl kwd">loop</span><span class="hl opt">(</span><span class="hl kwa">false</span><span class="hl opt">,</span> <span class="hl num">10000000</span><span class="hl opt">);</span>
  f<span class="hl opt">.</span><span class="hl kwd">wait</span><span class="hl opt">();</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> value <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Компилировать будем clang&rsquo;ом:</p>

<pre><code>clang++ -std=c++11 -stdlib=libc++ -O3 -o test test.cpp &amp;&amp; time ./test
</code></pre>

<p>Запускаем:</p>

<pre><code>SSttaarrtteedd  10  2100000000000000

11177087

real    0m0.070s
user    0m0.089s
sys 0m0.002s
</code></pre>

<p>Видно, что операции операторов инкремента и декремента неатомарные, и переменная <code>value</code> в конце содержит мусор.</p>

<h2>Инструкция LOCK</h2>

<pre class="hl">
<span class="hl ppc">#include &lt;future&gt;</span>
<span class="hl ppc">#include &lt;iostream&gt;</span>

<span class="hl kwc">volatile</span> <span class="hl kwb">int</span> value <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>

<span class="hl kwb">int</span> <span class="hl kwd">loop</span><span class="hl opt">(</span><span class="hl kwb">bool</span> inc<span class="hl opt">,</span> <span class="hl kwb">int</span> limit<span class="hl opt">) {</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;Started &quot;</span> <span class="hl opt">&lt;&lt;</span> inc <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot; &quot;</span> <span class="hl opt">&lt;&lt;</span> limit <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> limit<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>inc<span class="hl opt">) {</span> 
      <span class="hl kwa">asm</span><span class="hl opt">(</span><span class="hl str">&quot;LOCK&quot;</span><span class="hl opt">);</span>
      <span class="hl opt">++</span>value<span class="hl opt">;</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
      <span class="hl kwa">asm</span><span class="hl opt">(</span><span class="hl str">&quot;LOCK&quot;</span><span class="hl opt">);</span>
      <span class="hl opt">--</span>value<span class="hl opt">;</span>
    <span class="hl opt">}</span>
  <span class="hl opt">}</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
  <span class="hl kwc">auto</span> f <span class="hl opt">=</span> std<span class="hl opt">::</span><span class="hl kwd">async</span><span class="hl opt">(</span>std<span class="hl opt">::</span>launch<span class="hl opt">::</span>async<span class="hl opt">,</span> std<span class="hl opt">::</span><span class="hl kwd">bind</span><span class="hl opt">(</span>loop<span class="hl opt">,</span> <span class="hl kwa">true</span><span class="hl opt">,</span> <span class="hl num">20000000</span><span class="hl opt">));</span>
  <span class="hl kwd">loop</span><span class="hl opt">(</span><span class="hl kwa">false</span><span class="hl opt">,</span> <span class="hl num">10000000</span><span class="hl opt">);</span>
  f<span class="hl opt">.</span><span class="hl kwd">wait</span><span class="hl opt">();</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> value <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
<span class="hl opt">}</span> 
</pre>

<p>Запускаем:</p>

<pre><code>SSttaarrtteedd  10  2000000100000000

10000000

real    0m0.481s
user    0m0.779s
sys 0m0.005s
</code></pre>

<p>Тут уже <code>value</code> содержит правильное значение, но, конечно, это абсолютно непереносимый хак, заточенный под x86, и который, например, у меня работает только с <code>-O3</code> (с <code>-O2</code> падает с &ldquo;illegal instruction&rdquo;, так как между командой LOCK и инкрементом/декрементом компилятор сует что-то еще).</p>

<h2>Atomic</h2>

<pre class="hl">
<span class="hl ppc">#include &lt;future&gt;</span>
<span class="hl ppc">#include &lt;iostream&gt;</span>
<span class="hl ppc">#include</span> <span class="hl pps">&quot;boost/interprocess/detail/atomic.hpp&quot;</span><span class="hl ppc"></span>

<span class="hl kwa">using namespace</span> boost<span class="hl opt">::</span>interprocess<span class="hl opt">::</span>ipcdetail<span class="hl opt">;</span>

<span class="hl kwc">volatile</span> boost<span class="hl opt">::</span><span class="hl kwb">uint32_t</span> value <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>

<span class="hl kwb">int</span> <span class="hl kwd">loop</span><span class="hl opt">(</span><span class="hl kwb">bool</span> inc<span class="hl opt">,</span> <span class="hl kwb">int</span> limit<span class="hl opt">) {</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;Started &quot;</span> <span class="hl opt">&lt;&lt;</span> inc <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot; &quot;</span> <span class="hl opt">&lt;&lt;</span> limit <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> limit<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>inc<span class="hl opt">) {</span> 
      <span class="hl kwd">atomic_inc32</span><span class="hl opt">(&amp;</span>value<span class="hl opt">);</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
      <span class="hl kwd">atomic_dec32</span><span class="hl opt">(&amp;</span>value<span class="hl opt">);</span>
    <span class="hl opt">}</span>
  <span class="hl opt">}</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
  <span class="hl kwc">auto</span> f <span class="hl opt">=</span> std<span class="hl opt">::</span><span class="hl kwd">async</span><span class="hl opt">(</span>std<span class="hl opt">::</span>launch<span class="hl opt">::</span>async<span class="hl opt">,</span> std<span class="hl opt">::</span><span class="hl kwd">bind</span><span class="hl opt">(</span>loop<span class="hl opt">,</span> <span class="hl kwa">true</span><span class="hl opt">,</span> <span class="hl num">20000000</span><span class="hl opt">));</span>
  <span class="hl kwd">loop</span><span class="hl opt">(</span><span class="hl kwa">false</span><span class="hl opt">,</span> <span class="hl num">10000000</span><span class="hl opt">);</span>
  f<span class="hl opt">.</span><span class="hl kwd">wait</span><span class="hl opt">();</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl kwd">atomic_read32</span><span class="hl opt">(&amp;</span>value<span class="hl opt">) &lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Запускаем:</p>

<pre><code>SSttaarrtteedd  10  2100000000000000

10000000

real    0m0.457s
user    0m0.734s
sys 0m0.004s
</code></pre>

<p>Результат правильный, и время почти такое же, как и с командой <code>LOCK</code>. Неудивительно, так как <code>atomic</code> на самом тоже использует инструкцию <code>LOCK</code>, но просто точно гарантированным и проверенным образом.</p>

<h2>Spinlock</h2>

<pre class="hl">
<span class="hl ppc">#include &lt;future&gt;</span>
<span class="hl ppc">#include &lt;iostream&gt;</span>
<span class="hl ppc">#include</span> <span class="hl pps">&quot;boost/smart_ptr/detail/spinlock.hpp&quot;</span><span class="hl ppc"></span>

boost<span class="hl opt">::</span>detail<span class="hl opt">::</span>spinlock lock<span class="hl opt">;</span>
<span class="hl kwc">volatile</span> <span class="hl kwb">int</span> value <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>

<span class="hl kwb">int</span> <span class="hl kwd">loop</span><span class="hl opt">(</span><span class="hl kwb">bool</span> inc<span class="hl opt">,</span> <span class="hl kwb">int</span> limit<span class="hl opt">) {</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;Started &quot;</span> <span class="hl opt">&lt;&lt;</span> inc <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot; &quot;</span> <span class="hl opt">&lt;&lt;</span> limit <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> limit<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
    std<span class="hl opt">::</span>lock_guard<span class="hl opt">&lt;</span>boost<span class="hl opt">::</span>detail<span class="hl opt">::</span>spinlock<span class="hl opt">&gt;</span> <span class="hl kwd">guard</span><span class="hl opt">(</span>lock<span class="hl opt">);</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>inc<span class="hl opt">) {</span> 
      <span class="hl opt">++</span>value<span class="hl opt">;</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
      <span class="hl opt">--</span>value<span class="hl opt">;</span>
    <span class="hl opt">}</span>
  <span class="hl opt">}</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
  <span class="hl kwc">auto</span> f <span class="hl opt">=</span> std<span class="hl opt">::</span><span class="hl kwd">async</span><span class="hl opt">(</span>std<span class="hl opt">::</span>launch<span class="hl opt">::</span>async<span class="hl opt">,</span> std<span class="hl opt">::</span><span class="hl kwd">bind</span><span class="hl opt">(</span>loop<span class="hl opt">,</span> <span class="hl kwa">true</span><span class="hl opt">,</span> <span class="hl num">20000000</span><span class="hl opt">));</span>
  <span class="hl kwd">loop</span><span class="hl opt">(</span><span class="hl kwa">false</span><span class="hl opt">,</span> <span class="hl num">10000000</span><span class="hl opt">);</span>
  f<span class="hl opt">.</span><span class="hl kwd">wait</span><span class="hl opt">();</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> value <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Запускаем:</p>

<pre><code>SSttaarrtteedd  10  2100000000000000

10000000

real    0m0.541s
user    0m0.675s
sys 0m0.089s
</code></pre>

<p>Немного медленнее, но не на много.</p>

<h2>Mutex</h2>

<pre class="hl">
<span class="hl ppc">#include &lt;future&gt;</span>
<span class="hl ppc">#include &lt;iostream&gt;</span>

std<span class="hl opt">::</span>mutex mutex<span class="hl opt">;</span>
<span class="hl kwc">volatile</span> <span class="hl kwb">int</span> value <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>

<span class="hl kwb">int</span> <span class="hl kwd">loop</span><span class="hl opt">(</span><span class="hl kwb">bool</span> inc<span class="hl opt">,</span> <span class="hl kwb">int</span> limit<span class="hl opt">) {</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;Started &quot;</span> <span class="hl opt">&lt;&lt;</span> inc <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot; &quot;</span> <span class="hl opt">&lt;&lt;</span> limit <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> limit<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
    std<span class="hl opt">::</span>lock_guard<span class="hl opt">&lt;</span>std<span class="hl opt">::</span>mutex<span class="hl opt">&gt;</span> <span class="hl kwd">guard</span><span class="hl opt">(</span>mutex<span class="hl opt">);</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>inc<span class="hl opt">) {</span> 
      <span class="hl opt">++</span>value<span class="hl opt">;</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
      <span class="hl opt">--</span>value<span class="hl opt">;</span>
    <span class="hl opt">}</span>
  <span class="hl opt">}</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
  <span class="hl kwc">auto</span> f <span class="hl opt">=</span> std<span class="hl opt">::</span><span class="hl kwd">async</span><span class="hl opt">(</span>std<span class="hl opt">::</span>launch<span class="hl opt">::</span>async<span class="hl opt">,</span> std<span class="hl opt">::</span><span class="hl kwd">bind</span><span class="hl opt">(</span>loop<span class="hl opt">,</span> <span class="hl kwa">true</span><span class="hl opt">,</span> <span class="hl num">20000000</span><span class="hl opt">));</span>
  <span class="hl kwd">loop</span><span class="hl opt">(</span><span class="hl kwa">false</span><span class="hl opt">,</span> <span class="hl num">10000000</span><span class="hl opt">);</span>
  f<span class="hl opt">.</span><span class="hl kwd">wait</span><span class="hl opt">();</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> value <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Запускаем:</p>

<pre><code>SSttaarrtteedd  10  2010000000000000

10000000

real    0m25.229s
user    0m7.011s
sys 0m22.667s
</code></pre>

<p>Вот тут, конечно, реально медленнее.</p>

<h2>Сравнительная табличка</h2>

<table>
<thead>
<tr>
<td><strong>Метод</strong></td>
<td><strong>Время (сек.)</strong></td>
</tr>
</thead>

<tbody>
<tr>
<td>Без синхронизации</td>
<td>0.070</td>
</tr>

<tr>
<td>LOCK</td>
<td>0.481</td>
</tr>

<tr>
<td>Atomic</td>
<td>0.457</td>
</tr>

<tr>
<td>Spinlock</td>
<td>0.541</td>
</tr>

<tr>
<td>Mutex</td>
<td>22.667</td>
</tr>
</tbody>
</table>

<p>Конечно, очень многое зависит от платформы и компилятора (я тестировал на Mac Air и clang). Но лично я, например, получил интересное наблюдение, что spinlock, несмотря на значительную сложную реализации, судя по сгенерированному кому, почти не уступает atomic&rsquo;у.</p>

<p>Жалко, что мой clang пока не поддерживает <code>atomic</code>, и пришлось использовать boost.</p>

<h3>P.S.</h3>

<p>В C++ 2011 гарантируется, что при многопоточном использовании стандартных потоков гарантируется отсутствие data race, но неперемешивание вывода не гарантируется.</p>

<blockquote>
<p>Concurrent access to a synchronized (§27.5.3.4) standard iostream object’s formatted and unformatted input (§27.7.2.1) and output (§27.7.3.1) functions or a standard C stream by multiple threads shall not result in a data race (§1.10). [ Note: Users must still synchronize concurrent use of these objects and streams by multiple threads if they wish to avoid interleaved characters. — end note ]</p>
</blockquote>

<h3>Посты по теме</h3>

<ul>
<li><a href="http://demin.ws/blog/russian/2010/12/27/atomicy-of-int-and-pointer/">Атомарность типа int и указателя</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pimpl и умные указатели]]></title>
    <link href="http://demin.ws/blog/russian/2012/05/03/pimpl-and-smart-pointers/"/>
    <updated>2012-05-03T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/05/03/pimpl-and-smart-pointers/</id>
    <content type="html"><![CDATA[<p>Порой понимаешь, что не знаешь каких-то банальных вещей. Сегодня на повестке дня Pimpl и умные указатели. Я почему-то был уверен, что forward class declaration можно делать только если класс используется в форме указателя или ссылки (#1), то есть тексте записывается в форме <code>T*</code> или <code>T&amp;</code> (#2). Поэтому, когда мне надо было реализовать Pimpl, я не использовал умные указатели, так как с виду для них требуется полное определение класса.</p>

<p><code>A.h</code>:
<pre class="hl">
<span class="hl ppc">#include &lt;memory&gt;</span>
<span class="hl kwc">class</span> A_pimpl<span class="hl opt">;</span>
<span class="hl kwc">class</span> A <span class="hl opt">{</span>
  <span class="hl opt">&hellip;</span>
  std<span class="hl opt">::</span>unique_ptr<span class="hl opt">&lt;</span>A_pimpl<span class="hl opt">&gt;</span> p<span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre></p>

<p>Я почему-то думал, что это не будет работать из-за неопределенности класса <code>A_pimpl</code>. И был сильно удивлен, попробовал и узнав, что на самом деле это прекрасно работает. То есть факт #1 не эквивалентен факту #2.</p>

<p>В <code>A.cpp</code> можно теперь спокойно писать:</p>

<pre class="hl">
<span class="hl ppc">#include</span> <span class="hl pps">&quot;A.h&quot;</span><span class="hl ppc"></span>
<span class="hl ppc">#include</span> <span class="hl pps">&quot;pimpl.h&quot;</span><span class="hl ppc"></span>

A<span class="hl opt">::</span><span class="hl kwd">A</span><span class="hl opt">() :</span> <span class="hl kwd">p</span><span class="hl opt">(</span><span class="hl kwa">new</span> <span class="hl kwd">A_pimpl</span><span class="hl opt">()) {}</span>
</pre>

<p>Все выше сказанное также работает для <code>std::shared_ptr</code> (C++ 2011), <code>boost::scoped_ptr</code> и <code>boost::shared_ptr</code>.</p>

<p><strong>Дополнение</strong></p>

<p>Как меня поправили в комментариях, у класса <code>A</code> обязательно должен быть явно задан деструктор, причем его тело должно быть именно в <code>A.cpp</code>, а не в заголовочном файле. Иначе будет ошибка типа &ldquo;error C2338: can&rsquo;t delete an incomplete type&rdquo;.</p>

<p><code>A.h</code>:
<pre class="hl">
<span class="hl ppc">#include &lt;memory&gt;</span>
<span class="hl kwc">class</span> A_pimpl<span class="hl opt">;</span>
<span class="hl kwc">class</span> A <span class="hl opt">{</span>
  <span class="hl kwd">A</span><span class="hl opt">();</span>
  <span class="hl opt">~</span><span class="hl kwd">A</span><span class="hl opt">();</span>
  std<span class="hl opt">::</span>unique_ptr<span class="hl opt">&lt;</span>A_pimpl<span class="hl opt">&gt;</span> p<span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre></p>

<p>и <code>A.cpp</code>:</p>

<pre class="hl">
<span class="hl ppc">#include</span> <span class="hl pps">&quot;A.h&quot;</span><span class="hl ppc"></span>
<span class="hl ppc">#include</span> <span class="hl pps">&quot;pimpl.h&quot;</span><span class="hl ppc"></span>

A<span class="hl opt">::</span><span class="hl kwd">A</span><span class="hl opt">() :</span> <span class="hl kwd">p</span><span class="hl opt">(</span><span class="hl kwa">new</span> <span class="hl kwd">A_pimpl</span><span class="hl opt">()) {}</span>
A<span class="hl opt">::~</span><span class="hl kwd">A</span><span class="hl opt">() {}</span>
</pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Anthony Williams, "C++ Concurrency in Action"]]></title>
    <link href="http://demin.ws/blog/russian/2012/05/02/cpp-concurrency-in-action/"/>
    <updated>2012-05-02T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/05/02/cpp-concurrency-in-action/</id>
    <content type="html"><![CDATA[<p>Довелось мне в этом году посетить <a href="http://accu.org/index.php/conferences/accu_conference_2012">ACCU 2012</a>. Практически все в этом году было про С++ 2011. Одна из презентаций, которые я посетил, была &ldquo;C++11 concurrency tutorial&rdquo; от <a href="http://www.boost.org/users/people/anthony_williams.html">Антони Вильямса</a>, не больше не меньше, мейнтейнера boost::thread.</p>

<p>Его презентация <a href="http://www.justsoftwaresolutions.co.uk/files/c++11_concurrency.pdf">доступна</a> с <a href="http://www.justsoftwaresolutions.co.uk/files/c++11_concurrency_code.zip">примерами</a>.</p>

<p>Вторая его презентация, увы, которую я не посетил, называлась &ldquo;Dataflow, Actors and High Level Structures in Concurrent Applications&rdquo;. Фактически, там было показано, как можно на С++ забацать actor&rsquo;ы практически как в Эрланге.</p>

<p>Эта презентация тоже <a href="http://www.justsoftwaresolutions.co.uk/files/dataflow_and_actors.pdf">доступна</a> с <a href="http://www.justsoftwaresolutions.co.uk/files/dataflow_and_actors_code.zip">примерами</a>.</p>

<p>Рекомендую.</p>

<p>Идем далее. Недавно вышла книга, &ldquo;C++ Concurrency in Action&rdquo; этого же автора (Anthony Williams).</p>

<p><a href="http://www.amazon.co.uk/gp/product/1933988770/ref=as_li_tf_il?ie=UTF8&tag=prodiy-21&linkCode=as2&camp=1634&creative=6738&creativeASIN=1933988770"><img border="0" src="http://ws.assoc-amazon.co.uk/widgets/q?_encoding=UTF8&Format=_SL160_&ASIN=1933988770&MarketPlace=GB&ID=AsinImage&WS=1&tag=prodiy-21&ServiceVersion=20070822" ></a><img src="http://www.assoc-amazon.co.uk/e/ir?t=prodiy-21&l=as2&o=2&a=1933988770" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p>Если хотите знать все про memory model в C++, почитайте пятую главу (и не только пятую).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Как понятно объяснить задачу о разрезании пиццы]]></title>
    <link href="http://demin.ws/blog/russian/2012/05/01/pizza-problem-hint/"/>
    <updated>2012-05-01T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/05/01/pizza-problem-hint/</id>
    <content type="html"><![CDATA[<p>Есть классическая задача о разрезании пиццы, в которой спрашивается количество разрезов пиццы, чтобы в итоге получилось N кусков. Фактически это задача о разбиении плоскости прямыми. В &ldquo;Конкретной математике&rdquo; есть вот такое объяснение:</p>

<p><img src="http://demin.ws/images/blog/knuth-on-pizza-problem.png" /></p>

<p>Я читал его много раз, но так и не мог понять &ndash; почему именно так?</p>

<p>В итоге, я нашел вот эту страницу &ndash; <a href="http://www.jimloy.com/geometry/plane.htm">Dividing The Plane</a>, где есть такое предложение:</p>

<blockquote>
<p>Let&rsquo;s say that we&rsquo;ve got n lines (for some arbitrary n). And we add an n+1th line. That line goes through region-line-region-line-&hellip;-line-region. It went through n lines and n+1 regions (assuming that all of the lines intersect). For each region that it went through, it added a region (split that region into two regions).</p>
</blockquote>

<p>И вот эта фраза на пальцах объясняет, почему именно <code>n</code>-я прямая добавляет <code>n</code> регионов. Идея тут в визуализации прохода новой прямой через существующие регионы.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Баг с std::async() в Visual Studio 11 (preview)]]></title>
    <link href="http://demin.ws/blog/russian/2012/05/01/async-bug-in-visual-studio-11-preview/"/>
    <updated>2012-05-01T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/05/01/async-bug-in-visual-studio-11-preview/</id>
    <content type="html"><![CDATA[<p>Наткнулся на, видимо, баг в библиотеке Visual Studio 11 (preview).</p>

<pre class="hl">
<span class="hl ppc">#include &lt;future&gt;</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[]) {</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwc">auto</span> i <span class="hl opt">=</span> <span class="hl num">0L</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> <span class="hl num">1000000</span><span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
    <span class="hl kwc">auto</span> f <span class="hl opt">=</span> std<span class="hl opt">::</span><span class="hl kwd">async</span><span class="hl opt">([](){</span> <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">; });</span>
    f<span class="hl opt">.</span><span class="hl kwd">get</span><span class="hl opt">();</span>
  <span class="hl opt">}</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Данный код стабильно падает. Исключений не бросает. Интересно, что если уменьшать количество итерации, то падения изчезают.</p>

<p>Компилятор cl.exe 17.00.40825.2, студия 11.0.40825.2 PREREL. <a href="http://stackoverflow.com/questions/10301432/number-of-async-futures-in-c11">Запостил на Stack Overflow</a>. Пока говорят, что скорее всего реально баг.</p>

<p>Где обычно файлят баги в VS?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Многопоточный QuickSort]]></title>
    <link href="http://demin.ws/blog/russian/2012/04/28/multithreaded-quicksort/"/>
    <updated>2012-04-28T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/04/28/multithreaded-quicksort/</id>
    <content type="html"><![CDATA[<p>Я тут недавно жаловался, что C++, даже в редакции 2011, крайне недружелюбен в плане многозадачности и многопоточности. В качестве эксперимента я попробовал сделать многопоточный QuickSort. В этом алгоритме получается после фазы разбиения запустить сортировки подчастей параллельно.</p>

<p>Вот мой наивный велосипед:</p>

<pre class="hl">
<span class="hl kwb">int</span> <span class="hl kwd">naive_quick_sort</span><span class="hl opt">(</span>std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span>Type<span class="hl opt">&gt;::</span>iterator begin<span class="hl opt">,</span> std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span>Type<span class="hl opt">&gt;::</span>iterator end<span class="hl opt">) {</span>
  <span class="hl kwc">auto</span> <span class="hl kwb">const</span> sz <span class="hl opt">=</span> end <span class="hl opt">-</span> begin<span class="hl opt">;</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>sz <span class="hl opt">&lt;=</span> <span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>

  <span class="hl kwc">auto</span> pivot <span class="hl opt">=</span> begin <span class="hl opt">+</span> sz<span class="hl opt">/</span><span class="hl num">2</span><span class="hl opt">;</span>
  <span class="hl kwc">auto</span> <span class="hl kwb">const</span> pivot_v <span class="hl opt">= *</span>pivot<span class="hl opt">;</span>

  std<span class="hl opt">::</span><span class="hl kwd">swap</span><span class="hl opt">(*</span>pivot<span class="hl opt">, *(</span>end <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">));</span>
  <span class="hl kwc">auto</span> p <span class="hl opt">=</span> std<span class="hl opt">::</span><span class="hl kwd">partition</span><span class="hl opt">(</span>begin<span class="hl opt">,</span> end<span class="hl opt">, [&amp;](</span><span class="hl kwb">const</span> Type<span class="hl opt">&amp;</span> a<span class="hl opt">) {</span> <span class="hl kwa">return</span> a <span class="hl opt">&lt;</span> pivot_v<span class="hl opt">; } );</span>
  std<span class="hl opt">::</span><span class="hl kwd">swap</span><span class="hl opt">(*</span>p<span class="hl opt">, *(</span>end <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">));</span>

  <span class="hl kwa">if</span> <span class="hl opt">(</span>sz <span class="hl opt">&gt;</span> <span class="hl num">4096</span><span class="hl opt">) {</span>
    <span class="hl kwc">auto</span> left <span class="hl opt">=</span> std<span class="hl opt">::</span><span class="hl kwd">async</span><span class="hl opt">(</span>std<span class="hl opt">::</span>launch<span class="hl opt">::</span>async<span class="hl opt">, [&amp;]() {</span>
      <span class="hl kwa">return</span> <span class="hl kwd">naive_quick_sort</span><span class="hl opt">(</span>begin<span class="hl opt">,</span> p<span class="hl opt">);</span>
    <span class="hl opt">});</span>
    <span class="hl kwd">naive_quick_sort</span><span class="hl opt">(</span>p <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">,</span> end<span class="hl opt">);</span>
  <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
    <span class="hl kwd">naive_quick_sort</span><span class="hl opt">(</span>begin<span class="hl opt">,</span> p<span class="hl opt">);</span>
    <span class="hl kwd">naive_quick_sort</span><span class="hl opt">(</span>p <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">,</span> end<span class="hl opt">);</span>
  <span class="hl opt">}</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">quick_sort</span><span class="hl opt">(</span>std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span>Type<span class="hl opt">&gt;&amp;</span> arr<span class="hl opt">) {</span>
  <span class="hl kwd">naive_quick_sort</span><span class="hl opt">(</span>arr<span class="hl opt">.</span><span class="hl kwd">begin</span><span class="hl opt">(),</span> arr<span class="hl opt">.</span><span class="hl kwd">end</span><span class="hl opt">());</span>
<span class="hl opt">}</span>
</pre>

<p>Реализация крайне простая, но стоит отметить несколько моментов. Есть некая константа <code>4096</code>, которая определяет порог, когда отключается параллельное выполнение. Почему именно такое значение? Не знаю. Взято из воздуха с минимальным чувством здравого смысла. Когда же параллельность активна, то сортировка левого массива запускается через <code>async</code> в другом потоке, а правый сортируется как и раньше в текущем потоке. При выходе из контекста функции гарантируется, что задача, запущенная через <code>async</code>, будет завершена (ее завершения будут ждать).</p>

<p>Традиционно, пузомерка. Три кандидата:</p>

<ul>
<li>приведенная выше реализация (через <code>async</code>)</li>
<li>она же, но в один поток (<code>if (sz &gt; 4096)</code> заменить на <code>if (false)</code>)</li>
<li>std::sort() (<code>naive_quick_sort(arr.begin(), arr.end())</code> заменить на <code>std::sort(arr.begin(), arr.end())</code>)</li>
</ul>

<p>Сортируется массив из 50000000 элементов типа <code>int64</code> (со знаком). Делается 10 экспериментов, и считается среднее. Значения генерируются случайно:</p>

<pre class="hl">
std<span class="hl opt">::</span>tr1<span class="hl opt">::</span>uniform_int<span class="hl opt">&lt;</span>Type<span class="hl opt">&gt;</span> <span class="hl kwd">uniform</span><span class="hl opt">(</span>
  std<span class="hl opt">::</span>numeric_limits<span class="hl opt">&lt;</span>Type<span class="hl opt">&gt;::</span><span class="hl kwd">min</span><span class="hl opt">(),</span>
  std<span class="hl opt">::</span>numeric_limits<span class="hl opt">&lt;</span>Type<span class="hl opt">&gt;::</span><span class="hl kwd">max</span><span class="hl opt">());</span>
std<span class="hl opt">::</span>mt19937_64 engine<span class="hl opt">;</span>

<span class="hl kwb">void</span> <span class="hl kwd">generate</span><span class="hl opt">(</span>std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span>Type<span class="hl opt">&gt;&amp;</span> v<span class="hl opt">) {</span>
  std<span class="hl opt">::</span><span class="hl kwd">for_each</span><span class="hl opt">(</span>v<span class="hl opt">.</span><span class="hl kwd">begin</span><span class="hl opt">(),</span> v<span class="hl opt">.</span><span class="hl kwd">end</span><span class="hl opt">(), [](</span>Type<span class="hl opt">&amp;</span> i<span class="hl opt">) {</span> i <span class="hl opt">=</span> <span class="hl kwd">uniform</span><span class="hl opt">(</span>engine<span class="hl opt">); });</span>
<span class="hl opt">}</span>
</pre>

<p>Не спрашивайте, почему тут делается перегон из big endian туда и обратно. Это было сделано для сравнения с другой программой, на Java. При замерах времени учитывается только &ldquo;чистое время&rdquo;.</p>

<p>Компилятор VS 2011, 64-bit. Процессор Intel Core i5 2.53GHz, 4 ядра.</p>

<pre><code>Итерация   Через async()   Один поток   std::sort()
--------- --------------- ------------ ------------
 1         2512            6555         7309
 2         2337            6320         6977
 3         2450            6516         7180
 4         2372            6388         6933
 5         2387            7074         7189
 6         2339            7399         7040
 7         2434            6875         7040
 8         2562            7060         7187
 9         2470            7050         7145
10         2422            6846         6898
--------- --------------- ------------ ------------    
Среднее    2428.5          6808.3       7089.8
</code></pre>

<p>Время указано в миллисекундах.</p>

<p>Получается где-то в три раза быстрее. Странное небольшое отставание <code>std::sort()</code> скорее всего связано с тем, что данные &ldquo;хорошие&rdquo;, и на них моей простецкой реализации просто везет. Видно, что у времени <code>std::sort()</code> девиация гораздо меньше. Все-таки <code>stl::sort()</code> стабилен по времени вне зависимости от данных.</p>

<p>Есть ли в этой параллельности практическая польза? Думаю нет. Очень сложно оценить стабильность алгоритма на разных данных. Например, совершенно не ясно, как выбрать порог отключения многозадачности? Стоит ли использовать пул потоков?</p>

<p>Если кому интересно, внизу полный текст этого велосипеда, включая генератор данных.</p>

<p>Сборка и генерация данных:</p>

<pre><code>call &quot;%VS110COMNTOOLS%..\..\VC\vcvarsall.bat&quot; amd64 &amp;&amp; ^
cl /Ox /DWIN32 sort_async.cpp &amp;&amp; ^
sort_async generate
</code></pre>

<p>Осторожно! Генератор создаст данных на 8 гигов.</p>

<p>Сборка и эксперимент:</p>

<pre><code>call &quot;%VS110COMNTOOLS%..\..\VC\vcvarsall.bat&quot; amd64 &amp;&amp; ^
cl /Ox /DWIN32 sort_async.cpp &amp;&amp; ^
sort_async
</code></pre>

<p>Файл <code>sort_async.cpp</code>:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;vector&gt;                      </span>
<span class="hl ppc">#include &lt;iostream&gt;</span>
<span class="hl ppc">#include &lt;fstream&gt;</span>
<span class="hl ppc">#include &lt;sstream&gt;</span>
<span class="hl ppc">#include &lt;algorithm&gt;</span>
<span class="hl ppc">#include &lt;iomanip&gt;</span>
<span class="hl ppc">#include &lt;future&gt;</span>
<span class="hl ppc">#include &lt;random&gt;</span>
<span class="hl ppc">#include &lt;chrono&gt;</span>
<span class="hl ppc">#include &lt;cstdlib&gt;</span>

<span class="hl kwb">const int</span> ITERATIONS_NUM <span class="hl opt">=</span> <span class="hl num">10</span><span class="hl opt">;</span>
<span class="hl kwb">const int</span> DATA_SIZE <span class="hl opt">=</span> <span class="hl num">50000000</span><span class="hl opt">;</span>

<span class="hl kwc">typedef</span> __int64 Type<span class="hl opt">;</span>

<span class="hl kwc">inline</span> <span class="hl kwb">void</span> <span class="hl kwd">endian_swap</span><span class="hl opt">(</span>Type<span class="hl opt">&amp;</span> x<span class="hl opt">) {</span>
  x <span class="hl opt">=</span>
    <span class="hl opt">(</span><span class="hl num">0x00000000000000FF</span> <span class="hl opt">&amp; (</span>x <span class="hl opt">&gt;&gt;</span> <span class="hl num">56</span><span class="hl opt">))</span>
  <span class="hl opt">| (</span><span class="hl num">0x000000000000FF00</span> <span class="hl opt">&amp; (</span>x <span class="hl opt">&gt;&gt;</span> <span class="hl num">40</span><span class="hl opt">))</span>
  <span class="hl opt">| (</span><span class="hl num">0x0000000000FF0000</span> <span class="hl opt">&amp; (</span>x <span class="hl opt">&gt;&gt;</span> <span class="hl num">24</span><span class="hl opt">))</span>
  <span class="hl opt">| (</span><span class="hl num">0x00000000FF000000</span> <span class="hl opt">&amp; (</span>x <span class="hl opt">&gt;&gt;</span>  <span class="hl num">8</span><span class="hl opt">))</span>
  <span class="hl opt">| (</span><span class="hl num">0x000000FF00000000</span> <span class="hl opt">&amp; (</span>x <span class="hl opt">&lt;&lt;</span>  <span class="hl num">8</span><span class="hl opt">))</span>
  <span class="hl opt">| (</span><span class="hl num">0x0000FF0000000000</span> <span class="hl opt">&amp; (</span>x <span class="hl opt">&lt;&lt;</span> <span class="hl num">24</span><span class="hl opt">))</span>
  <span class="hl opt">| (</span><span class="hl num">0x00FF000000000000</span> <span class="hl opt">&amp; (</span>x <span class="hl opt">&lt;&lt;</span> <span class="hl num">40</span><span class="hl opt">))</span>
  <span class="hl opt">| (</span><span class="hl num">0xFF00000000000000</span> <span class="hl opt">&amp; (</span>x <span class="hl opt">&lt;&lt;</span> <span class="hl num">56</span><span class="hl opt">));</span>
<span class="hl opt">}</span>

std<span class="hl opt">::</span>tr1<span class="hl opt">::</span>uniform_int<span class="hl opt">&lt;</span>Type<span class="hl opt">&gt;</span> <span class="hl kwd">uniform</span><span class="hl opt">(</span>
  std<span class="hl opt">::</span>numeric_limits<span class="hl opt">&lt;</span>Type<span class="hl opt">&gt;::</span><span class="hl kwd">min</span><span class="hl opt">(),</span>
  std<span class="hl opt">::</span>numeric_limits<span class="hl opt">&lt;</span>Type<span class="hl opt">&gt;::</span><span class="hl kwd">max</span><span class="hl opt">());</span>
std<span class="hl opt">::</span>mt19937_64 engine<span class="hl opt">;</span>

<span class="hl kwb">void</span> <span class="hl kwd">generate</span><span class="hl opt">(</span>std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span>Type<span class="hl opt">&gt;&amp;</span> v<span class="hl opt">) {</span>
  std<span class="hl opt">::</span><span class="hl kwd">for_each</span><span class="hl opt">(</span>v<span class="hl opt">.</span><span class="hl kwd">begin</span><span class="hl opt">(),</span> v<span class="hl opt">.</span><span class="hl kwd">end</span><span class="hl opt">(), [](</span>Type<span class="hl opt">&amp;</span> i<span class="hl opt">) {</span> i <span class="hl opt">=</span> <span class="hl kwd">uniform</span><span class="hl opt">(</span>engine<span class="hl opt">); });</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">check_sorted</span><span class="hl opt">(</span><span class="hl kwb">const</span> std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span>Type<span class="hl opt">&gt;&amp;</span> v<span class="hl opt">,</span> <span class="hl kwb">const</span> std<span class="hl opt">::</span>string<span class="hl opt">&amp;</span> msg<span class="hl opt">) {</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwc">auto</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> v<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">() -</span> <span class="hl num">1</span><span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>v<span class="hl opt">[</span>i<span class="hl opt">] &gt;</span> v<span class="hl opt">[</span>i <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">]) {</span>
      std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">Unsorted: &quot;</span> <span class="hl opt">&lt;&lt;</span> msg <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">;</span>
      std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl opt">&lt;&lt;</span> i <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">;</span>
      std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> v<span class="hl opt">[</span>i<span class="hl opt">] &lt;&lt;</span> <span class="hl str">&quot; &quot;</span> <span class="hl opt">&lt;&lt;</span> v<span class="hl opt">[</span>i <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">] &lt;&lt;</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">;</span>
      std<span class="hl opt">::</span><span class="hl kwd">exit</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
  <span class="hl opt">}</span>
<span class="hl opt">}</span>

std<span class="hl opt">::</span>string <span class="hl kwd">data_file_name</span><span class="hl opt">(</span><span class="hl kwb">const int</span> i<span class="hl opt">,</span> <span class="hl kwb">const</span> std<span class="hl opt">::</span>string<span class="hl opt">&amp;</span> suffix<span class="hl opt">) {</span>
  std<span class="hl opt">::</span>ostringstream fmt<span class="hl opt">;</span>
  fmt <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;trash_for_sort_&quot;</span> <span class="hl opt">&lt;&lt;</span> i <span class="hl opt">&lt;&lt;</span> suffix <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;.bin&quot;</span><span class="hl opt">;</span>
  <span class="hl kwa">return</span> fmt<span class="hl opt">.</span><span class="hl kwd">str</span><span class="hl opt">();</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">save_file</span><span class="hl opt">(</span>std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span>Type<span class="hl opt">&gt;</span> array<span class="hl opt">,</span> <span class="hl kwb">const</span> std<span class="hl opt">::</span>string<span class="hl opt">&amp;</span> name<span class="hl opt">) {</span>
  std<span class="hl opt">::</span><span class="hl kwd">for_each</span><span class="hl opt">(</span>array<span class="hl opt">.</span><span class="hl kwd">begin</span><span class="hl opt">(),</span> array<span class="hl opt">.</span><span class="hl kwd">end</span><span class="hl opt">(), [](</span>Type<span class="hl opt">&amp;</span> i<span class="hl opt">) {</span> <span class="hl kwd">endian_swap</span><span class="hl opt">(</span>i<span class="hl opt">); });</span>
  std<span class="hl opt">::</span>ofstream <span class="hl kwd">os</span><span class="hl opt">(</span>name<span class="hl opt">.</span><span class="hl kwd">c_str</span><span class="hl opt">(),</span> std<span class="hl opt">::</span>ios<span class="hl opt">::</span>binary<span class="hl opt">|</span>std<span class="hl opt">::</span>ios<span class="hl opt">::</span>out<span class="hl opt">);</span>
  <span class="hl kwc">auto</span> <span class="hl kwb">const</span> bytes_to_write <span class="hl opt">=</span> array<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">() *</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span>array<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]);</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;Saving &quot;</span> <span class="hl opt">&lt;&lt;</span> array<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">() &lt;&lt;</span> <span class="hl str">&quot; bytes to &quot;</span> <span class="hl opt">&lt;&lt;</span> name <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">;</span>
  os<span class="hl opt">.</span><span class="hl kwd">write</span><span class="hl opt">((</span><span class="hl kwb">char</span> <span class="hl opt">*)&amp;</span>array<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">],</span> bytes_to_write<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main_generate</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[]) {</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;Generation</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">;</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwc">auto</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> ITERATIONS_NUM<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
    std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span>Type<span class="hl opt">&gt;</span> <span class="hl kwd">unsorted</span><span class="hl opt">(</span>DATA_SIZE<span class="hl opt">);</span>
    <span class="hl kwd">generate</span><span class="hl opt">(</span>unsorted<span class="hl opt">);</span>
    <span class="hl kwd">save_file</span><span class="hl opt">(</span>unsorted<span class="hl opt">,</span> <span class="hl kwd">data_file_name</span><span class="hl opt">(</span>i<span class="hl opt">,</span> <span class="hl str">&quot;&quot;</span><span class="hl opt">));</span>
    std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;Sorting...</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">;</span>
    std<span class="hl opt">::</span><span class="hl kwd">sort</span><span class="hl opt">(</span>unsorted<span class="hl opt">.</span><span class="hl kwd">begin</span><span class="hl opt">(),</span> unsorted<span class="hl opt">.</span><span class="hl kwd">end</span><span class="hl opt">());</span>
    <span class="hl kwd">check_sorted</span><span class="hl opt">(</span>unsorted<span class="hl opt">,</span> <span class="hl str">&quot;check sorted array&quot;</span><span class="hl opt">);</span>
    <span class="hl kwd">save_file</span><span class="hl opt">(</span>unsorted<span class="hl opt">,</span> <span class="hl kwd">data_file_name</span><span class="hl opt">(</span>i<span class="hl opt">,</span> <span class="hl str">&quot;_sorted&quot;</span><span class="hl opt">));</span>
  <span class="hl opt">}</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">load_file</span><span class="hl opt">(</span>std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span>Type<span class="hl opt">&gt;&amp;</span> array<span class="hl opt">,</span> <span class="hl kwb">const</span> std<span class="hl opt">::</span>string<span class="hl opt">&amp;</span> name<span class="hl opt">) {</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;Loading &quot;</span> <span class="hl opt">&lt;&lt;</span> name<span class="hl opt">;</span>
  array<span class="hl opt">.</span><span class="hl kwd">resize</span><span class="hl opt">(</span>DATA_SIZE<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">);</span>

  std<span class="hl opt">::</span>ifstream <span class="hl kwd">is</span><span class="hl opt">(</span>name<span class="hl opt">.</span><span class="hl kwd">c_str</span><span class="hl opt">(),</span> std<span class="hl opt">::</span>ios<span class="hl opt">::</span>binary<span class="hl opt">|</span>std<span class="hl opt">::</span>ios<span class="hl opt">::</span>in<span class="hl opt">);</span>
  <span class="hl kwc">auto</span> <span class="hl kwb">const</span> to_load <span class="hl opt">=</span> array<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">() *</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span>array<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]);</span>
  is<span class="hl opt">.</span><span class="hl kwd">read</span><span class="hl opt">((</span><span class="hl kwb">char</span> <span class="hl opt">*)&amp;</span>array<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">],</span> to_load<span class="hl opt">);</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>is<span class="hl opt">.</span><span class="hl kwd">gcount</span><span class="hl opt">() !=</span> to_load<span class="hl opt">) {</span>
    std<span class="hl opt">::</span>cerr <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;, Bad file &quot;</span> <span class="hl opt">&lt;&lt;</span> name
      <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;, loaded &quot;</span> <span class="hl opt">&lt;&lt;</span> is<span class="hl opt">.</span><span class="hl kwd">gcount</span><span class="hl opt">() &lt;&lt;</span> <span class="hl str">&quot; words but should be &quot;</span> <span class="hl opt">&lt;&lt;</span> to_load <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">;</span>
    std<span class="hl opt">::</span><span class="hl kwd">exit</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span>
  <span class="hl opt">}</span>
  std<span class="hl opt">::</span><span class="hl kwd">for_each</span><span class="hl opt">(</span>array<span class="hl opt">.</span><span class="hl kwd">begin</span><span class="hl opt">(),</span> array<span class="hl opt">.</span><span class="hl kwd">end</span><span class="hl opt">(), [](</span>Type<span class="hl opt">&amp;</span> v<span class="hl opt">){</span> <span class="hl kwd">endian_swap</span><span class="hl opt">(</span>v<span class="hl opt">); });</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">naive_quick_sort</span><span class="hl opt">(</span>std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span>Type<span class="hl opt">&gt;::</span>iterator begin<span class="hl opt">,</span> std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span>Type<span class="hl opt">&gt;::</span>iterator end<span class="hl opt">) {</span>
  <span class="hl kwc">auto</span> <span class="hl kwb">const</span> sz <span class="hl opt">=</span> end <span class="hl opt">-</span> begin<span class="hl opt">;</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>sz <span class="hl opt">&lt;=</span> <span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>

  <span class="hl kwc">auto</span> pivot <span class="hl opt">=</span> begin <span class="hl opt">+</span> sz<span class="hl opt">/</span><span class="hl num">2</span><span class="hl opt">;</span>
  <span class="hl kwc">auto</span> <span class="hl kwb">const</span> pivot_v <span class="hl opt">= *</span>pivot<span class="hl opt">;</span>

  std<span class="hl opt">::</span><span class="hl kwd">swap</span><span class="hl opt">(*</span>pivot<span class="hl opt">, *(</span>end <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">));</span>
  <span class="hl kwc">auto</span> p <span class="hl opt">=</span> std<span class="hl opt">::</span><span class="hl kwd">partition</span><span class="hl opt">(</span>begin<span class="hl opt">,</span> end<span class="hl opt">, [&amp;](</span><span class="hl kwb">const</span> Type<span class="hl opt">&amp;</span> a<span class="hl opt">) {</span> <span class="hl kwa">return</span> a <span class="hl opt">&lt;</span> pivot_v<span class="hl opt">; } );</span>
  std<span class="hl opt">::</span><span class="hl kwd">swap</span><span class="hl opt">(*</span>p<span class="hl opt">, *(</span>end <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">));</span>

  <span class="hl kwa">if</span> <span class="hl opt">(</span>sz <span class="hl opt">&gt;</span> <span class="hl num">4096</span><span class="hl opt">) {</span>
    <span class="hl kwc">auto</span> left <span class="hl opt">=</span> std<span class="hl opt">::</span><span class="hl kwd">async</span><span class="hl opt">(</span>std<span class="hl opt">::</span>launch<span class="hl opt">::</span>async<span class="hl opt">, [&amp;]() {</span>
      <span class="hl kwa">return</span> <span class="hl kwd">naive_quick_sort</span><span class="hl opt">(</span>begin<span class="hl opt">,</span> p<span class="hl opt">);</span>
    <span class="hl opt">});</span>
    <span class="hl kwd">naive_quick_sort</span><span class="hl opt">(</span>p <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">,</span> end<span class="hl opt">);</span>
  <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
    <span class="hl kwd">naive_quick_sort</span><span class="hl opt">(</span>begin<span class="hl opt">,</span> p<span class="hl opt">);</span>
    <span class="hl kwd">naive_quick_sort</span><span class="hl opt">(</span>p <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">,</span> end<span class="hl opt">);</span>
  <span class="hl opt">}</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">quick_sort</span><span class="hl opt">(</span>std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span>Type<span class="hl opt">&gt;&amp;</span> arr<span class="hl opt">) {</span>
  <span class="hl kwd">naive_quick_sort</span><span class="hl opt">(</span>arr<span class="hl opt">.</span><span class="hl kwd">begin</span><span class="hl opt">(),</span> arr<span class="hl opt">.</span><span class="hl kwd">end</span><span class="hl opt">());</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[]) {</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>argc <span class="hl opt">==</span> <span class="hl num">2</span> <span class="hl opt">&amp;&amp; !</span>std<span class="hl opt">::</span><span class="hl kwd">strcmp</span><span class="hl opt">(</span>argv<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">],</span> <span class="hl str">&quot;generate&quot;</span><span class="hl opt">))</span>
    <span class="hl kwa">return</span> <span class="hl kwd">main_generate</span><span class="hl opt">(</span>argc<span class="hl opt">,</span> argv<span class="hl opt">);</span>

  std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span><span class="hl kwb">double</span><span class="hl opt">&gt;</span> times<span class="hl opt">;</span>
  <span class="hl kwc">auto</span> times_sum <span class="hl opt">=</span> <span class="hl num">0.0</span><span class="hl opt">;</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwc">auto</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> ITERATIONS_NUM<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
    std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span>Type<span class="hl opt">&gt;</span> unsorted<span class="hl opt">;</span>
    <span class="hl kwd">load_file</span><span class="hl opt">(</span>unsorted<span class="hl opt">,</span> <span class="hl kwd">data_file_name</span><span class="hl opt">(</span>i<span class="hl opt">,</span> <span class="hl str">&quot;&quot;</span><span class="hl opt">));</span>

    std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span>Type<span class="hl opt">&gt;</span> verify<span class="hl opt">;</span>
    std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;, &quot;</span><span class="hl opt">;</span>
    <span class="hl kwd">load_file</span><span class="hl opt">(</span>verify<span class="hl opt">,</span> <span class="hl kwd">data_file_name</span><span class="hl opt">(</span>i<span class="hl opt">,</span> <span class="hl str">&quot;_sorted&quot;</span><span class="hl opt">));</span>
    <span class="hl kwd">check_sorted</span><span class="hl opt">(</span>verify<span class="hl opt">,</span> <span class="hl str">&quot;verify array&quot;</span><span class="hl opt">);</span>

    std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;, Started&quot;</span><span class="hl opt">;</span>
    <span class="hl kwc">auto</span> start <span class="hl opt">=</span> std<span class="hl opt">::</span>chrono<span class="hl opt">::</span>high_resolution_clock<span class="hl opt">::</span><span class="hl kwd">now</span><span class="hl opt">();</span>

    <span class="hl kwd">quick_sort</span><span class="hl opt">(</span>unsorted<span class="hl opt">);</span>

    <span class="hl kwc">auto</span> stop <span class="hl opt">=</span> std<span class="hl opt">::</span>chrono<span class="hl opt">::</span>high_resolution_clock<span class="hl opt">::</span><span class="hl kwd">now</span><span class="hl opt">();</span>
    std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;, Stopped, &quot;</span><span class="hl opt">;</span>
    <span class="hl kwc">auto</span> duration <span class="hl opt">=</span> std<span class="hl opt">::</span>chrono<span class="hl opt">::</span>duration<span class="hl opt">&lt;</span><span class="hl kwb">double</span><span class="hl opt">&gt;(</span>stop <span class="hl opt">-</span> start<span class="hl opt">).</span><span class="hl kwd">count</span><span class="hl opt">();</span>
    std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> duration<span class="hl opt">;</span>

    <span class="hl kwd">check_sorted</span><span class="hl opt">(</span>unsorted<span class="hl opt">,</span> <span class="hl str">&quot;sorted array&quot;</span><span class="hl opt">);</span>

    <span class="hl kwb">const</span> <span class="hl kwc">auto</span> match <span class="hl opt">=</span> unsorted <span class="hl opt">==</span> verify<span class="hl opt">;</span>
    std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt; (</span>match ? <span class="hl str">&quot;, OK&quot;</span> <span class="hl opt">:</span> <span class="hl str">&quot;, DON'T MATCH&quot;</span><span class="hl opt">);</span>

    times<span class="hl opt">.</span><span class="hl kwd">push_back</span><span class="hl opt">(</span>duration<span class="hl opt">);</span>
    times_sum <span class="hl opt">+=</span> duration<span class="hl opt">;</span>

    std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">;</span>
  <span class="hl opt">}</span>

  <span class="hl kwc">auto</span> <span class="hl kwb">const</span> average <span class="hl opt">=</span> times_sum <span class="hl opt">/</span> ITERATIONS_NUM<span class="hl opt">;</span>
  <span class="hl kwc">auto</span> <span class="hl kwb">const</span> max_element <span class="hl opt">= *</span>std<span class="hl opt">::</span><span class="hl kwd">max_element</span><span class="hl opt">(</span>times<span class="hl opt">.</span><span class="hl kwd">begin</span><span class="hl opt">(),</span> times<span class="hl opt">.</span><span class="hl kwd">end</span><span class="hl opt">());</span>
  <span class="hl kwc">auto</span> <span class="hl kwb">const</span> min_element <span class="hl opt">= *</span>std<span class="hl opt">::</span><span class="hl kwd">min_element</span><span class="hl opt">(</span>times<span class="hl opt">.</span><span class="hl kwd">begin</span><span class="hl opt">(),</span> times<span class="hl opt">.</span><span class="hl kwd">end</span><span class="hl opt">());</span>
  <span class="hl kwc">auto</span> <span class="hl kwb">const</span> average_fixed <span class="hl opt">= (</span>times_sum <span class="hl opt">-</span> max_element <span class="hl opt">-</span> min_element<span class="hl opt">) /</span>
                             <span class="hl opt">(</span>ITERATIONS_NUM <span class="hl opt">-</span> <span class="hl num">2</span><span class="hl opt">);</span>

  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;Average: &quot;</span> <span class="hl opt">&lt;&lt;</span> average <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;s, &quot;</span> 
            <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;Average without max/min: &quot;</span>
            <span class="hl opt">&lt;&lt;</span> average_fixed <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;s.&quot;</span> <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Под занавес, картинка загрузки процессоров. Явно видны всплески на каждой итерации, когда система используется подзавязку.</p>

<p><img src="http://demin.ws/images/blog/multithreaded-quicksort-cpu-utilization.png" /></p>

<h3>Добавка</h3>

<p>В комментариях есть интересная ссылка на статью &ldquo;<a href="http://msdn.microsoft.com/en-us/library/gg663539.aspx">Dynamic Task Parallelism</a>&rdquo; от Microsort, где также приводится вариант многопоточного QuickSort&rsquo;a.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Шаблоны даты и времени в Go]]></title>
    <link href="http://demin.ws/blog/russian/2012/04/27/date-and-time-formatting-in-go/"/>
    <updated>2012-04-27T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/04/27/date-and-time-formatting-in-go/</id>
    <content type="html"><![CDATA[<p>Часто, когда надо задать формат или шаблон для даты или времени, придумывается что-то вроде <code>YYYY</code>, <code>MM</code>, <code>mm:ss</code> и т.д. Но вот в процессе написания движка для блога, я наткнулся реализацию в Go. В Go в качестве шаблона используются не особые символы, а фиксированные значения непосредственно даты или времени. Например:</p>

<pre class="hl">
<span class="hl kwa">func</span> <span class="hl kwd">format_time</span><span class="hl opt">(</span>t time<span class="hl opt">.</span>Time<span class="hl opt">)</span> <span class="hl kwb">string</span> <span class="hl opt">{</span>
  <span class="hl kwa">return</span> t<span class="hl opt">.</span><span class="hl kwd">Format</span><span class="hl opt">(</span><span class="hl str">&quot;2006.01.02-15.04.05&quot;</span><span class="hl opt">)</span>  <span class="hl slc">// Аналогично: YYYY.MM.DD-hh.mm.ss</span>
<span class="hl opt">}</span>
</pre>

<p>Вот полный набор &ldquo;волшебных&rdquo; значений (из <a href="http://golang.org/src/pkg/time/format.go">time/format.go</a>):</p>

<pre class="hl">
stdLongMonth      <span class="hl opt">=</span> <span class="hl str">&quot;January&quot;</span>
stdMonth          <span class="hl opt">=</span> <span class="hl str">&quot;Jan&quot;</span>
stdNumMonth       <span class="hl opt">=</span> <span class="hl str">&quot;1&quot;</span>
stdZeroMonth      <span class="hl opt">=</span> <span class="hl str">&quot;01&quot;</span>
stdLongWeekDay    <span class="hl opt">=</span> <span class="hl str">&quot;Monday&quot;</span>
stdWeekDay        <span class="hl opt">=</span> <span class="hl str">&quot;Mon&quot;</span>
stdDay            <span class="hl opt">=</span> <span class="hl str">&quot;2&quot;</span>
stdUnderDay       <span class="hl opt">=</span> <span class="hl str">&quot;_2&quot;</span>
stdZeroDay        <span class="hl opt">=</span> <span class="hl str">&quot;02&quot;</span>
stdHour           <span class="hl opt">=</span> <span class="hl str">&quot;15&quot;</span>
stdHour12         <span class="hl opt">=</span> <span class="hl str">&quot;3&quot;</span>
stdZeroHour12     <span class="hl opt">=</span> <span class="hl str">&quot;03&quot;</span>
stdMinute         <span class="hl opt">=</span> <span class="hl str">&quot;4&quot;</span>
stdZeroMinute     <span class="hl opt">=</span> <span class="hl str">&quot;04&quot;</span>
stdSecond         <span class="hl opt">=</span> <span class="hl str">&quot;5&quot;</span>
stdZeroSecond     <span class="hl opt">=</span> <span class="hl str">&quot;05&quot;</span>
stdLongYear       <span class="hl opt">=</span> <span class="hl str">&quot;2006&quot;</span>
stdYear           <span class="hl opt">=</span> <span class="hl str">&quot;06&quot;</span>
stdPM             <span class="hl opt">=</span> <span class="hl str">&quot;PM&quot;</span>
stdpm             <span class="hl opt">=</span> <span class="hl str">&quot;pm&quot;</span>
stdTZ             <span class="hl opt">=</span> <span class="hl str">&quot;MST&quot;</span>
stdISO8601TZ      <span class="hl opt">=</span> <span class="hl str">&quot;Z0700&quot;</span>  <span class="hl slc">// prints Z for UTC</span>
stdISO8601ColonTZ <span class="hl opt">=</span> <span class="hl str">&quot;Z07:00&quot;</span> <span class="hl slc">// prints Z for UTC</span>
stdNumTZ          <span class="hl opt">=</span> <span class="hl str">&quot;-0700&quot;</span>  <span class="hl slc">// always numeric</span>
stdNumShortTZ     <span class="hl opt">=</span> <span class="hl str">&quot;-07&quot;</span>    <span class="hl slc">// always numeric</span>
stdNumColonTZ     <span class="hl opt">=</span> <span class="hl str">&quot;-07:00&quot;</span> <span class="hl slc">// always numeric</span>
</pre>

<p>И некоторые примеры готовых шаблонов:</p>

<pre class="hl">
ANSIC       <span class="hl opt">=</span> <span class="hl str">&quot;Mon Jan _2 15:04:05 2006&quot;</span>
UnixDate    <span class="hl opt">=</span> <span class="hl str">&quot;Mon Jan _2 15:04:05 MST 2006&quot;</span>
RubyDate    <span class="hl opt">=</span> <span class="hl str">&quot;Mon Jan 02 15:04:05 -0700 2006&quot;</span>
RFC822      <span class="hl opt">=</span> <span class="hl str">&quot;02 Jan 06 15:04 MST&quot;</span>
RFC822Z     <span class="hl opt">=</span> <span class="hl str">&quot;02 Jan 06 15:04 -0700&quot;</span> <span class="hl slc">// RFC822 with numeric zone</span>
RFC850      <span class="hl opt">=</span> <span class="hl str">&quot;Monday, 02-Jan-06 15:04:05 MST&quot;</span>
RFC1123     <span class="hl opt">=</span> <span class="hl str">&quot;Mon, 02 Jan 2006 15:04:05 MST&quot;</span>
RFC1123Z    <span class="hl opt">=</span> <span class="hl str">&quot;Mon, 02 Jan 2006 15:04:05 -0700&quot;</span> <span class="hl slc">// RFC1123 with numeric zone</span>
RFC3339     <span class="hl opt">=</span> <span class="hl str">&quot;2006-01-02T15:04:05Z07:00&quot;</span>
RFC3339Nano <span class="hl opt">=</span> <span class="hl str">&quot;2006-01-02T15:04:05.999999999Z07:00&quot;</span>
Kitchen     <span class="hl opt">=</span> <span class="hl str">&quot;3:04PM&quot;</span>
<span class="hl slc">// Handy time stamps.</span>
Stamp      <span class="hl opt">=</span> <span class="hl str">&quot;Jan _2 15:04:05&quot;</span>
StampMilli <span class="hl opt">=</span> <span class="hl str">&quot;Jan _2 15:04:05.000&quot;</span>
StampMicro <span class="hl opt">=</span> <span class="hl str">&quot;Jan _2 15:04:05.000000&quot;</span>
StampNano  <span class="hl opt">=</span> <span class="hl str">&quot;Jan _2 15:04:05.000000000&quot;</span>
</pre>

<p>Я такого приема раньше не встречал, и как-то кажется сейчас, что это более наглядно.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Кто быстрее: std::endl или "\n"?]]></title>
    <link href="http://demin.ws/blog/russian/2012/04/25/endl-vs-new-line/"/>
    <updated>2012-04-25T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/04/25/endl-vs-new-line/</id>
    <content type="html"><![CDATA[<p>До сегодняшнего дня я свято верил, что в потоках <code>std::endl</code> &ndash; это всегда правильнее, чем <code>\n</code>. Переносимость, и все такое. Но, увы.</p>

<p>Код с <code>std::endl</code>:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;string&gt;</span>
<span class="hl ppc">#include &lt;iostream&gt;</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> <span class="hl num">1000000</span><span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
    std<span class="hl opt">::</span>string <span class="hl kwd">s</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl str">'x'</span><span class="hl opt">);</span>
    std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> s <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  <span class="hl opt">}</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Компилируем и запускаем:</p>

<pre><code>clang++ -o endl -O3 endl.cpp &amp;&amp; time ./endl &gt;rubbish

real    0m4.518s
user    0m1.080s
sys 0m3.311s
</code></pre>

<p>Код с <code>\n</code>:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;string&gt;</span>
<span class="hl ppc">#include &lt;iostream&gt;</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> <span class="hl num">1000000</span><span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
    std<span class="hl opt">::</span>string <span class="hl kwd">s</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl str">'x'</span><span class="hl opt">);</span>
    std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> s <span class="hl opt">&lt;&lt;</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">;</span>
  <span class="hl opt">}</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Компилируем и запускаем:</p>

<pre><code>clang++ -o endl -O3 endl.cpp &amp;&amp; time ./endl &gt;rubbish

real    0m0.263s
user    0m0.236s
sys 0m0.008s    
</code></pre>

<p>Разница очевидна.</p>

<p><code>std::endl</code> всегда <code>flush</code>ит поток, сбрасывая буфера. <code>\n</code> же просто пихает в поток символ начала новой строки, и большинстве случаев это и требуется. А когда надо, можно отдельно вызвать <code>std::flush</code>, один раз.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Josuttis N., "The C++ Standard Library: A Tutorial and Reference", 2nd edition]]></title>
    <link href="http://demin.ws/blog/russian/2012/04/25/cpp-standard-library-2nd-edition/"/>
    <updated>2012-04-25T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/04/25/cpp-standard-library-2nd-edition/</id>
    <content type="html"><![CDATA[<p>Nicolai M. Josuttis, &ldquo;The C++ Standard Library: A Tutorial and Reference&rdquo;, 2nd edition</p>

<p><a href="http://www.amazon.co.uk/gp/product/0321623215/ref=as_li_tf_il?ie=UTF8&tag=prodiy-21&linkCode=as2&camp=1634&creative=6738&creativeASIN=0321623215"><img border="0" src="http://ws.assoc-amazon.co.uk/widgets/q?_encoding=UTF8&Format=_SL160_&ASIN=0321623215&MarketPlace=GB&ID=AsinImage&WS=1&tag=prodiy-21&ServiceVersion=20070822" ></a><img src="http://www.assoc-amazon.co.uk/e/ir?t=prodiy-21&l=as2&o=2&a=0321623215" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p>Вчера приехала эта книга. Хотел я что-то конкретное написать, но передумал, ибо в этом нет смысла. Книгу надо просто иметь, если есть интерес в новом стандарте C++ сегодня. Тут приводится исчерпывающее описание новой версии STL, естественно, с описанием новых возможностей самого языка. Много примеров. Как мне кажется, это пока первая книга по C++ 2011 такого калибра.</p>

<p>Лично мне пока даже просто интересно листать оглавление и глядеть, что и как вообще есть в новом языке и библиотеках (например, открыл для себя существование <a href="http://en.cppreference.com/w/cpp/chrono">chrono</a>).</p>

<h3>P.S.</h3>

<p>Чтобы два раза не вставать. Обычно я пользуюсь сайтом <a href="http://www.cplusplus.com/">http://www.cplusplus.com/</a> качестве справочника по C++. Для нового стандарта появился еще один &ndash; <a href="http://en.cppreference.com/w/">http://en.cppreference.com/w/</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA["Живое" программирование на circa]]></title>
    <link href="http://demin.ws/blog/russian/2012/04/24/live-programming-in-circa/"/>
    <updated>2012-04-24T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/04/24/live-programming-in-circa/</id>
    <content type="html"><![CDATA[<p>Помните удивительную презентацию от Bret Victor &ldquo;<a href="http://vimeo.com/36579366">Inventing on Principle</a>&rdquo;?</p>

<p>Такой подход называется live coding (типа, что пишу, то и сразу вижу).</p>

<p>Честно говоря, я думал, что очень многое из его демонстраций - это хардкод. Но оказывается, есть реальный язык, который можно пощупать, дающий схожие возможности. Зацените видеo:</p>

<iframe src="http://player.vimeo.com/video/23773218" width="400" height="300" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>

<p>Язык называется <a href="http://circa-lang.org">circa</a>. Пока только в статусе alpha. По моему дилетантскому в разработке игр мнению, это очень удобно для отлаживания gameplay&rsquo;я, хотя бы для 2D игр.</p>

<p>Интересная <a href="http://circa-lang.org/about/inlined_state.html">статья автора про подход по сохранению состояния runtime&rsquo;а</a> во время изменений кода &ldquo;наживую&rdquo;.</p>

<p><a href="http://livecoding.co.uk/doku.php/videos">Подборочка видео из этой же серии</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Тест: что дано, при каком условии, что требуется доказать]]></title>
    <link href="http://demin.ws/blog/russian/2012/04/23/test-given-when-then/"/>
    <updated>2012-04-23T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/04/23/test-given-when-then/</id>
    <content type="html"><![CDATA[<p>После тренинга <a href="http://demin.ws/blog/russian/2010/04/28/programming-with-guts/">Кевлина Хенни</a>, я понял, что отсутствие под рукой удобной библиотеки для unit тестирования не является причиной его не использовать. Макрос <code>assert</code>, который есть везде, является достаточным условием для использования тестов.</p>

<p>Например, есть мини-проект в один файл, и не охота тащить Google Test или cmockery. Я обычно делаю что-то такое:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;cassert&gt;</span>

<span class="hl kwb">void</span> <span class="hl kwd">foo</span><span class="hl opt">(...) {</span>
  <span class="hl slc">// something</span>
<span class="hl opt">}</span>

<span class="hl opt">...</span>

<span class="hl ppc">#ifdef UNIT_TESTING</span>
<span class="hl kwb">void</span> <span class="hl kwd">Test_for_a_particular_use_case</span><span class="hl opt">() {</span>
  <span class="hl slc">// Initialization</span>
  <span class="hl opt">...</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>condition_1<span class="hl opt">);</span>
  <span class="hl opt">...</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>condition_N<span class="hl opt">);</span>
<span class="hl opt">}</span>
<span class="hl opt">...</span>
<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(...) {</span>
  <span class="hl kwd">Test_for_a_particular_use_case</span><span class="hl opt">();</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> “All tests passed<span class="hl opt">.</span>” <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl ppc">#else</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(...) {</span>
  <span class="hl slc">// a proper main</span>
<span class="hl opt">}</span>

<span class="hl ppc">#endif</span>
</pre>

<p>Тут, конечно, не так удобно, так как иногда забываешь добавить запуск теста в <code>main()</code>, и вроде как бы все работает, но на самом деле просто тест не запускается.</p>

<p>Но! Все это мелочи, по сравнению с удобством, которое дают тесты.</p>

<h3>P.S.</h3>

<p>Кстати, заметил за собой интересую привычку. Практически всегда, когда пишу функцию, работающую с файлами, всегда рождаются две, например:</p>

<pre class="hl">
<span class="hl kwb">void</span> <span class="hl kwd">FunctionDoingSomethingFromStream</span><span class="hl opt">(</span>std<span class="hl opt">::</span>istream<span class="hl opt">*</span> is<span class="hl opt">) {</span>
  <span class="hl opt">...</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">FunctionDoingSomethingFromFile</span><span class="hl opt">(</span><span class="hl kwb">const</span> std<span class="hl opt">::</span>string<span class="hl opt">&amp;</span> filename<span class="hl opt">) {</span>
  std<span class="hl opt">::</span>ifstream <span class="hl kwd">is</span><span class="hl opt">(</span>filename<span class="hl opt">);</span>
  <span class="hl kwa">return</span> <span class="hl kwd">FunctionDoingSomethingFromStream</span><span class="hl opt">(&amp;</span>is<span class="hl opt">);</span>  
<span class="hl opt">}</span>
</pre>

<p>Первая функция прекрасно тестируется, так как ей можно подсунуть <code>std::istringstream</code> с тестовыми данными. Вторую же можно практически не тестировать (ну разве что на фазе QA, на реальных файлах, но не в unit-тестах в процессе сборки).</p>

<p>Еще интересный приемчик от Кевлина Хенни. У теста обычно есть объект тестирования (класс или функция), начальное условие (pre-condition) и конечное состояние (post-condition). И данные фазы удобно подчеркнуть в комментариях словами “Given”, “When” и “Then”, например:</p>

<pre class="hl">
<span class="hl kwb">void</span> <span class="hl kwd">Test_for_a_particular_use_case_to_check</span><span class="hl opt">() {</span>
  <span class="hl slc">// Given:</span>
  ClassToTest a<span class="hl opt">;</span>
  <span class="hl slc">// When:</span>
  a<span class="hl opt">.</span><span class="hl kwd">do_this</span><span class="hl opt">(...);</span>
  a<span class="hl opt">.</span><span class="hl kwd">do_that</span><span class="hl opt">(...);</span>
  a<span class="hl opt">.</span><span class="hl kwd">setup_something</span><span class="hl opt">(...);</span>
  <span class="hl slc">// Then:</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>condition_1<span class="hl opt">);</span>
  <span class="hl opt">...</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>condition_N<span class="hl opt">);</span>
<span class="hl opt">}</span>
</pre>

<p>Явное разделение этих фаз провоцирует правильную структуру теста: без циклов и условий, и работа только по одному сценарию (для другого сценария будет другой тест).</p>

<p>&#9632;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vcprompt - информация о SCM в командной строке]]></title>
    <link href="http://demin.ws/blog/russian/2012/04/23/vcprompt/"/>
    <updated>2012-04-23T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/04/23/vcprompt/</id>
    <content type="html"><![CDATA[<p>Порой, работая с git в командной, забываешь, в какой ветке ты сейчас. На выручку приходит <a href="https://github.com/djl/vcprompt">vcprompt</a>, который позволяет прямо в приглашении командной строки видеть разнообразную информацию от текущем репозитории, например, название текущей ветки, или признак наличия изменения к локальных файлах и т.д.</p>

<p>Вот, например, моя переменная <code>PS1</code>:</p>

<pre><code>\W `vcprompt -f &quot;%m%u %s:%b&quot;`\$
</code></pre>

<p>И мое приглашение в <code>bash</code> выглядит, например, так:</p>

<pre><code>_engine +? git:master$
</code></pre>

<p>Я вижу, что я в каталоге <code>_engine</code>, в каталоге существует репозиторий git, текущая ветка <code>master</code>, есть измененные файлы (<code>+</code>), и есть новые, еще не добавленные в git файлы (<code>?</code>). Если в текущем каталоге нет никакого репозитория, приглашения будет как обычно.</p>

<p>vcprompt поддерживает не только git, а также bzr, cvs, darcs, fossil, hg, svn.</p>

<p>Написана на Питоне. Увы, для Windows, скорее все, прикрутить не получится.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TCP/IP proxy на Go]]></title>
    <link href="http://demin.ws/blog/russian/2012/04/21/tcpip-proxy-in-go/"/>
    <updated>2012-04-21T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/04/21/tcpip-proxy-in-go/</id>
    <content type="html"><![CDATA[<p>Я снова вернулся к любимой <a href="http://demin.ws/blog/russian/2011/11/19/problem-to-try-new-languages/">задаче для освоения новых языков</a>. После <a href="http://demin.ws/blog/russian/2012/04/17/static-blog-engine-goblog/">написания движка для блога на Go</a>, захотелось снова поразмять пальцы, болезный TCP/IP proxy/debugger теперь написан на Go.</p>

<p>Вкратце, TCP/IP proxy - это программа, которая умеет принимать соединения и &ldquo;пробрасывать&rdquo; их на указанный адрес. Попутно ведутся логи переданных данных. Это очень удобно при отладке различных самодельных сетевых протоколов.</p>

<p>В плане функциональности версия на Go, как и <a href="http://demin.ws/blog/russian/2011/11/26/improved-tcpip-proxy-in-erlang/">эрланговская</a>, ведет три лога: двунаправленный шестнадцатеричный дамп и бинарные логи в обоих направлениях, &ldquo;от&rdquo; и &ldquo;к&rdquo; удаленному хосту. <a href="http://demin.ws/blog/russian/2009/09/04/multi-threaded-tcpip-debugger/">Питоновская версия</a> бинарные логи не ведет.</p>

<p>Конечно, все многопоточно. И так как в Go параллельное программирование настолько просто (и безопасно), количество параллельных активностей для каждого соединения даже больше, чем в версии на Эрланге.</p>

<p>На Эрланге для каждого соединения работали следующие четыре потока:</p>

<ul>
<li>двунаправленный дамп-логгер</li>
<li>два потока для двоичных логов принимаемых и посылаемых данных</li>
<li>главный поток, мультиплексирующий чтение из локального и удаленного сокетов</li>
</ul>

<p>В версии на Go немного иначе:</p>

<ul>
<li>двунаправленный дамп-логгер</li>
<li>два потока для двоичных логов принимаемых и посылаемых данных</li>
<li>два <strong>независимых</strong> потока для чтения из локального и удаленного сокета</li>
</ul>

<p>Итого, 5.</p>

<p>В обоих случаях потоки чтения логируют данные, посылая сообщения потокам-логгерам. Конечно, нет никаких глупостей типа мьютексов или условных переменных. Проблемы согласования элегантно решаются через каналы Go.</p>

<p>Ниже привожу исходник. Он отличается от того, что в репозитории, наличием обильных комментариев. Для людей, не очень знакомых с Go, могут быть интересны некоторые моменты.</p>

<pre class="hl">
<span class="hl kwa">package</span> main

<span class="hl kwa">import</span> <span class="hl opt">(</span>
  <span class="hl str">&quot;flag&quot;</span>
  <span class="hl str">&quot;fmt&quot;</span>
  <span class="hl str">&quot;net&quot;</span>
  <span class="hl str">&quot;os&quot;</span>
  <span class="hl str">&quot;strings&quot;</span>
  <span class="hl str">&quot;time&quot;</span>
  <span class="hl str">&quot;encoding/hex&quot;</span>
  <span class="hl str">&quot;runtime&quot;</span>
<span class="hl opt">)</span>

<span class="hl kwa">var</span> <span class="hl opt">(</span>
  host        <span class="hl opt">*</span><span class="hl kwb">string</span> <span class="hl opt">=</span> flag<span class="hl opt">.</span><span class="hl kwd">String</span><span class="hl opt">(</span><span class="hl str">&quot;host&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;target host or address&quot;</span><span class="hl opt">)</span>
  port        <span class="hl opt">*</span><span class="hl kwb">string</span> <span class="hl opt">=</span> flag<span class="hl opt">.</span><span class="hl kwd">String</span><span class="hl opt">(</span><span class="hl str">&quot;port&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;0&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;target port&quot;</span><span class="hl opt">)</span>
  listen_port <span class="hl opt">*</span><span class="hl kwb">string</span> <span class="hl opt">=</span> flag<span class="hl opt">.</span><span class="hl kwd">String</span><span class="hl opt">(</span><span class="hl str">&quot;listen_port&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;0&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;listen port&quot;</span><span class="hl opt">)</span>
<span class="hl opt">)</span>

<span class="hl kwa">func</span> <span class="hl kwd">die</span><span class="hl opt">(</span>format <span class="hl kwb">string</span><span class="hl opt">,</span> v <span class="hl opt">...</span><span class="hl kwa">interface</span><span class="hl opt">{}) {</span>
  os<span class="hl opt">.</span>Stderr<span class="hl opt">.</span><span class="hl kwd">WriteString</span><span class="hl opt">(</span>fmt<span class="hl opt">.</span><span class="hl kwd">Sprintf</span><span class="hl opt">(</span>format<span class="hl opt">+</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> v<span class="hl opt">...))</span>
  os<span class="hl opt">.</span><span class="hl kwd">Exit</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">)</span>
<span class="hl opt">}</span>

<span class="hl slc">// Данная функция реализует поток для двунаправленного дампа. </span>
<span class="hl kwa">func</span> <span class="hl kwd">connection_logger</span><span class="hl opt">(</span>data <span class="hl kwa">chan</span> <span class="hl opt">[]</span><span class="hl kwb">byte</span><span class="hl opt">,</span> conn_n <span class="hl kwb">int</span><span class="hl opt">,</span> local_info<span class="hl opt">,</span> remote_info <span class="hl kwb">string</span><span class="hl opt">) {</span>
  log_name <span class="hl opt">:=</span> fmt<span class="hl opt">.</span><span class="hl kwd">Sprintf</span><span class="hl opt">(</span><span class="hl str">&quot;log-%s-%04d-%s-%s.log&quot;</span><span class="hl opt">,</span> <span class="hl kwd">format_time</span><span class="hl opt">(</span>time<span class="hl opt">.</span><span class="hl kwd">Now</span><span class="hl opt">()),</span>
                          conn_n<span class="hl opt">,</span> local_info<span class="hl opt">,</span> remote_info<span class="hl opt">)</span>
  <span class="hl kwd">logger_loop</span><span class="hl opt">(</span>data<span class="hl opt">,</span> log_name<span class="hl opt">)</span>
<span class="hl opt">}</span>

<span class="hl slc">// Данная функция реализует двоичный лог.</span>
<span class="hl kwa">func</span> <span class="hl kwd">binary_logger</span><span class="hl opt">(</span>data <span class="hl kwa">chan</span> <span class="hl opt">[]</span><span class="hl kwb">byte</span><span class="hl opt">,</span> conn_n <span class="hl kwb">int</span><span class="hl opt">,</span> peer <span class="hl kwb">string</span><span class="hl opt">) {</span>
  log_name <span class="hl opt">:=</span> fmt<span class="hl opt">.</span><span class="hl kwd">Sprintf</span><span class="hl opt">(</span><span class="hl str">&quot;log-binary-%s-%04d-%s.log&quot;</span><span class="hl opt">,</span> <span class="hl kwd">format_time</span><span class="hl opt">(</span>time<span class="hl opt">.</span><span class="hl kwd">Now</span><span class="hl opt">()),</span>
                           conn_n<span class="hl opt">,</span> peer<span class="hl opt">)</span>
  <span class="hl kwd">logger_loop</span><span class="hl opt">(</span>data<span class="hl opt">,</span> log_name<span class="hl opt">)</span>
<span class="hl opt">}</span>

<span class="hl slc">// Данная функция реализует поток логирования. Создает лог-файл и начинает</span>
<span class="hl slc">// принимает сообщения. Каждое сообщение - это кусок данных для помещения</span>
<span class="hl slc">// в лог. Если пришли пустые данные - выходим.</span>
<span class="hl slc">//</span>
<span class="hl kwa">func</span> <span class="hl kwd">logger_loop</span><span class="hl opt">(</span>data <span class="hl kwa">chan</span> <span class="hl opt">[]</span><span class="hl kwb">byte</span><span class="hl opt">,</span> log_name <span class="hl kwb">string</span><span class="hl opt">) {</span>
  f<span class="hl opt">,</span> err <span class="hl opt">:=</span> os<span class="hl opt">.</span><span class="hl kwd">Create</span><span class="hl opt">(</span>log_name<span class="hl opt">)</span>
  <span class="hl kwa">if</span> err <span class="hl opt">!=</span> <span class="hl kwb">nil</span> <span class="hl opt">{</span>
    <span class="hl kwd">die</span><span class="hl opt">(</span><span class="hl str">&quot;Unable to create file %s, %v</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> log_name<span class="hl opt">,</span> err<span class="hl opt">)</span>
  <span class="hl opt">}</span>
  <span class="hl kwa">defer</span> f<span class="hl opt">.</span><span class="hl kwd">Close</span><span class="hl opt">()</span>  <span class="hl slc">// Гарантируем закрытие файла в случае падения.</span>
  <span class="hl kwa">for</span> <span class="hl opt">{</span>
    b <span class="hl opt">:= &lt;-</span>data
    <span class="hl kwa">if</span> <span class="hl kwb">len</span><span class="hl opt">(</span>b<span class="hl opt">) ==</span> <span class="hl num">0</span> <span class="hl opt">{</span>
      <span class="hl kwa">break</span>
    <span class="hl opt">}</span>
    f<span class="hl opt">.</span><span class="hl kwd">Write</span><span class="hl opt">(</span>b<span class="hl opt">)</span>
    f<span class="hl opt">.</span><span class="hl kwd">Sync</span><span class="hl opt">()</span>       <span class="hl slc">// На всякий случай flush'имся.</span>
  <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwa">func</span> <span class="hl kwd">format_time</span><span class="hl opt">(</span>t time<span class="hl opt">.</span>Time<span class="hl opt">)</span> <span class="hl kwb">string</span> <span class="hl opt">{</span>
  <span class="hl kwa">return</span> t<span class="hl opt">.</span><span class="hl kwd">Format</span><span class="hl opt">(</span><span class="hl str">&quot;2006.01.02-15.04.05&quot;</span><span class="hl opt">)</span>
<span class="hl opt">}</span>

<span class="hl kwa">func</span> <span class="hl kwd">printable_addr</span><span class="hl opt">(</span>a net<span class="hl opt">.</span>Addr<span class="hl opt">)</span> <span class="hl kwb">string</span> <span class="hl opt">{</span>
  <span class="hl kwa">return</span> strings<span class="hl opt">.</span><span class="hl kwd">Replace</span><span class="hl opt">(</span>a<span class="hl opt">.</span><span class="hl kwd">String</span><span class="hl opt">(),</span> <span class="hl str">&quot;:&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;-&quot;</span><span class="hl opt">, -</span><span class="hl num">1</span><span class="hl opt">)</span>
<span class="hl opt">}</span>

<span class="hl slc">// Структура, в которой передаются параметры соединения. Объединено, чтобы</span>
<span class="hl slc">// не таскать много параметров.</span>
<span class="hl kwa">type</span> Channel <span class="hl kwa">struct</span> <span class="hl opt">{</span>
  from<span class="hl opt">,</span> to net<span class="hl opt">.</span>Conn
  logger<span class="hl opt">,</span> binary_logger <span class="hl kwa">chan</span> <span class="hl opt">[]</span><span class="hl kwb">byte</span>
  ack <span class="hl kwa">chan</span> <span class="hl kwb">bool</span>
<span class="hl opt">}</span>

<span class="hl slc">// Функция, &quot;качающая&quot; данные из одного сокета и передающая их в другой.</span>
<span class="hl slc">// Попутно ведется логирование.</span>
<span class="hl kwa">func</span> <span class="hl kwd">pass_through</span><span class="hl opt">(</span>c <span class="hl opt">*</span>Channel<span class="hl opt">) {</span>
  from_peer <span class="hl opt">:=</span> <span class="hl kwd">printable_addr</span><span class="hl opt">(</span>c<span class="hl opt">.</span>from<span class="hl opt">.</span><span class="hl kwd">LocalAddr</span><span class="hl opt">())</span>
  to_peer <span class="hl opt">:=</span> <span class="hl kwd">printable_addr</span><span class="hl opt">(</span>c<span class="hl opt">.</span>to<span class="hl opt">.</span><span class="hl kwd">LocalAddr</span><span class="hl opt">())</span>

  b <span class="hl opt">:=</span> <span class="hl kwb">make</span><span class="hl opt">([]</span><span class="hl kwb">byte</span><span class="hl opt">,</span> <span class="hl num">10240</span><span class="hl opt">)</span>
  offset <span class="hl opt">:=</span> <span class="hl num">0</span>
  packet_n <span class="hl opt">:=</span> <span class="hl num">0</span>
  <span class="hl kwa">for</span> <span class="hl opt">{</span>
    n<span class="hl opt">,</span> err <span class="hl opt">:=</span> c<span class="hl opt">.</span>from<span class="hl opt">.</span><span class="hl kwd">Read</span><span class="hl opt">(</span>b<span class="hl opt">)</span>
    <span class="hl kwa">if</span> err <span class="hl opt">!=</span> <span class="hl kwb">nil</span> <span class="hl opt">{</span>
      c<span class="hl opt">.</span>logger <span class="hl opt">&lt;- []</span><span class="hl kwb">byte</span><span class="hl opt">(</span>fmt<span class="hl opt">.</span><span class="hl kwd">Sprintf</span><span class="hl opt">(</span><span class="hl str">&quot;Disconnected from %s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> from_peer<span class="hl opt">))</span>
      <span class="hl kwa">break</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">if</span> n <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl opt">{</span>
      <span class="hl slc">// Если что-то пришло, то логируем и пересылаем на выход.</span>
      c<span class="hl opt">.</span>logger <span class="hl opt">&lt;- []</span><span class="hl kwb">byte</span><span class="hl opt">(</span>fmt<span class="hl opt">.</span><span class="hl kwd">Sprintf</span><span class="hl opt">(</span><span class="hl str">&quot;Received (#%d, %08X) %d bytes from %s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> 
                                     packet_n<span class="hl opt">,</span> offset<span class="hl opt">,</span> n<span class="hl opt">,</span> from_peer<span class="hl opt">))</span>
      <span class="hl slc">// Это все, что нужно для преобразования в hex-дамп. Удобно, не так ли?</span>
      c<span class="hl opt">.</span>logger <span class="hl opt">&lt;- []</span><span class="hl kwb">byte</span><span class="hl opt">(</span>hex<span class="hl opt">.</span><span class="hl kwd">Dump</span><span class="hl opt">(</span>b<span class="hl opt">[:</span>n<span class="hl opt">]))</span>
      c<span class="hl opt">.</span>binary_logger <span class="hl opt">&lt;-</span> b<span class="hl opt">[:</span>n<span class="hl opt">]</span>
      c<span class="hl opt">.</span>to<span class="hl opt">.</span><span class="hl kwd">Write</span><span class="hl opt">(</span>b<span class="hl opt">[:</span>n<span class="hl opt">])</span>
      c<span class="hl opt">.</span>logger <span class="hl opt">&lt;- []</span><span class="hl kwb">byte</span><span class="hl opt">(</span>fmt<span class="hl opt">.</span><span class="hl kwd">Sprintf</span><span class="hl opt">(</span><span class="hl str">&quot;Sent (#%d) to %s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> packet_n<span class="hl opt">,</span> to_peer<span class="hl opt">))</span>
      offset <span class="hl opt">+=</span> n
      packet_n <span class="hl opt">+=</span> <span class="hl num">1</span>
    <span class="hl opt">}</span>
  <span class="hl opt">}</span>
  c<span class="hl opt">.</span>from<span class="hl opt">.</span><span class="hl kwd">Close</span><span class="hl opt">()</span>
  c<span class="hl opt">.</span>to<span class="hl opt">.</span><span class="hl kwd">Close</span><span class="hl opt">()</span>
  c<span class="hl opt">.</span>ack <span class="hl opt">&lt;-</span> <span class="hl kwb">true</span>   <span class="hl slc">// Посылаем сообщение в главный поток, что мы закончили.</span>
<span class="hl opt">}</span>

<span class="hl slc">// Данная функция обслуживает соединение. Запускает необходимые потоки и ждет</span>
<span class="hl slc">// их завершения.</span>
<span class="hl kwa">func</span> <span class="hl kwd">process_connection</span><span class="hl opt">(</span>local net<span class="hl opt">.</span>Conn<span class="hl opt">,</span> conn_n <span class="hl kwb">int</span><span class="hl opt">,</span> target <span class="hl kwb">string</span><span class="hl opt">) {</span>
  <span class="hl slc">// Соединяемся к удаленном сокету, куда будем пересылать данные.</span>
  remote<span class="hl opt">,</span> err <span class="hl opt">:=</span> net<span class="hl opt">.</span><span class="hl kwd">Dial</span><span class="hl opt">(</span><span class="hl str">&quot;tcp&quot;</span><span class="hl opt">,</span> target<span class="hl opt">)</span>
  <span class="hl kwa">if</span> err <span class="hl opt">!=</span> <span class="hl kwb">nil</span> <span class="hl opt">{</span>
    fmt<span class="hl opt">.</span><span class="hl kwd">Printf</span><span class="hl opt">(</span><span class="hl str">&quot;Unable to connect to %s, %v</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> target<span class="hl opt">,</span> err<span class="hl opt">)</span>
  <span class="hl opt">}</span>
  
  local_info <span class="hl opt">:=</span> <span class="hl kwd">printable_addr</span><span class="hl opt">(</span>remote<span class="hl opt">.</span><span class="hl kwd">LocalAddr</span><span class="hl opt">())</span>
  remote_info <span class="hl opt">:=</span> <span class="hl kwd">printable_addr</span><span class="hl opt">(</span>remote<span class="hl opt">.</span><span class="hl kwd">RemoteAddr</span><span class="hl opt">())</span>

  <span class="hl slc">// Засекаем начальное время.</span>
  started <span class="hl opt">:=</span> time<span class="hl opt">.</span><span class="hl kwd">Now</span><span class="hl opt">()</span>
  
  <span class="hl slc">// Создаем каналы для обмена с логгерами.</span>
  logger <span class="hl opt">:=</span> <span class="hl kwb">make</span><span class="hl opt">(</span><span class="hl kwa">chan</span> <span class="hl opt">[]</span><span class="hl kwb">byte</span><span class="hl opt">)</span>
  from_logger <span class="hl opt">:=</span> <span class="hl kwb">make</span><span class="hl opt">(</span><span class="hl kwa">chan</span> <span class="hl opt">[]</span><span class="hl kwb">byte</span><span class="hl opt">)</span>
  to_logger <span class="hl opt">:=</span> <span class="hl kwb">make</span><span class="hl opt">(</span><span class="hl kwa">chan</span> <span class="hl opt">[]</span><span class="hl kwb">byte</span><span class="hl opt">)</span>

  <span class="hl slc">// Канал для получения подтверждений от качающих потоков.</span>
  ack <span class="hl opt">:=</span> <span class="hl kwb">make</span><span class="hl opt">(</span><span class="hl kwa">chan</span> <span class="hl kwb">bool</span><span class="hl opt">)</span>

  <span class="hl slc">// Запускаем логгеры.</span>
  <span class="hl kwa">go</span> <span class="hl kwd">connection_logger</span><span class="hl opt">(</span>logger<span class="hl opt">,</span> conn_n<span class="hl opt">,</span> local_info<span class="hl opt">,</span> remote_info<span class="hl opt">)</span>
  <span class="hl kwa">go</span> <span class="hl kwd">binary_logger</span><span class="hl opt">(</span>from_logger<span class="hl opt">,</span> conn_n<span class="hl opt">,</span> local_info<span class="hl opt">)</span>
  <span class="hl kwa">go</span> <span class="hl kwd">binary_logger</span><span class="hl opt">(</span>to_logger<span class="hl opt">,</span> conn_n<span class="hl opt">,</span> remote_info<span class="hl opt">)</span>

  logger <span class="hl opt">&lt;- []</span><span class="hl kwb">byte</span><span class="hl opt">(</span>fmt<span class="hl opt">.</span><span class="hl kwd">Sprintf</span><span class="hl opt">(</span><span class="hl str">&quot;Connected to %s at %s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> target<span class="hl opt">,</span>
                               <span class="hl kwd">format_time</span><span class="hl opt">(</span>started<span class="hl opt">)))</span>

  <span class="hl slc">// Запускаем качающие потоки.</span>
  <span class="hl kwa">go</span> <span class="hl kwd">pass_through</span><span class="hl opt">(&amp;</span>Channel<span class="hl opt">{</span>remote<span class="hl opt">,</span> local<span class="hl opt">,</span> logger<span class="hl opt">,</span> to_logger<span class="hl opt">,</span> ack<span class="hl opt">})</span>
  <span class="hl kwa">go</span> <span class="hl kwd">pass_through</span><span class="hl opt">(&amp;</span>Channel<span class="hl opt">{</span>local<span class="hl opt">,</span> remote<span class="hl opt">,</span> logger<span class="hl opt">,</span> from_logger<span class="hl opt">,</span> ack<span class="hl opt">})</span>

  <span class="hl slc">// Ждем подтверждения об их завершении.</span>
  <span class="hl opt">&lt;-</span>ack
  <span class="hl opt">&lt;-</span>ack

  <span class="hl slc">// Вычисляем длительность соединения.</span>
  finished <span class="hl opt">:=</span> time<span class="hl opt">.</span><span class="hl kwd">Now</span><span class="hl opt">()</span>
  duration <span class="hl opt">:=</span> finished<span class="hl opt">.</span><span class="hl kwd">Sub</span><span class="hl opt">(</span>started<span class="hl opt">)</span>
  logger <span class="hl opt">&lt;- []</span><span class="hl kwb">byte</span><span class="hl opt">(</span>fmt<span class="hl opt">.</span><span class="hl kwd">Sprintf</span><span class="hl opt">(</span><span class="hl str">&quot;Finished at %s, duration %s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span>
                               <span class="hl kwd">format_time</span><span class="hl opt">(</span>started<span class="hl opt">),</span> duration<span class="hl opt">.</span><span class="hl kwd">String</span><span class="hl opt">()))</span>

  <span class="hl slc">// Посылаем логгерам команды закругляться. Мы тут не ждем от них</span>
  <span class="hl slc">// подтверждения, так как они и так завершатся рано или поздно, а они нам</span>
  <span class="hl slc">// более не нужны.</span>
  logger <span class="hl opt">&lt;- []</span><span class="hl kwb">byte</span><span class="hl opt">{}</span>
  from_logger <span class="hl opt">&lt;- []</span><span class="hl kwb">byte</span><span class="hl opt">{}</span>
  to_logger <span class="hl opt">&lt;- []</span><span class="hl kwb">byte</span><span class="hl opt">{}</span>
<span class="hl opt">}</span>

<span class="hl kwa">func</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
  <span class="hl slc">// Просим Go использовать все имеющиеся в системе процессоры.</span>
  runtime<span class="hl opt">.</span><span class="hl kwd">GOMAXPROCS</span><span class="hl opt">(</span>runtime<span class="hl opt">.</span><span class="hl kwd">NumCPU</span><span class="hl opt">())</span>
  <span class="hl slc">// Разбираем командную строку (несложно, не правда ли?)</span>
  flag<span class="hl opt">.</span><span class="hl kwd">Parse</span><span class="hl opt">()</span>
  <span class="hl kwa">if</span> flag<span class="hl opt">.</span><span class="hl kwd">NFlag</span><span class="hl opt">() !=</span> <span class="hl num">3</span> <span class="hl opt">{</span>
    fmt<span class="hl opt">.</span><span class="hl kwd">Printf</span><span class="hl opt">(</span><span class="hl str">&quot;usage: gotcpspy -host target_host -port target_port -listen_post=local_port</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">)</span>
    flag<span class="hl opt">.</span><span class="hl kwd">PrintDefaults</span><span class="hl opt">()</span>
    os<span class="hl opt">.</span><span class="hl kwd">Exit</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">)</span>
  <span class="hl opt">}</span>
  target <span class="hl opt">:=</span> net<span class="hl opt">.</span><span class="hl kwd">JoinHostPort</span><span class="hl opt">(*</span>host<span class="hl opt">, *</span>port<span class="hl opt">)</span>
  fmt<span class="hl opt">.</span><span class="hl kwd">Printf</span><span class="hl opt">(</span><span class="hl str">&quot;Start listening on port %s and forwarding data to %s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span>
             <span class="hl opt">*</span>listen_port<span class="hl opt">,</span> target<span class="hl opt">)</span>

  ln<span class="hl opt">,</span> err <span class="hl opt">:=</span> net<span class="hl opt">.</span><span class="hl kwd">Listen</span><span class="hl opt">(</span><span class="hl str">&quot;tcp&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;:&quot;</span><span class="hl opt">+*</span>listen_port<span class="hl opt">)</span>
  <span class="hl kwa">if</span> err <span class="hl opt">!=</span> <span class="hl kwb">nil</span> <span class="hl opt">{</span>
    fmt<span class="hl opt">.</span><span class="hl kwd">Printf</span><span class="hl opt">(</span><span class="hl str">&quot;Unable to start listener, %v</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> err<span class="hl opt">)</span>
    os<span class="hl opt">.</span><span class="hl kwd">Exit</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">)</span>
  <span class="hl opt">}</span>
  conn_n <span class="hl opt">:=</span> <span class="hl num">1</span>
  <span class="hl kwa">for</span> <span class="hl opt">{</span>
    <span class="hl slc">// Ждем новых соединений.</span>
    <span class="hl kwa">if</span> conn<span class="hl opt">,</span> err <span class="hl opt">:=</span> ln<span class="hl opt">.</span><span class="hl kwd">Accept</span><span class="hl opt">();</span> err <span class="hl opt">==</span> <span class="hl kwb">nil</span> <span class="hl opt">{</span>
      <span class="hl slc">// Запускаем поток обработки соединения.</span>
      <span class="hl kwa">go</span> <span class="hl kwd">process_connection</span><span class="hl opt">(</span>conn<span class="hl opt">,</span> conn_n<span class="hl opt">,</span> target<span class="hl opt">)</span>
      conn_n <span class="hl opt">+=</span> <span class="hl num">1</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
      fmt<span class="hl opt">.</span><span class="hl kwd">Printf</span><span class="hl opt">(</span><span class="hl str">&quot;Accept failed, %v</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> err<span class="hl opt">)</span>
    <span class="hl opt">}</span>
  <span class="hl opt">}</span>
<span class="hl opt">}</span>
</pre>

<p>Повторюсь, каждое соединения обслуживается <strong>пятью</strong> потоками. И сделал я это не ради прикола. Просто мне показалось, что логически есть явно независимые подзадачи, которые было бы логично запустить параллельно. Если б я писал все на C++/boost, я б скорее всего замутил все одном потоке для каждого соединения (а может быть и вся программа была бы чисто однопотоковой через какие-нибудь изощренные библиотеки мультиплексирования), и не исключено, что на C++ в итоге еще и работало бы быстрее, несмотря на один поток. Но я хочу сказать не об этом. Go подталкивает на многопоточное программирование (а не отталкивает, как C++, даже на стероидах нового стандарта). Так или иначе, будут задачи, где удобная многопоточность станет ключевым фактором.</p>

<p>Запустить можно так (требуется как минимум Go релиз 1):</p>

<pre><code>go run gotcpspy.go -host pop.yandex.ru -port 110 -local_port 8080
</code></pre>

<p>Выведется:</p>

<pre><code>Start listening on port 8080 and forwarding data to pop.yandex.ru:110
</code></pre>

<p>Затем, если в другом окне ввести:</p>

<pre><code>telnet localhost 8080
</code></pre>

<p>и ввести, например, <code>USER test</code> <code>&lt;ENTER&gt;</code> и <code>PASS none</code> <code>&lt;ENTER&gt;</code>, то будут созданы три лога (дата в имени будет, конечно, другая).</p>

<p>Общий лог <code>log-2012.04.20-19.55.17-0001-192.168.1.41-49544-213.180.204.37-110.log</code>:</p>

<pre><code>Connected to pop.yandex.ru:110 at 2012.04.20-19.55.17
Received (#0, 00000000) 38 bytes from 192.168.1.41-49544
00000000  2b 4f 4b 20 50 4f 50 20  59 61 21 20 76 31 2e 30  |+OK POP Ya! v1.0|
00000010  2e 30 6e 61 40 32 36 20  48 74 6a 4a 69 74 63 50  |.0na@26 HtjJitcP|
00000020  52 75 51 31 0d 0a                                 |RuQ1..|
Sent (#0) to [--1]-8080
Received (#0, 00000000) 11 bytes from [--1]-8080
00000000  55 53 45 52 20 74 65 73  74 0d 0a                 |USER test..|
Sent (#0) to 192.168.1.41-49544
Received (#1, 00000026) 23 bytes from 192.168.1.41-49544
00000000  2b 4f 4b 20 70 61 73 73  77 6f 72 64 2c 20 70 6c  |+OK password, pl|
00000010  65 61 73 65 2e 0d 0a                              |ease...|
Sent (#1) to [--1]-8080
Received (#1, 0000000B) 11 bytes from [--1]-8080
00000000  50 41 53 53 20 6e 6f 6e  65 0d 0a                 |PASS none..|
Sent (#1) to 192.168.1.41-49544
Received (#2, 0000003D) 72 bytes from 192.168.1.41-49544
00000000  2d 45 52 52 20 5b 41 55  54 48 5d 20 6c 6f 67 69  |-ERR [AUTH] logi|
00000010  6e 20 66 61 69 6c 75 72  65 20 6f 72 20 50 4f 50  |n failure or POP|
00000020  33 20 64 69 73 61 62 6c  65 64 2c 20 74 72 79 20  |3 disabled, try |
00000030  6c 61 74 65 72 2e 20 73  63 3d 48 74 6a 4a 69 74  |later. sc=HtjJit|
00000040  63 50 52 75 51 31 0d 0a                           |cPRuQ1..|
Sent (#2) to [--1]-8080
Disconnected from 192.168.1.41-49544
Disconnected from [--1]-8080
Finished at 2012.04.20-19.55.17, duration 5.253979s
</code></pre>

<p>Двоичный лог исходящих данных <code>log-binary-2012.04.20-19.55.17-0001-192.168.1.41-49544.log</code>:</p>

<pre><code>USER test
PASS none
</code></pre>

<p>Двоичный лог входящих данных <code>log-binary-2012.04.20-19.55.17-0001-213.180.204.37-110.log</code>:</p>

<pre><code>+OK POP Ya! v1.0.0na@26 HtjJitcPRuQ1
+OK password, please.
-ERR [AUTH] login failure or POP3 disabled, try later. sc=HtjJitcPRuQ1
</code></pre>

<p>Теперь измерим производительность. Прокачаем файл напрямую, а потом через эту программу.</p>

<p>Качаем напрямую (файл размером около 72MB):</p>

<pre><code>time wget http://www.erlang.org/download/otp_src_R15B01.tar.gz
...
Saving to: `otp_src_R15B01.tar.gz'
...
real    1m2.819s
</code></pre>

<p>Теперь закачаем через программу, предварительно запустив ее:</p>

<pre><code>go run gotcpspy.go -host=www.erlang.org -port=80 -listen_port=8080
</code></pre>

<p>Качаем:</p>

<pre><code>time wget http://localhost:8080/download/otp_src_R15B01.tar.gz
...
Saving to: `otp_src_R15B01.tar.gz.1'
...
real    0m56.209s
</code></pre>

<p>На всякий случай, можно сравнить результаты:</p>

<pre><code>diff otp_src_R15B01.tar.gz otp_src_R15B01.tar.gz.1
</code></pre>

<p>У меня файлы одинаковые, значит все работает верно.</p>

<p>Теперь время. Я повторял эксперимент несколько раз (на Mac Air), и, что удивительно, закачка через программу всегда была не то, чтобы медленнее, а даже немного быстрее. Например, напрямую &ndash; 1m2.819s, через программу &ndash; 0m56.209s. Единственное объяснение, что <code>wget</code> возможно работает в один поток, а программа принимает данные из локального и удаленного сокета в два потока, что может давать небольшое ускорение. Но, разница все равно минимальна, и возможно на другой машине или сети ее будет не видно, но главное, что работает как минимум <strong>не медленнее</strong>, чем напрямую, несмотря на создание в процессе передачи весьма массивных логов.</p>

<p>Итак, пока среди трех вариантов такой программы, на Питоне, Эрланге и Go, последняя мне нравится больше всего.</p>

<p>Как мне показалось, неплохой эксперимент с параллельностью в Go.</p>

<h3>Посты по теме</h3>

<ul>
<li><a href="http://demin.ws/blog/russian/2011/11/19/problem-to-try-new-languages/">Задача для освоения новых языков</a></li>
<li><a href="http://demin.ws/blog/russian/2011/11/22/tcpip-proxy-in-erlang/">TCP/IP proxy на Erlang&rsquo;e</a></li>
<li><a href="http://demin.ws/blog/russian/2011/11/26/improved-tcpip-proxy-in-erlang/">Улучшенный TCP/IP proxy на Erlang&rsquo;e</a></li>
<li><a href="http://demin.ws/blog/russian/2009/09/04/multi-threaded-tcpip-debugger/">Мультипотоковый отладчик TCP/IP соединений</a> (на Питоне)</li>
</ul>

<h3>Ссылки на репозитории</h3>

<ul>
<li><a href="https://github.com/begoon/go-tcpspy">Go</a></li>
<li><a href="https://github.com/begoon/erl-tcpspy">Эрланг</a></li>
<li><a href="https://github.com/begoon/py-tcpspy">Питон</a></li>
</ul>

<h3>P.S.</h3>

<p>Кстати, если кто-то из джавистов замутил бы схожую программу (если можно, не требующую для сборки Eclipse/IDEA/ant/maven/spring/log4j/ivy и прочее), было бы очень интересно сравнить. И не в плане эффективности и скорости, а в плане красоты, изящности.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Feuer A., "The C puzzle book"]]></title>
    <link href="http://demin.ws/blog/russian/2012/04/18/c-puzzle-book/"/>
    <updated>2012-04-18T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/04/18/c-puzzle-book/</id>
    <content type="html"><![CDATA[<p>Feuer A., &ldquo;The C puzzle book&rdquo;</p>

<p><a href="http://www.amazon.co.uk/gp/product/0201604612/ref=as_li_tf_il?ie=UTF8&tag=prodiy-21&linkCode=as2&camp=1634&creative=6738&creativeASIN=0201604612"><img border="0" src="http://ws.assoc-amazon.co.uk/widgets/q?_encoding=UTF8&Format=_SL160_&ASIN=0201604612&MarketPlace=GB&ID=AsinImage&WS=1&tag=prodiy-21&ServiceVersion=20070822" ></a><img src="http://www.assoc-amazon.co.uk/e/ir?t=prodiy-21&l=as2&o=2&a=0201604612" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p>Первое издание этой книги датировано 1982 годом. Старый код на С, даже очень хороший в прошлом, по современным понятиям чаще всего не выдерживает критики, хотя критиковать его ненужное занятие. Его стоит изучать и делать выводы.</p>

<p>Поэтому мне было страшно интересно, какие такие пазлы на С были в восьмидесятые. Итак, пристегните ремни. Если в программировании на С бывает <em>адъ</em>, то это он. Ниже я привел несколько задачек из этой книги.</p>

<h2>Работа с указателями</h2>

<p><img src="http://demin.ws/images/blog/c-puzzle-book/pointers-and-arrays-pointer-stew.png" alt="" />
</p>

<h2>Игры с препроцессором</h2>

<p><img src="http://demin.ws/images/blog/c-puzzle-book/preprocessor-caution-pays.png" alt="" />
</p>

<h2>Типы размещения переменных</h2>

<p><img src="http://demin.ws/images/blog/c-puzzle-book/storage-classes-files.png" alt="" />
</p>

<p>Для меня &ndash; это не задачки, а кандидаты на <a href="http://www.ioccc.org">Obfuscated C Code Context</a>. Глядя на такой код в жизни (а такое бывает), хочется самоустраниться.</p>

<p>Пролистав книгу до конца (кстати, в ее конце приводятся решения всех этих так называемых задач), понимаешь все-таки ее полезность, так как плохие примеры могут служить и в добрых целях.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goblog: Самодельный статический движок для блога на Go]]></title>
    <link href="http://demin.ws/blog/russian/2012/04/17/static-blog-engine-goblog/"/>
    <updated>2012-04-17T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/04/17/static-blog-engine-goblog/</id>
    <content type="html"><![CDATA[<p>Я люблю писать тексты, люблю отлаживать примеры, пробовать, анализировать. Чего я не люблю, так это возиться с форматированием, закачиванием картинок, проверкой верстки и т.д.</p>

<p>По причине лени я начал использовать Блогспот. Тут тебе и море шаблонов, виджеты всякие, мгновенная индексация Гуглом, статистика разная, с какого-то времени даже комментарии стали древовидные, и прочие свистелки. Ну все бы хорошо, но, увы, не предназначен редактор Блогспота для создания программистских постов. Когда надо вставлять код или таблицы разные, начинаются мучения. Например, для своего другого блога, не про программирование, <a href="http://english-eggs.blogspot.com">Яйца всмятку, сэр!</a>, &ldquo;возможностей&rdquo; Блогспота вполне хватает.</p>

<p>Еще мне хочется хранить оригиналы постов в нормальном, не в обгаженном HTML&rsquo;ем виде. Получалось, что материалы по блогу раскиданы по компьютеру там и сям в нескольких копиях. Сначала ты просто пишешь текст в редакторе, только разбивая на абзацы, без ссылок и картинок, и в конце сохраняешь почти готовый документ. Потом начинается верстка в HTML, в процессе которой, помимо, собственно, HTML&rsquo;я, делаются поправки в оригинальном тексте. При этом обновлять оригинальный файл уже лень, и по сути, он остается в &ldquo;сыром&rdquo; виде. А в &ldquo;сухом&rdquo; виде остается только HTML&rsquo;ная помойка. Но это еще не конец истории. Часто уже после публикации замечаешь опечатку, лезешь в Блогспот и правишь прямо на странице. Опять, самый первый оригинал и его локальная об&rsquo;HTML&rsquo;ная версия остаются неисправленными. В итоге: актуальные версии постов находятся только на самом Блогспоте. Конечно, можно делать автоматизированный бэкап всего блога, но опять таки &ndash; все будет уже только в HTML&rsquo;е.</p>

<p>Некоторое время назад я начал использовать <a href="http://docutils.sourceforge.net/rst.html">ReST</a>. Тут жизнь хоть как-то полегчала. ReST позволяет писать текст в уже более менее предсказуемой разметке (абзацы, ссылки, код), и затем из него генерируется HTML, который вставляется (опять таки вручную) в Блогспот. Попытки автоматизировать предварительный просмотр поста через <a href="http://code.google.com/p/googlecl/">googlecl</a> фактически провалились. Опять оставалась проблема, когда после исправления опечатки на странице оригинальный документ в ReST устаревал. Кроме того, ReST не решал проблему картинок. Их надо было куда-то заранее выкладывать, чтобы можно было полностью сделать preview.</p>

<p>Не могу объяснить почему, но идея динамических движков типа Wordpress&rsquo;а меня как-то пугала. Сама идея держать посты в базе данных мне кажется перебором.</p>

<p>Я почти уже было остановился на промежуточном решении &ndash; <a href="http://www.dokuwiki.org/dokuwiki">Doku Wiki</a>, например как на <a href="http://vak.ru/doku.php/proj">vak.ru</a>. Тут движок хоть и динамический, но содержимое страниц хранится в файлах, и есть версионность. Doku можно использовать как движок всего сайта, не только блога. Хоть и дизайн неказистый, зато картинки и произвольные аттачменты поддерживаются системой.</p>

<p>Был еще вариант, на который я тоже почти подписался &ndash; блог на основе <a href="http://www.tiddlywiki.com/">TiddlyWiki</a>. TiddlyWiki &ndash; это мой любимый инструмент на Windows для ведения записей. Я про это уже <a href="http://demin.ws/blog/russian/2009/11/28/tiddly-wiki/">писал</a>. Почему только на Windows? Потому что на Маке я просто делаю записи в простых текстовых файлах, располагая их по смыслу в документах или на рабочем столе, а <a href="http://en.wikipedia.org/wiki/Spotlight_(software)">Spotlight</a>, который индексирует все и вся на компьютере, моментально позволяет искать по фрагментам слов. Получается, что в ключевых возможностях TiddlyWiki &ndash; мгновенном поиске, уже не особого смысла. Но я отвлекся.</p>

<p>Оказывается, есть фанаты, которые превратили TiddlyWiki в блог-платформу. В эдакий статико-динамический мутант.</p>

<p>Например, вариант блога с таким движком &ndash; <a href="http://rsignell.tiddlyspot.com/">Rich Signell&rsquo;s Work Log</a>. Эзотерика, на мой взгляд. Например, не ясно, как прикрутить комментарии, хотя бы тот же Disqus. Но если кому интересно, есть даже публичный хостинг &ndash; <a href="http://tiddlyspot.com/">tiddlyspot</a>.</p>

<p>И вот реально я возбудился на идее чисто статических движков. Прелесть тут в том, что такой блог хостить можно где угодно. Тут не только база данных не нужна, но и серверное скриптование. Но дальше &ndash; больше. GitHub или Heroku позволяют не только хостить статические сайты, но и управлять контентом через git.</p>

<p>Например, есть статический движок <a href="http://jekyllrb.com/">Jekyll</a>. В Jekyll посты пишутся с использованием разметки Markdown или Textile. Также можно добавлять в проект произвольные файлы, которые при генерации сайта будут выкладываться без изменений. По сути &ndash; это движок сайта, в котором еще можно некоторые файлы оформлять в виде блога.</p>

<p>Комментарии же, как основная &ldquo;динамика&rdquo; блога, может реализоваться через, например, <a href="http://disqus.com">Disqus</a>. К слову сказать, есть эстэты статических блогов с высшей степенью дзэна &ndash; со <em>статическими комментариями</em> (для меня даже это словосочетание является оксюмороном). Подход тут такой: у поста внизу есть секция со <em>статически</em> выведенными ранее введенными комментариями, и рядом форма для ввода нового. Ты вводишь комментарий, и он отсылается автору блога. Тот его подтверждает (или нет), куда-то кликает, и комментарий помещается в виде файла в статический проект блога, все пересобирается и выкладывается на публику. Понятно, что это никакой ни разу не real-time, а больше похоже на комментарии с пре-модерированием, причем модератор выходит на связь раз в неделю.</p>

<p>Я очень ценю дискуссию, и подобный подход не для меня. И продолжаю использовать Disqus. Кстати, из Disqus можно прекрасно экспортировать базу комментариев, и, например, превратить ее в статические страницы, если вдруг придется с него уходить.</p>

<p>Но вернемся к Jekyll. Например, GitHub Pages напрямую поддерживает Jekyll (его автор и есть сооснователь GitHub) и умеет рендерить проекты Jekyll (хотя можно и рендерить самому локально). Заливаешь через git проект Jekyll, и сайт становится видимым в GitHub Pages.</p>

<p>На Heroku идея немного иная. Heroku хостит Ruby, поэтому статический сайт на Heroku &ndash; это сами страницы и программа-вебсервер, которая их отдает. Звучит страшновато, но на Ruby такой сервер выглядит весьма компактно, например так:</p>

<pre class="hl">
<span class="hl kwa">require</span> <span class="hl str">'bundler/setup'</span>
<span class="hl kwa">require</span> <span class="hl str">'sinatra/base'</span>

<span class="hl kwa">class</span> SinatraStaticServer <span class="hl opt">&lt;</span> Sinatra<span class="hl opt">:</span><span class="hl kwc">:Base</span>  

  <span class="hl kwd">get</span><span class="hl opt">(</span><span class="hl kwc">/.+/</span>) <span class="hl kwa">do</span>
    <span class="hl kwd">send_sinatra_file</span><span class="hl opt">(</span>request<span class="hl opt">.</span>path) <span class="hl esc">{404}</span>
  <span class="hl kwa">end</span>

  <span class="hl kwa">def</span> <span class="hl kwd">send_sinatra_file</span><span class="hl opt">(</span>path<span class="hl opt">, &amp;</span>missing_file_block)
    file_path <span class="hl opt">=</span> File<span class="hl opt">.</span><span class="hl kwd">join</span><span class="hl opt">(</span>File<span class="hl opt">.</span><span class="hl kwd">dirname</span><span class="hl opt">(</span>__FILE__)<span class="hl opt">,</span> <span class="hl str">'public'</span><span class="hl opt">,</span>  path)
    file_path <span class="hl opt">=</span> File<span class="hl opt">.</span><span class="hl kwd">join</span><span class="hl opt">(</span>file_path<span class="hl opt">,</span> <span class="hl str">'index.html'</span>) <span class="hl kwa">unless</span> file_path <span class="hl opt">=</span>~ <span class="hl kwc">/\.[a-z]+$/</span>i  
    File<span class="hl opt">.</span>exist<span class="hl opt">?(</span>file_path) <span class="hl opt">?</span> <span class="hl kwd">send_file</span><span class="hl opt">(</span>file_path) <span class="hl opt">:</span> missing_file_block<span class="hl opt">.</span>call
  <span class="hl kwa">end</span>
<span class="hl kwa">end</span>

run SinatraStaticServer
</pre>

<p>Как ни странно, хостинг на Heroku в целом проще, чем на GitHub. Также, на Heroku, git-репозиторий блога остается private, тогда как на GitHub&rsquo;е он становиться открытым, как и все остальные проекты. Хотя для меня звучит странно держать проект блога (фактически, сайта) закрытым. Он же и так весь доступен через веб.</p>

<p>Да, и GitHub Pages и Heroku позволяют &ldquo;прикрутить&rdquo; нормальный домен второго уровня, если у вас есть таковой.</p>

<p>Итак, я выбрал Jekyll c хостингом на Heroku. Увы, если взять чистый Jekyll, то придется самому с нуля разрабатывать стили и макет страниц. Если этим заниматься лень, то можно взять <a href="http://octopress.org/">Octopress</a>.</p>

<p>Octopress &ndash; это статический движок блога на базе Jekyll, но который укомплектован красивым HTML5 макетом страниц, пачкой удобных плагинов и автоматизированной возможностью выкладывания блога на GitHub Pages и Heroku.</p>

<p>Итак, я взял Octopress, покрутил туда-сюда, попробовал несколько постов, протестировал рендеринг блога локально, повыкладывал на Heroku и GitHub Pages. Все вроде было на мази.</p>

<p>Далее была самая нудная часть марлезонского балета &ndash; перетаскивание постов из любимого Блогспота. Фактически приходилось это делать вручную через cut-and-paste. Недели три мучений, и свои несчастные триста постов я обработал.</p>

<p>Все было готово для запуска моего нового статического блога. Но тут меня ждало главное разочарование. Драгоценный Jekyll, написанный на Ruby, рендерил мои несчастные триста постов (внимание!) &ndash; 15 минут (на Mac Air). А как сами понимаете, по началу надо было много пробовать, пересобирать, снова пробовать, снова пересобирать и т.д. И такое время полной пересборки не лезло ни в какие ворота.</p>

<p>Методом тыка я нашел узкое место в движке Jekyll/Octopress &ndash; львиная доля этих 15 минут уходило на генерацию файла <code>atom.xml</code>, RSS-фида. Почему-то в изначальных шаблонах в этот RSS-файл включалось только последние двадцать постов. Но у меня блог небольшой, поэтому я включил туда все посты, и тогда время генерации этого файла приводилось к пятнадцати минутной сборке всего блога.</p>

<p>Все это показалось мне каким-то абсурдом (при всей моей любви к Ruby). После небольшого размышления (я к тому времени уже более менее понимал внутренности Jekyll) и нежелания корячить Jekyll в попытках его ускорить, я задался вопросом &ndash; а не написать ли мне свой статический движок по схожей идее? Ведь это всего-навсего работа с файлами, текстом и, возможно, шаблонами. К тому же, в Jekyll нет многоязычности ни в каком виде, и у меня были планы туда ее добавить, но с собственным движком у меня полностью развязаны руки, и можно сделать все стройно и красиво.</p>

<p>На чем писать? Можно по-мужски: на C++/boost. Будет работать очень быстро, но скучно. Я решил на Go. Нативная, очень быстрая компиляция (фактически, у меня нет фазы компиляции, так как она совмещена с фазой запуска), удобная работа со строками и файловой системой, упрощенная работа с памятью (сборщик мусора), регулярные выражения, массивы, хэши, библиотека шаблонов, <a href="https://github.com/russross/blackfriday">библиотека для Markdown</a>. Все, кроме последнего, &ldquo;из коробки&rdquo;. Каких-либо проблем с производительностью не должно быть вообще. Тут как раз вышел релиз Go 1, и теперь есть нормальные дистрибутивы под Windows и Mac.</p>

<p>Итак, после трех вечеров родился мой велосипед &ndash; <a href="https://github.com/begoon/begoon.github.com">Goblog</a>. Весь проект открытый. Сайт и его исходные тексты находятся вместе.</p>

<h2>Принцип работы</h2>

<p>Есть два основных места: проект и собранный сайт-блог. В первом лежат исходные файлы. В процессе сборки файлы из проекта копируется в собранный сайт с сохранением локальной структуры каталогов. По умолчанию файлы копируются без изменений, как двоичные. Если же какой-то файл имеет расширение <code>html</code>, <code>xml</code> или <code>js</code>, то этот файл прогоняется через <a href="http://weekly.golang.org/pkg/text/template/">систему шаблонов Go</a>. Файлы с расширением <code>markdown</code> дополнительно перед шаблонами обрабатываются <a href="https://github.com/russross/blackfriday">библиотекой Markdown</a>.</p>

<p>Каталоги:</p>

<ul>
<li><code>&lt;root&gt;</code> &ndash; Здесь находится собранный сайт, как он видится по адресу <a href="http://demin.ws/">http://demin.ws/</a>.</li>
<li><code>&lt;root&gt;/_engine</code> &ndash; Это проект, тут лежат исходники и генератор сайта. Технически, этот каталог <a href="http://demin.ws/_engine/">виден и через web</a>.</li>
</ul>

<p>Подкаталоги и файлы в каталоге <code>_engine</code>:</p>

<ul>
<li><p><code>_includes</code> &ndash; Файлы, которые можно подставлять через макрос <code>&#123;{include &ldquo;filename&rdquo;}}</code>.</p></li>

<li><p><code>_layouts</code> &ndash; Файлы-layout&rsquo;ы (см. ниже).</p></li>

<li><p><code>_site</code> &ndash; Собственно, каталоги и файлы сайта. Этот каталог является корнем будущего сайта. Файлы из него при сборке перекладываются в собранный сайт. Некоторые обрабатываются шаблонами.</p></li>

<li><p><code>_posts</code> &ndash; Исходники постов. Эти файлы обрабатываются особо. Помимо шаблонов, они файлы переименовываются по структуре блога, где дата является частью URL: <code>домен/blog/язык/год/месяц/день/название-поста/</code></p></li>
</ul>

<p>Посты &ndash; это Markdown-файлы, имеющие особый заголовок и имя. Данные файлы выкладываются в отдельный каталог <code>/blog</code> с подкаталогами-датами. Информация о постах собирается в специальные переменные, которые делаются видимыми из шаблонов. Также по постам <a href="https://github.com/begoon/begoon.github.com/blob/9f088a83e86e54112696dd3954681b0450f40d91/_engine/main.go#L601">строится обратный индекс</a> для поиска.</p>

<h2>Layouts</h2>

<p>Идея layouts унаследована из Jekyll. Если пост или страница имеет в заголовке атрибут <code>layout</code> (<a href="https://raw.github.com/begoon/begoon.github.com/master/_engine/_posts/russian/2009-01-24-why-i-have-started-this-blog.markdown">например</a>), то для ее рендеринга загружается указанный шаблон-layout (из каталога <code>_layouts</code>), тело поста или страницы вставляется в определенное место layout&rsquo;а (у меня это плейсхолдер <code>Page.child</code>), и затем все рендерится вместе. Это позволяет единообразно оформлять группы схожих страниц (например, постов). Layout&rsquo;ы могут быть вложенные.</p>

<h2>Генератор</h2>

<p>И теперь, собственно, генератор &ndash; <a href="https://github.com/begoon/begoon.github.com/blob/master/_engine/main.go">main.go</a>.</p>

<p>Все, что я делаю для сборки (в каталоге <code>_engine</code>), это:</p>

<pre><code>make
</code></pre>

<p>Выводится примерно следующее:</p>

<pre><code>_engine$ make
gofmt -w=true -tabs=false -tabwidth=2 main.go
go run main.go 
Go static blog generator  Copyright (C) 2012 by Alexander Demin
Words in russian index: 18452
Words in english index: 3563
15.672979s
Processed 344 posts.
</code></pre>

<p>Если все хорошо, то в корне проекта (в каталоге <code>..</code> относительно <code>_engine</code>) образуются файлы, готовые для выкладки. На моем Mac Air сборка занимает 15 секунд (привет, Jekyll/Octopress, и до свидания). Tак как все находится под git, то всегда четко видно, где и какие файлы появились, исчезли или изменились.</p>

<p>Далее можно проверить сайт локально (см. ниже).</p>

<p>Если все готово, можно добавить измененные файлы (как исходники из <code>_site/</code>, так и собранные файлы) в локальный репозиторий:</p>

<pre><code>git add ../*
git commit -m &quot;New post about ...&quot;
</code></pre>

<p>И выложить на GitHub Pages:</p>

<pre><code>git push
</code></pre>

<p>Практически сразу после <code>push</code> файлы появляются на <a href="http://demin.ws/">demin.ws</a>.</p>

<p>В <a href="https://github.com/begoon/begoon.github.com/blob/master/_engine/Makefile">Makefile</a> несколько дополнительных команд для облегчения жизни.</p>

<h2>Локальное тестирование</h2>

<p>Чтобы запустить сайт локально, я временно добавляю <code>127.0.0.1 demin.ws</code> в <code>/etc/hosts</code> и запускаю мини web-сервер. Помните, как он выглядел на Ruby? Маленький, правда? А теперь версия на Go (<a href="https://github.com/begoon/begoon.github.com/blob/master/_engine/server.go">server.go</a>):</p>

<pre class="hl">
<span class="hl kwa">package</span> main
<span class="hl kwa">import</span> <span class="hl str">&quot;net/http&quot;</span>
<span class="hl kwa">func</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
  <span class="hl kwb">panic</span><span class="hl opt">(</span>http<span class="hl opt">.</span><span class="hl kwd">ListenAndServe</span><span class="hl opt">(</span><span class="hl str">&quot;:80&quot;</span><span class="hl opt">,</span> http<span class="hl opt">.</span><span class="hl kwd">FileServer</span><span class="hl opt">(</span>http<span class="hl opt">.</span><span class="hl kwd">Dir</span><span class="hl opt">(</span><span class="hl str">&quot;..&quot;</span><span class="hl opt">))))</span>
<span class="hl opt">}</span>
</pre>

<p>Итак:</p>

<pre><code>go run server.go&amp;
</code></pre>

<p>И можно тестировать сайт локально (возможно придется запустить через <code>sudo</code>, чтобы &ldquo;сесть&rdquo; на 80-й порт).</p>

<p>В принципе, можно и не трогать <code>/etc/hosts</code> и использовать адрес <code>localhost:80</code>, но RSS-фид файл <code>atom.xml</code> содержит абсолютные ссылки c доменом, поэтому для если надо тестировать RSS, то без подмены адреса не обойтись.</p>

<h2>Подсветка синтаксиса</h2>

<p>В качестве расширения Markdown у меня есть специальный тег для вставки блоков кода:</p>

<pre><code>{% codeblock lang:xxx %}
...
{% endcodeblock %}
</code></pre>

<p>Я унаследовал этот тег из Octopress&rsquo;a. Markdown уже имеет синтаксис для кода:</p>

<pre><code>``` xxx
...
```
</code></pre>

<p>где <code>xxx</code> &ndash; язык.</p>

<p>Но свой тег позволяет мне проще добавлять атрибуты, например, включение отображения номеров строк, преобразование табуляций и т.д.</p>

<p>Далее надо было решить вопрос подсветки синтаксиса. Я покрутил несколько онлайновых библиотек, которые через JavaScript раскрашивают прямо на странице, но в каждой была какая-то минимальная проблема, поэтому я таки решил раскрашивать код статически.</p>

<p>Первое, что пришло в голову &ndash; <a href="http://pygments.org/">pygments</a>. Все бы хорошо, но благодаря Питону, работает крайне медленно. Время полной сборки сайта с 15 секунд выросло до двух минут. Основное время тратилось на раскраску кода. Приходили мысли на тему кеша уже раскрашенных фрагментов и прочей ерунде, но после небольшого поиска проблема решилась радикально.</p>

<p>Надо было просто взять колоризатор, написанный на правильном для данной задачи языке. Отыскались две альтернативы: <a href="http://www.gnu.org/software/src-highlite/">GNU Source-highlight</a> и <a href="http://www.andre-simon.de/doku/highlight/en/highlight.html">Highlight</a>. Обе написаны на C++, поэтому работают практически мгновенно.</p>

<p>Например, вот тут <a href="http://petereisentraut.blogspot.co.uk/2009/07/adding-color-to-console-pygments-vs.html">человек сравнивал производительность pygments и syntax-highlight</a>.</p>

<p>Мне больше понравился Highlight. В нем языков больше поддерживается (например, в GNU&rsquo;шном даже Go нет). После перехода на Highlight время полной сборки вернулось к ~15-16 секундам, и я удовлетворился.</p>

<p>Вызов колоризатора сделан через обратный вызов в регулярном выражении, которое обрабатывает тег <code>{% codeblock %}</code> (функция <a href="https://github.com/begoon/begoon.github.com/blob/9f088a83e86e54112696dd3954681b0450f40d91/_engine/main.go#L656">highlight()</a>).</p>

<h2>Редакторы для Markdown</h2>

<p>Полно редакторов с preview для Markdown. Я использую <a href="http://markdownpad.com/">MarkdownPad</a> под Windows, и <a href="http://markedapp.com/">Marked</a> на Маке.</p>

<h2>Теги (категории) постов</h2>

<p>Я решил не делать теги вообще. Основываясь на собственном опыте, я понял, что никогда не пользуюсь тегами ни в своем блоге, ни в чужих. К тому же со временем взгляды на логику категоризации информации меняются, и порой приходится просто для совместимости с прошлым расставлять теги, в которых уже не видишь смысла. Какой, например, смысл в теге <code>c++</code> в моем блоге? Кто-нибудь когда-нибудь его использовал?</p>

<p>Но минимализм &ndash; это не путь к усложнению жизни. Наоборот. Лично я постоянно что-то ищу у себя в блоге в старых постах. На Блогспоте я просто заходил на главную страницу, жал &#8984;-F (ой, простите, CTRL-F) и искал по фрагментам слов в заголовках. Именно для этого я с некоторого в правой колонке стал выводить ссылки практически на все информативные посты.</p>

<p>В новом блоге все &ldquo;работает&rdquo; точно также прямо на первой странице с каталогом постов. При переносе постов я изменил заголовки некоторых, сделав их более информативными и пригодными для поиска.</p>

<p>Но! Все это уже не важно, так как теперь в блоге <a href="http://demin.ws/blog/russian/2012/04/10/search-in-this-blog/">работает полнофункциональный контекстный поиск</a>.</p>

<h2>Проверки</h2>

<p>Одним из досадных неудобств Jekyll &ndash; это отстуствие каких-либо проверок чего-либо. А я прошел через это в полной мере в процессе перетаскивания постов из Блогспота. Битые ссылки, неверные даты, забытые кавычки, непроставленные языки и прочие атрибуты постов и многое другое. Поэтому Goblog везде где только можно проверяет все &ndash; форматы, ссылки, семантику и т.д. Если где-то ошибка, сборка останавливается. Когда я добавил функцию <a href="https://github.com/begoon/begoon.github.com/blob/9f088a83e86e54112696dd3954681b0450f40d91/_engine/main.go#L581">check_links()</a>, которая проверяет все локальные ссылки по всем файлам в уже собранном сайте, я выловил изрядное количество &ldquo;дохлых&rdquo; ссылок.</p>

<h2>Два языка</h2>

<p>Была еще проблема, которую, как мне кажется, удалось решить весьма элегантно: двуязычность. Мне нужен блог и сайт на двух языках. Но хардкодить &ldquo;прозрачную&rdquo; поддержку русского и английского как-то не хотелось, к тому же версии на разных языках могу радикально отличаться, и мне не сложно поддерживать их шаблоны независимо. В итоге, у меня есть просто понятие языка у каждого обрабатываемого файла (или поста), заданное в заголовке. Goblog не знает о языках. Он просто делает информацию о языке файла или поста доступной через шаблоны. А я уж сам решаю, где лежат какие файлы. Например, все русское лежит, начиная с корня сайта, а все английское имеет префикс <code>/english</code>.</p>

<p>Например, <a href="https://github.com/begoon/begoon.github.com/blob/master/_engine/_site/index.html">русская титульная страница</a> и <a href="https://github.com/begoon/begoon.github.com/blob/master/_engine/_site/english/index.html">английская титульная страница</a>.</p>

<h2>Чем я таки не доволен</h2>

<p>Я не люблю web-программирование: javascript, css, html, или web-дизайн, чего вообще делать не умею. Но тут мне таки пришлось покопаться в этом (с Octopress&rsquo;ом было проще). Я за основу взял <a href="http://tom.preston-werner.com/">сайт автора Jekyll</a>. Сделал все минималистично просто. К тому же все равно большинство людей читают через RSS и ходят на сайт только если хотят оставить комментарий. Следовательно, надо чтобы работал RSS и страничка поста была удобной (что для меня значит простой, без изощренных шрифтов и странного форматирования) для чтения.</p>

<h2>Мораль</h2>

<p>Вы думаете, я сейчас буду убеждать использовать мой движок? Совсем нет. Хоть я старался сделать движок максимально гибким и непривязанным конкретно к моему блогу, но мне пришлось переносить старые посты и их комментарии, поддержать два языка и т.д. В итоге в коде есть куски, &ldquo;заточенные&rdquo; конкретно под мой блог (особенно в области Disqus-ссылок на комментарии к старым постам).</p>

<p>Только могу порекомендовать, это что статический движок персонального сайта/блога можно написать самому. Почему? А потому, что эта задача решается за несколько вечеров (раз), и в нем будет только то, что вам реально нужно (остальное вам будет лень программировать) (два). Уверен, что все можно было сделать и на Руби, и на Питоне, PHP и т.д. Но было глупо упускать возможность поупражняться на новом языке с реальной задачей.</p>

<p>&#9632;</p>

<p>Ссылки по теме:</p>

<ul>
<li><a href="http://www.gnu.org/software/src-highlite/">GNU Source-highlight</a></li>
<li><a href="http://www.andre-simon.de/doku/highlight/en/highlight.html">Highlight</a></li>
<li><a href="http://petereisentraut.blogspot.co.uk/2009/07/adding-color-to-console-pygments-vs.html">Adding Color to the Console: Pygments vs. Source-highlight</a></li>
</ul>

<p>P.S. Этот писался почти неделю, урывками. Параллельно я писал поиск. Внезапно я осознал, как все-таки это нереально удобно с git&rsquo;ом работать с блогом. Пишешь в бэкграунде пост &ndash; работаешь в одной ветке, дописываешь функционал &ndash; другая ветка. Когда что-то готово, сливает в master и push на GitHub. Красота.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Самые первые книги]]></title>
    <link href="http://demin.ws/blog/russian/2012/04/16/first-books/"/>
    <updated>2012-04-16T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/04/16/first-books/</id>
    <content type="html"><![CDATA[<p>Я писал как-то про одну из своих любимых книг - <a href="http://demin.ws/blog/russian/2009/02/26/etudes-for-programmers/">Чарльз Уэзерелл, &ldquo;Этюды для программистов&rdquo;</a>.</p>

<p>Но были еще несколько книг, от которых у меня нежно вибрирует что-то внутри. Не потому, что все книги были особенно хорошие. Просто они были первыми. Про них можно сказать, что я их зачитал до дыр.</p>

<p>Некоторые позже переиздавались, но я привожу их первые издания.</p>

<p>Книги приводится в хронологическом порядке, по мере взросления, так сказать. Удивительно, я до сих пор помню очень многое из этих книг.</p>

<h2>Время Радио-86РК и Синклера.</h2>

<p>Зеленко Г.В., Панов В.В., Попов С.Н., &ldquo;<a href="http://vipbook.info/pk/pk_uchebniki/25501-Zelenko-G.V.-Panov-V.V.-Popov-S.N.-Domashniy-kompy.html">Домашний компьютер</a>&rdquo;, 1989</p>

<p><img src="http://demin.ws/images/covers/russian/home-computer-radio86-cover.jpg" alt="" />
</p>

<p>Брат собирает Радио-86РК, а эта книга является странным руководством по всему: основам микроэлектроники, программированию для КР580 (Intel 8080) в машинных кодах и ассемблере, и под занавес - на Бейсике.</p>

<p>У меня есть теория, что то, что человек плотно изучает в возрасте от 9-14 лет, настолько крепко врезается в мозг, что удалить это практически невозможно. Иначе как можно объяснить, что до сих пор помню машинные коды Intel 8080 со времен Радио-86РК, но не могу вспомнить, что делает код, который я писал месяц назад.</p>

<hr />

<p>Г. Х. Геворкян, В. Н. Семенов, &ldquo;<a href="http://www.ozon.ru/context/detail/id/7394425/?partner=easy-coding">Бейсик - это просто</a>&rdquo;, 1989</p>

<p><img src="http://demin.ws/images/covers/russian/basic-this-is-simple-cover.jpg" alt="" />
</p>

<p>Практически никакая книга по содержанию, но пару лет назад я купил ее оригинальное издание. Хотелось снова подержать его в руках.</p>

<hr />

<p>В. П. Дьяконов, &ldquo;<a href="http://www.ozon.ru/context/detail/id/2317102/?partner=easy-coding">Справочник по алгоритмам и программам на языке бейсик для персональных ЭВМ</a>&rdquo;, 1989</p>

<p><img src="http://demin.ws/images/covers/russian/algorithms-and-programs-reference-for-basic-cover.jpg" alt="" />
</p>

<p>Не могу сказать, чтобы я много понимал в этой книге тогда. Но в ней было много много примеров, на различных диалектах Бейсика.</p>

<h2>Время Агата в школе.</h2>

<p>Мымрин М. П., &ldquo;Конструкция, применение, программирование и ремонт ПЭВМ &ldquo;Агат&rdquo;, 1990</p>

<p><img src="http://demin.ws/images/covers/russian/operating-manual-of-agat-computer-cover.jpg" alt="" />
</p>

<hr />

<p>Морер У., &ldquo;<a href="http://reslib.com/book/Yazik_assemblera_dlya_personaljnogo_kompjyutera_Epl">Язык ассемблера для персонального компьютера Эпл</a>&rdquo;, 1987</p>

<p><img src="http://demin.ws/images/covers/russian/assembler-language-for-apple-compuler-cover.jpg" alt="" />
</p>

<p>Эта книга была иконой и наверное единственным доступным тогда руководством по программированию на ассемблерe для 6502. Храню до сих пор.</p>

<h2>Начало времени IBM PC.</h2>

<p>В. Э. Фигурнов, &ldquo;<a href="http://www.ozon.ru/context/detail/id/5435709/?partner=easy-coding">IBM PC для пользователя</a>&rdquo;, 1990</p>

<p><img src="http://demin.ws/images/covers/russian/ibm-pc-for-user-cover.jpg" alt="" />
</p>

<p>А кто не читал эту книгу? Хотя бы одно из изданий? В первом издании, что на картинке, между прочим, был исходник самодельного &ldquo;антивируса&rdquo;, написанного на Турбо-Паскале 5.0, который сканировал все файлы на жестком диске и запоминал их контрольные суммы.</p>

<hr />

<p>В. В. Фаронов &ldquo;Программирование в среде Турбо-Паскаль 5.0 на персональных ЭВМ&rdquo;, 1990</p>

<p><img src="http://demin.ws/images/covers/russian/turbo-pascal-5.0-cover.jpg" alt="" />
</p>

<p>Мега-книга своего времени. Описание библиотеки Турбо-Паскаля (а где его еще было взять?), много довольно низкоуровневых примеров (например, работа с экранной областью из Паскаля!). Этой книги у меня долго не было в личном пользовании, поэтому я переписывал ее фрагменты вручную.</p>

<hr />

<p>Гербер Шилдт, &ldquo;<a href="http://knigi.tr200.net/v.php?id=64308">Язык СИ для профессионалов</a>&rdquo;, 1989</p>

<p><img src="http://demin.ws/images/covers/russian/language-c-for-professionals-cover.jpg" alt="" />
</p>

<p>Очень много нового: алгоритм отрисовки отрезка без использования вещественной арифметики, отрисовка окружности без синусов и косинусов, интерпретатор Бейсика, программирования аппаратного таймера и многое другое.</p>

<hr />

<p>П. Нортон, Д.Соухе, &ldquo;<a href="http://rutracker.org/forum/viewtopic.php?t=3842039">Язык ассемблера для IBM PC</a>&rdquo;, 1993</p>

<p><img src="http://demin.ws/images/covers/russian/norton-assembler-language-for-ibm-pc-cover.jpg" alt="" />
</p>

<p>После этой книги понял, что на ассемблере <em>можно писать</em> большие вещи.</p>

<hr />

<p>С.Н. Баранов, Н.Р. Ноздрунов, &ldquo;<a href="http://fforum.winglion.ru/viewtopic.php?f=37&amp;t=2015">Язык Форт и его реализации</a>&rdquo;, 1988</p>

<p><img src="http://demin.ws/images/covers/russian/forth-and-its-implementations-cover.jpg" alt="" />
</p>

<p>Форт - это срыв мозга. Удивительный язык. И книга отличная.</p>

<hr />

<p>П. Хижняк, &ldquo;<a href="http://rutracker.org/forum/viewtopic.php?t=1942170">Пишем вирус&hellip; и антивирус</a>&rdquo;, 1991</p>

<p><img src="http://demin.ws/images/covers/russian/develop-virus-and-antivirus-cover.jpg" alt="" />
</p>

<p>Это был для меня реальный хит, крупицы &ldquo;хакерского знания&rdquo; в форме доступной книги. Естественно, вирус&hellip; и антивирус были запущены на школьный Robotron.</p>

<hr />

<p>Вроде все.</p>

<p>Кто поделится своими историями?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Peter van der Linden, "Expert C Programming"]]></title>
    <link href="http://demin.ws/blog/russian/2012/04/15/expert-c-programming/"/>
    <updated>2012-04-15T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/04/15/expert-c-programming/</id>
    <content type="html"><![CDATA[<p>&ldquo;Expert C Programming&rdquo;, Peter van der Linden</p>

<p><a href="http://www.amazon.co.uk/gp/product/0131774298/ref=as_li_tf_il?ie=UTF8&tag=prodiy-21&linkCode=as2&camp=1634&creative=6738&creativeASIN=0131774298"><img border="0" src="http://ws.assoc-amazon.co.uk/widgets/q?_encoding=UTF8&Format=_SL160_&ASIN=0131774298&MarketPlace=GB&ID=AsinImage&WS=1&tag=prodiy-21&ServiceVersion=20070822" ></a><img src="http://www.assoc-amazon.co.uk/e/ir?t=prodiy-21&l=as2&o=2&a=0131774298" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p>Случайно наткнулся где-то в твиттере на эту книгу. Несложный поиск дает множество вариантов c ней ознакомиться.</p>

<p>Покупать для себя я бы не стал. Для более менее опытного программиста на С тут нет ничего нового. Но, как всегда это бывает, имеет смысл за часик, под чай или кофе, пролистать и освежить в памяти разнообразные причуды указателей, моделей памяти (вечное здоровье сегментированной особым образом модели памяти родом из 8086 и 80286), ABI, особенности линковки в UNIX и Windows, ну и факты из истории языка и разнообразных его редакций.</p>

<p>В этой книге всего понемногу.</p>

<p>P.S. Кстати, я думал, что знаю C потенциально лучше чем С++, просто потому, что язык объективно меньше и проще. Да и писать на нем я начал раньше. И решил я как-то сдать <a href="http://www.brainbench.com/xml/bb/common/testcenter/taketest.xml?testId=52">тест по С</a> на Брейнбенче. Оказывается, есть столько аспектов языка, которые я раньше просто не встречал.</p>

<p>Понимаю, Брейнбенч - всего лишь тест, во многом далекий от реальности, но все равно позволяет расширить, так сказать, рамки понимания самого себя.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Как вернуть vector из функции: по значению или по ссылке?]]></title>
    <link href="http://demin.ws/blog/russian/2012/04/14/return-vector-by-value-or-pointer/"/>
    <updated>2012-04-14T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/04/14/return-vector-by-value-or-pointer/</id>
    <content type="html"><![CDATA[<p>Есть функция, создающая каким-то определенным образом экземпляр <code>vector</code>. Вопрос: как вернуть этот экземпляр вызывающему?</p>

<p>Правильное с точки зрения логики и стройности программы решение выглядит так:</p>

<pre class="hl">
std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span><span class="hl kwb">int</span><span class="hl opt">&gt;</span> <span class="hl kwd">create_vector</span><span class="hl opt">(</span><span class="hl kwb">const size_t</span> N<span class="hl opt">) {</span>
  std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span><span class="hl kwb">int</span><span class="hl opt">&gt;</span> v<span class="hl opt">;</span>
  v<span class="hl opt">.</span><span class="hl kwd">resize</span><span class="hl opt">(</span>N<span class="hl opt">,</span> <span class="hl num">0xDEADC0DE</span><span class="hl opt">);</span>
  <span class="hl kwa">return</span> v<span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Тут экземпляр вектора возвращается <em>по значению</em>, что означает потенциальное глубокое копирование локального объекта в контекст вызывающей функции. Сразу возникает сомнение: а что, если вектор огромен - его ж надо будет побайтно перекладывать из одного места в другое? Гораздо &ldquo;разумнее&rdquo; было бы написать:</p>

<pre class="hl">
<span class="hl kwb">void</span> <span class="hl kwd">create_vector</span><span class="hl opt">(</span><span class="hl kwb">const size_t</span> N<span class="hl opt">,</span> std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span><span class="hl kwb">int</span><span class="hl opt">&gt;*</span> v<span class="hl opt">) {</span>
  v<span class="hl opt">-&gt;</span><span class="hl kwd">resize</span><span class="hl opt">(</span>N<span class="hl opt">,</span> <span class="hl num">0xDEADC0DE</span><span class="hl opt">);</span>
<span class="hl opt">}</span>
</pre>

<p>Тут вектор передается по указателю, и стопроцентно ненужного полного копирования не будет. Но такой код выглядит откровенно плохо.</p>

<p>Сравним скорости работы на векторе длиной 100MB. Например, на компиляторе:</p>

<pre><code>Apple clang version 3.1 (tags/Apple/clang-318.0.45) (based on LLVM 3.1svn)
Target: x86_64-apple-darwin11.3.0
</code></pre>

<p>По значению:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;iostream&gt;</span>
<span class="hl ppc">#include &lt;vector&gt;</span>

std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span><span class="hl kwb">int</span><span class="hl opt">&gt;</span> <span class="hl kwd">__attribute__</span><span class="hl opt">((</span>noinline<span class="hl opt">))</span>
<span class="hl kwd">create_vector</span><span class="hl opt">(</span><span class="hl kwb">const size_t</span> N<span class="hl opt">) {</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;by value&quot;</span> <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span><span class="hl kwb">int</span><span class="hl opt">&gt;</span> v<span class="hl opt">;</span>
  v<span class="hl opt">.</span><span class="hl kwd">resize</span><span class="hl opt">(</span>N<span class="hl opt">,</span> <span class="hl num">0xDEADC0DE</span><span class="hl opt">);</span>
  <span class="hl kwa">return</span> v<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[]) {</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">size_t</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> <span class="hl num">10</span><span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
    <span class="hl kwb">const size_t</span> N <span class="hl opt">=</span> <span class="hl num">1024</span> <span class="hl opt">*</span> <span class="hl num">1024</span> <span class="hl opt">*</span> <span class="hl num">100</span><span class="hl opt">;</span>
    std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span><span class="hl kwb">int</span><span class="hl opt">&gt;</span> v <span class="hl opt">=</span> <span class="hl kwd">create_vector</span><span class="hl opt">(</span>N<span class="hl opt">);</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>v<span class="hl opt">[</span>i<span class="hl opt">] !=</span> <span class="hl num">0xDEADC0DE</span><span class="hl opt">) {</span>
      std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;Test is rubbish&quot;</span> <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
      <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
  <span class="hl opt">}</span> 
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Запускаем:</p>

<pre><code>clang++ -O3 -o by_value by_value.cpp &amp;&amp; time ./by_value
</code></pre>

<p>Результат:</p>

<pre><code>0m4.933s
</code></pre>

<p>Теперь по указателю:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;iostream&gt;</span>
<span class="hl ppc">#include &lt;vector&gt;</span>

<span class="hl kwb">void</span> <span class="hl kwd">__attribute__</span><span class="hl opt">((</span>noinline<span class="hl opt">))</span>
<span class="hl kwd">create_vector</span><span class="hl opt">(</span><span class="hl kwb">const size_t</span> N<span class="hl opt">,</span> std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span><span class="hl kwb">int</span><span class="hl opt">&gt;*</span> v<span class="hl opt">) {</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;by pointer&quot;</span> <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  v<span class="hl opt">-&gt;</span><span class="hl kwd">resize</span><span class="hl opt">(</span>N<span class="hl opt">,</span> <span class="hl num">0xDEADC0DE</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[]) {</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">size_t</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> <span class="hl num">10</span><span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
    <span class="hl kwb">const size_t</span> N <span class="hl opt">=</span> <span class="hl num">1024</span> <span class="hl opt">*</span> <span class="hl num">1024</span> <span class="hl opt">*</span> <span class="hl num">100</span><span class="hl opt">;</span>
    std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span><span class="hl kwb">int</span><span class="hl opt">&gt;</span> v<span class="hl opt">;</span>
    <span class="hl kwd">create_vector</span><span class="hl opt">(</span>N<span class="hl opt">, &amp;</span>v<span class="hl opt">);</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>v<span class="hl opt">[</span>i<span class="hl opt">] !=</span> <span class="hl num">0xDEADC0DE</span><span class="hl opt">) {</span>
      std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;Test is rubbish&quot;</span> <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
      <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
  <span class="hl opt">}</span> 
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Запускаем:</p>

<pre><code>clang++ -O3 -o by_pointer by_pointer.cpp &amp;&amp; time ./by_pointer
</code></pre>

<p>Результат:</p>

<pre><code>0m4.852s
</code></pre>

<p>Время в обоих случаях одинаково. Получается, что стоит выбрать первый, &ldquo;красивый&rdquo; вариант.</p>

<p>Объяснений тут два. Первый, и возможно самый важный - это <a href="http://en.wikipedia.org/wiki/Return_value_optimization">RVO, Return value optimization</a>. Это когда компилятор догадывается, что создаваемый локальный экземпляр вектора предназначен для возврата из функции, и сразу создает его в контексте вызывающего кода, чтобы потом не копировать туда. Фактически компилятор реализует передачу по ссылке, но неявно, не портя красоту исходного кода. Данный трюк будет работать для любого класса, не обязательно класса из STL.</p>

<p>Но оптимизация - это негарантированная вещь. Но тут есть еще одно подспорье. Стандартные контейнеры STL реализованы так, что при даже при глубоком копировании фактически копируется только небольшая управляющая структура, а сами данные, размещенные в куче, просто перебрасываются указателем, без их фактического перемещения. Тут, конечно, будет небольшое дополнительное копирование, но оно минимально, и возможно на него стоит пойти ради сохранения красивого кода.</p>

<p>Ну а в контексте C++11, где есть семантика перемещения, вообще не будет лишних копирований, если класс &ldquo;правильно&rdquo; реализован (что верно для классов из STL).</p>

<p>Мораль: используйте по возможности контейнеры из STL и оставьте оптимизацию компилятору. Иногда, конечно, компилятор ошибается, но таких случаев гораздо меньше, чем наоборот.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dustin Boswell, Trevor Foucher, "The art of readable code"]]></title>
    <link href="http://demin.ws/blog/russian/2012/04/12/art-of-readable-code/"/>
    <updated>2012-04-12T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/04/12/art-of-readable-code/</id>
    <content type="html"><![CDATA[<p><a href="http://shop.oreilly.com/product/9780596802301.do">Dustin Boswell, Trevor Foucher, &ldquo;The art of readable code&rdquo;</a></p>

<p><img src="http://demin.ws/images/covers/english/art-of-readable-code-cover.gif" alt="" />
</p>

<p>Про написание кода написано много хороших книг, поэтому, когда товарищ прислал мне ссылку на еще одну, новую, я был настроен скептически. Но удивительно, прямо в первой главе начали обсуждать следующее:</p>

<ul>
<li>Код должен быть понимаемым.</li>
<li>Как улучшать код?</li>
<li>Базовая теорема читабельности кода.</li>
<li>Код должен минимизировать время, требуемое для его анализа другим человеком.</li>
<li>Всегда ли меньшее лучше?</li>
<li>Лучше писать понятно, чем &ldquo;клево&rdquo;.</li>
</ul>

<p>Стиль изложения краткий и конкретный. Я даже был удивлен, как они меньше чем за двести страниц хотят раскрыть тему &ldquo;искусства&rdquo;. В итоге, я купил книгу, чтобы узнать это.</p>

<p>Если честно, я не пожалел несколько часов, потраченных на чтение. Я не нашел там откровений, но вот как четкое и конкретное пособие для новичков - это книга является неплохим сборником &ldquo;делай раз, делай два&rdquo;. Без теории, на примерах обсуждается:</p>

<ul>
<li>как именовать переменные, функции или классы</li>
<li>как структурировать код</li>
<li>как выбирать между эффективностью и читабельностью</li>
<li>как писать комментарии</li>
<li>где пойти на компромисс, а где оставаться непреклонным</li>
</ul>

<p>Также вкратце обсуждалось unit-тестирование.</p>

<p>Авторы не просто говорят, что хорошо, что плохо, но и на примерах показывают, как можно улучшать код. В конце книги рассматривается реальная задача - класс, подсчитывающий трафик в сети за последний час/день.</p>

<p>Сначала дается простая реализация, и затем приводятся еще две версии, в которых можно увидеть, как можно (или нужно) подходить к компромиссу между эффективностью и читабельностью.</p>

<p>Лично мне эта задача показалась очень подходящей для подобного объяснения.</p>

<p>Итак, если есть возможность купить эту книгу на работу, лишней она не будет. Ну а если для дома, для семьи лучше купить что-нибудь более фундаментальное.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Макрос для неиспользуемых параметров]]></title>
    <link href="http://demin.ws/blog/russian/2012/04/12/macro-for-unused-parameters/"/>
    <updated>2012-04-12T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/04/12/macro-for-unused-parameters/</id>
    <content type="html"><![CDATA[<p>Иногда бывает, что функция (или метод) имеет параметры, которые не используются в теле. Это может быть legacy или просто плохой дизайн. В этой ситуации хороший компилятор обычно ругается предупреждением.</p>

<p>Можно сделать:</p>

<pre class="hl">
<span class="hl kwb">void</span> <span class="hl kwd">f</span><span class="hl opt">(</span><span class="hl kwb">int</span> a<span class="hl opt">,</span> <span class="hl kwb">int</span> <span class="hl com">/* b */</span><span class="hl opt">) {</span>
  <span class="hl opt">...</span>
<span class="hl opt">}</span>
</pre>

<p>Но это как-то некрасиво.</p>

<p>Лучше сделать так:</p>

<pre class="hl">

<span class="hl ppc">#define DISCARD_UNUNSED_PARAMETER(x) (void)x</span>

<span class="hl kwb">void</span> <span class="hl kwd">f</span><span class="hl opt">(</span><span class="hl kwb">int</span> a<span class="hl opt">,</span> <span class="hl kwb">int</span> b<span class="hl opt">) {</span>
  <span class="hl kwd">DISCARD_UNUNSED_PARAMETER</span><span class="hl opt">(</span>b<span class="hl opt">);</span>
  <span class="hl opt">...</span>
<span class="hl opt">}</span>
</pre>

<p>Такое объявление наглядно, и можно легко найти все такие места в проекте.</p>

<p>Кстати, компилятор Go считает ошибкой, когда обнаруживается неиспользуемая переменная или подключен неиспользуемый модуль. Сначала это напрягает, так как при экспериментах ты так или иначе постоянно что-то добавляешь, убираешь, комментируешь, возвращаешь назад и т.д. При этом, конечно, появляются такие переменные и модули, и их надо постоянно исправлять. Но в итоге, такой подход не позволяет в коде оставаться мусору, который ты забыл убрать после экспериментов (ну кому охота чистить список подключенных, но возможно неиспользуемых модулей STL, например?).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Асинхронная загрузка скриптов JavaScript]]></title>
    <link href="http://demin.ws/blog/russian/2012/04/10/asynchronous-javascript-loading/"/>
    <updated>2012-04-10T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/04/10/asynchronous-javascript-loading/</id>
    <content type="html"><![CDATA[<p>Если приглядеться, то поле поиска на главной странице блога появляется с небольшой задержкой. Оно становится видимым только после полной загрузки скрипта с индексом. Но скрипт загружается асинхронно, в фоне. Для этого пришлось нагуглить вот такой код:</p>

<pre class="hl">
<span class="hl opt">&lt;</span>script language<span class="hl opt">=</span><span class="hl str">&quot;javascript&quot;</span><span class="hl opt">&gt;</span>
<span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">() {</span>
    <span class="hl kwa">function</span> <span class="hl kwd">async_load</span><span class="hl opt">(){</span>
        <span class="hl kwa">var</span> s <span class="hl opt">=</span> document<span class="hl opt">.</span><span class="hl kwd">createElement</span><span class="hl opt">(</span><span class="hl str">'script'</span><span class="hl opt">);</span>
        s<span class="hl opt">.</span>type <span class="hl opt">=</span> <span class="hl str">'text/javascript'</span><span class="hl opt">;</span>
        s<span class="hl opt">.</span>async <span class="hl opt">=</span> <span class="hl kwa">true</span><span class="hl opt">;</span>
        s<span class="hl opt">.</span>src <span class="hl opt">=</span> <span class="hl str">'URL скрипта для загрузки'</span><span class="hl opt">;</span>
        <span class="hl kwa">var</span> x <span class="hl opt">=</span> document<span class="hl opt">.</span><span class="hl kwd">getElementsByTagName</span><span class="hl opt">(</span><span class="hl str">'script'</span><span class="hl opt">)</span><span class="hl kwc">[0]</span><span class="hl opt">;</span>
        x<span class="hl opt">.</span>parentNode<span class="hl opt">.</span><span class="hl kwd">insertBefore</span><span class="hl opt">(</span>s<span class="hl opt">,</span> x<span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>window<span class="hl opt">.</span>attachEvent<span class="hl opt">)</span>
        window<span class="hl opt">.</span><span class="hl kwd">attachEvent</span><span class="hl opt">(</span><span class="hl str">'onload'</span><span class="hl opt">,</span> async_load<span class="hl opt">);</span>
    <span class="hl kwa">else</span>
        window<span class="hl opt">.</span><span class="hl kwd">addEventListener</span><span class="hl opt">(</span><span class="hl str">'load'</span><span class="hl opt">,</span> async_load<span class="hl opt">,</span> <span class="hl kwa">false</span><span class="hl opt">);</span>
<span class="hl opt">})();</span>
<span class="hl opt">&lt;/</span>script<span class="hl opt">&gt;</span>
</pre>

<p>Говорят, что это модный HTML5 совместимый способ. Идиома, так сказать.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[В блоге работает поиск]]></title>
    <link href="http://demin.ws/blog/russian/2012/04/10/search-in-this-blog/"/>
    <updated>2012-04-10T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/04/10/search-in-this-blog/</id>
    <content type="html"><![CDATA[<p>Как было верно подмечено, в новой версии блога нет тегов у постов. Нет, технически они, конечно, есть. И тем более теги постов старого блога никуда не потерялись при переезде. Просто они не отображаются, и не реализована какая-либо навигация по ним.</p>

<p>Почему?</p>

<p>Я сам очень часто ищу старые посты в своем блоге, например, когда пишешь новый пост. Раньше я просто заходил на главную страницу и делал CTRL-F по фрагментам заголовков (видели, что практически все информативные посты были выведены заголовками в правую колонку?). Это было не совсем удобно, но тегами я все равно не пользовался никогда. Да и на чужих блогах я крайне редко использую теги. Разве чтобы через &ldquo;облако тегов&rdquo; понять круг интересы автора, но и только. Кроме того, теги имеют тенденцию &ldquo;протухать&rdquo;. Однажды не очень правильно присвоенный тег приходится поддерживать. Ну вот какой смысл тега &ldquo;c++&rdquo; у меня блоге?</p>

<p>Можно еще предположить, что кто-то захочет подписаться на feed-ленту конкретного тега, но, опять таки, у меня маленький блог, постов и так немного, и вероятность такого крайне мала.</p>

<p>В общем, сделаем по-гугловски: Don&rsquo;t sort. Search!</p>

<p>На <a href="/">странице каталога</a> блога теперь есть поиск (справа).</p>

<p>Это контекстный поиск по словам всех постов. Индексируются заголовки и сами посты. Поиск работает через простейший обратный индекс. Сортировки по релевантности нет - выводятся все посты в стандартной сортировке по дате создания, где встречаются введенные слова.</p>

<p>Попробуйте, например, ввести &ldquo;putenv&rdquo; в строку поиска, или &ldquo;erlang&rdquo;, а потом добавить еще слово &ldquo;tcp&rdquo;. Если задано несколько слов в поиска, ищутся посты, где встречаются <strong>все</strong> слова. Слова, короче трех символов, игнорируются.</p>

<p>По мне - так очень удобно!</p>

<p>Проверено в Chrome и Safari на Маке.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Различие герундиальных и инфинитивных оборотов]]></title>
    <link href="http://demin.ws/blog/russian/2012/04/06/differences-between-gerund-and-infinitive-expressions/"/>
    <updated>2012-04-06T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/04/06/differences-between-gerund-and-infinitive-expressions/</id>
    <content type="html"><![CDATA[<p>Ведь программисты должны знать английский, не так ли? Вот я и решил, что некоторые посты можно посвящать животрепещащим (для меня) темам из этой области.</p>

<p>Сегодня на повестке дня тема употребления <a href="http://ru.wikipedia.org/wiki/%D0%93%D0%B5%D1%80%D1%83%D0%BD%D0%B4%D0%B8%D0%B9">герундиев</a> и инфинитивов после глаголов. Например, как правильно:</p>

<p>&ldquo;He intended to finish it.&rdquo; или &ldquo;He intended finishing it.&rdquo;</p>

<p>или</p>

<p>&ldquo;He recommended to finish it.&rdquo; или &ldquo;He recommended finishing it.&rdquo;?</p>

<p>Как это обычно бывает, в данном случае работает рекомендация из фильма моего детства &ldquo;<a href="http://ru.wikipedia.org/wiki/%D0%9C%D0%BE%D1%81%D0%BA%D0%B2%D0%B0_%E2%80%94_%D0%9A%D0%B0%D1%81%D1%81%D0%B8%D0%BE%D0%BF%D0%B5%D1%8F">Москва-Кассиопея</a>&rdquo;, звучащая так: &ldquo;чего тут думать, тут знать надо!&rdquo;</p>

<p>Брат нагуглил как-то небольшую подборочку-справочник (см. ниже), которой лично я регулярно пользуюсь при написании чего-либо на английском.</p>

<p>Увы, сам я &ldquo;не чувствую&rdquo; как правильно и, главное, почему. Если кто-то обладает способом это <em>понять</em>, а не запомнить - буду очень признателен.</p>

<hr />

<p>Одной из проблем, связанных с выбором точного английского эквивалента, является согласование некоторых глаголов с герундием и инфинитивом. После некоторых глаголов можно использовать только инфинитив, после некоторых — только герундий, некоторые же глаголы допускают после себя использование и инфинитива, и герундия.</p>

<p>Инфинитив используется, как правило, после следующих глаголов:</p>

<ul>
<li>agree / <em>соглашаться</em></li>
<li>intend / <em>намереваться</em></li>
<li>appear / <em>казаться, появляться</em></li>
<li>learn / <em>узнавать, учить</em></li>
<li>arrange / <em>устраивать, организовывать</em></li>
<li>manage / <em>справляться, успешно выполнять</em></li>
<li>ask / <em>просить, спрашивать</em></li>
<li>mean / <em>подразумевать, иметь в виду</em></li>
<li>claim / <em>требовать, признавать</em></li>
<li>offer / <em>предлагать</em></li>
<li>consent / <em>соглашаться, смиряться</em></li>
<li>plan / <em>планировать</em></li>
<li>decide / <em>решать</em></li>
<li>prepare / <em>готовить</em></li>
<li>demand / <em>требовать</em></li>
<li>pretend / <em>притворяться, представлять себе</em></li>
<li>deserve / <em>заслуживать</em></li>
<li>promise / <em>обещать</em></li>
<li>expect / <em>ожидать</em></li>
<li>refuse / <em>отказывать</em></li>
<li>fail / <em>терпеть неудачу</em></li>
<li>seem / <em>казаться</em></li>
<li>forget / <em>забывать</em></li>
<li>threaten / <em>угрожать</em></li>
<li>hesitate / <em>колебаться</em></li>
<li>wait / <em>ждать</em></li>
<li>hope / <em>надеяться</em></li>
<li>want / <em>хотеть</em>.</li>
</ul>

<p>Примеры:</p>

<p>We hope to buy a car. &ndash; <em>Мы надеемся купить машину</em>.</p>

<p>You expected to get all information you need. &ndash; <em>Ты ожидал, что получишь всю необходимую тебе информацию</em>.</p>

<p>He doesn&rsquo;t want to produce these goods. &ndash; <em>Он не хочет производить эти товары</em>.</p>

<p>You want to use a new computer. &ndash; <em>Ты хочешь использовать новый компьютер</em>.</p>

<p>He deserves to be sent to prison. &ndash; <em>Он заслуживает того, чтобы его отправили в тюрьму</em>.</p>

<p>После следующих глаголов, как правило, используется герундий:</p>

<ul>
<li>forbid / <em>запрещать</em></li>
<li>admit / <em>признавать</em></li>
<li>mention / <em>упоминать</em></li>
<li>appreciate / <em>ценить, признавать</em></li>
<li>miss / <em>пропускать, скучать</em></li>
<li>avoid / <em>избегать</em></li>
<li>postpone / <em>откладывать</em></li>
<li>complete / <em>завершать</em></li>
<li>practise / <em>практиковать</em></li>
<li>consider / <em>считать, оценивать</em></li>
<li>quit / <em>прекращать, бросать</em></li>
<li>delay / <em>откладывать</em></li>
<li>recall / <em>вспоминать</em></li>
<li>deny / <em>отрицать</em></li>
<li>recommend / <em>рекомендовать</em></li>
<li>discuss / <em>обсуждать</em></li>
<li>risk / <em>рисковать</em></li>
<li>enjoy / <em>наслаждаться, получать удовольствие</em></li>
<li>suggest / <em>предлагать</em></li>
<li>finish / <em>заканчивать</em></li>
<li>tolerate / <em>терпеть, выносить</em></li>
<li>keep / <em>держать, продолжать</em></li>
<li>understand / <em>понимать</em></li>
<li>regret / <em>сожалеть</em>.</li>
</ul>

<p>Примеры:</p>

<p>He enjoys talking to you. &ndash; <em>Он получает удовольствие от разговоров с тобой</em>.</p>

<p>They postponed leaving. &ndash; <em>Они отложили отъезд</em>.</p>

<p>They stopped firing. &ndash; <em>Они прекратили стрельбу</em>.</p>

<p>He regrets being unable to help. &ndash; <em>Он сожалеет, что не мoжет помочь</em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NOR Machine на Ruby]]></title>
    <link href="http://demin.ws/blog/russian/2012/03/07/nor-machine-in-ruby/"/>
    <updated>2012-03-07T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/03/07/nor-machine-in-ruby/</id>
    <content type="html"><![CDATA[<p>Моя статья &ldquo;<a href="http://pragprog.com/magazines/2012-03/the-nor-machine">Build a CPU with Only One Instruction</a>&rdquo; в &ldquo;The Pragmatic Bookshelf magazine&rdquo;.</p>

<p>В статье реалиазация на Ruby. Так как в Ruby можно опускать скобки вокруг параметров при вызове функций, то сейчас целевой код выглядит ну почти на настоящий ассемблер. И не скажешь, что это Ruby.</p>

<p>Посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2010/03/26/one-command-cpu/">Модель процессора с одной командой</a></li>
<li><a href="http://demin.ws/blog/russian/2011/02/08/norcpu-hack-me-challenge/">NORCPU hackme challenge или взлом программы для однокомандного процессора</a></li>
<li><a href="http://demin.ws/blog/russian/2011/02/16/norcpu-hack-me-challenge-analysis/">Анализ результатов взлома программы однокомандного процессора NORCPU</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Рожденный копипастом]]></title>
    <link href="http://demin.ws/blog/russian/2012/02/06/born-by-copy-paste/"/>
    <updated>2012-02-06T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/02/06/born-by-copy-paste/</id>
    <content type="html"><![CDATA[<p>Всем своими фибрами ненавижу копипаст с участием переменных с номерами. При очередном копипасте вероятность забыть исправить одну циферку крайне велика. Например, ужасный кусок кода (не правда ли, просто найти опечатку?):</p>

<pre class="hl">
<span class="hl kwb">void</span> <span class="hl kwd">Test_SplitPair</span><span class="hl opt">() {</span>
  <span class="hl kwc">typedef</span> std<span class="hl opt">::</span>pair<span class="hl opt">&lt;</span>std<span class="hl opt">::</span>string<span class="hl opt">,</span> std<span class="hl opt">::</span>string<span class="hl opt">&gt;</span> Pair<span class="hl opt">;</span>
  <span class="hl kwa">using</span> string<span class="hl opt">::</span>SplitPair<span class="hl opt">;</span>

  <span class="hl kwb">const</span> Pair p1 <span class="hl opt">=</span> <span class="hl kwd">SplitPair</span><span class="hl opt">(</span><span class="hl str">&quot;&quot;</span><span class="hl opt">,</span> <span class="hl str">'='</span><span class="hl opt">);</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>p1<span class="hl opt">.</span>first<span class="hl opt">.</span><span class="hl kwd">empty</span><span class="hl opt">());</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>p1<span class="hl opt">.</span>second<span class="hl opt">.</span><span class="hl kwd">empty</span><span class="hl opt">());</span>

  <span class="hl kwb">const</span> Pair p2 <span class="hl opt">=</span> <span class="hl kwd">SplitPair</span><span class="hl opt">(</span><span class="hl str">&quot;=&quot;</span><span class="hl opt">,</span> <span class="hl str">'='</span><span class="hl opt">);</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>p2<span class="hl opt">.</span>first<span class="hl opt">.</span><span class="hl kwd">empty</span><span class="hl opt">());</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>p2<span class="hl opt">.</span>second<span class="hl opt">.</span><span class="hl kwd">empty</span><span class="hl opt">());</span>

  <span class="hl kwb">const</span> Pair p3 <span class="hl opt">=</span> <span class="hl kwd">SplitPair</span><span class="hl opt">(</span><span class="hl str">&quot;name=value&quot;</span><span class="hl opt">,</span> <span class="hl str">'='</span><span class="hl opt">);</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>p3<span class="hl opt">.</span>first <span class="hl opt">==</span> <span class="hl str">&quot;name&quot;</span><span class="hl opt">);</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>p3<span class="hl opt">.</span>second <span class="hl opt">==</span> <span class="hl str">&quot;value&quot;</span><span class="hl opt">);</span>

  <span class="hl kwb">const</span> Pair p4 <span class="hl opt">=</span> <span class="hl kwd">SplitPair</span><span class="hl opt">(</span><span class="hl str">&quot;name = value&quot;</span><span class="hl opt">,</span> <span class="hl str">'='</span><span class="hl opt">);</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>p3<span class="hl opt">.</span>first <span class="hl opt">==</span> <span class="hl str">&quot;name&quot;</span><span class="hl opt">);</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>p3<span class="hl opt">.</span>second <span class="hl opt">==</span> <span class="hl str">&quot;value&quot;</span><span class="hl opt">);</span>

  <span class="hl kwb">const</span> Pair p5 <span class="hl opt">=</span> <span class="hl kwd">SplitPair</span><span class="hl opt">(</span><span class="hl str">&quot; n ame</span>  <span class="hl esc">\t</span> <span class="hl str">=  va lue</span>  <span class="hl esc">\r\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> <span class="hl str">'='</span><span class="hl opt">);</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>p5<span class="hl opt">.</span>first <span class="hl opt">==</span> <span class="hl str">&quot; n ame</span>  <span class="hl esc">\t</span> <span class="hl str">&quot;</span><span class="hl opt">);</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>p5<span class="hl opt">.</span>second <span class="hl opt">==</span> <span class="hl str">&quot;  va lue</span>  <span class="hl esc">\r\n</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
<span class="hl opt">}</span>
</pre>

<p>Как его можно улучшить? Например, разбить на отдельные тесты. Это идеальный вариант. Но можно сделать и так (что лично на мой взгляд не так уж и плохо), чтобы решить проблему копипаста новых примеров:</p>

<pre class="hl">
<span class="hl kwb">void</span> <span class="hl kwd">Test_SplitPair</span><span class="hl opt">() {</span>
  <span class="hl kwc">typedef</span> std<span class="hl opt">::</span>pair<span class="hl opt">&lt;</span>std<span class="hl opt">::</span>string<span class="hl opt">,</span> std<span class="hl opt">::</span>string<span class="hl opt">&gt;</span> Pair<span class="hl opt">;</span>
  <span class="hl kwa">using</span> string<span class="hl opt">::</span>SplitPair<span class="hl opt">;</span>
  <span class="hl opt">{</span>
  <span class="hl kwb">const</span> Pair p <span class="hl opt">=</span> <span class="hl kwd">SplitPair</span><span class="hl opt">(</span><span class="hl str">&quot;&quot;</span><span class="hl opt">,</span> <span class="hl str">'='</span><span class="hl opt">);</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>p<span class="hl opt">.</span>first<span class="hl opt">.</span><span class="hl kwd">empty</span><span class="hl opt">());</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>p<span class="hl opt">.</span>second<span class="hl opt">.</span><span class="hl kwd">empty</span><span class="hl opt">());</span>
  <span class="hl opt">}</span>
  <span class="hl opt">{</span>
  <span class="hl kwb">const</span> Pair p <span class="hl opt">=</span> <span class="hl kwd">SplitPair</span><span class="hl opt">(</span><span class="hl str">&quot;=&quot;</span><span class="hl opt">,</span> <span class="hl str">'='</span><span class="hl opt">);</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>p<span class="hl opt">.</span>first<span class="hl opt">.</span><span class="hl kwd">empty</span><span class="hl opt">());</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>p<span class="hl opt">.</span>second<span class="hl opt">.</span><span class="hl kwd">empty</span><span class="hl opt">());</span>
  <span class="hl opt">}</span>
  <span class="hl opt">{</span>
  <span class="hl kwb">const</span> Pair p <span class="hl opt">=</span> <span class="hl kwd">SplitPair</span><span class="hl opt">(</span><span class="hl str">&quot;name=value&quot;</span><span class="hl opt">,</span> <span class="hl str">'='</span><span class="hl opt">);</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>p<span class="hl opt">.</span>first <span class="hl opt">==</span> <span class="hl str">&quot;name&quot;</span><span class="hl opt">);</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>p<span class="hl opt">.</span>second <span class="hl opt">==</span> <span class="hl str">&quot;value&quot;</span><span class="hl opt">);</span>
  <span class="hl opt">}</span>
  <span class="hl opt">{</span>
  <span class="hl kwb">const</span> Pair p <span class="hl opt">=</span> <span class="hl kwd">SplitPair</span><span class="hl opt">(</span><span class="hl str">&quot;name = value&quot;</span><span class="hl opt">,</span> <span class="hl str">'='</span><span class="hl opt">);</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>p<span class="hl opt">.</span>first <span class="hl opt">==</span> <span class="hl str">&quot;name&quot;</span><span class="hl opt">);</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>p<span class="hl opt">.</span>second <span class="hl opt">==</span> <span class="hl str">&quot;value&quot;</span><span class="hl opt">);</span>
  <span class="hl opt">}</span>
  <span class="hl opt">{</span>
  <span class="hl kwb">const</span> Pair p <span class="hl opt">=</span> <span class="hl kwd">SplitPair</span><span class="hl opt">(</span><span class="hl str">&quot; n ame</span>  <span class="hl esc">\t</span> <span class="hl str">=  va lue</span>  <span class="hl esc">\r\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> <span class="hl str">'='</span><span class="hl opt">);</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>p<span class="hl opt">.</span>first <span class="hl opt">==</span> <span class="hl str">&quot; n ame</span>  <span class="hl esc">\t</span> <span class="hl str">&quot;</span><span class="hl opt">);</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>p<span class="hl opt">.</span>second <span class="hl opt">==</span> <span class="hl str">&quot;  va lue</span>  <span class="hl esc">\r\n</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
  <span class="hl opt">}</span>
<span class="hl opt">}</span>
</pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Брюс Тейт, "Семь языков за семь недель"]]></title>
    <link href="http://demin.ws/blog/russian/2012/02/02/seven-languages-in-seven-weeks/"/>
    <updated>2012-02-02T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/02/02/seven-languages-in-seven-weeks/</id>
    <content type="html"><![CDATA[<p>Закончил ускоренное чтение по диагонали книги &ldquo;<a href="http://pragprog.com/book/btlang/seven-languages-in-seven-weeks">Seven languages in seven weeks</a>&rdquo;, автор Bruce Tate.</p>

<p><img src="http://demin.ws/images/covers/english/7-languages-in-7-weeks-cover.jpg" /></p>

<p>В моей версии это было &ldquo;Семь языков за семь вечеров&rdquo;. Для каждого языка дается минимальное введение, которое имеет смысл только если язык для вас вообще новый. Еще приводятся мини интервью с создателями языков, и один из интересных задаваемых им вопросов - это &ldquo;чтобы вы сделали в языке иначе, если б можно начать сначала&rdquo;.</p>

<p>Описываются языки:</p>

<ul>
<li>Ruby</li>
<li>Io</li>
<li>Prolog</li>
<li>Scala</li>
<li>Erlang</li>
<li>Clojure</li>
<li>Haskell</li>
</ul>

<p>Обзор каждой главы - это мой субъективный взгляд на две вещи сразу: язык программирования и материал главы про него. Объясню почему - для знакомых языков вряд ли имеет смысл описывать сам язык. Может имеет смысл отметить интересные отличительные моменты. А вроде для неизученных, типа Пролога или Clojure, можно и остановиться немного на самом языке.</p>

<p><strong>Ruby</strong></p>

<p>Про Ruby ничего особенно из книги не вынес, так как вдумчиво читал &ldquo;<a href="http://pragprog.com/book/ruby3/programming-ruby-1-9">Programming Ruby 1.9</a>&rdquo;, после чего подсел на этот язык. Ruby - фантастический скриптовой язык. Каждый раз, когда пишу на нем, испытываю удовольствие примерно такое, когда я после Perl&rsquo;а попробовал в первый раз PHP.</p>

<p>Автор языка сказал в интервью, что, создавая бы язык заново сегодня, он бы хотел для многопоточности вместо традиционных потоков сделать модель <a href="http://ru.wikipedia.org/wiki/%D0%9C%D0%BE%D0%B4%D0%B5%D0%BB%D1%8C_%D0%B0%D0%BA%D1%82%D0%BE%D1%80%D0%BE%D0%B2">actor</a>.</p>

<p>В двух словах, Actor - это когда параллельные потоки разделяют ресурсы не через память и механизмы синхронизации типа мьютексов и семафоров, а через обмен сообщениями, прием и посылка которых обеспечиваются средой, и они встроены в синтаксис языка. Например, как в Scala, Go, Erlang, Io.</p>

<p><strong>Io</strong></p>

<p><a href="http://iolanguage.com/">Io</a> очень компактный, на мой взгляд эзотерический язык, основанный на прототипах, как JavaScript, когда нет четкого разделения между классами и объектами. Минимальный и очень простой синтаксис.</p>

<p>Интересный механизм многопоточности в дополнение к actor и coroutine (коллективная многозадачность, как в <a href="http://www.lua.org/manual/5.2/manual.html#2.6">Coroutines</a> в Lua), называемый futures. &ldquo;Future&rdquo; - это вроде бы как обычный actor, поток запущенный работать параллельно. Но с одним отличием: как только создающий поток попытается воспользоваться результатом future, он будет заблокирован до тех пор, пока future не вычислит это значение.</p>

<p>Примерчик из книги:</p>

<pre class="hl">
<span class="hl opt">//</span> Запускаем future
futureResult <span class="hl opt">:=</span> <span class="hl kwb">URL</span> <span class="hl kwd">with</span><span class="hl opt">(</span><span class="hl str">&quot;http://google.com/&quot;</span><span class="hl opt">) &#64;</span>fetch
<span class="hl kwd">writeln</span><span class="hl opt">(</span><span class="hl str">&quot;Сразу начинаем делать что еще, пока future работает в фоне.&quot;</span><span class="hl opt">)</span>
<span class="hl opt">//</span> Эта строка будет выполнена сразу<span class="hl opt">.</span>
<span class="hl kwd">writeln</span><span class="hl opt">(</span><span class="hl str">&quot;fetched &quot;</span><span class="hl opt">,</span> futureResult size<span class="hl opt">,</span> <span class="hl str">&quot; bytes&quot;</span><span class="hl opt">)</span>
<span class="hl opt">//</span> А вот эта строка будет заблокирована<span class="hl opt">,</span> пока future не выполнится<span class="hl opt">.</span>
</pre>

<p>Идем дальше, <strong>Prolog</strong>.</p>

<p>Этого зверя я грызу давно. К счастью, благодаря освоению Erlang&rsquo;а, я стал реально въезжать в функциональную тему в целом, и монстры типа Пролога или Хаскелла уже не за пределами понимания.</p>

<p>Так совпало, что глубина материала по Прологу легла точно для моего уровня. Задача восьми ферзей и поиска решений Судоку были для меня отличными примерами.</p>

<p>В двух словах: программа для Прологе - это набор фактов и связей между ними. Затем Пролог, выполняя программу, поиском в глубину обходит пространство решений и выбирает те, которые удовлетворяют всем заданным фактам и связям между ними.</p>

<p>Фактические программа поиска решения Судоку - это набор переменных, составляющих клетки поля Судоку, и набор правил - разнообразные суммирования по группам, по строками и столбцам (по правилам Судоку). И затем Пролог перебором ищет подходящие значения и комбинации переменных.</p>

<p>Конечно, это очень поверхностный взгляд, но который лично мне добавил много понимания.</p>

<p>Идем дальше, <strong>Scala</strong>.</p>

<p>Отмечу только отдельные факты, интересные мне.</p>

<p>Многопоточность на основе actors, то есть когда потоки обмениваются сообщениями. После Go и Erlang понимаешь как это удобно и правильно.</p>

<p>Про остальное - по-моему в Scalа есть все возможные свистелки и перделки, когда-либо придуманные в области языков программирования. В общем, если вы фанат Java VM, то надо брать полноценную книгу по Scala и грызть ее.</p>

<p>Идем далее, <strong>Erlang</strong>.</p>

<p>Тут тоже скажу мало, так как я фанат этого языка, и уровень этой книги мне был мал, но введение дается хорошее для ознакомления с функциональной сутью Erlang&rsquo;а и его моделью многопоточности.</p>

<p><strong>Clojure</strong></p>

<p>Снова язык на основе Java VM. Clojure - это разновидность Лиспа со всеми вытекающими.</p>

<p>Интересная возможность языка, в общем-то не связанная с его лисповой сущностью - это STM, <a href="http://ru.wikipedia.org/wiki/%D0%9F%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%BD%D0%B0%D1%8F_%D1%82%D1%80%D0%B0%D0%BD%D0%B7%D0%B0%D0%BA%D1%86%D0%B8%D0%BE%D0%BD%D0%BD%D0%B0%D1%8F_%D0%BF%D0%B0%D0%BC%D1%8F%D1%82%D1%8C">software transactional memory</a>. Это когда некий кусок кода в программе объявляется транзакцией, и он выполняется атомарно, либо все изменения откатываются.</p>

<p>Ну и под занавес, <strong>Haskell</strong>.</p>

<p>Хаскелл суров, и данная книга - это крайне минимальное введение, просто для запоминания слова Хаскелл. Я кое как осилил <a href="http://www.ozon.ru/context/detail/id/3039995/?partner=easy-coding">отличную книгу Душкина</a> и &ldquo;<a href="http://www.amazon.co.uk/Programming-Haskell-Graham-Hutton/dp/0521692695">Programming in Haskell</a>&rdquo;, а сейчас читаю &ldquo;<a href="http://www.amazon.co.uk/Real-World-Haskell-Bryan-OSullivan/dp/0596514980">Real World Haskell</a>&rdquo;, поэтому главу этой книги просто пролистал.</p>

<p><strong>Вывод</strong>: книга 100% одноразовая, но, как говориться, раз не&hellip; полезно для кругозора и для программистских терок на кухне.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Мои текущие языки]]></title>
    <link href="http://demin.ws/blog/russian/2012/01/30/my-current-languages/"/>
    <updated>2012-01-30T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/01/30/my-current-languages/</id>
    <content type="html"><![CDATA[<p>Последнее время осознал, что на данный момент тяготею к изучению новых языков программирования. Симптом очень простой: у меня есть постоянный список из 5-6 книг, которые находятся в состоянии чтения. Благодаря электронному и мобильному способу чтения можно их всегда иметь с собой (как, впрочем, и все остальные тоже) и читать по настроению. И что удивительно, книги по языкам постоянно завершаются первыми и заменяются новыми.</p>

<p>Просто хотел поделиться текущими интересами.</p>

<p>Каждодневная работа (проектирование, планирование, кодирование и ревью): C и С++. Тут C++ 0x11 полным ходом, и надо подтягиваться. <a href="http://accu.org/index.php/conferences/accu_conference_2012/accu2012_schedule">ACCU 2012</a> в этом году посвящен в основном новому C++.</p>

<p>Для души:</p>

<ul>
<li>скриптование - Ruby</li>
<li>серверное и многопоточное - Erlang и Go</li>
<li>встраивание сценариев - Lua и Scheme</li>
</ul>

<p>Для &ldquo;погрызть&rdquo; в надежде когда-нибудь написать что-нибудь реальное - Haskell и немного Пролог (тут надежд совсем мало).</p>

<p>В очереди на хотя бы минимальное ознакомление: Clojure. Тут надежд больше, так как это все-таки Lisp.</p>

<p>С общей недавней миграцией на Мак хочется попробовать в действии Objective-C и AppleScript. А что еще писать на Маке, да еще и на Objective-C? Конечно UI! А UI это на 200% не мой профиль. Но, если серьезно, сложно загасить внутреннюю хотелку освоить Objective-C, когда тут вокруг всякие iOS&rsquo;ы.</p>

<p>Из недавнего ознакомленного, но в которое не втянулся:</p>

<ul>
<li>Scala - большой язык, требующий погружения и, без реальной подходящей задачи как-то нет запала. Ну не Твиттер же новый писать? ;-).</li>
<li>Racket - вот этот зверь мне очень понравился как лисповый язык с мощной библиотекой всего. Но как обратная сторона, язык получился большой, как Scala, и как-то пока не подвернулось подходящей интересной задачи.</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Визуализация графов в языке DOT]]></title>
    <link href="http://demin.ws/blog/russian/2012/01/26/graph-visualization-in-dot/"/>
    <updated>2012-01-26T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/01/26/graph-visualization-in-dot/</id>
    <content type="html"><![CDATA[<p>Предыстория. Мы обрабатываем финансовые транзакции. Возникла задача профилирования. Решили записать путь прохода транзакции по системе и построить граф связей между модулями - кто кого вызывает. Два способа построения: на основе статического анализа исходников и через трассировку реальных вызовов во время выполнения.</p>

<p>Итак, связи зафиксированы. Теперь их надо их как-то представить и построить граф, визуально.</p>

<p>Вроде не самая тривиальная задача, но оказывается, решается весьма просто.</p>

<p>Есть такой язык представления графов, называется <a href="http://ru.wikipedia.org/wiki/DOT_(%D1%8F%D0%B7%D1%8B%D0%BA)">DOT</a>. Прелесть его в предельной простоте. Например, простейший граф:</p>

<pre><code>graph name {
  a -- b
  b -- c
  b -- d
}
</code></pre>

<p>Натравливаешь на это дело специальную программу и получаешь:</p>

<p><img src="http://demin.ws/images/blog/dot-graph.png" /></p>

<p>Все! Картинка на выходе в SVG. Можно хоть на стену вешать.</p>

<p>К сожалению, лучший софт, что я нашел для визуализации DOT - это <a href="http://www.graphviz.org/">Graphviz</a>. Вроде и работает неплохо, строя весьма большие графы, и есть на всех платформах, благодаря Java, но по интерфейсу - это запредельный и неописуемый кусок говна. Увы.</p>

<p>Если кому интересно, я выложил <a href="http://demin.ws/downloads/dot/graph.gv">пример реальной трассировки</a> (по понятным причинам, имена изменены). В целом дает представление о простоте исходника и о возможностях визуализации - <a href="http://demin.ws/downloads/dot/graph.png">PNG</a> и <a href="http://demin.ws/downloads/dot/graph.svg">SVG</a>.</p>

<p>Повторюсь - процесс формализации графа крайне прост - нужно только задать пары связанных вершин. Можно делать направленные графы, можно задавать вершинам и дугам разные атрибуты.</p>

<p>В целом, отличная технология.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maximite: Ностальгия по временам Радио-86РК и Спектрума с паяльником в руках]]></title>
    <link href="http://demin.ws/blog/russian/2012/01/19/maximite-kit/"/>
    <updated>2012-01-19T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/01/19/maximite-kit/</id>
    <content type="html"><![CDATA[<p>Некоторое время назад я наткнулся на интересный проект - Maximite.</p>

<p>Это микрокомпьютер на базе Microchip PIC32 со встроенным Бейсиком. Прелесть тут в том, что собрать его можно за пару часов.</p>

<p><img src="http://demin.ws/images/blog/maximite-kit/maximite-overview.jpg" /></p>

<p>По возможностям он немного мощнее Радио-86РК и классического Спектрума. Но вот периферия у него сказочная: SD/FAT карточка, USB, VGA, PS/2, таймеры, RS232, I2C, SPI, PWM, ADC/DAC и просто одиночные порты-пины общего назначения.</p>

<p>Если собирать на макетной плате, то цена будет, по заявлению автора, менее десяти австралийских долларов.</p>

<p><a href="http://geoffg.net/maximite.html">Проект полностью открытый</a>. Автор дает схемы, исходные коды прошивки и рекомендации по наладке.</p>

<p>Если даже быстро пролистать <a href="http://mmbasic.com/downloads.html">документацию</a>, видно, возможностей прорва. Можно практически на коленке создавать различные мини-контроллеры чего угодно. Работа со всей выше перечисленной периферией ведется прямо из Бейсика.</p>

<p>Программы и данные можно хранить на SD карточке. Если на карточке есть файл <code>AUTORUN.BAS</code>, то прошивка автоматически запускает его при старте.</p>

<p>Мне это все понравилось, но паять мне было лень. А в интернете продавались только конструкторы.</p>

<p>В итоге я заказал <a href="http://www.altronics.com.au/index.asp?area=item&amp;id=K9550">конструктор у Altronics</a>.</p>

<p>И вот он пришел. На плате запаян только микропроцессор, ибо для пайки такого корпуса надо либо иметь паяльную станцию, либо большое умение.</p>

<p>Поехали.</p>

<p><img src="http://demin.ws/images/blog/maximite-kit/img_0099.jpg" /></p>

<p>Вот тут я уже припаял несколько элементов. Я в пайке не совсем новичок, но держал паяльник в руках последний раз лет пять назад. Кислоты у меня не было, поэтому для ускорения процесса я выкрашивал канифоль прямо на точки пайки. Эффект примерно такой же. Паяльник (тот, что в тарелке) с острым жалом.</p>

<p><img src="http://demin.ws/images/blog/maximite-kit/img_0102.jpg" /></p>

<p>Первый час я возился с несколькими элементами, но потом дело наладилось.</p>

<p>Вот тут уже готова половина.</p>

<p><img src="http://demin.ws/images/blog/maximite-kit/img_0103.jpg" /></p>

<p>Но еще через час все было готово.</p>

<p><img src="http://demin.ws/images/blog/maximite-kit/img_0106.jpg" /></p>

<p><img src="http://demin.ws/images/blog/maximite-kit/img_0107.jpg" /></p>

<p>Maximite может питаться либо от внешних 9 вольт, либо от USB. Я подключил вторым способом.</p>

<p>Итак, запуск. Подключаем USB и VGA к монитору. Работает!</p>

<p><img src="http://demin.ws/images/blog/maximite-kit/img_0110.jpg" /></p>

<p>Бейсик готов выполнять команды, но пока нет клавиатуры. Чисто PS/2 клавиатуры у меня не было, поэтому я попытался через USB-PS/2 переходник. Увы, воткнуть не получилось.</p>

<p><img src="http://demin.ws/images/blog/maximite-kit/img_0111.jpg" /></p>

<p>На следующий день я взял у наших айтишников старую PS/2 клавиатуру и таки подключился.</p>

<p><img src="http://demin.ws/images/blog/maximite-kit/img_0119.jpg" /></p>

<p>Корпус.</p>

<p><img src="http://demin.ws/images/blog/maximite-kit/img_0114.jpg" /></p>

<p><img src="http://demin.ws/images/blog/maximite-kit/img_0115.jpg" /></p>

<p>В закрытом виде.</p>

<p><img src="http://demin.ws/images/blog/maximite-kit/img_0112.jpg" />
<img src="http://demin.ws/images/blog/maximite-kit/img_0113.jpg" /></p>

<p>Надо отдать должное - конструктор от Altronics отличного качества. Отверстия на плате металлизированы, что значительно упрощается пайку. Корпус моментально собирается.</p>

<p>Теперь надо было обновить прошивку, так как автор проекта уже успел ее значительно улучшить с момента выпуска конструктора.</p>

<p>Maximite имеет встроенную возможность обновления прошивки, и специальный программатор не нужен. Надо открыть корпус и перезапустить Maximite, удерживая специальный микро-выключатель. Устройство впадает в состояние boot loader&rsquo;а, и специальной утилитой через USB можно заливать обновление.</p>

<p>Maximite видится в USB-подсистеме как стандартное CDC устройство. Но для Windows нужно все равно сначала поставить драйвер для создания виртуального COM-порта. На Маке этот драйвер встроен.</p>

<p>Подключаем.</p>

<p><img src="http://demin.ws/images/blog/maximite-kit/img_0116.jpg" /></p>

<p>Заливаем.</p>

<p><img src="http://demin.ws/images/blog/maximite-kit/img_0118.jpg" /></p>

<p>Ура. Прошивка обновлена с 2.1 до последней 3.0A.</p>

<p>Как я уже говорил, Maximite поддерживает VGA для дисплея и PS/2 для клавиатуры. Но это не все. Если подключить Maximite через USB к компьютеру, то кроме питания можно запустить программу эмулятор терминала, которая через виртуальный порт RS232 (работающий через USB) может обмениться данными с Maximite. Все, что Maximite выводит на VGA также дублируется в порт, а все что Maximite получает из порта расценивается как принятое с клавиатуры.</p>

<p>То есть можно вообще отключить VGA и PS/2 и работать чисто через терминал. Это офигительная возможность.</p>

<p>Например, картинка с VGA (вольтметр):</p>

<p><img src="http://demin.ws/images/blog/maximite-kit/dsc01130.jpg" /></p>

<p>И одновременно с экрана терминала:</p>

<p><img src="http://demin.ws/images/blog/maximite-kit/dsc01129.jpg" /></p>

<p>Забавно, экран у Maximite работает с точками, а не со знакоместами. Когда на экран выводится символ, то он дублируется, как я уже сказал, в терминале. А если рисуется графика, то она, естественно, в терминале не видна.</p>

<p>Диалект Бейсика в Maximite немного необычен, но зато дает доступ ко всей периферии без ограничения, причем прямо операторами языка.</p>

<p>На сайте автора есть архив с программами на Бейсике, демонстрирующие некоторые возможности Maximite.</p>

<p>Я приведу несколько картинок.</p>

<p>Часы.</p>

<p><img src="http://demin.ws/images/blog/maximite-kit/dsc01125.jpg" /></p>

<p>Редактор знакогенератора.</p>

<p><img src="http://demin.ws/images/blog/maximite-kit/dsc01123.jpg" /></p>

<p>Вольметр.</p>

<p><img src="http://demin.ws/images/blog/maximite-kit/dsc01132.jpg" /></p>

<p>Пару головоломок.</p>

<p><img src="http://demin.ws/images/blog/maximite-kit/dsc01128.jpg" /></p>

<p><img src="http://demin.ws/images/blog/maximite-kit/dsc01133.jpg" /></p>

<p>А что это, думаю, объяснять не надо.</p>

<p><img src="http://demin.ws/images/blog/maximite-kit/dsc01126.jpg" />
<img src="http://demin.ws/images/blog/maximite-kit/dsc01131.jpg" /></p>

<p>Ну, конечно, привет Хабру!</p>

<p><img src="http://demin.ws/images/blog/maximite-kit/dsc01134.jpg" /></p>

<p>Заключение</p>

<p>Каждая копейка, потраченная мной на этот эксперимент, стоила полученного кайфа.</p>

<p>Сам проект Maximite удивляет своей законченностью. Все как-то очень органично и просто. И самое главное - это работает!</p>

<p>Как мне кажется - для начинающих, даже детей, интересующихся микропроцессорной техникой, Maximite - это просто находка. Элементарная сборка, не требующая настройки. Я, как полный дилетант, собрал все за несколько часов.</p>

<p>Когда мой брат лет двадцать назад собирал <a href="http://radio86.googlecode.com/hg/online/radio86.html">Радио-86РК</a> и Спектрум, ходила шутка про устройства для самостоятельной сборки, описываемые в журнале &ldquo;Радио&rdquo; - если авторы говорят, что устройство не требует наладки, то значит есть хотя бы минимальный шанс его наладить, ну я если авторы говорят, что требуется минимальная наладка&hellip;</p>

<p>В общем, хотите тряхнуть восьмибитной стариной с паяльником в рукам - соберите Maximite.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Монитор зависших процессов]]></title>
    <link href="http://demin.ws/blog/russian/2012/01/05/stuck-process-detector/"/>
    <updated>2012-01-05T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/01/05/stuck-process-detector/</id>
    <content type="html"><![CDATA[<p>Есть задача - нужна утилита для обнаружения зависших или заблокированных долгоиграющих серверных процессов. Если процесс «завис» - это значит, либо он торчит в deadlock’e, либо крутится в бесконечном цикле.</p>

<p>Пока есть вот такая идея - для каждого процесса, находящегося под контролем, периодически делать извне снимок стeка. Например:</p>

<pre><code>#0  0x991a8c22 in mach_msg_trap ()
#1  0x991a81f6 in mach_msg ()
#2  0x968870ea in __CFRunLoopServiceMachPort ()
#3  0x96890214 in __CFRunLoopRun ()
#4  0x9688f8ec in CFRunLoopRunSpecific ()
#5  0x9688f798 in CFRunLoopRunInMode ()
#6  0x92158a7f in RunCurrentEventLoopInMode ()
#7  0x9215fd9b in ReceiveNextEventCommon ()
#8  0x9215fc0a in BlockUntilNextEventMatchingListInMode ()
#9  0x90010040 in _DPSNextEvent ()
#10 0x9000f8ab in -[NSApplication nextEventMatchingMask:untilDate:inMode:dequeue:] ()
#11 0x9000bc22 in -[NSApplication run] ()
#12 0x902a018a in NSApplicationMain ()
#13 0x0012e356 in main ()
</code></pre>

<p>Для Linux, HPUX и Solaris есть команда <code>pstack</code>, для AIX - <code>procstack</code>. Уверен, что и для Windows можно подобное замутить. Process Explorer это умеет делать, значит можно сделать и программно.</p>

<p>Сравнивая текущий снимок с предыдущим, можно понять, насколько он изменился. Если он вообще не изменился или изменился только по некоторым начальным функциям (например, внутри ядра), то можно предположить, что процесс «завис». Случай deadlock’а на файле или базе данных еще проще, так как программа просто будет постоянно торчать на одной функции внутри ядра.</p>

<p>Понятно, что сравнение стеков должно все-таки учитывать особенности проверяемых процессов. Можно сделать его конфигурируемым, например, через регулярные выражения или скриптовой язык типа Lua.</p>

<p>Тема еще в том, что такой монитор не требует изменения в самом софте, и может быть написан на любом языке, например Руби или Питоне. По сути это просто работа с текстовыми данными.</p>

<p>Может я изобретаю велосипед?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Форсировать ли const в старом коде]]></title>
    <link href="http://demin.ws/blog/russian/2012/01/04/whether-to-enforce-const-in-legacy-code/"/>
    <updated>2012-01-04T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2012/01/04/whether-to-enforce-const-in-legacy-code/</id>
    <content type="html"><![CDATA[<p>Битый час сегодня спорили с коллегой по следующему вопросу. Имеем код:</p>

<pre class="hl">
<span class="hl kwb">void</span> <span class="hl kwd">foo</span><span class="hl opt">(</span>T<span class="hl opt">*</span> t<span class="hl opt">) {</span>
  <span class="hl kwd">bar</span><span class="hl opt">(</span>t<span class="hl opt">);</span>
<span class="hl opt">}</span>
</pre>

<p>Проблема в том, что функция bar является legacy-функцией одной из наших старых библиотек, которую сейчас мы поменять не можем, и ее сигнатура: <code>void bar(T*)</code>, то есть указатель-параметр не <code>const</code>. Но в реальности эта функция не меняет объект, на который указывает ее параметр.</p>

<p>Далее. Наш новый API, частью которого является <code>foo</code>, есть новейшая разработка, и должна быть спроектирована по уму. С точки зрения запланированной ответственности функции <code>foo</code>, она не должна менять объект, на который указывает <code>t</code>.</p>

<p>Я считаю, что код должен выглядеть так:</p>

<pre class="hl">
<span class="hl kwb">void</span> <span class="hl kwd">foo</span><span class="hl opt">(</span><span class="hl kwb">const</span> T<span class="hl opt">*</span> t<span class="hl opt">) {</span>
  <span class="hl kwd">bar</span><span class="hl opt">(</span><span class="hl kwa">const_cast</span><span class="hl opt">&lt;</span>T<span class="hl opt">*&gt;(</span>t<span class="hl opt">));</span>
<span class="hl opt">}</span>
</pre>

<p>Мои аргументы: так как контракт функции foo говорит, что эта функция не будет менять объект, на который указывает указатель, то этот факт <strong>должен</strong> быть отражен в API использованием слова <code>const</code>. И не имеет никакого значения, что по какой-то причине реализация этой функции внутри использует старый код, который неграмотно написан. Да, из-за это приходится делать некрасивое приведение типов, снимая <code>const</code>. Но эта некрасивость локализована внутри <code>foo</code> и в целом не оказывает влияния на стройность нового кода. Более того - если в будущем можно будет отказаться от использования старой функции <code>bar</code>, то проблема вообще исчезнет.</p>

<p>А вот контр-аргумент коллеги: может так случиться, что из-за ошибки в <code>bar</code> константный аргумент функции foo, которая по идее не должна менять аргумент, будет таки изменен, и получится крайне неприятный баг. В итого надо сделать аргумент функции <code>foo</code> <strong>НЕ</strong> <code>const</code> (и приведение будет уже не нужно), тем самым явно показать конечному пользователю нового API, что не стоит вообще рассчитывать на константность параметра функции <code>foo</code>.</p>

<p>Мы так и не договорились, так как у меня был «прогиб» в плане возможного нарушения константности вне зависимости, что там есть красивый <code>const</code>, а в подходе коллеги было не ясно, как объяснить в документации по функции <code>foo</code> почему и как она может менять свой аргумент - сказать, что мол из-за особенностей <strong>реализации</strong> <code>foo</code> мы не можем гарантировать константность? Получается, что мы проблемой старого кода портим дизайн нового API.</p>

<p>Дилемма.</p>

<p>P.S. Есть еще один изотерический вариант: внутри <code>foo</code> делать глубокое копирование объекта <code>T</code> и уже его передавать по неконстантному указателю в <code>bar</code>. Лично я, если надо выбирать между быстрым, но «плохим» кодом, и медленным, но со стройным дизайном, чаще выбираю второе, так как завтра купленный более быстрый сервер ускорит хороший, но медленный код, но не сделает плохой код более понятным.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Уолтер Айзексон, "Биография Стива Джобс"]]></title>
    <link href="http://demin.ws/blog/russian/2011/12/27/steve-jobs-biography/"/>
    <updated>2011-12-27T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/12/27/steve-jobs-biography/</id>
    <content type="html"><![CDATA[<p><a href="http://www.ozon.ru/context/detail/id/7363365/?partner=easy-coding">Биография Стива Джобса от Уолтера Айзексона</a></p>

<p><img src="http://demin.ws/images/covers/russian/steve-jobs-exclusive-biography-cover.jpg" /></p>

<p>Я думал, что биографии читают только &ldquo;старые люди&rdquo;, но эта книга доказала мне обратное. Поддавшись на рекламу, и ведомый моим недавно начавшимся увлечением продукций Apple, я начал читать.</p>

<p>Cначала это было похоже на пересказ фильма &ldquo;<a href="http://www.imdb.com/title/tt0168122/">Пираты силиконовой долины</a>&rdquo;, но через пару глав я уже не мог оторваться.</p>

<p>Можно говорить, что это конъюнктура и попытка сыграть на ситуации, что Стив только что умер, но, несмотря на все эти предрассудки, я подсел практически сразу.</p>

<p>Уж не знаю, в чем тут дело, может просто автор мастер своего дела, но я так и не оторвался, пока не прочитал до конца.</p>

<p>Вывод: настоятельно рекомендую, даже для принципиальных нелюбителей Эппла.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Томас Фридман, "Плоский мир 3.0"]]></title>
    <link href="http://demin.ws/blog/russian/2011/12/24/world-is-flat/"/>
    <updated>2011-12-24T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/12/24/world-is-flat/</id>
    <content type="html"><![CDATA[<p>Я снова вернулся к аудиокнигам. 40-50 минут в день по дороге на работу и потом обратно позволяют поглощать книги с приличной скоростью.</p>

<p>Из недавнего.</p>

<p>&ldquo;The world is flat 3.0: A Brief History of the Twenty-first Century&rdquo;, Thomas L. Friedman</p>

<p><a href="http://www.amazon.co.uk/gp/product/0312425074/ref=as_li_tf_il?ie=UTF8&tag=prodiy-21&linkCode=as2&camp=1634&creative=6738&creativeASIN=0312425074"><img border="0" src="http://ws.assoc-amazon.co.uk/widgets/q?_encoding=UTF8&Format=_SL160_&ASIN=0312425074&MarketPlace=GB&ID=AsinImage&WS=1&tag=prodiy-21&ServiceVersion=20070822" ></a><img src="http://www.assoc-amazon.co.uk/e/ir?t=prodiy-21&l=as2&o=2&a=0312425074" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p>Убийственная книга для осознания, что:</p>

<ul>
<li>сейчас индивидуумы могут спокойно конкурировать с корпорациями</li>
<li>важность инженерного, а особенно компьютерного, образования растет семимильными шагами, и это не дань моде, а объективная реальность</li>
<li>количество мест на планете, где можно жить и зарабатывать достойные деньги и развиваться уже не сужается к Штатами (разве не забавно слышать такое от коренного американца-консерватора) и некоторыми странам Европы</li>
<li>Индия, Китай, Россия и многие другие страны начали сильнейшую конкурецию на рынке труда с тем же США уже без массового отъезда специалистов</li>
<li>постоянное самообразование - это едиственный способ не быть вытолкнутым с рынка труда</li>
</ul>

<p>И многое многое другое.</p>

<p>Не буду скрывать, были моменты в жизни, когда я думал, что занимаюсь чем-то не тем (хотя профессию я не выбирал, она сама меня выбрала), и лучше бы мне работать, например, в области недвижимости, природных ресурсов, рекламы или медиа. Если у кого-то есть хоть минимальные подобные сомнения - это книга вытрет их навсегда и, возможно, подскажет путь.</p>

<p>Это очень интересное и познавательное чтиво.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Виртуальные private-функции в C++]]></title>
    <link href="http://demin.ws/blog/russian/2011/12/21/virtual-private-functions-in-cpp/"/>
    <updated>2011-12-21T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/12/21/virtual-private-functions-in-cpp/</id>
    <content type="html"><![CDATA[<p>Наткнулся на интересный, как мне показалось, код. Там использовалась виртуальная private функция. Прием немного странный, но сейчас не об этом.</p>

<p>Сначала мне показалось, что такой код не должен компилироваться, так как если функция private, она недоступна для использования в дочерних классах. Наблюдался какой-то очередной пробел в моих знаниях по C++.</p>

<p>Я написал программу:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;iostream&gt;</span>

<span class="hl kwc">class</span> A <span class="hl opt">{</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl kwb">void</span> <span class="hl kwd">bar</span><span class="hl opt">() {</span> <span class="hl kwd">foo</span><span class="hl opt">(); }</span>
<span class="hl kwc">private</span><span class="hl opt">:</span>
  <span class="hl kwc">virtual</span> <span class="hl kwb">void</span> <span class="hl kwd">foo</span><span class="hl opt">() =</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl kwc">class</span> B<span class="hl opt">:</span> <span class="hl kwc">public</span> A <span class="hl opt">{</span>
<span class="hl kwc">private</span><span class="hl opt">:</span>
  <span class="hl kwc">virtual</span> <span class="hl kwb">void</span> <span class="hl kwd">foo</span><span class="hl opt">() {</span> std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;B::foo()&quot;</span> <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">; }</span>
<span class="hl opt">};</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[]) {</span>
  A<span class="hl opt">*</span> a <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">B</span><span class="hl opt">();</span>
  a<span class="hl opt">-&gt;</span><span class="hl kwd">bar</span><span class="hl opt">();</span>
  <span class="hl kwa">delete</span> a<span class="hl opt">;</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>И VS2010 и GCC прекрасно его съели, и программа печатает &ldquo;B::foo()&ldquo;.</p>

<p>Напрашивание такое объяснение - механизм виртуальных функций (технически переопределение функций через vtable) - это runtime, а public/private - это compile time. Получается, что в compile time все законно, и разделение на private/protected/public не зависит от виртуальности функции, а в runtime класс B просто подставляет другую функцию через vtable уже вне зависимости от private/public.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ведение блога на GitHub]]></title>
    <link href="http://demin.ws/blog/russian/2011/12/18/blogging-on-github/"/>
    <updated>2011-12-18T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/12/18/blogging-on-github/</id>
    <content type="html"><![CDATA[<p>Сказать, что Blogspot меня бесит – это ничего не сказать. Единственное для чего он нужен, как мне кажется – это быстрая индексация в Google.</p>

<p>Артемий Лебедев как-то отлично сказал, что презирает всякую хрень типа <a href="http://en.wikipedia.org/wiki/Search_engine_optimization">SEO</a>, так как надо создавать интересный и читаемый контент, а не суетиться по мелочи на его раздаче. Поэтому <a href="http://tema.livejournal.com/">его ЖЖ</a> использует стандартный шаблон без каких-либо попыток выглядеть “клевым”. Но его контент делает блог одним из лидеров в российском прокате.</p>

<p>Да и кого сейчас волнует дизайн блога? Все равно подавляющее количество читателей видят твой блог через призму Google Reader’а.</p>

<p>Но оставим одиозного Лебедева и вернемся к нашим специализированным техническим блогам. Как <a href="http://tom.preston-werner.com/2008/11/17/blogging-like-a-hacker.html">написал Том Престон-Вернер</a>, один их основателей Github, что ведя блог, он хочем писать посты, а не подкручивать там и сям шаблоны и прочие техдетали всяких WordPress’ов и Mephisto’в.</p>

<p>Подобная же мысль мучает меня с первого дня использования Блогспота. Только недавно я более менее устаканил процесс написания постов, используя <a href="http://docutils.sourceforge.net/docs/user/rst/quickref.html">ReST</a>. Сейчас я пишу и храню посты в этой разметке, а перед публикацией прогоняю через пару доморощенным скриптов типа “ReST &gt; HTML &gt; Фильтрованный Для Блогспота HTML”. Хотя проблема хостинга картинок все равно решается вручную заранее.</p>

<p>Уже сотни раз я подумывал о собственной платформе на том же WordPress’е, но природная лень и нежелание тратить ни секунды на администрирование всегда останавливало.</p>

<p>Сейчас у меня очередной приступ ненависти к Блогспоту и, как следствие, исследование альтернатив.</p>

<p>Удивительно, но как-то никогда не задумывался, что блог может на быть <a href="http://www.subspacefield.org/~travis/static_blog_generators.html">статическом движке</a>.</p>

<p>А что, если переехать на <a href="http://pages.github.com/">GitHub Pages</a>? Там суть в том, что один из твоих репозиториев может стать вебсайтом, который работает на статическом движке <a href="http://jekyllrb.com/">Jekyll</a>.</p>

<p>Сразу убиваются несколько зайцев. Работаешь в нормальной разметке и используешь git для выкладывания постов. Пишешь и отлаживаешь пост локально. Затем “git push origin master” и все – пост выложен. Текст можно писать не в идиотском HTML, а в <a href="http://daringfireball.net/projects/markdown/syntax">Markdown</a> или <a href="http://en.wikipedia.org/wiki/Textile_(markup_language)">Textile</a>. ReST, конечно, круче, но это не смертельно.</p>

<p>Более того GitHub Pages позволяет интегрироваться с полноценным доменом второго уровня.</p>

<p>Далее тема комментариев. Не то, чтобы программировать свой движок для комментирования, а даже просто настроить WordPress – лично у меня нет никакого желания. Поэтому одна их самых простых альтернатив – <a href="http://disqus.com/">Disqus</a>.</p>

<p>Анализ посещаемости решается через Google Analytics.</p>

<p>Что остается?</p>

<p>Иногда люди таки ходят на сайт блога напрямую – для поиска старых постов или узнать об авторе что-нибудь социальное. Вот тут, конечно, всякие примочки типа гугловских гаджетов – поиск, каталог по датам, интеграция с социальными сетями и т.д. – имеют смысл. На Блогспоте ты их добавляешь кликом мышки, а для собственного блога надо будет тратить реальное время.</p>

<p>Но, возвращаясь к вопросу – а нужны ли все эти гаджеты? Если контент в блоге интересен – он найдет своего читателя. Сарафанное радио в виде твитера или фейсбука приведет тебе читателей, если будет что читать.</p>

<p>А если уж говорить на “раскрутке” – та же публикация удавшихся постов на Харбе приводит в сто раз более читателей, чем суета с дизайном сайта.</p>

<p>Вот такие мысли.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Задача расположения восьми ферзей на Erlang'e]]></title>
    <link href="http://demin.ws/blog/russian/2011/12/10/eight-queen-problem-in-erlang/"/>
    <updated>2011-12-10T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/12/10/eight-queen-problem-in-erlang/</id>
    <content type="html"><![CDATA[<p>Знаю, что <a href="http://en.wikipedia.org/wiki/Eight_queens_puzzle">баян</a>, но для меня было весьма показательно.</p>

<p>Например, вот вариант, который я написал где-то за полчаса:</p>

<pre class="hl">
<span class="hl opt">-</span><span class="hl kwd">module</span><span class="hl opt">(</span>queens_classic<span class="hl opt">).</span>
<span class="hl opt">-</span><span class="hl kwd">export</span><span class="hl opt">([</span>solve<span class="hl opt">/</span><span class="hl num">0</span><span class="hl opt">]).</span>

<span class="hl kwd">solve</span><span class="hl opt">() -&gt;</span>
    <span class="hl kwd">solve</span><span class="hl opt">(</span><span class="hl kwc">lists</span><span class="hl opt">:</span><span class="hl kwd">seq</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">8</span><span class="hl opt">),</span> <span class="hl kwc">lists</span><span class="hl opt">:</span><span class="hl kwd">seq</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">15</span> <span class="hl opt">+</span> <span class="hl num">15</span><span class="hl opt">),</span> <span class="hl num">1</span><span class="hl opt">, []).</span>

<span class="hl kwd">print_board</span><span class="hl opt">([]) -&gt;</span> <span class="hl kwc">io</span><span class="hl opt">:</span><span class="hl kwd">format</span><span class="hl opt">(</span><span class="hl str">&quot;~n&quot;</span><span class="hl opt">, []);</span>
<span class="hl kwd">print_board</span><span class="hl opt">([</span>H|T<span class="hl opt">]) -&gt;</span>
    Line <span class="hl opt">= [</span><span class="hl kwc">string</span><span class="hl opt">:</span><span class="hl kwd">copies</span><span class="hl opt">(</span><span class="hl str">&quot;. &quot;</span><span class="hl opt">,</span> H <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">),</span> <span class="hl str">&quot;&#64; &quot;</span><span class="hl opt">,</span> <span class="hl kwc">string</span><span class="hl opt">:</span><span class="hl kwd">copies</span><span class="hl opt">(</span><span class="hl str">&quot;. &quot;</span><span class="hl opt">,</span> <span class="hl num">8</span> <span class="hl opt">-</span> H<span class="hl opt">)],</span>
    <span class="hl kwc">io</span><span class="hl opt">:</span><span class="hl kwd">format</span><span class="hl opt">(</span><span class="hl str">&quot;~s~n&quot;</span><span class="hl opt">, [</span>Line<span class="hl opt">]),</span>
    <span class="hl kwd">print_board</span><span class="hl opt">(</span>T<span class="hl opt">).</span>

<span class="hl kwd">solve</span><span class="hl opt">(</span>_<span class="hl opt">,</span> _<span class="hl opt">,</span> Cols<span class="hl opt">,</span> Result<span class="hl opt">)</span> <span class="hl kwa">when</span> Cols <span class="hl opt">&gt;</span> <span class="hl num">8</span> <span class="hl opt">-&gt;</span>
    <span class="hl kwc">io</span><span class="hl opt">:</span><span class="hl kwd">format</span><span class="hl opt">(</span><span class="hl str">&quot;~p~n&quot;</span><span class="hl opt">, [</span>Result<span class="hl opt">]),</span>
    <span class="hl kwd">print_board</span><span class="hl opt">(</span>Result<span class="hl opt">);</span>

<span class="hl kwd">solve</span><span class="hl opt">(</span>Rows<span class="hl opt">,</span> Diags<span class="hl opt">,</span> Col<span class="hl opt">,</span> Result<span class="hl opt">) -&gt;</span>
    <span class="hl kwc">lists</span><span class="hl opt">:</span><span class="hl kwd">foreach</span><span class="hl opt">(</span><span class="hl kwa">fun</span><span class="hl opt">(</span>Row<span class="hl opt">) -&gt;</span>
                     D1 <span class="hl opt">=</span> Row <span class="hl opt">+</span> Col<span class="hl opt">,</span>
                     D2 <span class="hl opt">=</span> Row <span class="hl opt">-</span> Col <span class="hl opt">+</span> <span class="hl num">8</span> <span class="hl opt">+</span> <span class="hl num">15</span><span class="hl opt">,</span>
                     T <span class="hl opt">=</span> <span class="hl kwc">lists</span><span class="hl opt">:</span><span class="hl kwd">member</span><span class="hl opt">(</span>Row<span class="hl opt">,</span> Rows<span class="hl opt">)</span> andalso
                         <span class="hl kwc">lists</span><span class="hl opt">:</span><span class="hl kwd">member</span><span class="hl opt">(</span>D1<span class="hl opt">,</span> Diags<span class="hl opt">)</span> andalso
                         <span class="hl kwc">lists</span><span class="hl opt">:</span><span class="hl kwd">member</span><span class="hl opt">(</span>D2<span class="hl opt">,</span> Diags<span class="hl opt">),</span>
                     <span class="hl kwa">if</span> T <span class="hl opt">-&gt;</span>
                         Rows1 <span class="hl opt">=</span> Rows <span class="hl opt">-- [</span>Row<span class="hl opt">],</span>
                         Diags1 <span class="hl opt">=</span> Diags <span class="hl opt">-- [</span>D1<span class="hl opt">,</span> D2<span class="hl opt">],</span>
                         <span class="hl kwd">solve</span><span class="hl opt">(</span>Rows1<span class="hl opt">,</span> Diags1<span class="hl opt">,</span> Col <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">, [</span>Row | Result<span class="hl opt">]);</span>
                        true <span class="hl opt">-&gt;</span> void
                     <span class="hl kwa">end</span>
                  <span class="hl kwa">end</span><span class="hl opt">,</span> Rows<span class="hl opt">).</span>
</pre>

<p>Выглядит ужасно, и стиль однозначно понятно какой: C/Python на стероидах (циклы, if&rsquo;ы).</p>

<p>А вот над этим вариантом я провозился несколько часов:</p>

<pre class="hl">
<span class="hl opt">-</span><span class="hl kwd">module</span><span class="hl opt">(</span>queens<span class="hl opt">).</span>
<span class="hl opt">-</span><span class="hl kwd">export</span><span class="hl opt">([</span>solve<span class="hl opt">/</span><span class="hl num">0</span><span class="hl opt">]).</span>

<span class="hl kwd">solve</span><span class="hl opt">() -&gt;</span>
    <span class="hl kwd">solve</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">, []).</span>

<span class="hl kwd">print_board</span><span class="hl opt">([]) -&gt;</span> <span class="hl kwc">io</span><span class="hl opt">:</span><span class="hl kwd">format</span><span class="hl opt">(</span><span class="hl str">&quot;~n&quot;</span><span class="hl opt">, []);</span>
<span class="hl kwd">print_board</span><span class="hl opt">([{</span>_X<span class="hl opt">,</span> Y<span class="hl opt">}</span>|T<span class="hl opt">]) -&gt;</span>
    Line <span class="hl opt">= [</span><span class="hl kwc">string</span><span class="hl opt">:</span><span class="hl kwd">copies</span><span class="hl opt">(</span><span class="hl str">&quot;. &quot;</span><span class="hl opt">,</span> Y <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">),</span> <span class="hl str">&quot;&#64; &quot;</span><span class="hl opt">,</span> <span class="hl kwc">string</span><span class="hl opt">:</span><span class="hl kwd">copies</span><span class="hl opt">(</span><span class="hl str">&quot;. &quot;</span><span class="hl opt">,</span> <span class="hl num">8</span> <span class="hl opt">-</span> Y<span class="hl opt">)],</span>
    <span class="hl kwc">io</span><span class="hl opt">:</span><span class="hl kwd">format</span><span class="hl opt">(</span><span class="hl str">&quot;~s~n&quot;</span><span class="hl opt">, [</span>Line<span class="hl opt">]),</span>
    <span class="hl kwd">print_board</span><span class="hl opt">(</span>T<span class="hl opt">).</span>

<span class="hl kwd">solve</span><span class="hl opt">(</span>X<span class="hl opt">,</span> Taken<span class="hl opt">)</span> <span class="hl kwa">when</span> X <span class="hl opt">&gt;</span> <span class="hl num">8</span> <span class="hl opt">-&gt;</span>
    <span class="hl kwc">io</span><span class="hl opt">:</span><span class="hl kwd">format</span><span class="hl opt">(</span><span class="hl str">&quot;~p~n&quot;</span><span class="hl opt">, [</span>Taken<span class="hl opt">]),</span>
    <span class="hl kwd">print_board</span><span class="hl opt">(</span>Taken<span class="hl opt">);</span>

<span class="hl kwd">solve</span><span class="hl opt">(</span>X<span class="hl opt">,</span> Taken<span class="hl opt">) -&gt;</span>
    L <span class="hl opt">= [{</span>X<span class="hl opt">,</span> Y<span class="hl opt">}</span> || Y <span class="hl opt">&lt;-</span> <span class="hl kwc">lists</span><span class="hl opt">:</span><span class="hl kwd">seq</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">8</span><span class="hl opt">),</span> not <span class="hl kwd">under_attack</span><span class="hl opt">({</span>X<span class="hl opt">,</span> Y<span class="hl opt">},</span> Taken<span class="hl opt">)],</span>
    <span class="hl kwd">row</span><span class="hl opt">(</span>L<span class="hl opt">,</span> Taken<span class="hl opt">).</span>

<span class="hl kwd">row</span><span class="hl opt">([],</span> _<span class="hl opt">) -&gt; [];</span>
<span class="hl kwd">row</span><span class="hl opt">([{</span>X<span class="hl opt">,</span> Y<span class="hl opt">}</span>|L<span class="hl opt">],</span> Taken<span class="hl opt">) -&gt;</span>
    <span class="hl kwd">solve</span><span class="hl opt">(</span>X <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">, [{</span>X<span class="hl opt">,</span> Y<span class="hl opt">}</span> | Taken<span class="hl opt">]),</span>
    <span class="hl kwd">row</span><span class="hl opt">(</span>L<span class="hl opt">,</span> Taken<span class="hl opt">).</span>

<span class="hl kwd">under_attack</span><span class="hl opt">(</span>_<span class="hl opt">, []) -&gt;</span> false<span class="hl opt">;</span>
<span class="hl kwd">under_attack</span><span class="hl opt">({</span>X<span class="hl opt">,</span> Y<span class="hl opt">}, [{</span>Xt<span class="hl opt">,</span> Yt<span class="hl opt">}</span>|L<span class="hl opt">]) -&gt;</span>
    Y <span class="hl opt">==</span> Yt orelse <span class="hl kwb">abs</span><span class="hl opt">(</span>Y <span class="hl opt">-</span> Yt<span class="hl opt">) ==</span> <span class="hl kwb">abs</span><span class="hl opt">(</span>X <span class="hl opt">-</span> Xt<span class="hl opt">)</span> orelse
    <span class="hl kwd">under_attack</span><span class="hl opt">({</span>X<span class="hl opt">,</span> Y<span class="hl opt">},</span> L<span class="hl opt">).</span>
</pre>

<p>Вся работа со списками вручную без циклоподобных конструкций.</p>

<p>Печатает типа такого:</p>

<pre><code>[4,7,5,2,6,1,3,8]
. . . @ . . . .
. . . . . . @ .
. . . . @ . . .
. @ . . . . . .
. . . . . @ . .
@ . . . . . . .
. . @ . . . . .
. . . . . . . @

[5,7,2,6,3,1,4,8]
. . . . @ . . .
. . . . . . @ .
. @ . . . . . .
. . . . . @ . .
. . @ . . . . .
@ . . . . . . .
. . . @ . . . .
. . . . . . . @

...
</code></pre>

<p>Увы, но вот <a href="http://www.redaelli.org/matteo-blog/2009/01/05/n-queens-solution-with-erlang/">эта версия</a> мне кажется более красивой с точки зрения фукнционального стиля.</p>

<p>На всякий случай Makefile для обоих вариантов:</p>

<pre class="hl">
target <span class="hl opt">=</span> queens

<span class="hl kwa">all</span><span class="hl opt">:</span>
    erlc <span class="hl opt">$(</span>target<span class="hl opt">)</span>.erl
    erl <span class="hl opt">-</span>noshell <span class="hl opt">-</span>s <span class="hl opt">$(</span>target<span class="hl opt">)</span> solve <span class="hl opt">-</span>s init stop

classic<span class="hl opt">:</span>
    erlc <span class="hl opt">$(</span>target<span class="hl opt">)</span>_classic.erl
    erl <span class="hl opt">-</span>noshell <span class="hl opt">-</span>s <span class="hl opt">$(</span>target<span class="hl opt">)</span>_classic solve <span class="hl opt">-</span>s init stop

<span class="hl kwa">clean</span><span class="hl opt">:</span>
    <span class="hl opt">-</span><span class="hl kwa">rm</span> <span class="hl opt">*</span>.beam <span class="hl opt">*</span>.dump
</pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Visual Studio 11 Developer Preview]]></title>
    <link href="http://demin.ws/blog/russian/2011/12/07/visual-studio-11-developer-preview/"/>
    <updated>2011-12-07T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/12/07/visual-studio-11-developer-preview/</id>
    <content type="html"><![CDATA[<p>Поставил на рабочий ноут Visual Studio 11 Developer Preview.</p>

<p>Погонял разные самопальные бенчмарки типа решета Эратосфена, <code>vector&lt;int&gt;</code> vs <code>vector&lt;bool&gt;</code>, <code>std::string</code> vs <code>char*</code> и т.д., пытаясь выявить улучшения или ухудшения в оптимизации. Лично я ничего кардинального не выявил по сравнению с версией 10.</p>

<p>Очевидно, что статический анализ кода и его безопасность в целом сейчас как никогда в моде, поэтому производители компиляторов постепенно закручивают гайки, превращая предупреждения в ошибки.</p>

<p>Например с ключом <code>/sdl</code> Студия 11 будет считать приведенные ниже предупреждения ошибками.</p>

<table border="1">
<colgroup>
<col width="5%" />
<col width="13%" />
<col width="83%" />
</colgroup>
<thead valign="bottom">
<tr><th class="head">Warning</th>
<th class="head">Command line switch</th>
<th class="head">Description</th>
</tr>
</thead>
<tbody valign="top">
<tr><td><a href="http://msdn.microsoft.com/en-us/library/4kh09110.aspx">C4146</a></td>
<td>/we4146</td>
<td>A unary minus operator was applied to an unsigned type, resulting in an unsigned result</td>
</tr>
<tr><td><a href="http://msdn.microsoft.com/en-us/library/5ft2cz8d.aspx">C4308</a></td>
<td>/we4308</td>
<td>A negative integral constant converted to unsigned type, resulting in a possibly meaningless result</td>
</tr>
<tr><td><a href="http://msdn.microsoft.com/en-us/library/h6b9te7b.aspx">C4532</a></td>
<td>/we4532</td>
<td>Use of "continue", "break" or "goto" keywords in a __finally/finally block has undefined behavior during abnormal termination</td>
</tr>
<tr><td><a href="http://msdn.microsoft.com/en-us/library/f7687yks.aspx">C4533</a></td>
<td>/we4533</td>
<td>Code initializing a variable will not be executed</td>
</tr>
<tr><td><a href="http://msdn.microsoft.com/en-us/library/axhfhh6x.aspx">C4700</a></td>
<td>/we4700</td>
<td>Use of an uninitialized local variable</td>
</tr>
<tr><td><a href="http://msdn.microsoft.com/en-us/library/w0c0bww3.aspx">C4789</a></td>
<td>/we4789</td>
<td>Buffer overrun when specific C run-time (CRT) functions are used</td>
</tr>
<tr><td><a href="http://msdn.microsoft.com/en-us/library/8wsycdzs.aspx">C4995</a></td>
<td>/we4995</td>
<td>Use of a function marked with pragma deprecated</td>
</tr>
<tr><td><a href="http://msdn.microsoft.com/en-us/library/ttcz0bys.aspx">C4996</a></td>
<td>/we4996</td>
<td>Use of a function marked as deprecated</td>
</tr>
</tbody>
</table>

<p>Ссылки по теме:</p>

<ul>
<li>Оригинальный пост &ldquo;<a href="http://blogs.msdn.com/b/sdl/archive/2011/12/02/security.aspx">Compiler Security Enhancements in Visual Studio 11</a>&rdquo;, кратким переводом которого по сути является этот пост.</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MapReduce на Erlang'e]]></title>
    <link href="http://demin.ws/blog/russian/2011/11/30/map-reduce-in-erlang/"/>
    <updated>2011-11-30T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/11/30/map-reduce-in-erlang/</id>
    <content type="html"><![CDATA[<p>Я продолжаю погружение в Эрланг. Уже есть хитрый план переписать один из наших сервисов для мониторинга на Эрланге. Мы тут осваиваем облака Windows Azure и Amazon EC2 в качестве платформы для некоторых продуктов и внутренних задач типа QA, поэтому возможность использовать много ядер и машин без переписывания кода выглядить перспективно.</p>

<p>Итак, для начала простой, но реальный пример - есть проект ~2000 файлов. Надо составить список используемых переменных окружения. То есть найти вхождения строк <code>getenv(...)</code> и <code>GetVariable(...)</code> (это наш wrapper) и выдрать из них параметр.</p>

<p>Задача незамысловатая и давно решается программой на C++, которая даже обход каталогов не делает, а просто вызывает юниксовый <code>find</code>, генерирующий список файлов по маске, и затем по списку лопатит файлы. На 2000 файлах работает пару секунд в один поток.</p>

<p>Теперь Эрланг. Тут хочется замутить что-нибудь более кучерявое, чем последовательный обход файлов. MapReduce как раз в тему - можно составить список файлов, затем анализ каждого файла делать параллельно (Map), аккумулируя найденные имена переменных, и в конце обработать все полученные входждение (Reduce), в нашем случае просто подсчитать количество вхождения каждой переменной.</p>

<p>Фактически мой код повторяет пример из &ldquo;<a href="http://pragprog.com/book/jaerlang/programming-erlang">Programming Erlang</a>&rdquo; и использует модуль <code>phofs</code> (parallel higher-order functions) из этой же книги.</p>

<pre class="hl">
<span class="hl opt">-</span><span class="hl kwd">module</span><span class="hl opt">(</span>find_variables<span class="hl opt">).</span>
<span class="hl opt">-</span><span class="hl kwd">export</span><span class="hl opt">([</span>main<span class="hl opt">/</span><span class="hl num">0</span><span class="hl opt">,</span> find_variables_in_file<span class="hl opt">/</span><span class="hl num">2</span><span class="hl opt">,</span> process_found_variables<span class="hl opt">/</span><span class="hl num">3</span><span class="hl opt">]).</span>

<span class="hl opt">-</span><span class="hl kwd">define</span><span class="hl opt">(</span>PATH<span class="hl opt">,</span> <span class="hl str">&quot;/Projects/interesting_project&quot;</span><span class="hl opt">).</span>
<span class="hl opt">-</span><span class="hl kwd">define</span><span class="hl opt">(</span>MASK<span class="hl opt">,</span> <span class="hl str">&quot;</span><span class="hl esc">\\</span><span class="hl str">..*(cpp|c)&quot;</span><span class="hl opt">).</span>

<span class="hl kwd">main</span><span class="hl opt">() -&gt;</span>
    <span class="hl kwc">io</span><span class="hl opt">:</span><span class="hl kwd">format</span><span class="hl opt">(</span><span class="hl str">&quot;Creating list of files...~n&quot;</span><span class="hl opt">, []),</span>
    <span class="hl slc">% Стандартная функция обхода файловой системы. Последний параметр -</span>
    <span class="hl slc">% функтор, накапливающий имена в списке.</span>
    Files <span class="hl opt">=</span> <span class="hl kwc">filelib</span><span class="hl opt">:</span><span class="hl kwd">fold_files</span><span class="hl opt">(</span>?PATH<span class="hl opt">,</span> ?MASK<span class="hl opt">,</span> true<span class="hl opt">,</span>
                               <span class="hl kwa">fun</span><span class="hl opt">(</span>N<span class="hl opt">,</span> A<span class="hl opt">) -&gt; [</span>N | A<span class="hl opt">]</span> <span class="hl kwa">end</span><span class="hl opt">, []),</span>
    <span class="hl kwc">io</span><span class="hl opt">:</span><span class="hl kwd">format</span><span class="hl opt">(</span><span class="hl str">&quot;Found ~b file(s)~n&quot;</span><span class="hl opt">, [</span><span class="hl kwb">length</span><span class="hl opt">(</span>Files<span class="hl opt">)]),</span>
    F1 <span class="hl opt">=</span> <span class="hl kwa">fun</span> find_variables_in_file<span class="hl opt">/</span><span class="hl num">2</span><span class="hl opt">,</span>   <span class="hl slc">% Map</span>
    F2 <span class="hl opt">=</span> <span class="hl kwa">fun</span> process_found_variables<span class="hl opt">/</span><span class="hl num">3</span><span class="hl opt">,</span>  <span class="hl slc">% Reduce</span>
    <span class="hl slc">% Вызываем MapReduce через функцию benchmark, считающую время</span>
    <span class="hl slc">% выполнения.</span>
    <span class="hl kwd">benchmark</span><span class="hl opt">(</span><span class="hl kwa">fun</span><span class="hl opt">() -&gt;</span>
        L <span class="hl opt">=</span> <span class="hl kwc">phofs</span><span class="hl opt">:</span><span class="hl kwd">mapreduce</span><span class="hl opt">(</span>F1<span class="hl opt">,</span> F2<span class="hl opt">, [],</span> Files<span class="hl opt">),</span>
        <span class="hl kwc">io</span><span class="hl opt">:</span><span class="hl kwd">format</span><span class="hl opt">(</span><span class="hl str">&quot;Found ~b variable(s)~n&quot;</span><span class="hl opt">, [</span><span class="hl kwb">length</span><span class="hl opt">(</span>L<span class="hl opt">)])</span>
    <span class="hl kwa">end</span><span class="hl opt">,</span> <span class="hl str">&quot;MapReduce&quot;</span><span class="hl opt">).</span>

<span class="hl kwd">benchmark</span><span class="hl opt">(</span>Worker<span class="hl opt">,</span> Title<span class="hl opt">) -&gt;</span>
    <span class="hl opt">{</span>T<span class="hl opt">,</span> _<span class="hl opt">} =</span> <span class="hl kwc">timer</span><span class="hl opt">:</span><span class="hl kwd">tc</span><span class="hl opt">(</span><span class="hl kwa">fun</span><span class="hl opt">() -&gt;</span> <span class="hl kwd">Worker</span><span class="hl opt">()</span> <span class="hl kwa">end</span><span class="hl opt">),</span>
    <span class="hl kwc">io</span><span class="hl opt">:</span><span class="hl kwd">format</span><span class="hl opt">(</span><span class="hl str">&quot;~s: ~f sec(s)~n&quot;</span><span class="hl opt">, [</span>Title<span class="hl opt">,</span> T<span class="hl opt">/</span><span class="hl num">1000000</span><span class="hl opt">]).</span>

<span class="hl opt">-</span><span class="hl kwd">define</span><span class="hl opt">(</span>REGEXP<span class="hl opt">,</span> <span class="hl str">&quot;(getenv|GetVariable)\s*</span><span class="hl esc">\\</span><span class="hl str">(\s*</span><span class="hl esc">\&quot;</span><span class="hl str">([^</span><span class="hl esc">\&quot;</span><span class="hl str">]+)</span><span class="hl esc">\&quot;</span><span class="hl str">\s*</span><span class="hl esc">\\</span><span class="hl str">)&quot;</span><span class="hl opt">).</span>

<span class="hl slc">% Map. Анализ одного файла.</span>
<span class="hl kwd">find_variables_in_file</span><span class="hl opt">(</span>Pid<span class="hl opt">,</span> FileName<span class="hl opt">) -&gt;</span>
    <span class="hl kwa">case</span> <span class="hl kwc">file</span><span class="hl opt">:</span><span class="hl kwd">open</span><span class="hl opt">(</span>FileName<span class="hl opt">, [</span>read<span class="hl opt">])</span> <span class="hl kwa">of</span>
        <span class="hl opt">{</span>ok<span class="hl opt">,</span> File<span class="hl opt">} -&gt;</span>
            <span class="hl slc">% Заранее компилируем регулярное выражение.</span>
            <span class="hl opt">{</span>_<span class="hl opt">,</span> RE<span class="hl opt">} =</span> <span class="hl kwc">re</span><span class="hl opt">:</span><span class="hl kwd">compile</span><span class="hl opt">(</span>?REGEXP<span class="hl opt">),</span>
            <span class="hl slc">% Данный обратный вызов пошлет родительскому контролирующему</span>
            <span class="hl slc">% потому сообщение с именем найденной переменной.</span>
            CallBack <span class="hl opt">=</span> <span class="hl kwa">fun</span><span class="hl opt">(</span>Var<span class="hl opt">) -&gt;</span> Pid <span class="hl opt">! {</span>Var<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">}</span> <span class="hl kwa">end</span><span class="hl opt">,</span>
            <span class="hl kwd">find_variable_in_file</span><span class="hl opt">(</span>File<span class="hl opt">,</span> RE<span class="hl opt">,</span> CallBack<span class="hl opt">),</span>
            <span class="hl kwc">file</span><span class="hl opt">:</span><span class="hl kwd">close</span><span class="hl opt">(</span>File<span class="hl opt">);</span>
        <span class="hl opt">{</span>error<span class="hl opt">,</span> Reason<span class="hl opt">} -&gt;</span>
            <span class="hl kwc">io</span><span class="hl opt">:</span><span class="hl kwd">format</span><span class="hl opt">(</span><span class="hl str">&quot;Unable to process '~s', ~p~n&quot;</span><span class="hl opt">, [</span>FileName<span class="hl opt">,</span> Reason<span class="hl opt">]),</span>
            <span class="hl kwb">exit</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">)</span>
    <span class="hl kwa">end</span><span class="hl opt">.</span>

<span class="hl slc">% Reduce. Анализ данных. Данная функция вызывается контролирующим</span>
<span class="hl slc">% процессом MapReduce для каждого найденного ключа вместе со списком</span>
<span class="hl slc">% значений, ассоциированных с ним. В нашем случае это будут пары</span>
<span class="hl slc">% {VarName, 1}. Мы просто подсчитаем для каждого VarName количество</span>
<span class="hl slc">% пришедших пар, то есть количество найденных вхождений этой переменной.</span>
<span class="hl slc">% Это и есть наш незамысловатый анализ.</span>

<span class="hl kwd">process_found_variables</span><span class="hl opt">(</span>Key<span class="hl opt">,</span> Vals<span class="hl opt">,</span> A<span class="hl opt">) -&gt;</span>
    <span class="hl opt">[{</span>Key<span class="hl opt">,</span> <span class="hl kwb">length</span><span class="hl opt">(</span>Vals<span class="hl opt">)}</span> | A<span class="hl opt">].</span>

<span class="hl slc">% Построчный обход файла.</span>
<span class="hl kwd">find_variable_in_file</span><span class="hl opt">(</span>File<span class="hl opt">,</span> RE<span class="hl opt">,</span> CallBack<span class="hl opt">) -&gt;</span>
    <span class="hl kwa">case</span> <span class="hl kwc">io</span><span class="hl opt">:</span><span class="hl kwd">get_line</span><span class="hl opt">(</span>File<span class="hl opt">,</span> <span class="hl str">&quot;&quot;</span><span class="hl opt">)</span> <span class="hl kwa">of</span>
       eof <span class="hl opt">-&gt;</span> void<span class="hl opt">;</span>
       Line <span class="hl opt">-&gt;</span>
         <span class="hl kwd">scan_line_in_file</span><span class="hl opt">(</span>Line<span class="hl opt">,</span> RE<span class="hl opt">,</span> CallBack<span class="hl opt">),</span>
         <span class="hl kwd">find_variable_in_file</span><span class="hl opt">(</span>File<span class="hl opt">,</span> RE<span class="hl opt">,</span> CallBack<span class="hl opt">)</span>
    <span class="hl kwa">end</span><span class="hl opt">.</span>

<span class="hl slc">% Поиск строки в строке по регулярному выражению (скомпилированному ранее),</span>
<span class="hl slc">% и в случае нахождение вызов CallBack с передачей ему имени найденной</span>
<span class="hl slc">% переменной.</span>
<span class="hl kwd">scan_line_in_file</span><span class="hl opt">(</span>Line<span class="hl opt">,</span> RE<span class="hl opt">,</span> CallBack<span class="hl opt">) -&gt;</span>
    <span class="hl kwa">case</span> <span class="hl kwc">re</span><span class="hl opt">:</span><span class="hl kwd">run</span><span class="hl opt">(</span>Line<span class="hl opt">,</span> RE<span class="hl opt">)</span> <span class="hl kwa">of</span>
        <span class="hl opt">{</span>match<span class="hl opt">,</span> Captured<span class="hl opt">} -&gt;</span>
            <span class="hl opt">[</span>_<span class="hl opt">,</span> _<span class="hl opt">, {</span>NameP<span class="hl opt">,</span> NameL<span class="hl opt">}] =</span> Captured<span class="hl opt">,</span>
            Name <span class="hl opt">=</span> <span class="hl kwc">string</span><span class="hl opt">:</span><span class="hl kwd">substr</span><span class="hl opt">(</span>Line<span class="hl opt">,</span> NameP <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">,</span> NameL<span class="hl opt">),</span>
            <span class="hl kwd">CallBack</span><span class="hl opt">(</span>Name<span class="hl opt">);</span>
        nomatch <span class="hl opt">-&gt;</span> void
    <span class="hl kwa">end</span><span class="hl opt">.</span>
</pre>

<p>Для сборки программы нужен <a href="http://media.pragprog.com/titles/jaerlang/code/phofs.erl">модуль phofs</a>. Он является универсальным, независимым от конкретных функций Map и Reduce.</p>

<p>И Makefile на всякий случай:</p>

<pre class="hl">
target <span class="hl opt">=</span> find_variables

<span class="hl kwa">all</span><span class="hl opt">:</span>
    erlc <span class="hl opt">$(</span>target<span class="hl opt">)</span>.erl
    erlc phofs.erl
    erl <span class="hl opt">-</span>noshell <span class="hl opt">-</span>s <span class="hl opt">$(</span>target<span class="hl opt">)</span> main <span class="hl opt">-</span>s init stop

<span class="hl kwa">clean</span><span class="hl opt">:</span>
    <span class="hl opt">-</span><span class="hl kwa">rm</span> <span class="hl opt">*</span>.beam <span class="hl opt">*</span>.dump
</pre>

<p>Пузомерка. Как я уже сказал, программа на C++ вместе со временем вызова <code>find</code> на моей машине работает 1-2 секунды. Версия на Erlang&rsquo;e работает ~20 секунд. Плохо? Смотря как посмотреть. Если анализ каждого файла будет более длительным (то есть программа будет основное время тратить на анализ файла, а не обход каталогов), то тут уже не совсем очевидно, какое из решений будет более практично при увеличении числа файлов и сложности анализа.</p>

<p>Я новичок в Эрланге, поэтому будут признателен за критику кода.</p>

<p>Посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2011/11/22/tcpip-proxy-in-erlang/">TCP/IP proxy на Erlang&rsquo;e</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Улучшенный TCP/IP proxy на Erlang'e]]></title>
    <link href="http://demin.ws/blog/russian/2011/11/26/improved-tcpip-proxy-in-erlang/"/>
    <updated>2011-11-26T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/11/26/improved-tcpip-proxy-in-erlang/</id>
    <content type="html"><![CDATA[<p><a href="http://demin.ws/blog/russian/2011/11/22/tcpip-proxy-in-erlang/">Писал я про мое освоение Эрганга</a> через написание программы для перехвата и удобного логирования TCP/IP соединений.</p>

<p>B итоге я окончательно допилил программу, и теперь она заменила мне <a href="http://demin.ws/blog/russian/2009/09/04/multi-threaded-tcpip-debugger/">версию на Питоне</a>.</p>

<p>Что программа умеет особенно удобного (как мне кажется):</p>

<ul>
<li>удобный вид лога, в котором отображается шестнадцатеричный дамп, и символьного представление для видимых кодов</li>
<li>в дампе отображается номер соединения (в случае смешивания выводов нескольких параллельных соединений)</li>
<li>для каждого соединения вычисляется длительность</li>
<li>ведутся дополнительные двоичные логи для каждой из сторон в соединении (для повторного &ldquo;проигрывания&rdquo; данных)</li>
</ul>

<p>Про Эрланг. Меня начинает реально вставлять. Я почувствовал (для многих это и не новость), что тут можно написать что-то реальное, особенно связаное с сетью и многозадачностью.</p>

<p>Из насущных проблем:</p>

<ul>
<li>Пока нет чувства разумного дробления на модули и даже функции. При общей тотальной иммутабельности сложно что-то напортачить, но когда количество функций разрастается, хочется их как-то группировать.</li>
<li>Нет чувства правильного форматирования кода. Вроде как 80-ти символьные строки и пробелы вместо табуляций меня пока никогда не подводили, но при функциональном стиле кода часто получаются длинные &ldquo;лесенки&rdquo;.</li>
</ul>

<p>Пузомерка. Я сделал тест на прокач шестидесятимегового файла через питоновскую и эрланговскую версию. Результаты интересные.</p>

<p>Кач напрямую:</p>

<pre><code>curl http://www.erlang.org/download/otp_src_R14B04.tar.gz &gt;direct
</code></pre>

<p>Через Питон:</p>

<pre><code>Window 1: python pyspy.py -l 50000 -a www.erlang.org -p 80 -L log

Window 2: curl http://localhost:50000/download/otp_src_R14B04.tar.gz &gt;via-proxy-python
</code></pre>

<p>Через Эрланг:</p>

<pre><code>Window 1: escript tcp_proxy.erl 50000 www.erlang.org 80

Window 2: curl http://localhost:50000/download/otp_src_R14B04.tar.gz &gt;via-proxy-erlang
</code></pre>

<p>Файл напрямую качается, условно, минуту. Питоновская версия прокачала файл за шесть минут при включенном логе на экран и файл. Причем сброс лога и непосредственно прокач заканчивались приблизительно в одно время (данные задачи выполняются параллельно, общаясь через очередь, и технически не обязаны завершаться одновременно, так как очередь надо выгрести).</p>

<p>На Эрланге картина иная. Файл прокачался практически за то же время, что и напрямую! Но вот полного сброса лога я так и дождался. Через шесть минут он успел сбросить где-то 10% лога.</p>

<p>Выводы: Видимо, поведение питоновской версии обусловлено тем, что поток лога и потока-качалка работаются примерно с одной скоростью, поэтому в среднем очеред обмена постоянно выгребается. Фактически, скорость программы ограничена пропускной способностью потока логирования, но так как визуально не видно, что поток качания заканчиватся значительно раньше, то можно предположить, что он работается примерно с такой же скоростью (напомню, ~6 минут).</p>

<p>На Эрланге же качалка работает, как мне показалось, очень быстро. Данные перекачиваются и параллельно загоняются в очередь на логирование. А вот производительность логирования оставляет желать лучшего. Ради эксперимента я закомментировал вызов функции создания шестнадцатеричного дампа, и время сброса лога также упало до минуты. Поэтому, как мне кажется, корень зла в моей кривой работе со строками и списками при создании дампа (возможно что-то где-то постоянно копируются, а в мире рекурсии и изменения данных только через копирование ошибки подобного рода дорого отражаются на производильности). А вот работа с сокетами и посылкой/приемом сообщений между потоками в Эрланге очень эффективная.</p>

<p>Я вообще заметил, что в Эрланге ты подсознательно начинашь писать многопотоковые программы. Например, тут в принципе нет глобальных объектов. И допустим, у тебя есть флаг, глобальная установка, которую хочется иметь везде. Так как глобально ее объявить нельзя, приходится таскать как параметр функций там и сям. А как вариант &ldquo;навязанного конструктивного мышления&rdquo;, думаешь - а давай-ка я запущу этот кусок как поток и буду вызывать его функционал через посылку сообщений. В этом случае я могу передать мне нужный параметр один раз в начале при создании потока, тем самым сделав его типа глобальным для этого потока.</p>

<p>Наверное пример вышел немного скомканным, но общая идея такова - так как ты обязан передавать в функцию все ее параметры каждый раз, то начинаешь думать об максимальной независимости и дроблении функционала, что как следствие, позволяет запускать их в разных потоках.</p>

<p>Для интересующихся - <a href="https://github.com/begoon/erl-tcpspy/blob/master/tcp_proxy.erl">исходник доступен</a>.</p>

<p>Посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2011/11/22/tcpip-proxy-in-erlang/">TCP/IP proxy на Erlang&rsquo;e</a></li>
<li><a href="http://demin.ws/blog/russian/2009/09/04/multi-threaded-tcpip-debugger/">Мультипотоковый отладчик TCP/IP соединений</a></li>
<li><a href="http://demin.ws/blog/russian/2011/11/19/problem-to-try-new-languages/">Задача для освоения новых языков</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git для работы на нескольких платформах]]></title>
    <link href="http://demin.ws/blog/russian/2011/11/22/git-to-work-on-multiple-platforms/"/>
    <updated>2011-11-22T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/11/22/git-to-work-on-multiple-platforms/</id>
    <content type="html"><![CDATA[<p>Мне приходится часто проверять один и тот же код на нескольких платформах. Это означает, что исходники надо физически копировать с машины на машину. Далее начинаются мелкие правки на каждой платформе, которые надо в конце собрать вместе и пробовать снова.</p>

<p>После десятков версий изощренных скриптов я решил собрать волю в кулак и начать использовать Git.</p>

<p>Задача: на виндовой машине (это мой основной рабочий ноутбук) установить Git как сервер, чтобы я мог всегда иметь на нем самую актуальную копию всего. Затем установить Git как клиент на рабочих машинах и обмениваться commit&rsquo;ами через центральный репозиторий на Windows.</p>

<p>Для простоты я решил использовать SSH как протокол. Благо все UNIX машины имеют ssh-клиент.</p>

<p>Плюсы - везде Git, все локальные изменения имеют версии и можно вести локальные ветки. Ну и центральная копия - тоже под Git. Минусы - потратить время и все это настроить.</p>

<p>Git/ssh как сервер на Windows - это целая тема, так как нужно поставить SSH сервер и правильно прикрутить к нему Git.</p>

<p>Благодаря двум (<a href="http://www.timdavis.com.au/git/setting-up-a-msysgit-server-with-copssh-on-windows/">1</a>, <a href="http://java2cs2.blogspot.com/2010/03/setup-git-server-on-windows-machine.html">2</a>) ссылкам удалось настроить <a href="http://www.itefix.no/i2/copssh">CopSSH</a> в паре с <a href="http://code.google.com/p/msysgit/">msysgit</a>.</p>

<p>Далее Git на клиентских машинах. С Linux и Windows все совсем просто (на Windows используется тот же msysgit).</p>

<p>На Solaris пришлось собрать GNU Make до 3.82 (на 3.75 Git не собирается).</p>

<p>На HPUX and AIX пришлось собрать coreutils (для нормального install), less (представляете, на HPUX нету less по умолчанию), python (опять для HPUX), zlib и свежие tcl/tk.</p>

<p>Один день на борьбу c CopSSH на Windows и день на сборки под UNIXами.</p>

<p>Зато теперь радость и благодать.</p>

<p>P.S. С CopSSH интересная история. Вчера (21 ноября) на их сайте можно было все скачать. Сегодня (22 ноября) читаю на том же сайте:</p>

<blockquote>
<p>Termination of free solutions from ITeF!x</p>

<p>Submitted by tk on Tue, <sup>22</sup>&frasl;<sub>11</sub>/2011 - 08:18 itefix</p>

<p>Development,distribution and support of free solutions from Itefix are now terminated due to lack of time and changes in priorities.</p>
</blockquote>

<p>С их зеркала на sourceforge.net также пропали все файлы. Хорошо, что я не удалил дистрибутив CopSSH, скачанный вчера.</p>

<p>Ссылки по теме:</p>

<ul>
<li><a href="http://www.timdavis.com.au/git/setting-up-a-msysgit-server-with-copssh-on-windows/">Setting up a Msysgit Server with copSSH on Windows</a></li>
<li><a href="http://java2cs2.blogspot.com/2010/03/setup-git-server-on-windows-machine.html">Setup a Git server on Windows machine, with MSysGit and CopSSH</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TCP/IP proxy на Erlang'e]]></title>
    <link href="http://demin.ws/blog/russian/2011/11/22/tcpip-proxy-in-erlang/"/>
    <updated>2011-11-22T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/11/22/tcpip-proxy-in-erlang/</id>
    <content type="html"><![CDATA[<p>По мотивам <a href="http://demin.ws/blog/russian/2011/11/19/problem-to-try-new-languages/">недавнего поста про изучение новых языков</a>, я таки добил версию на Erlang&rsquo;е. Если тут есть спецы по языку, буду признателен за критику.</p>

<p>Программа по функциям идентична <a href="http://demin.ws/blog/russian/2009/09/04/multi-threaded-tcpip-debugger/">версии на Питоне</a> за исключением отсутствия дублирования лога в файл и продвинутого разбора флагов командной строки.</p>

<p>И так: программа многопоточна, и журналирование также происходит в отдельном потоке для обеспечения целостности многострочных дампов.</p>

<p>Про Эрланг. После многократных и пока полностью неуспешных заходов на Хаскелл и после все еще неудачных попыток на Lisp или Scheme написать что-то более менее реальное и жизненное, Эрланг был реальным прорывом для меня.</p>

<p>Удивительно, невозможность изменять переменные (представьте, что программируя на С++ надо все переменные делать <code>const</code>) является фантастическим способом борьбы с опечатками при cut-and-paste. Также когда делаешь циклы через хвостовую рекурсию, сразу осознаешь, как эффективно работать со списками, чтобы их не копировать, а всегда &ldquo;таскать&rdquo; за хвост или голову.</p>

<p>Ну а концепция легких потоков и обмена сообщениями между ними (как в Go), приправленная глобальной иммутабельностью, позволяет легко писать надежные многотопочные программы.</p>

<p>Например, истересен способ реализации многопотокового TCP/IP сервера. Обычно при его программировании есть распростраенный прием: один главный поток, принимающий соединения, и когда соединение принято, создается новый поток-исполнитель, который обрабатывает соединение и после этого умирает.</p>

<p>В Эрланге можно сделать иначе (функция <code>acceptor()</code>). Поток, ожидающий входящего соединения, после его получения рождает свой клон для ожидания следующего соединения и затем сам обрабабатывает запрос.</p>

<p>Для меня это было немного необычно.</p>

<pre class="hl">
<span class="hl opt">-</span><span class="hl kwd">module</span><span class="hl opt">(</span>tcp_proxy<span class="hl opt">).</span>

<span class="hl opt">-</span><span class="hl kwd">define</span><span class="hl opt">(</span>WIDTH<span class="hl opt">,</span> <span class="hl num">16</span><span class="hl opt">).</span>

<span class="hl kwd">main</span><span class="hl opt">([</span>ListenPort<span class="hl opt">,</span> RemoteHost<span class="hl opt">,</span> RemotePort<span class="hl opt">]) -&gt;</span>
    ListenPortN <span class="hl opt">=</span> <span class="hl kwb">list_to_integer</span><span class="hl opt">(</span>ListenPort<span class="hl opt">),</span>
    <span class="hl kwd">start</span><span class="hl opt">(</span>ListenPortN<span class="hl opt">,</span> RemoteHost<span class="hl opt">,</span> <span class="hl kwb">list_to_integer</span><span class="hl opt">(</span>RemotePort<span class="hl opt">));</span>

<span class="hl kwd">main</span><span class="hl opt">(</span>_<span class="hl opt">) -&gt;</span> <span class="hl kwd">usage</span><span class="hl opt">().</span>

<span class="hl kwd">usage</span><span class="hl opt">() -&gt;</span>
    <span class="hl kwc">io</span><span class="hl opt">:</span><span class="hl kwd">format</span><span class="hl opt">(</span><span class="hl str">&quot;~ntcp_proxy.erl local_port remote_port remote_host~n~n&quot;</span><span class="hl opt">, []),</span>
    <span class="hl kwc">io</span><span class="hl opt">:</span><span class="hl kwd">format</span><span class="hl opt">(</span><span class="hl str">&quot;Example:~n~n&quot;</span><span class="hl opt">, []),</span>
    <span class="hl kwc">io</span><span class="hl opt">:</span><span class="hl kwd">format</span><span class="hl opt">(</span><span class="hl str">&quot;tcp_proxy.erl 50000 google.com 80~n~n&quot;</span><span class="hl opt">, []).</span>

<span class="hl kwd">start</span><span class="hl opt">(</span>ListenPort<span class="hl opt">,</span> CalleeHost<span class="hl opt">,</span> CalleePort<span class="hl opt">) -&gt;</span>
    <span class="hl kwc">io</span><span class="hl opt">:</span><span class="hl kwd">format</span><span class="hl opt">(</span><span class="hl str">&quot;Start listening on port ~p and forwarding data to ~s:~p~n&quot;</span><span class="hl opt">,</span>
              <span class="hl opt">[</span>ListenPort<span class="hl opt">,</span> CalleeHost<span class="hl opt">,</span> CalleePort<span class="hl opt">]),</span>
    <span class="hl opt">{</span>ok<span class="hl opt">,</span> ListenSocket<span class="hl opt">} =</span> <span class="hl kwc">gen_tcp</span><span class="hl opt">:</span><span class="hl kwd">listen</span><span class="hl opt">(</span>ListenPort<span class="hl opt">, [</span><span class="hl kwb">binary</span><span class="hl opt">, {</span>packet<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">},</span>
                                                    <span class="hl opt">{</span>reuseaddr<span class="hl opt">,</span> true<span class="hl opt">},</span>
                                                    <span class="hl opt">{</span>active<span class="hl opt">,</span> true<span class="hl opt">}]),</span>
    <span class="hl kwc">io</span><span class="hl opt">:</span><span class="hl kwd">format</span><span class="hl opt">(</span><span class="hl str">&quot;Listener socket is started ~s~n&quot;</span><span class="hl opt">, [</span><span class="hl kwd">socket_info</span><span class="hl opt">(</span>ListenSocket<span class="hl opt">)]),</span>
    <span class="hl kwb">spawn</span><span class="hl opt">(</span><span class="hl kwa">fun</span><span class="hl opt">() -&gt;</span> <span class="hl kwd">acceptor</span><span class="hl opt">(</span>ListenSocket<span class="hl opt">,</span> CalleeHost<span class="hl opt">,</span> CalleePort<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">end</span><span class="hl opt">),</span>
    <span class="hl kwb">register</span><span class="hl opt">(</span>logger<span class="hl opt">,</span> <span class="hl kwb">spawn</span><span class="hl opt">(</span><span class="hl kwa">fun</span><span class="hl opt">() -&gt;</span> <span class="hl kwd">logger</span><span class="hl opt">()</span> <span class="hl kwa">end</span><span class="hl opt">)),</span>
    <span class="hl kwd">wait</span><span class="hl opt">().</span>

<span class="hl slc">% Infinine loop to make sure that the main thread doesn't exit.</span>
<span class="hl kwd">wait</span><span class="hl opt">() -&gt;</span> <span class="hl kwa">receive</span> _ <span class="hl opt">-&gt;</span> true <span class="hl kwa">end</span><span class="hl opt">,</span> <span class="hl kwd">wait</span><span class="hl opt">().</span>

<span class="hl kwd">format_socket_info</span><span class="hl opt">(</span>Info<span class="hl opt">) -&gt;</span>
    <span class="hl opt">{</span>ok<span class="hl opt">, {</span>\<span class="hl opt">{</span>A<span class="hl opt">,</span> B<span class="hl opt">,</span> C<span class="hl opt">,</span> D<span class="hl opt">},</span> Port<span class="hl opt">}} =</span> Info<span class="hl opt">,</span>
    <span class="hl kwc">lists</span><span class="hl opt">:</span><span class="hl kwd">flatten</span><span class="hl opt">(</span><span class="hl kwc">io_lib</span><span class="hl opt">:</span><span class="hl kwd">format</span><span class="hl opt">(</span><span class="hl str">&quot;~p.~p.~p.~p:~p&quot;</span><span class="hl opt">, [</span>A<span class="hl opt">,</span> B<span class="hl opt">,</span> C<span class="hl opt">,</span> D<span class="hl opt">,</span> Port<span class="hl opt">])).</span>

<span class="hl kwd">peer_info</span><span class="hl opt">(</span>Socket<span class="hl opt">) -&gt;</span> <span class="hl kwd">format_socket_info</span><span class="hl opt">(</span><span class="hl kwc">inet</span><span class="hl opt">:</span><span class="hl kwd">peername</span><span class="hl opt">(</span>Socket<span class="hl opt">)).</span>

<span class="hl kwd">socket_info</span><span class="hl opt">(</span>Socket<span class="hl opt">) -&gt;</span> <span class="hl kwd">format_socket_info</span><span class="hl opt">(</span><span class="hl kwc">inet</span><span class="hl opt">:</span><span class="hl kwd">sockname</span><span class="hl opt">(</span>Socket<span class="hl opt">)).</span>

<span class="hl kwd">acceptor</span><span class="hl opt">(</span>ListenSocket<span class="hl opt">,</span> RemoteHost<span class="hl opt">,</span> RemotePort<span class="hl opt">,</span> ConnN<span class="hl opt">) -&gt;</span>
    <span class="hl kwa">case</span> <span class="hl kwc">gen_tcp</span><span class="hl opt">:</span><span class="hl kwd">accept</span><span class="hl opt">(</span>ListenSocket<span class="hl opt">)</span> <span class="hl kwa">of</span>
      <span class="hl opt">{</span>ok<span class="hl opt">,</span> LocalSocket<span class="hl opt">} -&gt;</span>
          <span class="hl kwb">spawn</span><span class="hl opt">(</span><span class="hl kwa">fun</span><span class="hl opt">() -&gt;</span> <span class="hl kwd">acceptor</span><span class="hl opt">(</span>ListenSocket<span class="hl opt">,</span> RemoteHost<span class="hl opt">,</span> RemotePort<span class="hl opt">,</span> ConnN <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">end</span><span class="hl opt">),</span>
          LocalInfo <span class="hl opt">=</span> <span class="hl kwd">peer_info</span><span class="hl opt">(</span>LocalSocket<span class="hl opt">),</span>
          logger <span class="hl opt">! {</span>message<span class="hl opt">,</span> <span class="hl str">&quot;~4.16.0B: Incoming connection from ~s~n&quot;</span><span class="hl opt">, [</span>ConnN<span class="hl opt">,</span> LocalInfo<span class="hl opt">]},</span>
          <span class="hl kwa">case</span> <span class="hl kwc">gen_tcp</span><span class="hl opt">:</span><span class="hl kwd">connect</span><span class="hl opt">(</span>RemoteHost<span class="hl opt">,</span> RemotePort<span class="hl opt">, [</span><span class="hl kwb">binary</span><span class="hl opt">, {</span>packet<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">}])</span> <span class="hl kwa">of</span>
            <span class="hl opt">{</span>ok<span class="hl opt">,</span> RemoteSocket<span class="hl opt">} -&gt;</span>
              RemoteInfo <span class="hl opt">=</span> <span class="hl kwd">peer_info</span><span class="hl opt">(</span>RemoteSocket<span class="hl opt">),</span>
              logger <span class="hl opt">! {</span>message<span class="hl opt">,</span> <span class="hl str">&quot;~4.16.0B: Connected to ~s~n&quot;</span><span class="hl opt">, [</span>ConnN<span class="hl opt">,</span> RemoteInfo<span class="hl opt">]},</span>
              <span class="hl kwd">exchange_data</span><span class="hl opt">(</span>LocalSocket<span class="hl opt">,</span> RemoteSocket<span class="hl opt">,</span> LocalInfo<span class="hl opt">,</span> RemoteInfo<span class="hl opt">,</span> ConnN<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">),</span>
              logger <span class="hl opt">! {</span>message<span class="hl opt">,</span> <span class="hl str">&quot;~4.16.0B: Finished~n&quot;</span><span class="hl opt">, [</span>ConnN<span class="hl opt">]};</span>
            <span class="hl opt">{</span>error<span class="hl opt">,</span> Reason<span class="hl opt">} -&gt;</span>
              logger <span class="hl opt">! {</span>message<span class="hl opt">,</span> <span class="hl str">&quot;~4.16.0B: Unable to connect to ~s:~s (error: ~p)~n&quot;</span><span class="hl opt">,</span>
                       <span class="hl opt">[</span>ConnN<span class="hl opt">,</span> RemoteHost<span class="hl opt">,</span> RemotePort<span class="hl opt">,</span> Reason<span class="hl opt">]}</span>
          <span class="hl kwa">end</span><span class="hl opt">;</span>
      <span class="hl opt">{</span>error<span class="hl opt">,</span> Reason<span class="hl opt">} -&gt;</span>
          logger <span class="hl opt">! {</span>message<span class="hl opt">,</span> <span class="hl str">&quot;Socket accept error '~w'~n&quot;</span><span class="hl opt">, [</span>Reason<span class="hl opt">]}</span>
    <span class="hl kwa">end</span><span class="hl opt">.</span>

<span class="hl kwd">exchange_data</span><span class="hl opt">(</span>LocalSocket<span class="hl opt">,</span> RemoteSocket<span class="hl opt">,</span> LocalInfo<span class="hl opt">,</span> RemoteInfo<span class="hl opt">,</span> ConnN<span class="hl opt">,</span> PacketN<span class="hl opt">) -&gt;</span>
    <span class="hl kwa">receive</span>
        <span class="hl opt">{</span>tcp<span class="hl opt">,</span> RemoteSocket<span class="hl opt">,</span> Bin<span class="hl opt">} -&gt;</span>
            logger <span class="hl opt">! {</span>received<span class="hl opt">,</span> ConnN<span class="hl opt">,</span> Bin<span class="hl opt">,</span> RemoteInfo<span class="hl opt">,</span> PacketN<span class="hl opt">},</span>
            <span class="hl kwc">gen_tcp</span><span class="hl opt">:</span><span class="hl kwd">send</span><span class="hl opt">(</span>LocalSocket<span class="hl opt">,</span> Bin<span class="hl opt">),</span>
            logger <span class="hl opt">! {</span>sent<span class="hl opt">,</span> ConnN<span class="hl opt">,</span> LocalInfo<span class="hl opt">,</span> PacketN<span class="hl opt">},</span>
            <span class="hl kwd">exchange_data</span><span class="hl opt">(</span>LocalSocket<span class="hl opt">,</span> RemoteSocket<span class="hl opt">,</span> LocalInfo<span class="hl opt">,</span> RemoteInfo<span class="hl opt">,</span> ConnN<span class="hl opt">,</span> PacketN <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">);</span>
        <span class="hl opt">{</span>tcp<span class="hl opt">,</span> LocalSocket<span class="hl opt">,</span> Bin<span class="hl opt">} -&gt;</span>
            logger <span class="hl opt">! {</span>received<span class="hl opt">,</span> ConnN<span class="hl opt">,</span> Bin<span class="hl opt">,</span> LocalInfo<span class="hl opt">,</span> PacketN<span class="hl opt">},</span>
            <span class="hl kwc">gen_tcp</span><span class="hl opt">:</span><span class="hl kwd">send</span><span class="hl opt">(</span>RemoteSocket<span class="hl opt">,</span> Bin<span class="hl opt">),</span>
            logger <span class="hl opt">! {</span>sent<span class="hl opt">,</span> ConnN<span class="hl opt">,</span> RemoteInfo<span class="hl opt">,</span> PacketN<span class="hl opt">},</span>
            <span class="hl kwd">exchange_data</span><span class="hl opt">(</span>LocalSocket<span class="hl opt">,</span> RemoteSocket<span class="hl opt">,</span> LocalInfo<span class="hl opt">,</span> RemoteInfo<span class="hl opt">,</span> ConnN<span class="hl opt">,</span> PacketN <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">);</span>
        <span class="hl opt">{</span>tcp_closed<span class="hl opt">,</span> RemoteSocket<span class="hl opt">} -&gt;</span>
            logger <span class="hl opt">! {</span>message<span class="hl opt">,</span> <span class="hl str">&quot;~4.16.0B: Disconnected from ~s~n&quot;</span><span class="hl opt">, [</span>ConnN<span class="hl opt">,</span> RemoteInfo<span class="hl opt">]};</span>
        <span class="hl opt">{</span>tcp_closed<span class="hl opt">,</span> LocalSocket<span class="hl opt">} -&gt;</span>
            logger <span class="hl opt">! {</span>message<span class="hl opt">,</span> <span class="hl str">&quot;~4.16.0B: Disconnected from ~s~n&quot;</span><span class="hl opt">, [</span>ConnN<span class="hl opt">,</span> LocalInfo<span class="hl opt">]}</span>
    <span class="hl kwa">end</span><span class="hl opt">.</span>

<span class="hl kwd">logger</span><span class="hl opt">() -&gt;</span>
    <span class="hl kwa">receive</span>
        <span class="hl opt">{</span>received<span class="hl opt">,</span> Pid<span class="hl opt">,</span> Msg<span class="hl opt">,</span> From<span class="hl opt">,</span> PacketN<span class="hl opt">} -&gt;</span>
            <span class="hl kwc">io</span><span class="hl opt">:</span><span class="hl kwd">format</span><span class="hl opt">(</span><span class="hl str">&quot;~4.16.0B: Received (#~p) ~p byte(s) from ~s~n&quot;</span><span class="hl opt">,</span>
                      <span class="hl opt">[</span>Pid<span class="hl opt">,</span> PacketN<span class="hl opt">,</span> <span class="hl kwd">byte_size</span><span class="hl opt">(</span>Msg<span class="hl opt">),</span> From<span class="hl opt">]),</span>
            <span class="hl kwd">dump_bin</span><span class="hl opt">(</span>Pid<span class="hl opt">,</span> Msg<span class="hl opt">),</span>
            <span class="hl kwd">logger</span><span class="hl opt">();</span>
        <span class="hl opt">{</span>sent<span class="hl opt">,</span> Pid<span class="hl opt">,</span> ToSocket<span class="hl opt">,</span> PacketN<span class="hl opt">} -&gt;</span>
            <span class="hl kwc">io</span><span class="hl opt">:</span><span class="hl kwd">format</span><span class="hl opt">(</span><span class="hl str">&quot;~4.16.0B: Sent (#~p) to ~s~n&quot;</span><span class="hl opt">, [</span>Pid<span class="hl opt">,</span> PacketN<span class="hl opt">,</span> ToSocket<span class="hl opt">]),</span>
            <span class="hl kwd">logger</span><span class="hl opt">();</span>
        <span class="hl opt">{</span>message<span class="hl opt">,</span> Format<span class="hl opt">,</span> Args<span class="hl opt">} -&gt;</span>
            <span class="hl kwc">io</span><span class="hl opt">:</span><span class="hl kwd">format</span><span class="hl opt">(</span>Format<span class="hl opt">,</span> Args<span class="hl opt">),</span>
            <span class="hl kwd">logger</span><span class="hl opt">()</span>
    <span class="hl kwa">end</span><span class="hl opt">.</span>

<span class="hl kwd">dump_list</span><span class="hl opt">(</span>Prefix<span class="hl opt">,</span> L<span class="hl opt">,</span> Offset<span class="hl opt">) -&gt;</span>
    <span class="hl opt">{</span>H<span class="hl opt">,</span> T<span class="hl opt">} =</span> <span class="hl kwc">lists</span><span class="hl opt">:</span><span class="hl kwd">split</span><span class="hl opt">(</span><span class="hl kwc">lists</span><span class="hl opt">:</span><span class="hl kwd">min</span><span class="hl opt">([</span>?WIDTH<span class="hl opt">,</span> <span class="hl kwb">length</span><span class="hl opt">(</span>L<span class="hl opt">)]),</span> L<span class="hl opt">),</span>
    <span class="hl kwc">io</span><span class="hl opt">:</span><span class="hl kwd">format</span><span class="hl opt">(</span><span class="hl str">&quot;~4.16.0B: &quot;</span><span class="hl opt">, [</span>Prefix<span class="hl opt">]),</span>
    <span class="hl kwc">io</span><span class="hl opt">:</span><span class="hl kwd">format</span><span class="hl opt">(</span><span class="hl str">&quot;~4.16.0B: &quot;</span><span class="hl opt">, [</span>Offset<span class="hl opt">]),</span>
    <span class="hl kwc">io</span><span class="hl opt">:</span><span class="hl kwd">format</span><span class="hl opt">(</span><span class="hl str">&quot;~-*s| &quot;</span><span class="hl opt">, [</span>?WIDTH <span class="hl opt">*</span> <span class="hl num">3</span><span class="hl opt">,</span> <span class="hl kwd">dump_numbers</span><span class="hl opt">(</span>H<span class="hl opt">)]),</span>
    <span class="hl kwc">io</span><span class="hl opt">:</span><span class="hl kwd">format</span><span class="hl opt">(</span><span class="hl str">&quot;~-*s&quot;</span><span class="hl opt">, [</span>?WIDTH<span class="hl opt">,</span> <span class="hl kwd">dump_chars</span><span class="hl opt">(</span>H<span class="hl opt">)]),</span>
    <span class="hl kwc">io</span><span class="hl opt">:</span><span class="hl kwd">format</span><span class="hl opt">(</span><span class="hl str">&quot;~n&quot;</span><span class="hl opt">, []),</span>
    <span class="hl kwa">if</span> <span class="hl kwb">length</span><span class="hl opt">(</span>T<span class="hl opt">) &gt;</span> <span class="hl num">0</span> <span class="hl opt">-&gt;</span> <span class="hl kwd">dump_list</span><span class="hl opt">(</span>Prefix<span class="hl opt">,</span> T<span class="hl opt">,</span> Offset <span class="hl opt">+</span> <span class="hl num">16</span><span class="hl opt">);</span> true <span class="hl opt">-&gt; []</span> <span class="hl kwa">end</span><span class="hl opt">.</span>

<span class="hl kwd">dump_numbers</span><span class="hl opt">(</span>L<span class="hl opt">)</span> <span class="hl kwa">when</span> <span class="hl opt">(</span><span class="hl kwd">is_list</span><span class="hl opt">(</span>L<span class="hl opt">)) -&gt;</span>
    <span class="hl kwc">lists</span><span class="hl opt">:</span><span class="hl kwd">flatten</span><span class="hl opt">([</span><span class="hl kwc">io_lib</span><span class="hl opt">:</span><span class="hl kwd">format</span><span class="hl opt">(</span><span class="hl str">&quot;~2.16.0B &quot;</span><span class="hl opt">, [</span>X<span class="hl opt">])</span> || X <span class="hl opt">&lt;-</span> L<span class="hl opt">]).</span>

<span class="hl kwd">dump_chars</span><span class="hl opt">(</span>L<span class="hl opt">) -&gt;</span>
    <span class="hl kwc">lists</span><span class="hl opt">:</span><span class="hl kwd">map</span><span class="hl opt">(</span><span class="hl kwa">fun</span><span class="hl opt">(</span>X<span class="hl opt">) -&gt;</span>
                <span class="hl kwa">if</span> X <span class="hl opt">&gt;=</span> <span class="hl num">32</span> andalso X <span class="hl opt">&lt;</span> <span class="hl num">128</span> <span class="hl opt">-&gt;</span> X<span class="hl opt">;</span>
                   true <span class="hl opt">-&gt;</span> $<span class="hl opt">.</span>
                <span class="hl kwa">end</span>
              <span class="hl kwa">end</span><span class="hl opt">,</span> L<span class="hl opt">).</span>

<span class="hl kwd">dump_bin</span><span class="hl opt">(</span>Prefix<span class="hl opt">,</span> Bin<span class="hl opt">) -&gt;</span>
    <span class="hl kwd">dump_list</span><span class="hl opt">(</span>Prefix<span class="hl opt">,</span> <span class="hl kwb">binary_to_list</span><span class="hl opt">(</span>Bin<span class="hl opt">),</span> <span class="hl num">0</span><span class="hl opt">).</span>
</pre>

<p>В работе может выводить примерно следующее:</p>

<pre><code>alexander:erlang/&gt;./tcp_proxy.sh 50000 pop.yandex.ru 110
Start listening on port 50000 and forwarding data to pop.yandex.ru:110
Listener socket is started 0.0.0.0:50000
0000: Incoming connection from 127.0.0.1:51402
0000: Connected to 213.180.204.37:110
0000: Received (#0) 38 byte(s) from 213.180.204.37:110
0000: 0000: 2B 4F 4B 20 50 4F 50 20 59 61 21 20 76 31 2E 30 | +OK POP Ya! v1.0
0000: 0010: 2E 30 6E 61 40 32 35 20 67 55 62 44 54 51 64 5A | .0na@25 gUbDTQdZ
0000: 0020: 6D 6D 49 31 0D 0A                               | mmI1..
0000: Sent (#0) to 127.0.0.1:51402
0000: Received (#1) 11 byte(s) from 127.0.0.1:51402
0000: 0000: 55 53 45 52 20 74 65 73 74 0D 0A                | USER test..
0000: Sent (#1) to 213.180.204.37:110
0000: Received (#2) 23 byte(s) from 213.180.204.37:110
0000: 0000: 2B 4F 4B 20 70 61 73 73 77 6F 72 64 2C 20 70 6C | +OK password, pl
0000: 0010: 65 61 73 65 2E 0D 0A                            | ease...
0000: Sent (#2) to 127.0.0.1:51402
0000: Received (#3) 11 byte(s) from 127.0.0.1:51402
0000: 0000: 50 41 53 53 20 70 61 73 73 0D 0A                | PASS pass..
0000: Sent (#3) to 213.180.204.37:110
0000: Received (#4) 72 byte(s) from 213.180.204.37:110
0000: 0000: 2D 45 52 52 20 5B 41 55 54 48 5D 20 6C 6F 67 69 | -ERR [AUTH] logi
0000: 0010: 6E 20 66 61 69 6C 75 72 65 20 6F 72 20 50 4F 50 | n failure or POP
0000: 0020: 33 20 64 69 73 61 62 6C 65 64 2C 20 74 72 79 20 | 3 disabled, try
0000: 0030: 6C 61 74 65 72 2E 20 73 63 3D 67 55 62 44 54 51 | later. sc=gUbDTQ
0000: 0040: 64 5A 6D 6D 49 31 0D 0A                         | dZmmI1..
0000: Sent (#4) to 127.0.0.1:51402
0000: Disconnected from 213.180.204.37:110
0000: Finished
0001: Incoming connection from 127.0.0.1:51405
0001: Connected to 213.180.204.37:110
0001: Received (#0) 38 byte(s) from 213.180.204.37:110
0001: 0000: 2B 4F 4B 20 50 4F 50 20 59 61 21 20 76 31 2E 30 | +OK POP Ya! v1.0
0001: 0010: 2E 30 6E 61 40 33 30 20 70 55 62 41 72 52 33 74 | .0na@30 pUbArR3t
0001: 0020: 6A 65 41 31 0D 0A                               | jeA1..
0001: Sent (#0) to 127.0.0.1:51405
0001: Received (#1) 6 byte(s) from 127.0.0.1:51405
0001: 0000: 51 55 49 54 0D 0A                               | QUIT..
0001: Sent (#1) to 213.180.204.37:110
0001: Received (#2) 20 byte(s) from 213.180.204.37:110
0001: 0000: 2B 4F 4B 20 73 68 75 74 74 69 6E 67 20 64 6F 77 | +OK shutting dow
0001: 0010: 6E 2E 0D 0A                                     | n...
0001: Sent (#2) to 127.0.0.1:51405
0001: Disconnected from 213.180.204.37:110
0001: Finished
</code></pre>

<p>Вывод: Эрланг - прекрасный вариант для начала функциональной карьеры.</p>

<p>Посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2011/11/19/problem-to-try-new-languages/">Задача для освоения новых языков</a></li>
<li><a href="http://demin.ws/blog/russian/2009/09/04/multi-threaded-tcpip-debugger/">Мультипотоковый отладчик TCP/IP соединений</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Задача для освоения новых языков]]></title>
    <link href="http://demin.ws/blog/russian/2011/11/19/problem-to-try-new-languages/"/>
    <updated>2011-11-19T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/11/19/problem-to-try-new-languages/</id>
    <content type="html"><![CDATA[<p>Как-то так сложилось, что когда я рассматриваю новый язык программирования, то помимо тривиальных программок типа &ldquo;Hello world&rdquo;, хочется написать что-то более менее реальное или даже нужное.</p>

<p>У меня такой задачей стал многопотоковый перехватчик-прокси для TCP/IP. Такая программа ставится как промежуточное звено между клиентом и сервером, и можно удобно смотреть, что летает в канале туда-сюда.</p>

<p>Данная задача затрагивает многие аспекты языка - потоки, синхронизацию, сокеты, ввод/вывод, работу со строками.</p>

<p>Вот, например, <a href="http://demin.ws/blog/russian/2009/09/04/multi-threaded-tcpip-debugger/">версия на Питоне</a>. На данный момент это наиболее удачная моя версия, так как она работает на многих платформах благодаря Питону и также показывает неплохую производительность благодаря логгированию в параллельном потоке.</p>

<p>Еще я писал это программу на C, C++, C++/boost, PHP, VB, Go, Ruby. На Erlang&rsquo;e не осилил, пока.</p>

<p>А вы чем тестируете новые языки?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Тонкости использования getenv() и putenv()]]></title>
    <link href="http://demin.ws/blog/russian/2011/11/16/subtleties-of-using-getenv-and-putenv/"/>
    <updated>2011-11-16T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/11/16/subtleties-of-using-getenv-and-putenv/</id>
    <content type="html"><![CDATA[<p>Нарвался тут на интересные грабли с функциями <a href="http://www.kernel.org/doc/man-pages/online/pages/man3/getenv.3.html">getenv()</a> и <a href="http://www.kernel.org/doc/man-pages/online/pages/man3/putenv.3.html">putenv()</a>.</p>

<p>С <code>putenv()</code> у меня <a href="http://demin.ws/blog/russian/2009/02/01/static-argument-of-putenv/">уже был интересный опыт</a>.</p>

<p>Часто люди пишут так:</p>

<pre class="hl">
<span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">getenv</span><span class="hl opt">(</span><span class="hl str">&quot;A_FLAG&quot;</span><span class="hl opt">)) {</span>
  <span class="hl opt">...</span>
<span class="hl opt">}</span>
</pre>

<p>Это работает неплохо для переменных-флагов, которые либо есть, либо нет. Значение не важно.</p>

<p>Что получилось у меня:</p>

<pre class="hl">
<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(...) {</span>
  <span class="hl kwd">putenv</span><span class="hl opt">(</span><span class="hl str">&quot;GLOBAL_FLAG=1&quot;</span><span class="hl opt">);</span>  <span class="hl slc">// Глобальное значение для всей программы.</span>
  <span class="hl opt">...</span>
  <span class="hl kwd">system</span><span class="hl opt">(</span><span class="hl str">&quot;xyz&quot;</span><span class="hl opt">);</span>            <span class="hl slc">// Это программа должна видеть GLOBAL_FLAG=1.</span>
  <span class="hl opt">...</span>
  <span class="hl kwd">do_stuff</span><span class="hl opt">();</span>
  <span class="hl opt">...</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">do_stuff</span><span class="hl opt">() {</span>
  <span class="hl opt">...</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>something<span class="hl opt">) {</span>
    <span class="hl kwd">putenv</span><span class="hl opt">(</span><span class="hl str">&quot;GLOBAL_FLAG=&quot;</span><span class="hl opt">);</span> <span class="hl slc">// Убрать переменную.</span>
    <span class="hl kwd">system</span><span class="hl opt">(</span><span class="hl str">&quot;abc&quot;</span><span class="hl opt">);</span>          <span class="hl slc">// А вот для этой программы флаг должен быть убран.</span>
    <span class="hl opt">...</span>
  <span class="hl opt">}</span>
  <span class="hl opt">...</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">getenv</span><span class="hl opt">(</span><span class="hl str">&quot;GLOBAL_FLAG&quot;</span><span class="hl opt">) {</span>
     <span class="hl slc">// И вот тут начиналась ерунда на разных платформах.</span>
  <span class="hl opt">}</span>
<span class="hl opt">}</span>
</pre>

<p>А корень зла тут в том, что после <code>putenv()</code> результат <code>getenv()</code> может стать либо <code>NULL</code>, либо <code>&quot;&quot;</code>, в зависимости от платформы.</p>

<p>Например:</p>

<pre class="hl">
<span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">getenv</span><span class="hl opt">(</span><span class="hl str">&quot;GLOBAL_FLAG&quot;</span><span class="hl opt">) {</span>
    <span class="hl opt">...</span>
</pre>

<p>работает только на Windows и правильнее писать:</p>

<pre class="hl">
<span class="hl kwb">const char</span><span class="hl opt">*</span> p <span class="hl opt">=</span> <span class="hl kwd">getenv</span><span class="hl opt">(</span><span class="hl str">&quot;GLOBAL_FLAG&quot;</span><span class="hl opt">);</span>
<span class="hl kwa">if</span> <span class="hl opt">(</span>p <span class="hl opt">!=</span> NULL <span class="hl opt">&amp;&amp; *</span>p <span class="hl opt">!=</span> <span class="hl str">'\0'</span><span class="hl opt">) {</span>
  <span class="hl opt">...</span>
<span class="hl opt">}</span>
</pre>

<p>И лучше сделать wrapper для <code>getenv()</code>:</p>

<pre class="hl">
std<span class="hl opt">::</span>string <span class="hl kwd">GetEnv</span><span class="hl opt">(</span><span class="hl kwb">const char</span><span class="hl opt">*</span> name<span class="hl opt">) {</span>
  <span class="hl kwb">const char</span><span class="hl opt">*</span> v <span class="hl opt">=</span> <span class="hl kwd">getenv</span><span class="hl opt">(</span>name<span class="hl opt">);</span>
  <span class="hl kwa">return</span> v ? v <span class="hl opt">:</span> <span class="hl str">&quot;&quot;</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>И для проверки писать:</p>

<pre class="hl">
<span class="hl kwa">if</span> <span class="hl opt">(!</span><span class="hl kwd">GetEnv</span><span class="hl opt">(</span><span class="hl str">&quot;var&quot;</span><span class="hl opt">).</span><span class="hl kwd">empty</span><span class="hl opt">()) {</span>
  <span class="hl opt">..</span>
<span class="hl opt">}</span>
</pre>

<p>Для теста я написал программу, которая выставляет переменную и проверяет ее значение через <code>getenv()</code> и через вызов дочерней программы.</p>

<pre class="hl">
<span class="hl ppc">#include &lt;string&gt;</span>
<span class="hl ppc">#include &lt;vector&gt;</span>
<span class="hl ppc">#include &lt;iostream&gt;</span>
<span class="hl ppc">#include &lt;cstdlib&gt;</span>

<span class="hl ppc">#ifdef WINDOWS</span>
<span class="hl ppc">#define putenv _putenv</span>
<span class="hl ppc">#endif</span>

<span class="hl kwb">void</span> <span class="hl kwd">PrintVariableViaShell</span><span class="hl opt">(</span><span class="hl kwb">const</span> std<span class="hl opt">::</span>string<span class="hl opt">&amp;</span> name<span class="hl opt">) {</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;Value from shell:&quot;</span> <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  <span class="hl kwb">const</span> std<span class="hl opt">::</span>string cmd <span class="hl opt">=</span>
<span class="hl ppc">#ifdef WINDOWS</span>
    std<span class="hl opt">::</span><span class="hl kwd">string</span><span class="hl opt">(</span><span class="hl str">&quot;cmd /c echo [%&quot;</span><span class="hl opt">) +</span> name <span class="hl opt">+</span> <span class="hl str">&quot;%]&quot;</span><span class="hl opt">;</span>
<span class="hl ppc">#else</span>
    std<span class="hl opt">::</span><span class="hl kwd">string</span><span class="hl opt">(</span><span class="hl str">&quot;/bin/sh -c</span> <span class="hl esc">\&quot;</span><span class="hl str">echo [$&quot;</span><span class="hl opt">) +</span> name <span class="hl opt">+</span> <span class="hl str">&quot;]</span><span class="hl esc">\&quot;</span><span class="hl str">&quot;</span><span class="hl opt">;</span>
<span class="hl ppc">#endif</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> cmd <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  std<span class="hl opt">::</span><span class="hl kwd">system</span><span class="hl opt">(</span>cmd<span class="hl opt">.</span><span class="hl kwd">c_str</span><span class="hl opt">());</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">PrintVariableViaGetEnv</span><span class="hl opt">(</span><span class="hl kwb">const</span> std<span class="hl opt">::</span>string<span class="hl opt">&amp;</span> name<span class="hl opt">) {</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;Value from getenv():&quot;</span> <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  <span class="hl kwb">const char</span><span class="hl opt">*</span> v <span class="hl opt">=</span> std<span class="hl opt">::</span><span class="hl kwd">getenv</span><span class="hl opt">(</span>name<span class="hl opt">.</span><span class="hl kwd">c_str</span><span class="hl opt">());</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;[&quot;</span> <span class="hl opt">&lt;&lt; (</span>v ? v <span class="hl opt">:</span> <span class="hl str">&quot;&lt;NULL&gt;&quot;</span><span class="hl opt">) &lt;&lt;</span> <span class="hl str">&quot;]&quot;</span> <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">SetVariableDeleteAndPrint</span><span class="hl opt">(</span><span class="hl kwb">const char</span><span class="hl opt">*</span> name_value<span class="hl opt">,</span> <span class="hl kwb">const bool</span> equ<span class="hl opt">) {</span>
  <span class="hl kwb">const</span> std<span class="hl opt">::</span>string<span class="hl opt">&amp;</span> <span class="hl kwd">name_value_s</span><span class="hl opt">(</span>name_value<span class="hl opt">);</span>
  <span class="hl kwb">const</span> std<span class="hl opt">::</span>string name <span class="hl opt">=</span> name_value_s<span class="hl opt">.</span><span class="hl kwd">substr</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> name_value_s<span class="hl opt">.</span><span class="hl kwd">find</span><span class="hl opt">(</span><span class="hl str">'='</span><span class="hl opt">));</span>

  <span class="hl kwd">putenv</span><span class="hl opt">(</span><span class="hl kwa">const_cast</span><span class="hl opt">&lt;</span><span class="hl kwb">char</span><span class="hl opt">*&gt;(</span>name_value<span class="hl opt">));</span>
  std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span><span class="hl kwb">char</span><span class="hl opt">&gt;</span> <span class="hl kwd">delete_without_equ</span><span class="hl opt">(</span>name<span class="hl opt">.</span><span class="hl kwd">begin</span><span class="hl opt">(),</span> name<span class="hl opt">.</span><span class="hl kwd">end</span><span class="hl opt">());</span>
  delete_without_equ<span class="hl opt">.</span><span class="hl kwd">push_back</span><span class="hl opt">(</span><span class="hl str">'\0'</span><span class="hl opt">);</span>
  <span class="hl kwd">putenv</span><span class="hl opt">(&amp;</span>delete_without_equ<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]);</span>

  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;Value after deleting WITHOUT '=':&quot;</span> <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  <span class="hl kwd">PrintVariableViaShell</span><span class="hl opt">(</span>name<span class="hl opt">);</span>
  <span class="hl kwd">PrintVariableViaGetEnv</span><span class="hl opt">(</span>name<span class="hl opt">);</span>

  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>

  <span class="hl kwd">putenv</span><span class="hl opt">(</span><span class="hl kwa">const_cast</span><span class="hl opt">&lt;</span><span class="hl kwb">char</span><span class="hl opt">*&gt;(</span>name_value<span class="hl opt">));</span>
  std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span><span class="hl kwb">char</span><span class="hl opt">&gt;</span> <span class="hl kwd">delete_with_equ</span><span class="hl opt">(</span>name<span class="hl opt">.</span><span class="hl kwd">begin</span><span class="hl opt">(),</span> name<span class="hl opt">.</span><span class="hl kwd">end</span><span class="hl opt">());</span>
  delete_with_equ<span class="hl opt">.</span><span class="hl kwd">push_back</span><span class="hl opt">(</span><span class="hl str">'='</span><span class="hl opt">);</span>
  delete_with_equ<span class="hl opt">.</span><span class="hl kwd">push_back</span><span class="hl opt">(</span><span class="hl str">'\0'</span><span class="hl opt">);</span>
  <span class="hl kwd">putenv</span><span class="hl opt">(&amp;</span>delete_with_equ<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]);</span>

  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;Value after deleting WITH '=': &quot;</span> <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  <span class="hl kwd">PrintVariableViaShell</span><span class="hl opt">(</span>name<span class="hl opt">);</span>
  <span class="hl kwd">PrintVariableViaGetEnv</span><span class="hl opt">(</span>name<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[]) {</span>
<span class="hl ppc">#ifdef WINDOWS</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;WINDOWS&quot;</span> <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
<span class="hl ppc">#else</span>
  <span class="hl kwd">system</span><span class="hl opt">(</span><span class="hl str">&quot;uname&quot;</span><span class="hl opt">);</span>
<span class="hl ppc">#endif</span>
  <span class="hl kwd">SetVariableDeleteAndPrint</span><span class="hl opt">(</span><span class="hl str">&quot;ABC=123&quot;</span><span class="hl opt">,</span> <span class="hl kwa">true</span><span class="hl opt">);</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>И вот результы с разных платформ.</p>

<p><strong>Linux</strong></p>

<pre><code>Linux
Value after deleting WITHOUT '=':
Value from shell:
/bin/sh -c &quot;echo [$ABC]&quot;
[]
Value from getenv():
[&lt;NULL&gt;]

Value after deleting WITH '=':
Value from shell:
/bin/sh -c &quot;echo [$ABC]&quot;
[]
Value from getenv():
[]
</code></pre>

<p><strong>AIX</strong></p>

<pre><code>AIX
Value after deleting WITHOUT '=':
Value from shell:
/bin/sh -c &quot;echo [$ABC]&quot;
[123]
Value from getenv():
[123]

Value after deleting WITH '=':
Value from shell:
/bin/sh -c &quot;echo [$ABC]&quot;
[]
Value from getenv():
[]
</code></pre>

<p><strong>SunOS</strong></p>

<pre><code>SunOS
Value after deleting WITHOUT '=':
Value from shell:
/bin/sh -c &quot;echo [$ABC]&quot;
[123]
Value from getenv():
[123]

Value after deleting WITH '=':
Value from shell:
/bin/sh -c &quot;echo [$ABC]&quot;
[]
Value from getenv():
[]
</code></pre>

<p><strong>HP-UX</strong></p>

<pre><code>HP-UX
Value after deleting WITHOUT '=':
Value from shell:
/bin/sh -c &quot;echo [$ABC]&quot;
[123]
Value from getenv():
[123]

Value after deleting WITH '=':
Value from shell:
/bin/sh -c &quot;echo [$ABC]&quot;
[]
Value from getenv():
[]
</code></pre>

<p><strong>WINDOWS</strong></p>

<pre><code>WINDOWS
Value after deleting WITHOUT '=':
Value from shell:
cmd /c echo [%ABC%]
[123]
Value from getenv():
[123]

Value after deleting WITH '=':
Value from shell:
cmd /c echo [%ABC%]
[%ABC%]
Value from getenv():
[&lt;NULL&gt;]
</code></pre>

<p>Только на Windows <code>getenv()</code> возвращает <code>NULL</code> после удаления. На остальных это будет пустая строка.</p>

<p>Забавно, на Linux можно удалять переменные через <code>putenv(&quot;name&quot;)</code> (без знака &ldquo;=&rdquo;), а тогда <code>getenv()</code> будет возвращать <code>NULL</code>.</p>

<p>Посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2009/02/01/static-argument-of-putenv/">Статический аргумент функции putenv</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Сколько дней в году работает программист]]></title>
    <link href="http://demin.ws/blog/russian/2011/10/30/who-many-days-a-year-programmer-works/"/>
    <updated>2011-10-30T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/10/30/who-many-days-a-year-programmer-works/</id>
    <content type="html"><![CDATA[<p>Как вы оцениваете потенциальную продуктивность програмистов?</p>

<p>Понятно, что все зависит от типа работы, поэтому даю конкретный пример.</p>

<p>Дано: работа программиста над устоявшимся продуктом, который имеет major релизы раз в год; в течение года выпускаются minor релизы и критические исправления; плюс в поддержке находятся релизы последних 5-6 лет.</p>

<p>Вот мой расчет:</p>

<p>365 дней в году
365 / 7 = 52 недели в году
52 * 5 = 260 рабочих дней в году
260 - 25 = 235 рабочих дней в году за вычетом отпуска
235 - 10 = 225 рабочих дней в году за вычетом еще и государственных выходных
225 - 15 = 210 еще минус две недели в среднем &ldquo;по болезни&rdquo;</p>

<p>Итак: 210 человеко-восьмичасовых-дней.</p>

<p>Общение с несколькими менеджерами программистов показало, что цифра &ldquo;100 дней&rdquo; является весьма распространенной как оценка сверху на то, сколько новой разработки планировать в год на человека.</p>

<p>Получается, что после поддержки, затрат на внутренюю инфраструктуру, совещаний и обучений реально на разработку остается только половина времени.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[James Grenning, "Test Driven Development for Embedded C"]]></title>
    <link href="http://demin.ws/blog/russian/2011/10/25/test-driven-development-for-embedded-c/"/>
    <updated>2011-10-25T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/10/25/test-driven-development-for-embedded-c/</id>
    <content type="html"><![CDATA[<p><a href="http://demin.ws/blog/russian/2009/10/06/commented-code-and-todo/">Закомментированные куски кода</a> - зло, если они не являются частью документации. Увы, не всегда удается найти достаточно слов, чтобы убедить людей довериться репозиторию и таки удалить комментированный код, который &ldquo;может мне скоро понадобится&rdquo;. Вот тут на помощь приходят цитаты из книг. Почему-то люди больше верят напечатенному на бумаге, особенно в книге, особенно от популярного издательства.</p>

<p>Ребята купили в офис &ldquo;<a href="http://pragprog.com/book/jgade/test-driven-development-for-embedded-c">Test Driven Development for Embedded C</a>&rdquo; от James W. Grenning.</p>

<p><img src="http://demin.ws/images/covers/english/test-driven-development-for-embedded-c-cover.jpg" /></p>

<p>Хоть там и много про hardware, но примеры как можно и нужно изолировать зависимости для упрощения тестирования на языке С очень полезные. Кроме того описаны пара xUnit библиотек для этого языка (хотя cmockery нет).</p>

<p>Итак, цитата (как есть, без сокращении и перевода).</p>

<p><strong>Commented-out Code</strong></p>

<blockquote>
<p>Sources files littered with commented-out code are an ugly mess. New or returning programmers are faced with questions about what the code is supposed to do. &ldquo;Should the code be uncommented?&rdquo; &ldquo;It is no longer needed?&rdquo; &ldquo;When will it be needed and under what circumstances is it needed?&rdquo; &ldquo;What&rsquo;s that for?&rdquo;</p>

<p>The solution to this code smell is simple; delete the commented-out code. It can always be recovered from your source repository.</p>

<p><strong>James W. Grenning</strong></p>
</blockquote>

<p>Посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2009/03/01/unit-testing-in-c/">Unit-тестирование в языке С</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Запрещенные слова для комментариев и имен]]></title>
    <link href="http://demin.ws/blog/russian/2011/10/19/forbidden-words-for-comments-and-names/"/>
    <updated>2011-10-19T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/10/19/forbidden-words-for-comments-and-names/</id>
    <content type="html"><![CDATA[<p>Мы договорились в команде, что слова <code>new</code>, <code>now</code> и <code>old</code> являются запрещенными для употребления в комментариях, именах переменных окружения, описаниях коммитов, когда речь идет об изменении поведения чего-либо.</p>

<p>Например, переменная окружения, включающая &ldquo;старый&rdquo; алгоритм генерации ключа: вместо <code>OLD_KEY_ALGORITHM</code> должно быть <code>USE_ABCDEF_ALGORITHM</code>.</p>

<p>Вместо ссылок на прошлое или будущее надо описывать конкретное поведение, так как характеристики <code>new</code>, <code>now</code> and <code>old</code> становятся неактуальными уже через неделю. А еще хуже, что они приводят к появлению таких имен как <code>OLD_2_KEY_ALGORITHM</code> или <code>NEW_2_KEY_ALGORITHM</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[сonst везде, где только можно]]></title>
    <link href="http://demin.ws/blog/russian/2011/10/14/const-everywhere-when-possible/"/>
    <updated>2011-10-14T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/10/14/const-everywhere-when-possible/</id>
    <content type="html"><![CDATA[<p>Интересно, что далеко не все мне знакомые программисты исповедуют радикальный подход по использованию <code>const</code>: использовать <code>const</code> абсолютно везде, где это не приводит к ошибкам компиляции.</p>

<p>Я не имею ввиду очевидные применения <code>const</code> для аргументов функций и константных методов.</p>

<p>Я имею ввиду, что любая переменная, которая не меняется с момента ее создания, должна быть <code>const</code>. Само название &ldquo;переменная&rdquo; значит, что объект должен меняться. Если он не меняется, то это уже не переменная. Сделать переменную непемеренной в C/C++ можно с помощью ключевого слова <code>const</code>.</p>

<p>Пара примеров, где люди часто не ставят <code>const</code>:</p>

<pre class="hl">
<span class="hl kwb">const int</span> sz <span class="hl opt">=</span> <span class="hl kwd">very_long_name_to_calculate_size</span><span class="hl opt">(...);</span>
<span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> sz<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
<span class="hl opt">...</span>
<span class="hl kwb">const</span> VeryLongClassName <span class="hl kwd">var</span><span class="hl opt">(</span>a<span class="hl opt">,</span> lot<span class="hl opt">,</span> of<span class="hl opt">,</span> different<span class="hl opt">,</span> parameters<span class="hl opt">);</span>
<span class="hl kwb">int</span> a <span class="hl opt">=</span> var<span class="hl opt">.</span><span class="hl kwd">getX</span><span class="hl opt">();</span>
<span class="hl slc">// Only &quot;const&quot; functions of &quot;VeryLongClassName&quot; are called further down.</span>
</pre>

<p>Кстати, явное указание на неизменность переменной помогает компилятору в оптимизации.</p>

<p>Посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2009/09/30/const-t-or-t-const/">const T* или T const*</a></li>
<li><a href="http://demin.ws/blog/russian/2010/11/17/non-const-references/">Неконстантные ссылки</a></li>
<li><a href="http://demin.ws/blog/russian/2010/10/29/reference-to-temporary-object-in-constructor-initialize-list/">Ссылка на временный объект в списке инициализации конструктора</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Обзор Chromebook Samsung 5 3G]]></title>
    <link href="http://demin.ws/blog/russian/2011/10/02/chromebook-samsumg-5-3g-review/"/>
    <updated>2011-10-02T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/10/02/chromebook-samsumg-5-3g-review/</id>
    <content type="html"><![CDATA[<p>Прочитал я, что <a href="http://www.telegraph.co.uk/technology/google/8800002/Worlds-first-Google-store-opens-in-London.html">Google открыл в Лондоне офлайновый магазин</a> по продаже Хромбуков.</p>

<p>Поехал посмотреть и магазин и Хромбук.</p>

<p>&ldquo;Магазин&rdquo; - это стойка из двух столов в десятком демо ноубутов в зале огромного <a href="http://www.pcworld.co.uk/gbuk/s/find-a-store.html?iStoreId=696">PC World</a>&lsquo;а. Рядом отдел Apple, Sony и т.д. То есть это не целый отдельный магазин, как у Apple, например.</p>

<p>Хромбук, который там демонстрируется и продается - <a href="http://www.currys.co.uk/gbuk/samsung-series-5-3g-chromebook-white-10822582-pdt.html">Samsung Series 5 3G</a>.</p>

<p>Ниже будут не очень хорошего качества фотографии моего часового знакомства с данным устройством.</p>

<p>В закрытом виде.</p>

<p><img src="http://demin.ws/images/blog/chromebook-samsumg-5-3g-review/chromebook-closed-lid.jpg" /></p>

<p>Слева - питание, странного вида видео-разъем, USB и аудио.</p>

<p><img src="http://demin.ws/images/blog/chromebook-samsumg-5-3g-review/chromebook-left-side.jpg" /></p>

<p>Справа - еще один USB.</p>

<p><img src="http://demin.ws/images/blog/chromebook-samsumg-5-3g-review/chromebook-right-side.jpg" /></p>

<p>Спереди - SD.</p>

<p><img src="http://demin.ws/images/blog/chromebook-samsumg-5-3g-review/chromebook-sd-port.jpg" /></p>

<p>Разъем питания в целом хлюпковат.</p>

<p><img src="http://demin.ws/images/blog/chromebook-samsumg-5-3g-review/chromebook-power-connector.jpg" /></p>

<p>Посмотрим клавиатуру.</p>

<p>Над шифтом есть интересная кнопка Search, которая просто открывает в браузере новую пустую закладку и устанавливает курсор в строку поиска. По сути это CTRL-T. Мне эта кнопка очень понравилась.</p>

<p><img src="http://demin.ws/images/blog/chromebook-samsumg-5-3g-review/chromebook-search-button.jpg" /></p>

<p>В верхнем ряду кнопки для интернета. Та, что между полноэкранным режимом и яркостью - переключение между окнами Хрома, если их открыто несколько.</p>

<p><img src="http://demin.ws/images/blog/chromebook-samsumg-5-3g-review/chromebook-inet-buttons.jpg" /></p>

<p>Кнопок Ins, Del, Page Up и Page Down нет.</p>

<p><img src="http://demin.ws/images/blog/chromebook-samsumg-5-3g-review/chromebook-no-ins-del-pgup-pgwn.jpg" /></p>

<p>После включения через 8 секунд появляется приглашение логина и пароля от вашего гугловского аккаунта (я воспользовался демо-логином), и затем появляется главный экран.</p>

<p><img src="http://demin.ws/images/blog/chromebook-samsumg-5-3g-review/chromebook-main-screen.jpg" /></p>

<p>Все, что есть в Хромбуке - это браузер Хром. Войти/выйти из него нельзя. Можно только открывать новые табы и окна.</p>

<p>Сам Хром отличается от обычной десктопной версии разными дополнительными меню. Например, сетевые найстройки.</p>

<p><img src="http://demin.ws/images/blog/chromebook-samsumg-5-3g-review/chromebook-network-settings.jpg" /></p>

<p>WiFi</p>

<p><img src="http://demin.ws/images/blog/chromebook-samsumg-5-3g-review/chromebook-wifi-selector.jpg" /></p>

<p>Русский язык можно также добавить в настройках.</p>

<p><img src="http://demin.ws/images/blog/chromebook-samsumg-5-3g-review/chromebook-russian.jpg" /></p>

<p>Печатать можно либо подключив USB-принтер (есть спискок поддерживаемых моделей), либо &ldquo;правильным&rdquo; гугловым методом через Cloud Print.</p>

<p><img src="http://demin.ws/images/blog/chromebook-samsumg-5-3g-review/chromebook-cloud-print.jpg" /></p>

<p>В Хромбуке можно хранить локальные файлы. Их можно приаттачивать к письмам, например.</p>

<p><img src="http://demin.ws/images/blog/chromebook-samsumg-5-3g-review/chromebook-local-file-open.jpg" /></p>

<p>В самом локальном хранилище реально можно что-то делать только с файлами определенного типа, например, фотографиями или видео. Их можно закачивать на WebPicasa.</p>

<p><img src="http://demin.ws/images/blog/chromebook-samsumg-5-3g-review/chromebook-local-file-storage.jpg" /></p>

<p>В локальное хранилище попадают все скачиваемые файлы и скриншоты.</p>

<p>Скайпа тут быть не может, поэтому я проверил GTalk (в окне моя бритая голова).</p>

<p><img src="http://demin.ws/images/blog/chromebook-samsumg-5-3g-review/chromebook-gtalk.jpg" /></p>

<p>Настройки GTalk.</p>

<p><img src="http://demin.ws/images/blog/chromebook-samsumg-5-3g-review/chromebook-gtalk-setup.jpg" /></p>

<p>После небольшего ерзанья GTalk все же упал.</p>

<p><img src="http://demin.ws/images/blog/chromebook-samsumg-5-3g-review/chromebook-gtalk-crash.jpg" /></p>

<p>Конечно я зашел на <a href="http://easy-coding.blogspot.com">правильный сайт</a>.</p>

<p><img src="http://demin.ws/images/blog/chromebook-samsumg-5-3g-review/chromebook-easycoding.jpg" /></p>

<p>И еще на <a href="http://radio86.googlecode.com/hg/online/radio86.html">один</a>.</p>

<p><img src="http://demin.ws/images/blog/chromebook-samsumg-5-3g-review/chromebook-volcano.jpg" /></p>

<p>И <a href="http://bellard.org/jslinux/">еще на один</a> для оценки производительности.</p>

<p><img src="http://demin.ws/images/blog/chromebook-samsumg-5-3g-review/chromebook-jslinux.jpg" /></p>

<p>Линукс загрузился за 33 секунды. На моем Mac Air Core Due оно грузится за 8 секунд. А вот богомипсы почему-то такие же - ~20.</p>

<p>Теперь мой субъективный вывод.</p>

<p>Стоит эта музыка 400 фунтов (~630 долларов), что, как мне кажется, является запредельно нереальной ценой. Сам ноут крайне прост и не является супер легким и тонким ультрабуком, за который можно было бы драть такую цену.</p>

<p>Рядом лежали десятки нетбуков прочих фирм за похожие и меньшие деньги, на которых можно делать все тоже самое, плюс все остальное.</p>

<p>Даже в магазине, где был четкий вайфай, работать с полным онлайном все же напряжно, так как сетевые тормоза там сям начинают очень быстро нервировать. Стандартный офлайновый Gmail там есть, но работать в нем реально нельзя.</p>

<p>Если цена была бы 50 фунтов - лично я купил бы его прямо там, так как использую продукты Google и рад поиграться с подобной &ldquo;консолью от Гугл&rdquo;, но за 400 фунтов - как-нибудь обойдусь.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Типы в C++ с явным указанием размера]]></title>
    <link href="http://demin.ws/blog/russian/2011/09/06/explictly-sized-types-in-cpp/"/>
    <updated>2011-09-06T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/09/06/explictly-sized-types-in-cpp/</id>
    <content type="html"><![CDATA[<p>Наш продукт выпускается на нескольких типах UNIX и на Windows. К счастью, все релизы с этого года только 64-бит, включая Windows (Server 2008 и Studio 2010).</p>

<p>Увы, но наследие 32-х бит сильно мешает и засоряет код. И одна их ключевых проблем - базовые типы.</p>

<p>Сейчас мы пришли к выводу, что зоопарк типов надо прекращать.</p>

<p>Итак, правило.</p>

<p>Слова <code>char</code>, <code>short</code>, <code>long</code>, <code>long long</code>, <code>__int64</code> по умолчанию запрещены. Их использование придется объяснить на code review. Если нужна переменная, которая логически не является смещением в памяти, и ее предельные значения с запасом укладываются в интервал от -2^31 до 2^31-1, по это просто <code>int</code>. Если это индекс или смещение в памяти - это <code>size_t</code>.</p>

<p>Если же нужен беззнаковый тип, или конкретный размер, то надо использовать типа из <code>stdint.h</code> (<code>int8_t</code>, <code>uint8_t</code>, <code>uint16_t</code>, <code>int16_t</code>, <code>uint32_t</code>, <code>int64_t</code>, <code>uint64_t</code>), которые аккуратно реализованы для каждой платформы в одном единственном месте.</p>

<p>Шаг радикальный, посмотрим как пойдет.</p>

<p>Кстати, как вы справляетесь вот с этим?</p>

<pre class="hl">
<span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> s<span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">(); ++</span>i<span class="hl opt">)</span>
</pre>

<p>Убрать предупреждение о приведении <code>size_t</code> к <code>int</code> можно, изменив на:</p>

<pre class="hl">
<span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">size_t</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> s<span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">(); ++</span>i<span class="hl opt">)</span>
</pre>

<p>Но как быть с:</p>

<pre class="hl">
<span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> s<span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">();</span> i <span class="hl opt">&gt;=</span> <span class="hl num">0</span><span class="hl opt">; --</span>i<span class="hl opt">)</span>
</pre>

<p>Тут уже на size_t не изменить и надо внучную писать <code>int i = static_cast&lt;int&gt;(s.length())</code>, что, конечно, плохо.</p>

<p>Похожая петрушка с <code>strlen()</code>, также возвращающей <code>size_t</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Сравнение программ из коробки в Windows и Mac OS X]]></title>
    <link href="http://demin.ws/blog/russian/2011/09/04/comparing-builtin-application-in-windows-and-macosx/"/>
    <updated>2011-09-04T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/09/04/comparing-builtin-application-in-windows-and-macosx/</id>
    <content type="html"><![CDATA[<p>Что обычно происходит после установки Windows? Обычно начинается установка &ldquo;нужных&rdquo; программ, так как &ldquo;родными&rdquo; программами пользоваться нереально. На Маке же почти всеми программами &ldquo;из коробки&rdquo; можно и нужно пользоваться.</p>

<p>Рассмотрим некоторые.</p>

<h2>Телнет</h2>

<p>Windows: telnet.exe</p>

<p>Этой программой можно пользоваться только случайно, по несколько минут, когда ничего другого нет под рукой, а надо быстренько зайти. Если надо именно ssh, а не telnet - ставим SecureCRT или на худой конец putty. Проблема не в telnet.exe как таковой, а в реализации консоли.</p>

<p>Mac: благодаря нормальной консоли (табы, полноэкранный режим, масштабирование) можно просто пользоваться штатным telnet и ssh.</p>

<h2>Просмотр картинок</h2>

<p>Windows: штатный просмотр картинок - голимая программа. Реально хочется сразу поставить XnView или ACDSee.</p>

<p>Mac: Preview в сочетании с Finder (см. ниже) - удобнейшая вещь, понимающая не только картинки, но и PDF, текстовики и т.д. Для картинок есть встроенный редактор для минимального редактирования. В Windows надо открывать Paint.</p>

<h2>Скриншоты</h2>

<p>Windows: Можно сделать снимок либо окна, либо всего экрана. Снимок ложится в буфер обмена, откуда его надо куда-то перенести. Хочется сразу поставить, например, <a href="http://www.faststone.org/FSCaptureDetail.htm">FastStone Capture</a>.</p>

<p>Mac: <a href="http://guides.macrumors.com/Taking_Screenshots_in_Mac_OS_X">встроенная система снятия снимков экрана</a> умеет все. Можно даже делать это из командной строки.</p>

<h2>Веб-браузер</h2>

<p>Windows: IE - без комментариев. Нужен FF/Chrome/Opera.</p>

<p>Mac: Safari является одним из топовых браузеров. Хотя Chrome на Maке все еще актуален из-за синхронизации с Google, Flash и расширений.</p>

<h2>Почта</h2>

<p>Windows: Windows Mail (бывший Outlook Express) вполне можно использовать от лени, но Thunderbird лучше поставить.</p>

<p>Mac: Apple Mac (особенно 5.0 в Lion) даст фору Thunderbird&rsquo;у и даже Microsoft Outlook&rsquo;у (хотя надо отдать должное - Microsoft Outlook 2011 for Mac чертовски хорош).</p>

<h2>Командная строка и скриптование</h2>

<p>Windows: cmd.exe - без комментариев. Это не скриптование, а ёрзанье. cscript может еще как-то спасти ситуацию.</p>

<p>Mac: ksh/bash/csh/python/php/ruby - на выбор из коробки.</p>

<h2>Автоматизация работы с окнами</h2>

<p>Windows: встроенных программ для этого нет. Может через <a href="http://technet.microsoft.com/en-us/library/bb490887.aspx">cscript</a> можно?!</p>

<p>Mac: AppleScript и <a href="http://ru.wikipedia.org/wiki/Automator">Automator</a> позволяют делать почти все. Уж как минимум кнопочки на окнах нажимать можно.</p>

<p>Backup</p>

<p>Windows: вообще есть люди, реально использующие встроенную в Windows систему архивирования?</p>

<p>Mac: <a href="http://ru.wikipedia.org/wiki/Time_Machine_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B0)">Time Machine</a> является удобнейшей системой инкрементального бэкапа. Можно в любой папке &ldquo;отмотать&rdquo; время назад и вернуть файлы к нужной дате. Сохранения могут делаться локально, без внешнего накопителя, если место есть на диске, а когда накопитель появится в доступности (по USB или сети), то сохранения автоматически уходят туда.</p>

<p>Например, когда ноут у меня дома, то по Wifi он всегда видит NAS, и делает сохранения туда, периодически. Если у меня много изменений, то я могу подключиться кабелем, чтобы слилось быстрее. А когда ноут не дома, все накапливается локально, и по приходу домой происходит сливание. Да, заметьте, все описанное происходит автоматически, в фоне.</p>

<p>Словарь</p>

<p>Windows: нет</p>

<p>Mac: Приложение Dictionary интегрировано в систему и вызыватся кликом на слове или фразе почти отовсюду. Для русского языка есть словари от Лингво, правда неофициальные.</p>

<p>Запуск программ и документов из командной строки</p>

<p>Windows: В XP я использовал TypeAndRun. В Vista и 7 уже неактуально, так как в Start &gt; Run можно набирать имя программы, и будут выводиться варианты программ и документов, доступных в системных путях. Жить можно.</p>

<p>Mac: Увы, но Spotlight (вызываемый по Сmd+Space) - это глобальный индекс по всему, что есть на файловой системе, обновление которого происходит каждый раз при ее изменении. Какие-либо логические &ldquo;пути&rdquo; тут не при чем.</p>

<p>Работа с файлами</p>

<p>Windows: Explore (Проводник). В целом с этой программой можно жить. Но лично <a href="http://demin.ws/blog/russian/2009/02/11/two-panel-file-managers/">моя программистская натура требует двух панелей</a> в том или ином виде. Обычно это кончается FAR&rsquo;ом или Total Commander&rsquo;ом.</p>

<p>Mac: У меня есть двухпанельный менеджер файлов на Маке, <a href="http://www.mucommander.com/">muCommander</a>. До Фара или TC, конечно, как до луны, но жить можно. Но! Поработав в <a href="http://en.wikipedia.org/wiki/Finder_(software)">Finder</a> (&ldquo;Проводник&rdquo; на Маке) некоторое время, я начал замечать, что запускаю muCommander все реже и реже. Не могу точно описать почему, просто не нужно. Возможно просто из-за общей продуманности интерфейса и возможностей Finder&rsquo;а.</p>

<p>Пока все, что волнует лично меня.</p>

<p>Как-то не понятно - почему Windows комплектуется столь недоразвитыми штатными средствами? Увы, часто понять это можно только поработав там, где программы &ldquo;из коробки&rdquo; нормальные.</p>

<p>P.S. Не хочу развязывать религиозные споры, но замечания с реальными проблемами и методами их решения, конечно, приветствуются.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Приведение к неполному типу в C и С++]]></title>
    <link href="http://demin.ws/blog/russian/2011/08/17/cast-to-incomplete-type-in-c-and-cpp/"/>
    <updated>2011-08-17T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/08/17/cast-to-incomplete-type-in-c-and-cpp/</id>
    <content type="html"><![CDATA[<p>В режиме С и С++ компилируется без ошибок:</p>

<pre class="hl">
<span class="hl kwb">void</span><span class="hl opt">*</span> p <span class="hl opt">= (</span><span class="hl kwb">struct</span> this_does_not_exist <span class="hl opt">*) -</span><span class="hl num">1</span><span class="hl opt">;</span>
</pre>

<p>Убираем <code>struct</code> для С++ и получаем:</p>

<pre><code>cast.cpp
cast.cpp(1) : error C2065: this_does_not_exist: необъявленный идентификатор
cast.cpp(1) : error C2059: синтаксическая ошибка: )
</code></pre>

<p>Теперь добавляем forward declaration:</p>

<pre class="hl">
<span class="hl kwc">class</span> this_does_not_exist<span class="hl opt">;</span>
<span class="hl kwb">void</span><span class="hl opt">*</span> p <span class="hl opt">= (</span>this_does_not_exist <span class="hl opt">*) -</span><span class="hl num">1</span><span class="hl opt">;</span>
</pre>

<p>Тут все честно и компилируется без ошибок.</p>

<p>Скорое всего тут везде все по стандарту, но первый пример все-таки какой-то странный.</p>

<p>GCC хотя бы предупреждение выдает.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Языковые kernel и user space]]></title>
    <link href="http://demin.ws/blog/russian/2011/08/09/kernel-and-user-space-in-language/"/>
    <updated>2011-08-09T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/08/09/kernel-and-user-space-in-language/</id>
    <content type="html"><![CDATA[<p>Пришла мне тут в голову забавная аналогия – если человек постоянно живет или работает в стране или среде с неродным языком вокруг, то можно считать, что родной язык – это  kernel space, неродной – user space.</p>

<p>Сложные, связанные с использованием почти всех ресурсов вычисления происходят в kernel space – читай: когда нужно максимально точное понимание действительности, или надо изложить запутанную мысль в каскаде таких же запутанных мыслей, то это однозначно происходит на родном языке, и только в самом конце результат уходит на вывод (читай: перевод на язык среды) в user space.</p>

<p>Простые, бытовые вещи могут обрабатываться без перевода (на неродном языке) и по мере увеличения знаний и опыта в нем, сложность возможной обработки в user space может увеличиваться, тем самым разгружая процессор.</p>

<p>Есть также люди, имеющие несколько родных языков. У таких людей просто многоядерный или многопотоковый процессор и более сложное ядро, умеющее распределять задачи между двумя или более языковыми потоками (читай: языками).</p>

<p>Можно пойти немного дальше.</p>

<p>Если человек живет и работает в родной языковой среде – он работает в командном процессоре, когда входная и выходная обработка данных весьма простая. В неродной среде – это работа в сложном UI, когда данные проходят длинный путь окон, локализации и разнообразных преобразований, чтобы поспасть на обработку в kernel space и в конце быть доставленными обратно на экран (читай: во внеший мир).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Работа с правами администратора]]></title>
    <link href="http://demin.ws/blog/russian/2011/07/29/working-with-administrator-or-root-priviledges/"/>
    <updated>2011-07-29T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/07/29/working-with-administrator-or-root-priviledges/</id>
    <content type="html"><![CDATA[<p>У новичков юникса при переходе из мира доса обычно бывает желание работать всегда под рутом. Вроде так проще. Затем, после пары-тройки неосторожных <code>rm</code>, установок и сносов софта или игр с ядром, когда проще всю систему просто переставить, постепенно приходит понимание, что консоль рута чревата последствиями при неаккуратной работе.</p>

<p>А при работе с боевыми серверами, когда можно одной неверной командой остановить работу многих людей, может лучше поработать в паре, чтобы случайно не грохнуть чего.</p>

<p>Как говорил один мой знакомый администратор, матерый ораклоид и юниксист: &ldquo;Я никогда лишний раз в root&rsquo;ом не зайду, а то вдруг чего надует (ветром)&rdquo;.</p>

<p>Тут как в армии - переходишь в режим рута - встаешь смирно, одной рукой отдаешь честь (сам себе), а второй аккуратно делаешь работу. И как только все сделано, закрываешь рутовую консоль.</p>

<p>А если серьезно, то бывает и так: работаешь в терминале, правишь настройки машины, собираешься уже было сказать reboot, когда понимаешь, что это консоль боевого сервера, а не девелоперской машины.</p>

<p>Лично я все консольные сессии к важным серверам делаю с максимально неудобной цветовой гаммой, например, зеленое на красном фоне, чтобы вот так не ошибаться.</p>

<p>Если разобраться, в юниксе, если ты не рут, то обычно крайне сложно сделать что-то, ломающее систему, хотя работать это не мешает. И это классное чувство. Пока ты явно не сказал <code>su</code> или <code>sudo</code>, ты на 99% спокоен, так как изменить что-то за пределами домашнего каталога система не даст.</p>

<p>Увы, в Windows нереально работать, не будучи формально администратором, хотя в Windows 7 ситуация улучшилась. Когда я пересел с Windows XP на семерку, я стал регулярно отвечать на вопрос о том, что какая-то программа хочет сделать что-то с правами администратора (хотя мой пользователь есть администратор в понятии Windows), и лично мне это нравится. Есть какое-то минимальное ощущения контроля на тем, что кто-то больше не &ldquo;размазывает&rdquo; DLL&rsquo;ки по системе без моего ведома, от которых ей скоро поплохеет.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Организация файлов на компьютере]]></title>
    <link href="http://demin.ws/blog/russian/2011/07/24/how-to-organize-files-on-personal-computer/"/>
    <updated>2011-07-24T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/07/24/how-to-organize-files-on-personal-computer/</id>
    <content type="html"><![CDATA[<p>Думаю, что у всех, кто работает с компьютером, есть какая-то стратегия организации файлов, а у программистов уж точно.</p>

<p>Я опишу, как сам организую файлы, в форме почти разрозненных идей-заметок. Может что-то будет полезно кому-то, и может кто-то поделится своими приемами.</p>

<p>На Мак я пересел недавно, и рабочий ноутбук у меня все равно на Windows 7, то большинство приемов ориентированы на Windows.</p>

<p>Основная цель мой структуры - минимизировать и максимально упростить бэкап и потенциальную миграцию на другой компьютер. При правильном подходе эти задачи можно решать как одну.</p>

<p>Все рекомендации ниже движимы именно этой целью.</p>

<p>Один из подходов для решения обоих задач - сделать так, чтобы все мои файлы были доступны в иерархии одного единственного каталога. &ldquo;Мои&rdquo; означает, что в случае переезда на другой компьютер, данные файлы должны быть перенесены (не забыты). У меня есть каталог <code>c:\moe</code> (этимология английского &ldquo;слова&rdquo; <code>moe</code> утеряна). Двигаясь по этому каталогу вниз, можно найти все &ldquo;мои&rdquo; файлы, все-все. Также важно, что в каталоге <code>c:\moe</code> нет мусора, которым обычно загажен <code>My Documents</code> (всякие проекты-примеры, создаваемые Студией без спроса, мириады прочих папок <code>My...</code> от разных программ и т.д.). То есть это чистая полезная информация без неконтролируемого мусора.</p>

<p>К чему такие сложности? Не секрет, что в Windows расположение некоторых файлов &ldquo;по умолчанию&rdquo; весьма необычно, и далеко не все программы позволяют менять их расположение. Попробуйте найти базу данных Outlook Express или Microsoft Outlook, профайлы Thunderbird&rsquo;а, Chrome&rsquo;а или iTunes, настройки сессий SecureCRT и т.д. Все они обычно скрываются где-то в недрах <code>c:\Users\your_user_name</code>. Можно тупо бэкапить этот каталог, но, опять, там уж очень много неконтролируемого г*вна.</p>

<p>Итак, к помощью <a href="http://demin.ws/blog/russian/2011/05/09/links-to-files-and-folder-in-windows/">символьных ссылок</a> я привел все нужные каталоги к простым путям. Например:</p>

<pre><code>c:\moe\db\
          outlook\..
          thunderbird\..

       profiles\
                chrome\..
                securecrt\..
                itunes\..
                skype\..
</code></pre>

<p>Идем далее. Последнее время я стал люто ненавидеть программы, которые сохраняют конфигурацию и настройки в реестре. Я еще могу понять, что Microsoft Office пользуется реестром из-за &ldquo;глубокой интеграции&rdquo; в систему. Но вот почему Far или putty до сих пор не могут просто пользоваться текстовым файлом для настроек и сохранять его в <code>c:\Users\...</code> - непонятно. Для таких программ у меня написан скрипт, который командой reg копирует настройки нужных веток реестра в текстовые файлы. Что такого полезного есть в настройках Far? Например, ftp/sftp сессии. У меня их около сотни, и потерять их я не хочу.</p>

<p>Отдельной строкой хочу отметить программы, которыми можно использоваться в portable режиме. У меня есть отдельный каталог для них, например:</p>

<pre><code>c:\moe\live\
            7z-9.20\..
            hiew-8.00\..
            winrar-3.70\..
            xnview-1.98.2\..
            putty-0.60\..
            notepad++-5.9.2\..
            ...
</code></pre>

<p>Обычно в этом каталоге я держу небольшие программы, которые можно просто копировать без установки, и без которых некомфортно. А так - просто перенес это каталог на другую машину, и минимальный набор утилит уже есть.</p>

<p>Далее, каталог <code>c:\moe\cmd</code>. Тут лежат разные самодельные скрипты и однофайловые микро утилиты типа <a href="http://technet.microsoft.com/en-us/sysinternals/bb896768">junction.exe</a>. Этот каталог находится под контролем git, так как скрипты часто меняются, и хочется видеть историю изменений.</p>

<p>Каталог <code>c:\moe\projects</code>.</p>

<p>Тут лежит все, связанное с программированием. Иерархия этого каталога обычно одноуровневая: проект -&gt; каталог. Одно условие (подтвержденное годами) - не использовать пробелы в именах каталогов. Сильно упрощает скриптование.</p>

<p>Например, <code>c:\moe\projects\easy-coding\</code>.</p>

<p>Также полезно сделать линк каталога <code>c:\Program Files\</code> в <code>c:\prg</code>. Проще работать в скриптах с программами, установленными в этом каталоге.</p>

<p>Еще один каталог - <code>c:\moe\documents</code>.</p>

<p>Тут лежат то, что называется документами, без привязки к какому-то проекту: doc(x), xls(x), pdf, jpg и т.д. Тут уже допустимы имена с пробелами и русским буквами. Внутренняя иерархия - по смыслу. С документами на работе я часто создают подкаталоги в номером года. В них удобно убирать старье. Например:</p>

<pre><code>c:\moe\documents\Team meetings\
                               2010\... &lt;- Прошлый год
                               ...      &lt;- Нынешняя текучка
</code></pre>

<p>Некоторое время назад я начал активно пользоваться атрибутом read-only. Если я вижу, что не меняю файл некоторое время, например, пару месяцев, то я делаю его read-only. Это относится и к проектам и к документам. Атрибут read-only позволяет исключить случайную перезапись старого файла, открытого для получения &ldquo;примера&rdquo; из прошлого. Ну а уж если захочется его таки изменить, то надо будет снимать флаг read-only или делать копию через &ldquo;Save as&hellip;&rdquo;. Основная идея - старый файл не надо перезаписывать, так как история его создания может быть подзабыта, и можно случайно похерить важный файл. Все его производные должны быть сделаны через клонирование.</p>

<p>Кстати, в Mac OS Lion компания Apple <a href="http://arstechnica.com/apple/reviews/2011/07/mac-os-x-10-7.ars/7#document-model">сделала функцию &ldquo;залочки&rdquo; файлов</a>, которые не менялись некоторое время.</p>

<p><em>Documents will also automatically be locked if they&rsquo;re not modified for a little while. The auto-lock time is configurable in the &ldquo;Options…&rdquo; screen of the Time Machine preference pane (of all places), with values from one day to one year. The default is two weeks.</em></p>

<p>Есть еще несколько каталогов:</p>

<ul>
<li><code>c:\moe\books</code> - книги</li>
<li><code>c:\moe\itunes</code> - база данных iTunes</li>
<li><code>c:\moe\soft</code> - архив программ (обычно дистрибутивы)</li>
<li><code>c:\moe\vm</code> - виртуальные машины</li>
</ul>

<p>Теперь финальный шаг - осуществление бэкапа. Мой бэкап не совсем &ldquo;правильный&rdquo;, так как он не содержит историю изменений, но зато он является моментальным снимком всех &ldquo;моих&rdquo; файлов. В случае проблемы или переезда на другой компьютер, я могу использовать бэкап как точную копию файловой системы и восстановить ее простым копированием. Кстати, это один из аргументов за аккуратное отделение &ldquo;моих&rdquo; файлов от прочего мусора.</p>

<p>Для физического осуществление бэкапа я использую <a href="http://www.nncron.ru/">nnbackup</a>. Это весьма продвинутая программа, но я использую в ней только одну функцию односторонней синхронизации - при очередном сохранении каждый файл в каталоге <code>c:\moe</code>, который изменился, будет обновлен. Но выходе, еще раз, точная копия этого каталога на страховочном носителе.</p>

<p>Под занавес, для редактирования переменных окружения в Windows я использую <a href="http://www.rapidee.com/">RapidEE</a>. Сложно представить удобнее программу.</p>

<p>P.S. Дополнительный довесок (чтобы два раза не вставать), который вроде бы как по теме, но не совсем. В <a href="http://arstechnica.com/apple/reviews/2011/07/mac-os-x-10-7.ars/7#document-model">той же статье про Lion</a> описывается, что Apple ввели понятие версионности документов на уровне API. Я видел похожее в одной из систем разработки в Блумберге - в IDE не надо было принудительно сохранять файлы проекта. В любой момент времени среда обеспечивает сохранность файлов, и в случае зависания или прочих проблем при перезапуске открытые файлы автоматически восстанавливались из autosave&rsquo;а. А вот если разработчик принудительно сохраняет файл (например, нажимает Ctrl-S), то файл не просто сохраняется, а делается commit в SVN с новой ревизией, и также приходится вводить описание этого изменения.</p>

<p>Сначала меня такой подход бесил, так как многолетняя привычка в досовских &ldquo;массировать&rdquo; F2 или Ctrl-S каждые три секунды, приводила к окну ввода описания изменений. Но со временем, я реально подсел на это. Теперь Сохранение приобрело смысл, а не было лишь средством спасения от зависания в процесса запуска.</p>

<p>Я был приятно удивен, то в Lion схожий подход введен на уровне операционной системы. Тут, конечно, у Apple основная цель немного иная - они хотят тем самым полностью избавиться от вопросов о сохранении несохраненных документов при выходе из приложения, чтобы их (приложения), можно было незаметно для пользователя убивать и перезапускать заново, как в iOS. Забавно, что в Lion по умолчанию в Dock&rsquo;е убрали индикатор запущенности приложения. Основной посыл такой - пользователя этот вопрос более не должен волновать. Операционная система запустит приложение, если требуется, и сама убьет его, если есть потребность в его ресурсах. Документы же, всегда будут в сохранности.</p>

<p>Кто еще поделится идеями и приемами организации файлов?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Процесс создания программного обеспечения в одной картинке]]></title>
    <link href="http://demin.ws/blog/russian/2011/07/17/software-development-in-one-picture/"/>
    <updated>2011-07-17T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/07/17/software-development-in-one-picture/</id>
    <content type="html"><![CDATA[<p>Уже не помню, где я взял эту картинку, но храню ее уже давно. Это великолепная иллюстрация процесса создания программного обеспечения.</p>

<p><img src="http://demin.ws/images/blog/software-development-in-one-picture.jpg" /></p>

<p>Как там у Шекспира: &ldquo;переписывать или не переписывать - вот в чем вопрос&rdquo;. Можно приляпывать временные костыли там и сям, не давая зданию упасть, но придет время, когда законы физики возьмут свое, и здание таки нае*нется.</p>

<p>А можно на время вывести здание из эксплуатации и перестроить заново, например из кирпича.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[strcpy() для перекрывающихся строк]]></title>
    <link href="http://demin.ws/blog/russian/2011/07/14/strcpy-for-intersecting-strings/"/>
    <updated>2011-07-14T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/07/14/strcpy-for-intersecting-strings/</id>
    <content type="html"><![CDATA[<p>Рассмотрим программу:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;string.h&gt;</span>
<span class="hl ppc">#include &lt;stdio.h&gt;</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[]) {</span>
  <span class="hl kwb">char</span> b<span class="hl opt">[</span><span class="hl num">32</span><span class="hl opt">];</span>
  <span class="hl kwd">strcpy</span><span class="hl opt">(</span>b<span class="hl opt">,</span> <span class="hl str">&quot;123456789012345&quot;</span><span class="hl opt">);</span>
  <span class="hl kwd">strcpy</span><span class="hl opt">(</span>b <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">,</span> b<span class="hl opt">);</span>
  <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;[%s]</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> b<span class="hl opt">);</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Тут ясно видна проблема - строки, передаваемые в <code>strcpy()</code>, перекрываются.</p>

<p>По-хорошему, тут имеется неопределенное поведение, так как <code>strcpy()</code> не гарантирует порядок перемещения байт, а именно от него зависит в данном случае результат.</p>

<p>Проверим на разных компиляторах и платформах.</p>

<p><strong>Visual Studio 2010 64-bit</strong></p>

<pre><code>[1123446788012245]
</code></pre>

<p>Строка искажается каждые четыре байта, явно копировали по 32 бита.</p>

<p><strong>Linux 64-bit</strong></p>

<pre><code>[1123456788012345]
</code></pre>

<p>Уже иной результат. Компилятор и libc:</p>

<pre><code>ldd --version
ldd (GNU libc) 2.5

gcc --version
gcc (GCC) 4.1.2 20080704 (Red Hat 4.1.2-50)
</code></pre>

<p>В <code>man strcpy</code> говорят:</p>

<pre><code>*The strings may not overlap...*
</code></pre>

<p>Странно, почему не &ldquo;must not&rdquo;.</p>

<p><strong>Solaris (SPARC)</strong></p>

<pre><code>[1123446788012245]
</code></pre>

<p>Компилятор и libc:</p>

<pre><code>cc -V
cc: Sun C 5.8 2005/10/13

version /usr/lib/libC*
version of &quot;/usr/lib/libC.so.3&quot;: SC2.0.1 12/20/94 Sun C++ 3.0.1 patch 100962-09
version of &quot;/usr/lib/libC.so.5&quot;: Sun SUNWlibC SunOS 5.10 Patch 119963-06 2006/04/21
version of &quot;/usr/lib/libCrun.so.1&quot;: Sun SUNWlibC SunOS 5.10 Patch 119963-06 2006/04/21
version of &quot;/usr/lib/libCstd.so.1&quot;: Sun SUNWlibC SunOS 5.10 Patch 119963-06 2006/04/21
</code></pre>

<p><strong>AIX</strong></p>

<pre><code>[1111111111012245]
</code></pre>

<p>Тут результат явно левый. Но зато в документации сказано ясно и понятно:</p>

<p><em>String movement is performed on a character-by-character basis and starts at the left. Overlapping moves toward the left work as expected, but overlapping moves to the right may give unexpected results.</em></p>

<p>Компилятор и libc:</p>

<pre><code>lslpp -L | grep Compiler
vacpp.cmp.core            8.0.0.20    C     F    IBM XL C/C++ Compiler

lslpp -L | grep libc
bos.rte.libc               5.3.9.1    C     F    libc Library
</code></pre>

<p><strong>HP-UX</strong></p>

<pre><code>[1123456789012345]
</code></pre>

<p>Компилятор:</p>

<pre><code>what `which cc`

HP C/aC++ for Integrity Servers B3910B A.06.22 [Nov 14 2008]
</code></pre>

<p>Вроде скопировано правильно, но в документации (<code>man strcpy</code>) говорят (формулировка интересна):</p>

<p><em>Character movement is performed differently in different implementations, so moves involving overlapping source and destination strings may yield surprises.</em></p>

<p><strong>Вывод</strong>: <code>strcpy()</code> - нехорошая функция, по многим причинам.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[10 вещей, которые я страстно ненавижу в работе]]></title>
    <link href="http://demin.ws/blog/russian/2011/06/30/top-ten-things-i-have-at-work/"/>
    <updated>2011-06-30T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/06/30/top-ten-things-i-have-at-work/</id>
    <content type="html"><![CDATA[<p>В порядке убывания приоритета:</p>

<ol>
<li>Аргумент в защиту неаккуратного кода &ldquo;Ну так работает же!!!&rdquo;</li>
<li>Пробел перед запятой</li>
<li>Использование мыши, если сделать клавиатурой можно в десять раз быстрее</li>
<li>Проекты, которые нельзя собрать, просто набрав &ldquo;make&rdquo;</li>
<li>Смесь табуляций и пробелов как разделителей в одном исходнике</li>
<li>Однопанельные файловые менеджеры</li>
<li>Советы типа &ldquo;кликнуть там-сям, перетащить мышкой сюда, потом снова кликнуть&hellip;&rdquo; если можно написать скрипт</li>
<li>Неумение пользоваться повтором в командной строке и перебивание каждый раз заново</li>
<li>Префикс &ldquo;my&rdquo; в именовании переменных, &ldquo;MyClass&rdquo; например, и автоматическое именование типа TButton1, TButton2, которое ручками не исправлено на нормальные имена (&ldquo;Ну так работает же!!!&rdquo;)</li>
<li>Двоичные исходные файлы в проекте</li>
</ol>

<p>Если у кого есть подобные списки, прикладывайте ссылки в комментариях.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Задача с интервью одного очень крупного инвестиционного банка]]></title>
    <link href="http://demin.ws/blog/russian/2011/06/17/interview-problem-from-one-very-famous-investment-bank/"/>
    <updated>2011-06-17T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/06/17/interview-problem-from-one-very-famous-investment-bank/</id>
    <content type="html"><![CDATA[<p>Имеется массив целых чисел, каждый в интервале от -10000 до 10000. Нужно найти непрерывный интервал в этом массиве, чтобы сумма элементов на этом интервале была положительной и максимально возможной среди других интервалов.</p>

<p>Как результат надо вывести начальный и конечный индексы этого интервала.</p>

<p>Подразумевается решение O(n).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Динамическая линковка C++ на AIX]]></title>
    <link href="http://demin.ws/blog/russian/2011/06/16/dynamic-linking-cpp-in-aix/"/>
    <updated>2011-06-16T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/06/16/dynamic-linking-cpp-in-aix/</id>
    <content type="html"><![CDATA[<p>AIX мне всегда нравился своим особо изощренным отношением к линковке.</p>

<p>Итак, рассмотрим пример (система AIX 5.3).</p>

<p>Файл <code>alib.cpp</code> компилируем как динамическую библиотеку.</p>

<pre class="hl">
<span class="hl kwb">struct</span> A <span class="hl opt">{</span>
  <span class="hl kwd">A</span><span class="hl opt">() {</span>
    value_ <span class="hl opt">=</span> <span class="hl num">123</span><span class="hl opt">;</span>
  <span class="hl opt">}</span>
  <span class="hl kwb">int</span> value_<span class="hl opt">;</span>
<span class="hl opt">};</span>

A a <span class="hl opt">=</span> <span class="hl kwd">A</span><span class="hl opt">();</span>

<span class="hl kwc">extern</span> <span class="hl str">&quot;C&quot;</span>
<span class="hl kwb">int</span> <span class="hl kwd">value</span><span class="hl opt">() {</span>
  <span class="hl kwa">return</span> a<span class="hl opt">.</span>value_<span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>В этой библиотеке создается статический объект класса <code>А</code>, и значение его поля возвращается функцией <code>value()</code>.</p>

<p>Компилируем:</p>

<pre><code>xlC -o alib.so -qrtti=all -qmkshrobj=-100 -G -brtl -bnolibpath alib.cpp
</code></pre>

<p><code>xlC</code> - это компилятор С++ на AIX.</p>

<p>Далее, файл <code>main.c</code>. Это головной модуль на <code>С</code>, который вызывает функцию <code>value()</code>.</p>

<pre class="hl">
<span class="hl kwc">extern</span> <span class="hl kwb">int</span> <span class="hl kwd">value</span><span class="hl opt">();</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
  <span class="hl kwa">return</span> <span class="hl kwd">value</span><span class="hl opt">();</span>
<span class="hl opt">}</span>
</pre>

<p>Этот модуль вызывает <code>value()</code>, и значение становится кодом возврата процесса.</p>

<p>Компилируем:</p>

<pre><code>xlc -c -o main.o main.c
</code></pre>

<p><code>xlc</code> (маленькая &ldquo;с&rdquo; на конце) - это компилятор С на AIX.</p>

<p>Линкуем, используя компилятор С, запускаем и печатаем код возврата (<code>$?</code>)</p>

<pre><code>xlc -o main main.o alib.so &amp;&amp; LIBPATH=.:$LIBPATH ./main ; echo $?
</code></pre>

<p>Результат на экране:</p>

<pre><code>0
</code></pre>

<p>Интересно?! Почему не ожидаемое 123?</p>

<p>Теперь линкуем, используя компилятор &ldquo;С++&rdquo;, запускаем и печатаем код возврата:</p>

<pre><code>xlC -o main main.o alib.so &amp;&amp; LIBPATH=.:$LIBPATH ./main ; echo $?
</code></pre>

<p>Результат на экране:</p>

<pre><code>123
</code></pre>

<p><strong>Мораль</strong>: на AIX, при динамической линковке библиотек, чтобы правильно работала статическая инициализация на С++, надо принудительно линковать конечный бинарь в режиме С++ (как бы это странно не звучало). Иначе конструкторы статических объектов вызваны не будут, и их инициализация будет произведена не ДО функции <code>main()</code>, а непонятно когда.</p>

<p>Можно принудительно заставить таки систему вызвать конструкторы статических объектов, написав что-то вроде:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;dlfcn.h&gt;</span>

<span class="hl kwb">static int</span> module_initialised <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl kwb">static void</span> <span class="hl kwd">ManualInitilizationForStatics</span><span class="hl opt">() {</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>module_initialised<span class="hl opt">)</span> <span class="hl kwa">return</span><span class="hl opt">;</span>
  <span class="hl kwd">dlopen</span><span class="hl opt">(</span><span class="hl str">&quot;blah.so&quot;</span><span class="hl opt">,</span> RTLD_NOW<span class="hl opt">);</span>
  module_initialised <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Но это не программирование, а ерзанье.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Интересное: EKOPath Compiler, ASCII Flow, Address Sanitizer]]></title>
    <link href="http://demin.ws/blog/russian/2011/06/16/news-ekopath-compiler-ascii-flow-address-sanitizer/"/>
    <updated>2011-06-16T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/06/16/news-ekopath-compiler-ascii-flow-address-sanitizer/</id>
    <content type="html"><![CDATA[<p><strong>EKOPath 4 Compiler Suite</strong></p>

<p><a href="http://www.pathscale.com/">EKOPath</a> вроде как <a href="http://www.pathscale.com/ekopath4-open-source-announcement">собирается выпустить в open-source</a> их супер-пупер оптимизирующий компилятор C++.</p>

<p>Как пишут в пресс-релизе:</p>

<p><em>The PathScale EKOPath Compiler Suite has the world&rsquo;s <strong>most advanced optimization infrastructure</strong> and can fully exploit the potentials of many-core architectures.</em></p>

<hr />

<p>Вам хочется рисовать диаграммы и блок-схемы по-настоящему, в vi&rsquo;e, роняя скупую слезу юниксоида, взгляните на это <a href="http://www.asciiflow.com/">ASCII Flow</a>.</p>

<p>Как говориться, почему рулит plain-text? А потому, что его можно поместить под контроль версий (1) и делать diff (2).</p>

<hr />

<p>Google <a href="http://blog.chromium.org/2011/06/testing-chromium-addresssanitizer-fast.html">выложил</a> в open-source <a href="http://code.google.com/p/address-sanitizer/wiki/AddressSanitizer">Address Sanitizer</a>.</p>

<p>Address Sanitizer - это аналог Valgrind, но не совсем. Например, эта штука умеет ловить buffer over-/underrun не только на куче, но и на стеке. Работает только на Linux Intel 32 и 64 бит.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Должен ли быть стандарт кодирования жестким?]]></title>
    <link href="http://demin.ws/blog/russian/2011/06/11/has-coding-standart-to-be-strict/"/>
    <updated>2011-06-11T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/06/11/has-coding-standart-to-be-strict/</id>
    <content type="html"><![CDATA[<p>Например, вот такой кусок кода:</p>

<pre class="hl">
<span class="hl kwb">void</span> <span class="hl kwd">f</span> <span class="hl opt">(</span>  <span class="hl kwb">int</span> a <span class="hl opt">,</span> <span class="hl kwb">char</span> <span class="hl opt">*</span>p  <span class="hl opt">)</span>
<span class="hl opt">{</span>
   <span class="hl kwb">int</span>   whattodo <span class="hl opt">;</span>

   whattodo <span class="hl opt">=</span> a <span class="hl opt">&lt;</span> <span class="hl num">1</span> ? <span class="hl num">2</span> <span class="hl opt">:</span> <span class="hl num">0</span><span class="hl opt">;</span>

   <span class="hl kwa">switch</span> <span class="hl opt">(</span> whattodo <span class="hl opt">)</span>
   <span class="hl opt">{</span>
   <span class="hl kwa">case</span> <span class="hl num">2</span><span class="hl opt">:</span>
             <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;THIS</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">);</span> <span class="hl kwa">break</span><span class="hl opt">;</span>
   <span class="hl kwa">case</span> <span class="hl num">1</span><span class="hl opt">:</span>
             <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;THAT</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
             <span class="hl kwa">break</span><span class="hl opt">;</span>
   <span class="hl opt">}</span>
   <span class="hl kwa">if</span> <span class="hl opt">(</span> a <span class="hl opt">!=  *</span> p  <span class="hl opt">) {</span>
             a <span class="hl opt">=</span> <span class="hl num">1111111</span> <span class="hl opt">;</span>

   <span class="hl opt">}</span> <span class="hl kwa">else</span>
             a <span class="hl opt">=</span> <span class="hl num">2222222</span><span class="hl opt">;</span>


<span class="hl opt">}</span>
</pre>

<p>Удивительно, но во многих компаниях, где я работал, подобный код спокойно подошел бы по принятому стандарту кодирования. И такой код вполне реален, так как он обычно создается за долгое время разными людьми. В целом код читаем и даже более менее понятен.</p>

<p>Но:</p>

<ul>
<li>абсолютная неаккуратность и непоследовательность использования пробелов и пустых строк</li>
<li>бессмысленное имя переменной <code>whattodo</code></li>
<li>непоследовательность в стиле расположения <code>{</code> и <code>break</code></li>
</ul>

<p>Вывод - это не код, а помойка.</p>

<p>Последнее время на любые аргументы по даже минимальным неаккуратностям в коде, а привожу сравнение с текстом для чтения.</p>

<p>Какой текст приятнее и понятнее читать?</p>

<p>Так:</p>

<pre><code>Компьютерная сеть Международного валютного фонда подверглась хакерской атаке. Официального объявления об этом пока не сделано, однако сотрудникам о вторжении сообщили еще в среду. Представитель МВФ отказался сообщить какую-либо информацию об инциденте, заверив журналистов, что организация работает в обычном режиме.
</code></pre>

<p>Или так:</p>

<pre><code>кОМИьютерная сеть       Международного    валютного
    фонда  подверглась хакерской атаке   . Официального
объявления          об этом пока не сделано , однако сотрудникам о
   вторжении сообщили ЕЩе в СрЕдУ.
ПредстАвитель   МВФ отказался сООбщить  какую-  либо информацию об
инциденте , заверив  журналистов        , что организация работает в
обычном         реЖиме  .

На многих это производит эффект.
</code></pre>

<p>Даже в крупных компаниях, когда вроде есть и время и люди, которые занимаются поддержкой качества кодовый базы, бывает трудно справляться с этой задачей. Когда появляются аргументы типа &ldquo;клиент хочет это сегодня&rdquo;, то мантра &ldquo;ну так работает же!!!&rdquo; перебивает все аргументы за тотальную аккуратность в коде. Увы.</p>

<p>Еще пару мыслей. Есть определенные приемы в форматировании кода, которые призваны облегчить copy-paste.</p>

<p>Например расположение запятых на следующей строке. Это позволяет менять порядок строк без необходимости думать о запятой в последней строке:</p>

<pre><code>A::A() :
  a(1)
  , b(1)
  , c(1)
{
...
}
</code></pre>

<p>Лично я не против copy-paste, когда ради его удобства уродуют текст - это уже слишком. Я резко против таких приемов.</p>

<p>Кстати, один из аргументов, почему люди любят ставить открывающую фигурную скобку на отдельной строке, как этом примере, потому что так удобнее таскать это по тексту строчными блоками и не думать даже о минимальной корректировке при вставке в другое месте.</p>

<p>Ошибки, вызванные такими легко и слепо перетаскиваемыми блоками, выльются в гораздо большие временные затраты, чем пару лишних секунд на ручную адаптацию перенесенного блока, когда за эти пару секунд ты так или иначе будешь вынужден пробежать глазами по тексту, и, возможно, выловить логические несовместимости.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Алгоритмы в прикладном программировании]]></title>
    <link href="http://demin.ws/blog/russian/2011/06/10/algorithms-in-applied-programming/"/>
    <updated>2011-06-10T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/06/10/algorithms-in-applied-programming/</id>
    <content type="html"><![CDATA[<p>Лично я могу по пальцам пересчитать случаи, когда я задумывался о применении каких-либо специализированных алгоритмов для софта, который я писал на работе.</p>

<p>Первое, что приходит в голову – задача выдачи денег в банкомате.</p>

<p>Клиент хочет сумму X, и в банкомате есть купюры нескольких номиналов. Если выбранная целевая функция – минимизировать количество выдаваемых купюр, то задача сводится к распространённой задаче <a href="http://en.wikipedia.org/wiki/Coin_problem">выдачи сдачи</a> и решается за O(N^2).</p>

<p>Но чаще выбирают иную целевую функцию – максимизировать интервалы между инкассациями. Для этого надо выдавать купюры так, чтобы их расход из каждой кассете был равномерный. Тут уже задачу надо решать в общем виде как оптимизационную задачу целочисленного программирования. Есть целевая функция, есть ограничения, и задача решается обычно какими-либо около переборными методами с различными эвристиками.</p>

<p>Но увы – данную задачу для банкомата при реальных ограничениях проще решать в лоб, перебором. Хотелось бы применить что-то интересное, но заканчиваем банальным брутфорсом.</p>

<p>Ещё мне приходилось реализовывать простейшие примитивы для рисования фигур на плоскости. Например, есть интересный <a href="http://ru.wikipedia.org/wiki/%D0%90%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC_%D0%91%D1%80%D0%B5%D0%B7%D0%B5%D0%BD%D1%85%D1%8D%D0%BC%D0%B0">алгоритм Брезенхэма</a>, которым можно рисовать линии без применения вещественной арифметики (и тем более без всяких синусов и косинусов).</p>

<p>И увы, мой список на этом заканчивается.</p>

<p>А какие прикольные алгоритмы приходилось в реальной работе использовать вам?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Кто быстрее: string::find, strstr или КМП?]]></title>
    <link href="http://demin.ws/blog/russian/2011/06/09/who-is-faster-string-find-strstr-or-kmp/"/>
    <updated>2011-06-09T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/06/09/who-is-faster-string-find-strstr-or-kmp/</id>
    <content type="html"><![CDATA[<p>Я как-то пребывал в убеждении, что библиотечные функции поиска строки в подстроке обычно реализуют какой-нибудь &ldquo;правильный&rdquo; алгоритм: <a href="http://ru.wikipedia.org/wiki/%D0%90%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC_%D0%9A%D0%BD%D1%83%D1%82%D0%B0_%E2%80%94_%D0%9C%D0%BE%D1%80%D1%80%D0%B8%D1%81%D0%B0_%E2%80%94_%D0%9F%D1%80%D0%B0%D1%82%D1%82%D0%B0">Кнута — Морриса — Пратта (КМП)</a>, например, или <a href="http://ru.wikipedia.org/wiki/%D0%90%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC_%D0%91%D0%BE%D0%B9%D0%B5%D1%80%D0%B0_%E2%80%94_%D0%9C%D1%83%D1%80%D0%B0">Бойера — Мура</a>. Это было бы логично.</p>

<p>Ниже очередная пузомерка сферического коня в попугаях.</p>

<p>В забеге учавствуют:</p>

<ul>
<li><code>std::string::find()</code></li>
<li><code>std::strstr()</code></li>
<li>рукодельный <code>naive_strstr()</code> со сложностью <code>O(N^2)</code></li>
<li>рукодельный КМП (<code>kmp_strstr()</code>) без особых изысков</li>
</ul>

<p>Данные для поиска сделаны в виде &ldquo;наихудщего случая&rdquo;, когда сравнивать надо все до победного, и совпадение будет только с самом конце. Это должно вызвать явное квадратичное время у <code>naive_strstr()</code>.</p>

<pre class="hl">
<span class="hl ppc">#include &lt;iostream&gt;</span>
<span class="hl ppc">#include &lt;vector&gt;</span>
<span class="hl ppc">#include &lt;cstdlib&gt;</span>
<span class="hl ppc">#include &lt;cstring&gt;</span>
<span class="hl ppc">#include &lt;cassert&gt;</span>
<span class="hl ppc">#include &lt;ctime&gt;</span>

<span class="hl kwb">int</span> <span class="hl kwd">naive_strstr</span><span class="hl opt">(</span><span class="hl kwb">const char</span><span class="hl opt">*</span> str<span class="hl opt">,</span> <span class="hl kwb">const char</span><span class="hl opt">*</span> needle<span class="hl opt">) {</span>
  <span class="hl kwb">int</span> str_sz <span class="hl opt">=</span> std<span class="hl opt">::</span><span class="hl kwd">strlen</span><span class="hl opt">(</span>str<span class="hl opt">);</span>
  <span class="hl kwb">int</span> needle_sz <span class="hl opt">=</span> std<span class="hl opt">::</span><span class="hl kwd">strlen</span><span class="hl opt">(</span>needle<span class="hl opt">);</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> str_sz <span class="hl opt">-</span> needle_sz <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
    <span class="hl kwb">int</span> j<span class="hl opt">;</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span>j <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> j <span class="hl opt">&lt;</span> needle_sz<span class="hl opt">; ++</span>j<span class="hl opt">)</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>str<span class="hl opt">[</span>i <span class="hl opt">+</span> j<span class="hl opt">] !=</span> needle<span class="hl opt">[</span>j<span class="hl opt">])</span>
        <span class="hl kwa">break</span><span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>j <span class="hl opt">==</span> needle_sz<span class="hl opt">)</span>
      <span class="hl kwa">return</span> i<span class="hl opt">;</span>
  <span class="hl opt">}</span>
  <span class="hl kwa">return</span> <span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">kmp_strstr</span><span class="hl opt">(</span><span class="hl kwb">const char</span><span class="hl opt">*</span> str<span class="hl opt">,</span> <span class="hl kwb">const char</span><span class="hl opt">*</span> needle<span class="hl opt">) {</span>
  <span class="hl kwb">int</span> str_sz <span class="hl opt">=</span> std<span class="hl opt">::</span><span class="hl kwd">strlen</span><span class="hl opt">(</span>str<span class="hl opt">);</span>
  <span class="hl kwb">int</span> needle_sz <span class="hl opt">=</span> std<span class="hl opt">::</span><span class="hl kwd">strlen</span><span class="hl opt">(</span>needle<span class="hl opt">);</span>

  std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span><span class="hl kwb">int</span><span class="hl opt">&gt;</span> <span class="hl kwd">prefix</span><span class="hl opt">(</span>needle_sz<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">);</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> needle_sz<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
    <span class="hl kwb">int</span> j <span class="hl opt">=</span> prefix<span class="hl opt">[</span>i <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">];</span>
    <span class="hl kwa">while</span> <span class="hl opt">(</span>j <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> needle<span class="hl opt">[</span>j<span class="hl opt">] !=</span> needle<span class="hl opt">[</span>i<span class="hl opt">])</span>
      j <span class="hl opt">=</span> prefix<span class="hl opt">[</span>j <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">];</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>needle<span class="hl opt">[</span>j<span class="hl opt">] ==</span> needle<span class="hl opt">[</span>i<span class="hl opt">])</span>
      j <span class="hl opt">+=</span> <span class="hl num">1</span><span class="hl opt">;</span>
    prefix<span class="hl opt">[</span>i<span class="hl opt">] =</span> j<span class="hl opt">;</span>
  <span class="hl opt">}</span>

  <span class="hl kwb">int</span> j <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> str_sz<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
    <span class="hl kwa">while</span> <span class="hl opt">(</span>j <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> needle<span class="hl opt">[</span>j<span class="hl opt">] !=</span> str<span class="hl opt">[</span>i<span class="hl opt">])</span>
      j <span class="hl opt">=</span> prefix<span class="hl opt">[</span>j <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">];</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>needle<span class="hl opt">[</span>j<span class="hl opt">] ==</span> str<span class="hl opt">[</span>i<span class="hl opt">])</span>
      j <span class="hl opt">+=</span> <span class="hl num">1</span><span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>j <span class="hl opt">==</span> needle_sz<span class="hl opt">)</span>
      <span class="hl kwa">return</span> i <span class="hl opt">-</span> j <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
  <span class="hl opt">}</span>

  <span class="hl kwa">return</span> <span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[]) {</span>
  <span class="hl kwb">int</span> N <span class="hl opt">=</span> argc <span class="hl opt">&gt;</span> <span class="hl num">1</span> ? std<span class="hl opt">::</span><span class="hl kwd">atoi</span><span class="hl opt">(</span>argv<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]) :</span> <span class="hl num">10</span><span class="hl opt">*</span><span class="hl num">1000</span><span class="hl opt">*</span><span class="hl num">1000</span><span class="hl opt">;</span>
  <span class="hl kwb">int</span> M <span class="hl opt">=</span> argc <span class="hl opt">&gt;</span> <span class="hl num">2</span> ? std<span class="hl opt">::</span><span class="hl kwd">atoi</span><span class="hl opt">(</span>argv<span class="hl opt">[</span><span class="hl num">2</span><span class="hl opt">]) :</span> <span class="hl num">1000</span><span class="hl opt">;</span>

  std<span class="hl opt">::</span>string <span class="hl kwd">str</span><span class="hl opt">(</span>N<span class="hl opt">,</span> <span class="hl str">'a'</span><span class="hl opt">);</span>
  std<span class="hl opt">::</span>string <span class="hl kwd">needle</span><span class="hl opt">(</span>M<span class="hl opt">,</span> <span class="hl str">'a'</span><span class="hl opt">);</span>

  <span class="hl slc">// Our needle is the last M characters of the string.</span>
  str<span class="hl opt">[</span>str<span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">() -</span> <span class="hl num">1</span><span class="hl opt">] +=</span> <span class="hl num">1</span><span class="hl opt">;</span>
  needle<span class="hl opt">[</span>needle<span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">() -</span> <span class="hl num">1</span><span class="hl opt">] +=</span> <span class="hl num">1</span><span class="hl opt">;</span>

  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;N = &quot;</span> <span class="hl opt">&lt;&lt;</span> N <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;, M = &quot;</span> <span class="hl opt">&lt;&lt;</span> M <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>

  <span class="hl kwb">size_t</span> correct_position <span class="hl opt">=</span> str<span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">() -</span> needle<span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">();</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;Correct position: &quot;</span> <span class="hl opt">&lt;&lt;</span> correct_position <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>

  <span class="hl kwb">const char</span><span class="hl opt">*</span> str_p <span class="hl opt">=</span> str<span class="hl opt">.</span><span class="hl kwd">c_str</span><span class="hl opt">();</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>std<span class="hl opt">::</span><span class="hl kwd">strlen</span><span class="hl opt">(</span>str_p<span class="hl opt">) ==</span> str<span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">());</span>

  <span class="hl kwb">const char</span><span class="hl opt">*</span> needle_p <span class="hl opt">=</span> needle<span class="hl opt">.</span><span class="hl kwd">c_str</span><span class="hl opt">();</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>std<span class="hl opt">::</span><span class="hl kwd">strlen</span><span class="hl opt">(</span>needle_p<span class="hl opt">) ==</span> needle<span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">());</span>

  <span class="hl kwb">time_t</span> started<span class="hl opt">,</span> duration<span class="hl opt">;</span>
  <span class="hl kwb">size_t</span> i<span class="hl opt">;</span>

  started <span class="hl opt">=</span> std<span class="hl opt">::</span><span class="hl kwd">time</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">);</span>
  i <span class="hl opt">=</span> str<span class="hl opt">.</span><span class="hl kwd">find</span><span class="hl opt">(</span>needle<span class="hl opt">);</span>
  duration <span class="hl opt">=</span> std<span class="hl opt">::</span><span class="hl kwd">time</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">)-</span> started<span class="hl opt">;</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;string::find(): &quot;</span> <span class="hl opt">&lt;&lt;</span> i <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;, time &quot;</span> <span class="hl opt">&lt;&lt;</span> duration <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>i <span class="hl opt">==</span> correct_position<span class="hl opt">);</span>

  started <span class="hl opt">=</span> std<span class="hl opt">::</span><span class="hl kwd">time</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">);</span>
  <span class="hl kwb">const char</span><span class="hl opt">*</span> p <span class="hl opt">=</span> std<span class="hl opt">::</span><span class="hl kwd">strstr</span><span class="hl opt">(</span>str_p<span class="hl opt">,</span> needle_p<span class="hl opt">);</span>
  duration <span class="hl opt">=</span> std<span class="hl opt">::</span><span class="hl kwd">time</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">)-</span> started<span class="hl opt">;</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>p <span class="hl opt">!=</span> NULL<span class="hl opt">);</span>
  i <span class="hl opt">=</span> p <span class="hl opt">-</span> str_p<span class="hl opt">;</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;strstr()      : &quot;</span> <span class="hl opt">&lt;&lt;</span> i <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;, time &quot;</span> <span class="hl opt">&lt;&lt;</span> duration <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>i <span class="hl opt">==</span> correct_position<span class="hl opt">);</span>

  started <span class="hl opt">=</span> std<span class="hl opt">::</span><span class="hl kwd">time</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">);</span>
  i <span class="hl opt">=</span> <span class="hl kwd">naive_strstr</span><span class="hl opt">(</span>str_p<span class="hl opt">,</span> needle_p<span class="hl opt">);</span>
  duration <span class="hl opt">=</span> std<span class="hl opt">::</span><span class="hl kwd">time</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">)-</span> started<span class="hl opt">;</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;naive_strstr(): &quot;</span> <span class="hl opt">&lt;&lt;</span> i <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;, time &quot;</span> <span class="hl opt">&lt;&lt;</span> duration <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>i <span class="hl opt">==</span> correct_position<span class="hl opt">);</span>

  started <span class="hl opt">=</span> std<span class="hl opt">::</span><span class="hl kwd">time</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">);</span>
  i <span class="hl opt">=</span> <span class="hl kwd">kmp_strstr</span><span class="hl opt">(</span>str_p<span class="hl opt">,</span> needle_p<span class="hl opt">);</span>
  duration <span class="hl opt">=</span> std<span class="hl opt">::</span><span class="hl kwd">time</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">)-</span> started<span class="hl opt">;</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;kmp_strstr()  : &quot;</span> <span class="hl opt">&lt;&lt;</span> i <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;, time &quot;</span> <span class="hl opt">&lt;&lt;</span> duration <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>i <span class="hl opt">==</span> correct_position<span class="hl opt">);</span>

  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Makefile:</p>

<pre class="hl">
<span class="hl kwa">all</span><span class="hl opt">:</span>  do-32 do-64

target <span class="hl opt">=</span> strstr_find

do-32<span class="hl opt">:</span> build-32
    <span class="hl opt">$(</span>target<span class="hl opt">)</span>

do-64<span class="hl opt">:</span> build-64
    <span class="hl opt">$(</span>target<span class="hl opt">)</span>

do-build<span class="hl opt">:</span>
    <span class="hl str">&quot;%VS100COMNTOOLS%..\..\VC</span><span class="hl esc">\v</span><span class="hl str">cvarsall.bat&quot;</span> <span class="hl opt">$(</span>arch<span class="hl opt">) &amp;&amp;</span> cl <span class="hl opt">/</span>O2 <span class="hl opt">/</span>EHsc <span class="hl opt">$(</span>target<span class="hl opt">)</span>.<span class="hl kwa">cpp</span>

build-32<span class="hl opt">:</span>
    <span class="hl opt">$(</span>MAKE<span class="hl opt">)</span> do-build arch<span class="hl opt">=</span>x86

build-64<span class="hl opt">:</span>
    <span class="hl opt">$(</span>MAKE<span class="hl opt">)</span> do-build arch<span class="hl opt">=</span>amd64

run<span class="hl opt">:</span>
    <span class="hl opt">$(</span>target<span class="hl opt">)</span>

<span class="hl kwa">clean</span><span class="hl opt">:</span>
    <span class="hl opt">-</span>del <span class="hl opt">*</span>.exe <span class="hl opt">*</span>.ilk <span class="hl opt">*</span>.obj <span class="hl opt">*</span>.pdb <span class="hl opt">*</span>.suo
</pre>

<p>Запускаем на Visual Studio 2010 32-bit:</p>

<pre><code>N = 10000000, M = 1000
Correct position: 9999000
string::find(): 9999000, time 4
strstr()      : 9999000, time 8
naive_strstr(): 9999000, time 8
kmp_strstr()  : 9999000, time 0
</code></pre>

<p>Запускаем на Visual Studio 2010 64-bit и получаем странное ускорение у <code>find()</code> и замедление <code>strstr()</code> и <code>naive_strstr()</code>:</p>

<pre><code>N = 10000000, M = 1000
Correct position: 9999000
string::find(): 9999000, time 1
strstr()      : 9999000, time 16
naive_strstr(): 9999000, time 10
kmp_strstr()  : 9999000, time 0
</code></pre>

<p>Конечно, тут есть много тонкостей. При различных данных в среднем <code>strstr()</code> может реально обгонять мою реализацию КМП, так как <code>strstr()</code>все-таки написана на ассемблере, и накладные расходы в КМП могут съесть всего его преимущества, но вот если данные всегда будут &ldquo;плохими&rdquo;, то без КМП не обойдить.</p>

<p>И еще. Так как КМП требует дополнительную память порядка длины искомой строки, то подобное осложнение может не годиться для библиотечной функции широкого применения. Может поэтому <code>strstr()</code> и <code>string::find()</code> и работают &ldquo;в лоб&rdquo;.</p>

<p>Одно не понятно - почему <code>string::find()</code> быстрее <code>strstr()</code>? Может из-за тотального inline&rsquo;а.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Разумные и неразумные сокращения в C++]]></title>
    <link href="http://demin.ws/blog/russian/2011/06/08/reasonable-and-unreasonable-shortings-in-cpp/"/>
    <updated>2011-06-08T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/06/08/reasonable-and-unreasonable-shortings-in-cpp/</id>
    <content type="html"><![CDATA[<p>Вот вполне себе реальный код:</p>

<pre class="hl">
<span class="hl kwb">const char</span><span class="hl opt">*</span> a <span class="hl opt">= ::</span><span class="hl kwd">getenv</span><span class="hl opt">(</span><span class="hl str">&quot;VAR&quot;</span><span class="hl opt">);</span>
<span class="hl kwa">if</span> <span class="hl opt">(</span>a <span class="hl opt">==</span> NULL<span class="hl opt">)</span>
  a <span class="hl opt">=</span> <span class="hl str">&quot;[NULL]&quot;</span><span class="hl opt">;</span>
</pre>

<p>Но в каком-то внутреннем стремлении сделать код &ldquo;немного лучше&rdquo;, можно написать так:</p>

<pre class="hl">
<span class="hl kwb">const char</span><span class="hl opt">*</span> a <span class="hl opt">= (</span>a <span class="hl opt">= ::</span><span class="hl kwd">getenv</span><span class="hl opt">(</span><span class="hl str">&quot;VAR&quot;</span><span class="hl opt">),</span> a ? a <span class="hl opt">:</span> <span class="hl str">&quot;[NULL]&quot;</span><span class="hl opt">);</span>
</pre>

<p>Мне внутренне больше нравиться второй вариант. Он как-то выразительнее. Но на code view я, конечно, буду настаивать однозначно на первом, так как не только мне одному этот код потом читать.</p>

<p>Также в С++ считается хорошим тоном объявлять переменную цикла <code>for</code> прямо в теле оператора:</p>

<pre class="hl">
<span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">; ...</span>
</pre>

<p>Но вот конструкции типа:</p>

<pre class="hl">
<span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwb">int</span> a <span class="hl opt">=</span> <span class="hl kwd">foo</span><span class="hl opt">()) {</span>
  <span class="hl opt">...</span>
<span class="hl opt">}</span>
</pre>

<p>или</p>

<pre class="hl">
<span class="hl kwa">while</span> <span class="hl opt">(</span><span class="hl kwb">int</span> a <span class="hl opt">=</span> <span class="hl kwd">foo</span><span class="hl opt">()) {</span>
  <span class="hl opt">...</span>
<span class="hl opt">}</span>
</pre>

<p>уже немного режут глаз, хотя и являются корректными.</p>

<p>А у вас какие есть прикольные сокращение? пусть даже не для production code?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ошибка в обработке деструктора временного объекта в компиляторе Sun C++ 5.8]]></title>
    <link href="http://demin.ws/blog/russian/2011/06/07/bug-in-handling-destructor-of-temporary-object-in-sun-58-compiler/"/>
    <updated>2011-06-07T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/06/07/bug-in-handling-destructor-of-temporary-object-in-sun-58-compiler/</id>
    <content type="html"><![CDATA[<p>Рассмотрим код:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;iostream&gt;</span>
<span class="hl kwb">int</span> ct <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
<span class="hl kwb">struct</span> G <span class="hl opt">{</span>
  <span class="hl opt">~</span><span class="hl kwd">G</span><span class="hl opt">() {</span> ct<span class="hl opt">--; }</span>
<span class="hl opt">};</span>
<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
  <span class="hl opt">(</span><span class="hl kwd">G</span><span class="hl opt">());</span>  <span class="hl slc">// (1)</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> ct <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Как вы думаете - что напечатает данная программа?</p>

<p>Весь вопрос в том, когда будет вызван деструктор временного объекта, созданного в строке <code>(1)</code>: сразу после знака <code>;</code> в этой же строке или в конце блока на символе <code>}</code>?</p>

<p>Если первое, то программа выведет &ldquo;0&rdquo;, если второе, то &ldquo;1&rdquo;.</p>

<p>Я проверил на 6 разных компиляторах на разных платформах - везде печатается &ldquo;0&rdquo;, что соответствует стандарту.</p>

<p>Но на отдельно выделенной версии Sun C++ 5.8 <sup>2005</sup>&frasl;<sub>10</sub>/13 данная программа печатает &ldquo;1&rdquo;!</p>

<p>Мы провели с коллегой интересные пару часов, пытаясь в огромной программe локализовать этот коварный глюк.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Задача про винты и гнезда]]></title>
    <link href="http://demin.ws/blog/russian/2011/06/05/nuts-and-bolts-problem/"/>
    <updated>2011-06-05T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/06/05/nuts-and-bolts-problem/</id>
    <content type="html"><![CDATA[<p>Разгребая старые записи, я нашел несколько задач, виденных мной на различных интервью.</p>

<p>Вот одна из них.</p>

<p>Имеется n винтов и n гнезд, расположенных в произвольном порядке. Каждому винту соответствует по диаметру только одно гнездо. Все винты имеют разные диаметры.</p>

<p>Требуется расставить все винты по гнездам. Разрешено только одно действие - попытка вставить винт i в гнездо j. В результате такой операции можно выяснить: (1) винт тоньще гнезда - не подходит, (2) винт толще гнезда - не подходит, (3) или винт точно входит в гнездо - подходит.</p>

<p>Сравнивать винты или гнезда между собой нельзя.</p>

<p>Очевидное решение за O(N^2) - попробовать каждый болт последовательно в каждое гнездо до совпадения. Но есть решение быстрее.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Безопасный sizeof для массивов в С++]]></title>
    <link href="http://demin.ws/blog/russian/2011/05/24/safe-sizeof-for-arrays-in-cpp/"/>
    <updated>2011-05-24T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/05/24/safe-sizeof-for-arrays-in-cpp/</id>
    <content type="html"><![CDATA[<p>Иногда приходится иметь дело с обычными массивами и указателями на них в С++. Также иногда встает задача определения количества элементов массиве на стадии компиляции.</p>

<p>Например, это можно слелать так:</p>

<pre class="hl">
<span class="hl ppc">#define arraysize(array) (sizeof(array) / sizeof(array[0]))</span>
</pre>

<p>Но тут есть одна проблема. Если случайно передать в этот макрос не массив, а просто указатель, что ошибки компиляции не будет, но значение будет далеко от задуманного.</p>

<p>Вчера <a href="http://habrahabr.ru/blogs/google_chrome/119815/">прочитал на Харбе</a> (кстати, отличная статья), что в С++ можно сделать этот макрос более безопасным.</p>

<p>Вот <a href="http://codesearch.google.com/codesearch/p?hl=en#OAMlx_jo-ck/src/base/basictypes.h&amp;q=arraysize&amp;exact_package=chromium">код, который используется в Chrome</a>:</p>

<pre class="hl">
<span class="hl kwc">template</span> <span class="hl opt">&lt;</span>typename T<span class="hl opt">,</span> <span class="hl kwb">size_t</span> N<span class="hl opt">&gt;</span>
<span class="hl kwb">char</span> <span class="hl opt">(&amp;</span><span class="hl kwd">ArraySizeHelper</span><span class="hl opt">(</span><span class="hl kwd">T</span> <span class="hl opt">(&amp;</span>array<span class="hl opt">)[</span>N<span class="hl opt">]))[</span>N<span class="hl opt">];</span>
<span class="hl ppc">#define arraysize(array) (sizeof(ArraySizeHelper(array)))</span>
</pre>

<p>Выглядит немного запутанно, но можно разобраться:</p>

<ul>
<li><code>T (&amp;array)[N]</code> - определение массива (<code>T array[N]</code>), который передается по ссылке</li>
<li><code>char (&amp;ArraySizeHelper(...)[N]</code> - функция, возвращающая массив по ссылке</li>
<li><code>sizeof(ArraySizeHelper(array))</code> - определение размера возвращаемого функцией значения</li>
<li>Все это шаблон функции, параметризированный типом массива и его размером, который автоматически определяется компилятором при раскрытии шаблона. Так как функция реально не вызывается, то и тело ее определять не нужно.</li>
</ul>

<p>Если честно, додуматься до такого непросто. Но макрос весьма хорош. Я взял себе на вооружение.</p>

<p>Кстати, можно поиграться с <code>sizeof()</code> от типа возвращаемого функцией значения:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;iostream&gt;</span>
<span class="hl ppc">#include &lt;string&gt;</span>

std<span class="hl opt">::</span>string <span class="hl kwd">f</span><span class="hl opt">() {</span>
  <span class="hl kwa">return</span> std<span class="hl opt">::</span><span class="hl kwd">string</span><span class="hl opt">();</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl kwa">sizeof</span><span class="hl opt">( (&amp;</span>f<span class="hl opt">)() ) &lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span> std<span class="hl opt">::</span>string <span class="hl opt">) &lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>У меня на VS2010 выводит два раза число &ldquo;28&rdquo;.</p>

<p>Интересно, что в чистом С такой номер тоже проходит:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;stdio.h&gt;</span>

<span class="hl kwb">struct</span> t <span class="hl opt">{</span>
  <span class="hl kwb">char</span> x<span class="hl opt">[</span><span class="hl num">1024</span><span class="hl opt">];</span>
<span class="hl opt">};</span>

<span class="hl kwb">struct</span> t <span class="hl kwd">f</span><span class="hl opt">() {</span>
  <span class="hl kwb">struct</span> t a<span class="hl opt">;</span>
  <span class="hl kwa">return</span> a<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
  <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;%d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span><span class="hl kwb">struct</span> t<span class="hl opt">));</span>
  <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;%d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> <span class="hl kwa">sizeof</span><span class="hl opt">( (*</span>f<span class="hl opt">)() ));</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Печатает два раза &ldquo;1024&rdquo;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Количество пересечений в двудольном графе]]></title>
    <link href="http://demin.ws/blog/russian/2011/05/23/number-of-crossings-in-bipartite-graph/"/>
    <updated>2011-05-23T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/05/23/number-of-crossings-in-bipartite-graph/</id>
    <content type="html"><![CDATA[<p>Это очередной пост из серии &ldquo;записки дилетанта о спортивном программировании&rdquo;. Тут как в том анекдоте: &ldquo;Лев Толстой очень любил играть на балалайке, но не умел. Порой пишет очередную главу, а сам думает: тренди-бренди, тренди-бренди&hellip;&ldquo;. В общем, точно про меня и спортивное программирование.</p>

<p>Итак, задача с крайне простой постановкой.</p>

<p>Дан произвольный двудольный граф: &ldquo;n&rdquo; вершин слева, &ldquo;m&rdquo; справа и некоторое количество дуг. Требуется ответить на вопрос: сколько раз дуги графа пересекаются.</p>

<p>В данном примере n=5, m=4, десять дуг: 1-1, 1-2, 2-1, 2-2, 3-3, 4-1, 4-3, 5-1, 5-2, 5-4, количество пересечений: 10.</p>

<p><img src="http://demin.ws/images/blog/bipartite-graph.gif" /></p>

<p>Факт пересения рассматривается всегда попарно. Например, если уж так случилось, и три дуги пересекаются в одной геометрической точке, формально пересечений все равно три, а не одно.</p>

<p>Задача имеет решение за O(n*m).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Необычная индексация по строковой константе]]></title>
    <link href="http://demin.ws/blog/russian/2011/05/22/unusual-indexing-on-string-constant/"/>
    <updated>2011-05-22T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/05/22/unusual-indexing-on-string-constant/</id>
    <content type="html"><![CDATA[<p>Признаюсь, мне никогда раньше не приходило в голову индексировать строковую константу прямо на месте. Например:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;stdio.h&gt;</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
  <span class="hl kwb">int</span> i<span class="hl opt">;</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> <span class="hl num">8</span><span class="hl opt">; ++</span>i<span class="hl opt">)</span>
    <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;%c&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;12345678&quot;</span><span class="hl opt">[</span>i<span class="hl opt">]);</span>
  <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Лично мне выражение <code>&quot;12345678&quot;[i]</code> как-то режет глаз. Хотя с точки зрения языка тут все в порядке.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Эмулятор x86 на JavaScript, на котором работает Linux]]></title>
    <link href="http://demin.ws/blog/russian/2011/05/17/x86-emulator-in-javascript-running-linux/"/>
    <updated>2011-05-17T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/05/17/x86-emulator-in-javascript-running-linux/</id>
    <content type="html"><![CDATA[<p>Установите свежий браузер (FF4 или Chrome 11) и просто сходите по указанной ссылке.</p>

<p><a href="http://bellard.org/jslinux/">http://bellard.org/jslinux/</a></p>

<p>Посмотрите, как прямо в вашем браузере загрузится Linux. Запустите ls, top, emacs, vi, df, ifconfig, ping и т.д. Попробуйте скомпилировать и запустить программу <code>tcc hello.c &amp;&amp; ./a.out</code>.</p>

<p>А теперь осознайте - это все чистая программная эмуляция x86 (<a href="http://bellard.org/jslinux/tech.html">подробности</a>).</p>

<p><a href="http://radio86.googlecode.com/">Мой эмулятор Intel 8080 и Радио-86РК</a> просто ничто, по сравнению с этим.</p>

<p>У меня до сих пор небольшой шок от увиденного.</p>

<p>Когда-то я был уже удивлен до глубины души одним из проектов (<a href="http://demin.ws/blog/russian/2009/03/08/boot-linux-without-kernel-in-25-seconds/">Загрузка Linux без ядра за 25 секунд</a>) этого товарища, но это&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ссылки на файлы и каталоги в Windows]]></title>
    <link href="http://demin.ws/blog/russian/2011/05/09/links-to-files-and-folder-in-windows/"/>
    <updated>2011-05-09T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/05/09/links-to-files-and-folder-in-windows/</id>
    <content type="html"><![CDATA[<p>К своему стыду я думал, что Windows все еще существует в прошлом веке без возможности делать ссылки на файлы в файловой системе. Я знал про ссылки на каталоги (junctions), которые можно делать, например, в FAR&rsquo;е через Alt-F6.</p>

<p>Но сегодня, открыв &ldquo;Windows Internals&rdquo; в случайном месте, наткнулся на параграф про данный вопрос.</p>

<p>Итак, просто привожу небольшой лог с консоли (Windows 7).</p>

<pre><code>ver

Microsoft Windows [Version 6.1.7601]
</code></pre>

<p>Создаем файл и каталог:</p>

<pre><code>cd C:\Temp\links
C:\temp\links&gt;mkdir folder
C:\temp\links&gt;echo &gt;file
</code></pre>

<p>Создаем символьную ссылку на каталог:</p>

<pre><code>C:\temp\links&gt;mklink /D link1 folder
symbolic link created for link1 &lt;&lt;===&gt;&gt; folder
</code></pre>

<p>Создаем junction на каталог (на файл его создать нельзя):</p>

<pre><code>C:\temp\links&gt;mklink /J link2 folder
Junction created for link2 &lt;&lt;===&gt;&gt; folder
</code></pre>

<p>Создаем символьную ссылку на каталог немного иначе:</p>

<pre><code>C:\temp\links&gt;mklink link3 folder
symbolic link created for link3 &lt;&lt;===&gt;&gt; folder
</code></pre>

<p>Создаем символьную ссылку на файл:</p>

<pre><code>C:\temp\links&gt;mklink link4 file
symbolic link created for link4 &lt;&lt;===&gt;&gt; file
</code></pre>

<p>Результат:</p>

<pre><code>C:\temp\links&gt;dir
 Volume in drive C has no label.
 Volume Serial Number is C021-6C9F

 Directory of C:\temp\links

09/05/2011  18:26    &lt;DIR&gt;          .
09/05/2011  18:26    &lt;DIR&gt;          ..
09/05/2011  18:26                13 file
09/05/2011  18:25    &lt;SYMLINKD&gt;     link1 [folder]
09/05/2011  18:25    &lt;JUNCTION&gt;     link2 [C:\temp\links\folder]
09/05/2011  18:25    &lt;SYMLINK&gt;      link3 [folder]
09/05/2011  18:26    &lt;SYMLINK&gt;      link4 [file]
09/05/2011  18:23    &lt;DIR&gt;          folder
               3 File(s)             13 bytes
               5 Dir(s)  208,278,925,312 bytes free
</code></pre>

<p>Обратите внимание на интересные типы файлов: <code>&lt;SYMLINKD&gt;</code>, <code>&lt;JUNCTION&gt;</code>, <code>&lt;SYMLINK&gt;</code>. Как написано в книге, первые два по функциональности одно и то же, просто <code>&lt;JUNCTION&gt;</code> более старый механизм, доступный в более старых версиях Windows и который поддерживает ссылки только внутри одного тома.</p>

<p>Также, обратите внимание, что ссылка <code>link3</code> хоть и является ссылкой на каталог, не работает нормально как обычный каталог (в отличие от <code>link1</code> и <code>link2</code>, которые в целом ведут себя как нормальне каталоги). FAR, кстати, тоже, <code>link3</code> за каталог не считает.</p>

<p>В общем, такая простая задача как ссылки внутри файловой системы, решенная в UNIXах более двадцати лет назад, решена в Windows традиционным для этой операционной системы путем - решений много, и каждое имеет свой уровень совместимости.</p>

<p>И книга, &ldquo;Windows Internals&rdquo;, чертовски хороша, рекомендую.</p>

<p><a href="http://www.amazon.co.uk/gp/product/0735625301/ref=as_li_tf_il?ie=UTF8&tag=prodiy-21&linkCode=as2&camp=1634&creative=6738&creativeASIN=0735625301"><img border="0" src="http://ws.assoc-amazon.co.uk/widgets/q?_encoding=UTF8&Format=_SL160_&ASIN=0735625301&MarketPlace=GB&ID=AsinImage&WS=1&tag=prodiy-21&ServiceVersion=20070822" ></a><img src="http://www.assoc-amazon.co.uk/e/ir?t=prodiy-21&l=as2&o=2&a=0735625301" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Видео докладов с ACCU 2011]]></title>
    <link href="http://demin.ws/blog/russian/2011/05/06/accu-2011-videos/"/>
    <updated>2011-05-06T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/05/06/accu-2011-videos/</id>
    <content type="html"><![CDATA[<p>Увы, приходится давать просто ссылки, ибо не дают вставлять код для просмотра прямо со страницы.</p>

<p>Скотт Мейерс</p>

<p><a href="http://skillsmatter.com/podcast/home/cpu-caches-and-why-you-care">CPU caches and why you care</a></p>

<p><a href="http://skillsmatter.com/podcast/home/move-semanticsperfect-forwarding-and-rvalue-references">Move semantics, perfect forwarding, and rvalue references</a></p>

<p>Джон Лакос (Блумберг)</p>

<p><a href="http://skillsmatter.com/podcast/home/defensive-programming-done-right">Defensive programming done right</a></p>

<p>Диетмар Кул (Блумберг)</p>

<p><a href="http://skillsmatter.com/podcast/home/generic-programming-with-c-plus-plus-0x">Generic Programming with C++ 0x</a></p>

<p><a href="http://skillsmatter.com/event/home/accu-2011">Остальные видео</a> тоже доступны.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Кто быстрее: memset, bzero или std::fill]]></title>
    <link href="http://demin.ws/blog/russian/2011/05/04/who-is-faster-memset-bzero-std-fill/"/>
    <updated>2011-05-04T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/05/04/who-is-faster-memset-bzero-std-fill/</id>
    <content type="html"><![CDATA[<p>У нас тут идет второй день тренинг по С++ и unit-тестированию. Ведет <a href="http://www.boost.org/users/people/kevlin_henney.html">Kevlin Henney</a>. Отличный дядка.</p>

<p>Все как обычно &ndash; стараемся приучать к культуре разработки через тесты, ну и попутно склонить патриотов С к С++, убедив их, что на С++ можно таки писать также эффективно, как и на С. Да еще и в разы быстрее.</p>

<p>Зашла тема про <code>std::fill()</code>. Я вставил словечко, что мол <code>fill()</code> работает также быстро как и <code>memset()</code>, так как он используется в <code>fill()</code> для простых типов.</p>

<p>Написали программу, в которой есть интересный момент.</p>

<pre class="hl">
<span class="hl ppc">#include &lt;cstdlib&gt;</span>
<span class="hl ppc">#include &lt;algorithm&gt;</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[]) {</span>
  <span class="hl kwb">int</span> mode <span class="hl opt">=</span> argc <span class="hl opt">&gt;</span> <span class="hl num">1</span> ? std<span class="hl opt">::</span><span class="hl kwd">atoi</span><span class="hl opt">(</span>argv<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]) :</span> <span class="hl num">1</span><span class="hl opt">;</span>
  <span class="hl kwb">int</span> n <span class="hl opt">=</span> <span class="hl num">1024</span> <span class="hl opt">*</span> <span class="hl num">1024</span> <span class="hl opt">*</span> <span class="hl num">1024</span> <span class="hl opt">*</span> <span class="hl num">1</span><span class="hl opt">;</span>
  <span class="hl kwb">char</span><span class="hl opt">*</span> buf <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwb">char</span><span class="hl opt">[</span>n<span class="hl opt">];</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>mode <span class="hl opt">==</span> <span class="hl num">1</span><span class="hl opt">)</span>
    std<span class="hl opt">::</span><span class="hl kwd">memset</span><span class="hl opt">(</span>buf<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> n <span class="hl opt">*</span> <span class="hl kwa">sizeof</span><span class="hl opt">(*</span>buf<span class="hl opt">));</span>
  <span class="hl kwa">else if</span> <span class="hl opt">(</span>mode <span class="hl opt">==</span> <span class="hl num">2</span><span class="hl opt">)</span>
    <span class="hl kwd">bzero</span><span class="hl opt">(</span>buf<span class="hl opt">,</span> n <span class="hl opt">*</span> <span class="hl kwa">sizeof</span><span class="hl opt">(*</span>buf<span class="hl opt">));</span>
  <span class="hl kwa">else if</span> <span class="hl opt">(</span>mode <span class="hl opt">==</span> <span class="hl num">3</span><span class="hl opt">)</span>
    std<span class="hl opt">::</span><span class="hl kwd">fill</span><span class="hl opt">(</span>buf<span class="hl opt">,</span> buf <span class="hl opt">+</span> n<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">);</span>
  <span class="hl kwa">else if</span> <span class="hl opt">(</span>mode <span class="hl opt">==</span> <span class="hl num">4</span><span class="hl opt">)</span>
    std<span class="hl opt">::</span><span class="hl kwd">fill</span><span class="hl opt">(</span>buf<span class="hl opt">,</span> buf <span class="hl opt">+</span> n<span class="hl opt">,</span> <span class="hl str">'\0'</span><span class="hl opt">);</span>
  <span class="hl kwa">return</span> buf<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">];</span>
<span class="hl opt">}</span>
</pre>

<p>Обратите внимание на ветки 3 и 4. Они почти одно и то же, но не совсем.</p>

<p>В целом была мысль получить вот эту специализацию <code>fill()</code>:</p>

<pre class="hl">
<span class="hl slc">// Specialization: for one-byte types we can use memset.</span>
<span class="hl kwc">inline</span> <span class="hl kwb">void</span>
<span class="hl kwd">fill</span><span class="hl opt">(</span><span class="hl kwb">unsigned char</span><span class="hl opt">*</span> __first<span class="hl opt">,</span> <span class="hl kwb">unsigned char</span><span class="hl opt">*</span> __last<span class="hl opt">,</span> <span class="hl kwb">const unsigned char</span><span class="hl opt">&amp;</span> __c<span class="hl opt">)</span>
<span class="hl opt">{</span>
  <span class="hl kwd">__glibcxx_requires_valid_range</span><span class="hl opt">(</span>__first<span class="hl opt">,</span> __last<span class="hl opt">);</span>
  <span class="hl kwb">const unsigned char</span> __tmp <span class="hl opt">=</span> __c<span class="hl opt">;</span>
  std<span class="hl opt">::</span><span class="hl kwd">memset</span><span class="hl opt">(</span>__first<span class="hl opt">,</span> __tmp<span class="hl opt">,</span> __last <span class="hl opt">-</span> __first<span class="hl opt">);</span>
<span class="hl opt">}</span>
</pre>

<p>Итак, Makefile:</p>

<pre class="hl">
all<span class="hl opt">:</span> build run

<span class="hl opt">.</span>SILENT<span class="hl opt">:</span>

target <span class="hl opt">=</span> memset_bzero_fill

build<span class="hl opt">:</span>
        g<span class="hl opt">++ -</span>O3 <span class="hl opt">-</span>o $<span class="hl opt">(</span>target<span class="hl opt">)</span> $<span class="hl opt">(</span>target<span class="hl opt">).</span>cpp

run<span class="hl opt">:</span> run<span class="hl opt">-</span>memset run<span class="hl opt">-</span>bzero run<span class="hl opt">-</span>fill<span class="hl opt">-</span><span class="hl num">1</span> run<span class="hl opt">-</span>fill<span class="hl opt">-</span><span class="hl num">2</span>

go<span class="hl opt">:</span>
        <span class="hl opt">(</span>time <span class="hl opt">-</span>p <span class="hl opt">./</span>$<span class="hl opt">(</span>target<span class="hl opt">)</span> $<span class="hl opt">(</span>mode<span class="hl opt">))</span> <span class="hl num">2</span><span class="hl opt">&gt;&amp;</span><span class="hl num">1</span> <span class="hl opt">|</span> head <span class="hl opt">-</span><span class="hl num">1</span> <span class="hl opt">|</span> cut <span class="hl opt">-</span>d<span class="hl str">' '</span> <span class="hl opt">-</span>f <span class="hl num">2</span>

run<span class="hl opt">-</span>memset<span class="hl opt">:</span>
        echo $&#64; `$<span class="hl opt">(</span>MAKE<span class="hl opt">)</span> go mode<span class="hl opt">=</span><span class="hl num">1</span>`

run<span class="hl opt">-</span>bzero<span class="hl opt">:</span>
        echo $&#64; `$<span class="hl opt">(</span>MAKE<span class="hl opt">)</span> go mode<span class="hl opt">=</span><span class="hl num">2</span>`

run<span class="hl opt">-</span>fill<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">:</span>
        echo $&#64; `$<span class="hl opt">(</span>MAKE<span class="hl opt">)</span> go mode<span class="hl opt">=</span><span class="hl num">3</span>`

run<span class="hl opt">-</span>fill<span class="hl opt">-</span><span class="hl num">2</span><span class="hl opt">:</span>
        echo $&#64; `$<span class="hl opt">(</span>MAKE<span class="hl opt">)</span> go mode<span class="hl opt">=</span><span class="hl num">4</span>`
</pre>

<p>Компилятор &ldquo;gcc version 4.2.1 (Apple Inc. build 5666) (dot 3)&rdquo;.</p>

<p>Запускаем:</p>

<pre><code>run-memset 1.47
run-bzero 1.45
run-fill-1 1.69
run-fill-2 1.42
</code></pre>

<p>Видно, как ветка 3 (<code>run-fill-1</code>) значительно тормозит, по сравнению с 4, хотя разница всего в типе последнего параметра - 0 и &lsquo;\0&rsquo;.</p>

<p>Смотрим ассемблер:</p>

<pre><code>(gdb) disass main
Dump of assembler code for function main:
0x0000000100000e70 &lt;main+0&gt;:    push   %rbp
0x0000000100000e71 &lt;main+1&gt;:    mov    %rsp,%rbp
0x0000000100000e74 &lt;main+4&gt;:    push   %r12
0x0000000100000e76 &lt;main+6&gt;:    push   %rbx
0x0000000100000e77 &lt;main+7&gt;:    dec    %edi
0x0000000100000e79 &lt;main+9&gt;:    jle    0x100000ec3 &lt;main+83&gt;
0x0000000100000e7b &lt;main+11&gt;:   mov    0x8(%rsi),%rdi
0x0000000100000e7f &lt;main+15&gt;:   callq  0x100000efe &lt;dyld_stub_atoi&gt;
0x0000000100000e84 &lt;main+20&gt;:   mov    %eax,%r12d
0x0000000100000e87 &lt;main+23&gt;:   mov    $0x40000000,%edi
0x0000000100000e8c &lt;main+28&gt;:   callq  0x100000ef8 &lt;dyld_stub__Znam&gt;
0x0000000100000e91 &lt;main+33&gt;:   mov    %rax,%rbx
0x0000000100000e94 &lt;main+36&gt;:   cmp    $0x1,%r12d
0x0000000100000e98 &lt;main+40&gt;:   je     0x100000eac &lt;main+60&gt;   ; mode == 1
0x0000000100000e9a &lt;main+42&gt;:   cmp    $0x2,%r12d
0x0000000100000e9e &lt;main+46&gt;:   je     0x100000eac &lt;main+60&gt;   ; mode == 2
0x0000000100000ea0 &lt;main+48&gt;:   cmp    $0x3,%r12d
0x0000000100000ea4 &lt;main+52&gt;:   je     0x100000ed2 &lt;main+98&gt;   ; mode == 3
0x0000000100000ea6 &lt;main+54&gt;:   cmp    $0x4,%r12d
0x0000000100000eaa &lt;main+58&gt;:   jne    0x100000ebb &lt;main+75&gt;   ; mode != 4 -&gt; выход

; Реалиазация через memset().

0x0000000100000eac &lt;main+60&gt;:   mov    $0x40000000,%edx        ; mode = 1, 2 или 4
0x0000000100000eb1 &lt;main+65&gt;:   xor    %esi,%esi
0x0000000100000eb3 &lt;main+67&gt;:   mov    %rbx,%rdi
0x0000000100000eb6 &lt;main+70&gt;:   callq  0x100000f0a &lt;dyld_stub_memset&gt;

0x0000000100000ebb &lt;main+75&gt;:   movsbl (%rbx),%eax             ; выход
0x0000000100000ebe &lt;main+78&gt;:   pop    %rbx
0x0000000100000ebf &lt;main+79&gt;:   pop    %r12
0x0000000100000ec1 &lt;main+81&gt;:   leaveq
0x0000000100000ec2 &lt;main+82&gt;:   retq

0x0000000100000ec3 &lt;main+83&gt;:   mov    $0x40000000,%edi
0x0000000100000ec8 &lt;main+88&gt;:   callq  0x100000ef8 &lt;dyld_stub__Znam&gt;
0x0000000100000ecd &lt;main+93&gt;:   mov    %rax,%rbx
0x0000000100000ed0 &lt;main+96&gt;:   jmp    0x100000eac &lt;main+60&gt;

; Реализация на обычных командах.

0x0000000100000ed2 &lt;main+98&gt;:   movb   $0x0,(%rax)             ; mode = 3
0x0000000100000ed5 &lt;main+101&gt;:  mov    $0x1,%eax
0x0000000100000eda &lt;main+106&gt;:  nopw   0x0(%rax,%rax,1)
0x0000000100000ee0 &lt;main+112&gt;:  movb   $0x0,(%rax,%rbx,1)
0x0000000100000ee4 &lt;main+116&gt;:  inc    %rax
0x0000000100000ee7 &lt;main+119&gt;:  cmp    $0x40000000,%rax
0x0000000100000eed &lt;main+125&gt;:  jne    0x100000ee0 &lt;main+112&gt;

0x0000000100000eef &lt;main+127&gt;:  movsbl (%rbx),%eax             ; выход
0x0000000100000ef2 &lt;main+130&gt;:  pop    %rbx
0x0000000100000ef3 &lt;main+131&gt;:  pop    %r12
0x0000000100000ef5 &lt;main+133&gt;:  leaveq
0x0000000100000ef6 &lt;main+134&gt;:  retq
</code></pre>

<p>Видно, что благодаря оптимизации, ветки 1, 2 и 4 реализованы одинаково - через <code>memset()</code>. Вызов <code>fill()</code> в ветке 4 удалось свести к <code>memset()</code>.</p>

<p>Но вот ветка 3 реализована в виде ручного цикла. Компилятор, конечно, неплохо поработал &ndash; цикл практически идеальный, но это все равно работает медленнее, чем хитрый <code>memset()</code>, который использует всякие ухищрения групповых ассемблерных операций.</p>

<p>Неверный тип нуля не дал компилятору правильно выбрать специализацию шаблона.</p>

<p>Мораль? И мораль тут не очень хорошая.</p>

<p>Мне кажется, что количество людей, которые напишут <code>std::fill(buf, buf + n, 0)</code>, разительно больше, чем <code>std::fill(buf, buf + n, '\0')</code>.</p>

<p>А разница весьма существенна.</p>

<p>Посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2010/06/20/fill_n-vs-memset/">fill_n vs memset</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[p4-git - работа в Perforce через git]]></title>
    <link href="http://demin.ws/blog/russian/2011/04/28/p4-git/"/>
    <updated>2011-04-28T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/04/28/p4-git/</id>
    <content type="html"><![CDATA[<p>Наша основная система контроля версий - Perforce. Если уж говорить о централизованных системах контроля версий, то с моей точки зрения, Perforce - это лучшая система из тех, с которыми мне доводилось работать. Например:</p>

<ul>
<li>CVS - все понятно, система не для автоматизации разработки, где все меняется каждую минуту, а для &ldquo;публикации истории изменений&rdquo;</li>
<li>SVN - все более менее ничего, когда в разработке есть выделенный trunk, иначе после нескольких массивных слияний веток в разных направлениях хочется застрелиться</li>
<li><a href="http://jazz.net/projects/rational-team-concert">RTC</a> (Rational Team Concert) - монструозная система, удобная когда все и везде написано только на Java, и неудобный клиент в командной строке</li>
<li><a href="http://en.wikipedia.org/wiki/IBM_Rational_ClearCase">ClearCase</a> - кроме шуток, пользователям надо выдавать травы и водки, чтобы понять, как это система работает
На фоне всего этого Perforce - это реальный рай. Регулярно делаю слияния между ветками команд разработчиков, интеграцией и релизами - удобно. Также смотря с позиции ежедневных нужд разработчика - также все удобно. Только одна вещь нас немного мучала - это невозможность перебрасывать changeset&rsquo;ы между физическими машинами перед commit&rsquo;ом. У нас в разработке шесть основных платформ, включая Windows, поэтому каждый commit приходится проверять на всех платформах. Моя утилита <a href="http://code.google.com/p/p4patch/">p4patch</a> решала проблему более менее, но в последних версиях появилась волшебная команда <a href="http://www.perforce.com/perforce/doc.current/manuals/cmdref/shelve.html">p4 shelve</a>, которая решает эту проблему на корню.</li>
</ul>

<p>Но что ни говори, для локальной работы, когда утопаешь в экспериментах, тестовых данных, временных копиях и т.д. - наличие распределенной системы типа git, hg, bazaar или fossil, когда можно плодить ветки по каждому чиху, сливать, удалять и т.д., реально упрощает жизнь.</p>

<p>Как рекоммендуют сами Perforce&rsquo;овцы, можно в некотором роде срастить оба подхода, например, через git.</p>

<p><a href="http://kb.perforce.com/article/1417/git-p4">p4-git</a> - скрипт, которым локальные файлы, находящиеся под контролем Perforce, дополнительно можно взять под git.</p>

<p>Я все настроил, как сказано. Теперь у меня в git есть ветка master, являющаяся зеркалом из репозитория Perforce, и пяток-десяток локальных веток, из которых я сливаю в master. Изменения, которые я внес через git, автоматически заливаются в Perforce командой <code>git p4 submit</code>. Комадной же <code>git p4 rebase</code> можно синхронизировать ветку master с ее оригиналом в Perforce.</p>

<p>Кстати, я уже потерял счет тем разам, когда в hg или fossil&rsquo;e я влеплял ошибку в команде комита - либо просто опечатка в сообщении, что еще можно пережить, или при повторении команд из буфера командой строки вместо <code>diff</code> залепишь старый комит и все. Потом приходится либо как-то хитро merge&rsquo;ить, либо просто откатывать изменения, делая новый комит. А в git можно просто сказать <code>git commit --amend</code> для исправления опечатки в только что сделанном комите, или <code>git reset HEAD^1</code> для удаления последнего комита вообще. А меняя 1 на 2, 3 и т.д., можно удалить сколько угодно комитов назад.</p>

<p>А самое важное, что даже неверная команда <code>git reset HEAD^n</code>, которая якобы удаляет n последних комитов - это не конец света. И ее можно откатить через <code>git reset &lt;commit_id&gt;</code>, где <code>&lt;commit_id&gt;</code> - это идентификатор удаленного комита. При всех тех возможностях по работе с репозиторием, которые дает git, и которые принято считать &ldquo;опасными&rdquo;, очень мало команд, которые реально имеют необратимые последствия. Пока вы не сделали сборку мусора командой <code>git repack</code> объекты физически не удаляются, а только меняются указатели на них, а значит практически всегда можно вернуть назад, когда напортачил.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Работа в компании Hex-Rays]]></title>
    <link href="http://demin.ws/blog/russian/2011/04/26/vacancies-at-hex-rays/"/>
    <updated>2011-04-26T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/04/26/vacancies-at-hex-rays/</id>
    <content type="html"><![CDATA[<p>Удивительно, но в современном мире программного обеспечения, когда проще заработать быстрые деньги в мире web, или в крайнем случае в мире финансов, все еще есть компании, работающие на весьма узких специализированных нишах, но именно это позволяет им спокойно существовать, не боясь конкурентов, так как часто их просто нет.</p>

<p>Характерный пример - компания <a href="http://www.hexblog.com/">Hex-Rays</a>.</p>

<p>Их главный продукт - интерактивный дизассемблер <a href="http://www.hex-rays.com/idapro/">IDA Pro</a>. Хотя сейчас это уже не просто дизассемблер, а еще и отладчик и декомпилятор.</p>

<p>В общем, продукт, на который, как я думаю, молятся аналитики по компьютерной безопасности, авторы антивирусов и систем защит от копирования, а также люди с другой стороны баррикад - авторы вирусов и взломщики защит.</p>

<p>IDA уникален по функциональности, удобству и количеству поддерживаемых архитектур. А его <a href="http://www.hex-rays.com/decompiler.shtml">декомпилятор</a>, превращающий ассемблерный код в псевдокод на С, вообще не имеет себе аналогов. Рекомендую посмотреть видео с <a href="http://www.ccso.com/files/hexraysdemo.swf">демонстрацией</a> работы декомпилятора. Это впечатляет.</p>

<p>Неделю назад в блоге компании появилось <a href="http://www.hexblog.com/?p=290">объявление о поиске разработчиков</a>, желающих присоединиться к их небольшой, но очень продуктивной команде. Компания базируется в Бельгии, но скорее всего варианты сотрудничества могут быть весьма гибкими, от переезда в Бельгию до удаленной работы. В компании, кстати, также говорят по-русски.</p>

<p>Итак, любите reverse engineering и ассемблер, и при этом умеете грамотно писать на С++ - не пропустите.</p>

<p>P.S. Предвосхищу вопросы на тему какой-либо моей личной финансовой заинтересованности в публикации данной информации, что пост никак официально не связан с компанией Hex-Rays и является лишь моим личным мнением, высказанным только из-за многолетней привязанности к продукту IDA.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Почему на интервью принято дрючить]]></title>
    <link href="http://demin.ws/blog/russian/2011/04/22/why-interviews-have-to-be-tough/"/>
    <updated>2011-04-22T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/04/22/why-interviews-have-to-be-tough/</id>
    <content type="html"><![CDATA[<p>В гениальной, с моей точки зрения, книге Роберта Чалдини &ldquo;<a href="http://www.ozon.ru/context/detail/id/147187/?partner=easy-coding">Психология влияния</a>&rdquo; есть глава, в которой рассказывается про причины разнообразных ритуалов посвящения (в мужчины, десантники, студенты и т.д.). Эти ритуалы существовали всегда, во все эпохи, у всех народов. И причина невозможности от них избавиться состоит не в том, что люди, их проводящие обычно все моральные уроды, имеющие сильные проблемы с психикой, и на них разумная логика не действует, а в том, что проводят их обычно люди абсолютно психически нормальные (в остальной жизни). И причина, почему они это делают, в том, что после суровой процедуры посвящения вновь испеченный член группы ценит членство в ней на порядки выше, чем тот, кому оно досталось без какого-либо труда.</p>

<p>А что может быть важнее, когда член команды очень ценит и гордится членством - ничего! Особенно, например, для армии, когда от преданности сослуживца группе может зависеть жизнь остальных. Поэтому (в книге это объяснялось) все попытки административно запретить посвящение в морпеха или крапового берета, или день студента, когда злобно издеваются над новобранцами в студентческие братства, обречены на провал. Будет запрет - будут делать нелегально (историей это подтверждается), так как это животная природа человека к самосохранению в группе.</p>

<p>Ладно, тут можно много спорить. Желающие прочтут в книге сами.</p>

<p>Сейчас не об этом. Я тут подумал, что жесткие процедуры интервьюирования отчасти работают по такому же принципу. Пройдя подобный отбор, кто в душе не будет говорить себе: &ldquo;Да! Я прошел! Теперь я член этой классной команды!&rdquo;?</p>

<p>Возразите мне&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[re2c - компилятор регулярных выражений]]></title>
    <link href="http://demin.ws/blog/russian/2011/04/19/re2c-regular-expression-compiler/"/>
    <updated>2011-04-19T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/04/19/re2c-regular-expression-compiler/</id>
    <content type="html"><![CDATA[<p>Задача выделения из потока символов определенных лексем является весьма распространенной. Часто ее решают с помощью лексических анализаторов, конфигурируемых регулярными выражениями. Многие анализаторы построены по принципу генерации программного кода, который в свою очередь реализует логику регулярных выражений. Фактически, это компиляция языка регулярных выражений в код языка программирования.</p>

<p>Например, <a href="http://en.wikipedia.org/wiki/Flex_lexical_analyser">flex</a> - это один из таких анализаторов. Старый, но проверенный годами.</p>

<p>Я много пользовался flex&rsquo;ом, он имеет и плохие и хорошие стороны, но по большому счету, жаловаться не приходилось.</p>

<p>Но вчера наткнулся на интересный проект - <a href="http://re2c.org/">re2c</a>. По сути, на этой штуке можно писать лексические анализаторы прямо на коленке за несколько минут.</p>

<p>Сразу рассмотрим пример.</p>

<p>Допустим, вам нужно из строки выделять некоторые команды, целые и дробные числа. Можно расчехлить flex, а можно написать так:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;stdio.h&gt;</span>
<span class="hl ppc">#include &lt;stdlib.h&gt;</span>

<span class="hl kwb">enum</span> <span class="hl opt">{</span>
  CMD<span class="hl opt">,</span> INT<span class="hl opt">,</span> FLOAT<span class="hl opt">,</span> SPACE<span class="hl opt">,</span> END
<span class="hl opt">};</span>

<span class="hl kwb">int</span> <span class="hl kwd">scan</span><span class="hl opt">(</span><span class="hl kwb">char</span><span class="hl opt">**</span> p<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">**</span> lex<span class="hl opt">)</span>
<span class="hl opt">{</span>
    <span class="hl kwb">char</span><span class="hl opt">*</span> marker<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>lex<span class="hl opt">) *</span>lex <span class="hl opt">= *</span>p<span class="hl opt">;</span>
<span class="hl com">/*!re2c</span>
<span class="hl com">        re2c:define:YYCTYPE  = &quot;unsigned char&quot;;</span>
<span class="hl com">        re2c:define:YYCURSOR = *p;</span>
<span class="hl com">        re2c:define:YYMARKER = marker;</span>
<span class="hl com">        re2c:yyfill:enable   = 0;</span>
<span class="hl com">        re2c:yych:conversion = 1;</span>
<span class="hl com">        re2c:indent:top      = 1;</span>
<span class="hl com">        &quot;GET&quot;|&quot;PUT&quot;|&quot;EXIT&quot; { return CMD; }</span>
<span class="hl com">        [0-9]+             { return INT; }</span>
<span class="hl com">        [0-9]+ '.' [0-9]*  { return FLOAT; }</span>
<span class="hl com">        [ \t]+             { return SPACE; }</span>
<span class="hl com">        [^]                { return END; }</span>
<span class="hl com">*/</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[]) {</span>
  <span class="hl kwb">char</span> <span class="hl opt">*</span>p<span class="hl opt">, *</span>last<span class="hl opt">;</span>
  <span class="hl kwb">int</span> token<span class="hl opt">;</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>argc <span class="hl opt">&lt;</span> <span class="hl num">2</span><span class="hl opt">)</span> <span class="hl kwa">return</span> <span class="hl num">1</span><span class="hl opt">;</span>

  p <span class="hl opt">=</span> argv<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">];</span>
  <span class="hl kwa">while</span> <span class="hl opt">((</span>token <span class="hl opt">=</span> <span class="hl kwd">scan</span><span class="hl opt">(&amp;</span>p<span class="hl opt">, &amp;</span>last<span class="hl opt">)) !=</span> END<span class="hl opt">) {</span>
    <span class="hl kwb">int</span> sz <span class="hl opt">=</span> p <span class="hl opt">-</span> last<span class="hl opt">;</span>
    <span class="hl kwa">switch</span> <span class="hl opt">(</span>token<span class="hl opt">) {</span>
      <span class="hl kwa">case</span> CMD<span class="hl opt">:</span> <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;Command: '%.*s'</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> sz<span class="hl opt">,</span> last<span class="hl opt">);</span> <span class="hl kwa">break</span><span class="hl opt">;</span>
      <span class="hl kwa">case</span> INT<span class="hl opt">:</span> <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;Number: '%.*s'</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> sz<span class="hl opt">,</span> last<span class="hl opt">);</span> <span class="hl kwa">break</span><span class="hl opt">;</span>
      <span class="hl kwa">case</span> FLOAT<span class="hl opt">:</span> <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;Float: '%.*s'</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> sz<span class="hl opt">,</span> last<span class="hl opt">);</span> <span class="hl kwa">break</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
  <span class="hl opt">}</span>

  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>И все!</p>

<p>Понятно, что вся магия происходит в функции <code>scan()</code> между строками, ограниченных комментариями <code>/*!re2c</code> и <code>*/</code>.</p>

<p>Итак, re2c - это компилятор регулярных выражений, который встраивает код прямо в текст программы.</p>

<p>Если прогнать наш исходник через re2c:</p>

<pre><code>re2c.exe -is test.re2c &gt;test.c
</code></pre>

<p>То получим вот такое:</p>

<pre class="hl">
<span class="hl com">/* Generated by re2c 0.13.5 on Tue Apr 19 21:08:57 2011 */</span>
<span class="hl ppc">#include &lt;stdio.h&gt;</span>
<span class="hl ppc">#include &lt;stdlib.h&gt;</span>

<span class="hl kwb">enum</span> <span class="hl opt">{</span>
  CMD<span class="hl opt">,</span> INT<span class="hl opt">,</span> FLOAT<span class="hl opt">,</span> SPACE<span class="hl opt">,</span> END
<span class="hl opt">};</span>

<span class="hl kwb">int</span> <span class="hl kwd">scan</span><span class="hl opt">(</span><span class="hl kwb">char</span><span class="hl opt">**</span> p<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">**</span> lex<span class="hl opt">)</span>
<span class="hl opt">{</span>
    <span class="hl kwb">char</span><span class="hl opt">*</span> marker<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>lex<span class="hl opt">) *</span>lex <span class="hl opt">= *</span>p<span class="hl opt">;</span>

    <span class="hl opt">{</span>
        <span class="hl kwb">unsigned char</span> yych<span class="hl opt">;</span>

        yych <span class="hl opt">= (</span><span class="hl kwb">unsigned char</span><span class="hl opt">)**</span>p<span class="hl opt">;</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>yych <span class="hl opt">&lt;=</span> <span class="hl str">'9'</span><span class="hl opt">) {</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>yych <span class="hl opt">&lt;=</span> <span class="hl num">0x1F</span><span class="hl opt">) {</span>
                <span class="hl kwa">if</span> <span class="hl opt">(</span>yych <span class="hl opt">==</span> <span class="hl str">'</span><span class="hl esc">\t</span><span class="hl str">'</span><span class="hl opt">)</span> <span class="hl kwa">goto</span> yy8<span class="hl opt">;</span>
                <span class="hl kwa">goto</span> yy10<span class="hl opt">;</span>
            <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
                <span class="hl kwa">if</span> <span class="hl opt">(</span>yych <span class="hl opt">&lt;=</span> <span class="hl str">' '</span><span class="hl opt">)</span> <span class="hl kwa">goto</span> yy8<span class="hl opt">;</span>
                <span class="hl kwa">if</span> <span class="hl opt">(</span>yych <span class="hl opt">&lt;=</span> <span class="hl str">'/'</span><span class="hl opt">)</span> <span class="hl kwa">goto</span> yy10<span class="hl opt">;</span>
                <span class="hl kwa">goto</span> yy6<span class="hl opt">;</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>yych <span class="hl opt">&lt;=</span> <span class="hl str">'F'</span><span class="hl opt">) {</span>
                <span class="hl kwa">if</span> <span class="hl opt">(</span>yych <span class="hl opt">==</span> <span class="hl str">'E'</span><span class="hl opt">)</span> <span class="hl kwa">goto</span> yy5<span class="hl opt">;</span>
                <span class="hl kwa">goto</span> yy10<span class="hl opt">;</span>
            <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
                <span class="hl kwa">if</span> <span class="hl opt">(</span>yych <span class="hl opt">&lt;=</span> <span class="hl str">'G'</span><span class="hl opt">)</span> <span class="hl kwa">goto</span> yy2<span class="hl opt">;</span>
                <span class="hl kwa">if</span> <span class="hl opt">(</span>yych <span class="hl opt">==</span> <span class="hl str">'P'</span><span class="hl opt">)</span> <span class="hl kwa">goto</span> yy4<span class="hl opt">;</span>
                <span class="hl kwa">goto</span> yy10<span class="hl opt">;</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span>
yy2<span class="hl opt">:</span>
        yych <span class="hl opt">= (</span><span class="hl kwb">unsigned char</span><span class="hl opt">)*(</span>marker <span class="hl opt">= ++*</span>p<span class="hl opt">);</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>yych <span class="hl opt">==</span> <span class="hl str">'E'</span><span class="hl opt">)</span> <span class="hl kwa">goto</span> yy24<span class="hl opt">;</span>
yy3<span class="hl opt">:</span>
        <span class="hl opt">{</span> <span class="hl kwa">return</span> END<span class="hl opt">; }</span>
yy4<span class="hl opt">:</span>
        yych <span class="hl opt">= (</span><span class="hl kwb">unsigned char</span><span class="hl opt">)*(</span>marker <span class="hl opt">= ++*</span>p<span class="hl opt">);</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>yych <span class="hl opt">==</span> <span class="hl str">'U'</span><span class="hl opt">)</span> <span class="hl kwa">goto</span> yy23<span class="hl opt">;</span>
        <span class="hl kwa">goto</span> yy3<span class="hl opt">;</span>
yy5<span class="hl opt">:</span>
        yych <span class="hl opt">= (</span><span class="hl kwb">unsigned char</span><span class="hl opt">)*(</span>marker <span class="hl opt">= ++*</span>p<span class="hl opt">);</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>yych <span class="hl opt">==</span> <span class="hl str">'X'</span><span class="hl opt">)</span> <span class="hl kwa">goto</span> yy18<span class="hl opt">;</span>
        <span class="hl kwa">goto</span> yy3<span class="hl opt">;</span>
yy6<span class="hl opt">:</span>
        <span class="hl opt">++*</span>p<span class="hl opt">;</span>
        <span class="hl kwa">if</span> <span class="hl opt">((</span>yych <span class="hl opt">= (</span><span class="hl kwb">unsigned char</span><span class="hl opt">)**</span>p<span class="hl opt">) ==</span> <span class="hl str">'.'</span><span class="hl opt">)</span> <span class="hl kwa">goto</span> yy13<span class="hl opt">;</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>yych <span class="hl opt">&lt;=</span> <span class="hl str">'/'</span><span class="hl opt">)</span> <span class="hl kwa">goto</span> yy7<span class="hl opt">;</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>yych <span class="hl opt">&lt;=</span> <span class="hl str">'9'</span><span class="hl opt">)</span> <span class="hl kwa">goto</span> yy16<span class="hl opt">;</span>
yy7<span class="hl opt">:</span>
        <span class="hl opt">{</span> <span class="hl kwa">return</span> INT<span class="hl opt">; }</span>
yy8<span class="hl opt">:</span>
        <span class="hl opt">++*</span>p<span class="hl opt">;</span>
        yych <span class="hl opt">= (</span><span class="hl kwb">unsigned char</span><span class="hl opt">)**</span>p<span class="hl opt">;</span>
        <span class="hl kwa">goto</span> yy12<span class="hl opt">;</span>
yy9<span class="hl opt">:</span>
        <span class="hl opt">{</span> <span class="hl kwa">return</span> SPACE<span class="hl opt">; }</span>
yy10<span class="hl opt">:</span>
        yych <span class="hl opt">= (</span><span class="hl kwb">unsigned char</span><span class="hl opt">)*++*</span>p<span class="hl opt">;</span>
        <span class="hl kwa">goto</span> yy3<span class="hl opt">;</span>
yy11<span class="hl opt">:</span>
        <span class="hl opt">++*</span>p<span class="hl opt">;</span>
        yych <span class="hl opt">= (</span><span class="hl kwb">unsigned char</span><span class="hl opt">)**</span>p<span class="hl opt">;</span>
yy12<span class="hl opt">:</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>yych <span class="hl opt">==</span> <span class="hl str">'</span><span class="hl esc">\t</span><span class="hl str">'</span><span class="hl opt">)</span> <span class="hl kwa">goto</span> yy11<span class="hl opt">;</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>yych <span class="hl opt">==</span> <span class="hl str">' '</span><span class="hl opt">)</span> <span class="hl kwa">goto</span> yy11<span class="hl opt">;</span>
        <span class="hl kwa">goto</span> yy9<span class="hl opt">;</span>
yy13<span class="hl opt">:</span>
        <span class="hl opt">++*</span>p<span class="hl opt">;</span>
        yych <span class="hl opt">= (</span><span class="hl kwb">unsigned char</span><span class="hl opt">)**</span>p<span class="hl opt">;</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>yych <span class="hl opt">&lt;=</span> <span class="hl str">'/'</span><span class="hl opt">)</span> <span class="hl kwa">goto</span> yy15<span class="hl opt">;</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>yych <span class="hl opt">&lt;=</span> <span class="hl str">'9'</span><span class="hl opt">)</span> <span class="hl kwa">goto</span> yy13<span class="hl opt">;</span>
yy15<span class="hl opt">:</span>
        <span class="hl opt">{</span> <span class="hl kwa">return</span> FLOAT<span class="hl opt">; }</span>
yy16<span class="hl opt">:</span>
        <span class="hl opt">++*</span>p<span class="hl opt">;</span>
        yych <span class="hl opt">= (</span><span class="hl kwb">unsigned char</span><span class="hl opt">)**</span>p<span class="hl opt">;</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>yych <span class="hl opt">==</span> <span class="hl str">'.'</span><span class="hl opt">)</span> <span class="hl kwa">goto</span> yy13<span class="hl opt">;</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>yych <span class="hl opt">&lt;=</span> <span class="hl str">'/'</span><span class="hl opt">)</span> <span class="hl kwa">goto</span> yy7<span class="hl opt">;</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>yych <span class="hl opt">&lt;=</span> <span class="hl str">'9'</span><span class="hl opt">)</span> <span class="hl kwa">goto</span> yy16<span class="hl opt">;</span>
        <span class="hl kwa">goto</span> yy7<span class="hl opt">;</span>
yy18<span class="hl opt">:</span>
        yych <span class="hl opt">= (</span><span class="hl kwb">unsigned char</span><span class="hl opt">)*++*</span>p<span class="hl opt">;</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>yych <span class="hl opt">==</span> <span class="hl str">'I'</span><span class="hl opt">)</span> <span class="hl kwa">goto</span> yy20<span class="hl opt">;</span>
yy19<span class="hl opt">:</span>
        <span class="hl opt">*</span>p <span class="hl opt">=</span> marker<span class="hl opt">;</span>
        <span class="hl kwa">goto</span> yy3<span class="hl opt">;</span>
yy20<span class="hl opt">:</span>
        yych <span class="hl opt">= (</span><span class="hl kwb">unsigned char</span><span class="hl opt">)*++*</span>p<span class="hl opt">;</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>yych <span class="hl opt">!=</span> <span class="hl str">'T'</span><span class="hl opt">)</span> <span class="hl kwa">goto</span> yy19<span class="hl opt">;</span>
yy21<span class="hl opt">:</span>
        <span class="hl opt">++*</span>p<span class="hl opt">;</span>
        <span class="hl opt">{</span> <span class="hl kwa">return</span> CMD<span class="hl opt">; }</span>
yy23<span class="hl opt">:</span>
        yych <span class="hl opt">= (</span><span class="hl kwb">unsigned char</span><span class="hl opt">)*++*</span>p<span class="hl opt">;</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>yych <span class="hl opt">==</span> <span class="hl str">'T'</span><span class="hl opt">)</span> <span class="hl kwa">goto</span> yy21<span class="hl opt">;</span>
        <span class="hl kwa">goto</span> yy19<span class="hl opt">;</span>
yy24<span class="hl opt">:</span>
        <span class="hl opt">++*</span>p<span class="hl opt">;</span>
        <span class="hl kwa">if</span> <span class="hl opt">((</span>yych <span class="hl opt">= (</span><span class="hl kwb">unsigned char</span><span class="hl opt">)**</span>p<span class="hl opt">) ==</span> <span class="hl str">'T'</span><span class="hl opt">)</span> <span class="hl kwa">goto</span> yy21<span class="hl opt">;</span>
        <span class="hl kwa">goto</span> yy19<span class="hl opt">;</span>
    <span class="hl opt">}</span>

<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[]) {</span>
  <span class="hl kwb">char</span> <span class="hl opt">*</span>p<span class="hl opt">, *</span>last<span class="hl opt">;</span>
  <span class="hl kwb">int</span> token<span class="hl opt">;</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>argc <span class="hl opt">&lt;</span> <span class="hl num">2</span><span class="hl opt">)</span> <span class="hl kwa">return</span> <span class="hl num">1</span><span class="hl opt">;</span>

  p <span class="hl opt">=</span> argv<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">];</span>
  <span class="hl kwa">while</span> <span class="hl opt">((</span>token <span class="hl opt">=</span> <span class="hl kwd">scan</span><span class="hl opt">(&amp;</span>p<span class="hl opt">, &amp;</span>last<span class="hl opt">)) !=</span> END<span class="hl opt">) {</span>
    <span class="hl kwb">int</span> sz <span class="hl opt">=</span> p <span class="hl opt">-</span> last<span class="hl opt">;</span>
    <span class="hl kwa">switch</span> <span class="hl opt">(</span>token<span class="hl opt">) {</span>
      <span class="hl kwa">case</span> CMD<span class="hl opt">:</span> <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;Command: '%.*s'</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> sz<span class="hl opt">,</span> last<span class="hl opt">);</span> <span class="hl kwa">break</span><span class="hl opt">;</span>
      <span class="hl kwa">case</span> INT<span class="hl opt">:</span> <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;Number: '%.*s'</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> sz<span class="hl opt">,</span> last<span class="hl opt">);</span> <span class="hl kwa">break</span><span class="hl opt">;</span>
      <span class="hl kwa">case</span> FLOAT<span class="hl opt">:</span> <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;Float: '%.*s'</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> sz<span class="hl opt">,</span> last<span class="hl opt">);</span> <span class="hl kwa">break</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
  <span class="hl opt">}</span>

  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Страшно? Да, код не для ручной правки, но это и не требуется.</p>

<p>Компилируем:</p>

<pre><code>re2c.exe -is test.re2c &gt;test.c &amp;&amp; cl test.c
</code></pre>

<p>Запускаем:</p>

<pre><code>test &quot;GET 123.0 12344 PUT 10.&quot;
</code></pre>

<p>Результат:</p>

<pre><code>Command: 'GET'
Float: '123.0'
Number: '12344'
Command: 'PUT'
Float: '10.'
</code></pre>

<p>Как говориться, быстро, дешево и сердито. Чтобы полностью овладеть re2c надо прочитать одну и единственную <a href="http://re2c.org/manual.html">страничку документации</a>.</p>

<p>Кстати, простота работы с re2c не означает, что на нем нельзя делать сложных анализаторов. В <a href="http://sourceforge.net/projects/re2c/">дистрибутиве</a> есть примеры для грамматики токенов языков C и Rexx.</p>

<p>Если поиграться с <a href="http://re2c.org/manual.html#lbAE">флагами re2c</a>, то можно вместо <code>if/else</code> генерировать код на основе <code>switch/case</code>. Выбор стоит сделать на основе понимания, какой код ваш компилятор лучше оптимизирует.</p>

<p>Как я понимаю, анализатор, сгенерированный re2c должен быть весьма быстр, даже очень быстр. Хотя было бы интересно померить его против того же flex, <a href="http://www.antlr.org/">ANTLR</a> или <a href="http://www.boost.org/doc/libs/1_41_0/libs/spirit/doc/html/spirit/lex/tutorials/lexer_tutorials.html">Spirit</a>.</p>

<p>Посты почти по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2009/07/06/wrapper-for-lemon/">Обертка генератора парсеров грамматик Lemon для C++</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Потоки в C++ против потоков в Go]]></title>
    <link href="http://demin.ws/blog/russian/2011/04/18/boost-threads-vs-goroutines/"/>
    <updated>2011-04-18T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/04/18/boost-threads-vs-goroutines/</id>
    <content type="html"><![CDATA[<p>После <a href="http://demin.ws/blog/russian/2011/04/12/multithreading-in-go/">поста про потоки в Go</a> я прочитал <a href="http://evgeny-lazin.blogspot.com/2011/04/httpeasy-coding.html">другое мнение</a> про общую целесообразность Go в плане продвинутости в многопоточном программировании.</p>

<p>Признаюсь, я не боец в бусте и новом C++, но благодаря <a href="http://pastebin.com/kwq0cj4v">предоставленному примеру</a>, было очевидно, что и на С++ решение получается весьма изящное.</p>

<p>Интересно было сравнить производительнось потоков во обоих языках в плане скорости из создания и назначения им работы. Как я понял, это битва между pthreads и системой Go-рутин, которые не являются потоками операционной системы. Как <a href="http://golang.org/doc/effective_go.html#goroutines">сказано в документации</a>:</p>

<p><em>Goroutines are multiplexed onto multiple OS threads so if one should block, such as while waiting for I/O, others continue to run. Their design hides many of the complexities of thread creation and management.</em></p>

<p>Я взял последний boost, и на той же восьми процессорной машине провел эксперимент.</p>

<p>Программе надо будет выполнить множество однотипной работы (фактически, вызвать функцию). Задачи будут мультиплексироваться между несколькими параллельными потоками. Сама функция будет элементарной и быстрой. Надеюсь, этим удастся сфокусировать тестирование именно на подсистеме потоков, нежели на полезной нагрузке.</p>

<p>Итак, программа на Go:</p>

<pre class="hl">
<span class="hl kwa">package</span> main

<span class="hl kwa">import</span> <span class="hl opt">(</span>
        <span class="hl str">&quot;flag&quot;</span>
        <span class="hl str">&quot;fmt&quot;</span>
<span class="hl opt">)</span>

<span class="hl kwa">var</span> jobs <span class="hl opt">*</span><span class="hl kwb">int</span> <span class="hl opt">=</span> flag<span class="hl opt">.</span><span class="hl kwd">Int</span><span class="hl opt">(</span><span class="hl str">&quot;jobs&quot;</span><span class="hl opt">,</span> <span class="hl num">8</span><span class="hl opt">,</span> <span class="hl str">&quot;number of concurrent jobs&quot;</span><span class="hl opt">)</span>
<span class="hl kwa">var</span> n <span class="hl opt">*</span><span class="hl kwb">int</span> <span class="hl opt">=</span> flag<span class="hl opt">.</span><span class="hl kwd">Int</span><span class="hl opt">(</span><span class="hl str">&quot;tasks&quot;</span><span class="hl opt">,</span> <span class="hl num">1000000</span><span class="hl opt">,</span> <span class="hl str">&quot;number of tasks&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">func</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
        flag<span class="hl opt">.</span><span class="hl kwd">Parse</span><span class="hl opt">()</span>

        fmt<span class="hl opt">.</span><span class="hl kwd">Printf</span><span class="hl opt">(</span><span class="hl str">&quot;- running %d concurrent job(s)</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">, *</span>jobs<span class="hl opt">)</span>
        fmt<span class="hl opt">.</span><span class="hl kwd">Printf</span><span class="hl opt">(</span><span class="hl str">&quot;- running %d tasks</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">, *</span>n<span class="hl opt">)</span>
        tasks <span class="hl opt">:=</span> <span class="hl kwb">make</span><span class="hl opt">(</span><span class="hl kwa">chan</span> <span class="hl kwb">int</span><span class="hl opt">, *</span>jobs<span class="hl opt">)</span>
        done <span class="hl opt">:=</span> <span class="hl kwb">make</span><span class="hl opt">(</span><span class="hl kwa">chan</span> <span class="hl kwb">bool</span><span class="hl opt">)</span>

        <span class="hl kwa">for</span> i <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt; *</span>jobs<span class="hl opt">;</span> i<span class="hl opt">++ {</span>
                <span class="hl kwa">go</span> <span class="hl kwd">runner</span><span class="hl opt">(</span>tasks<span class="hl opt">,</span> done<span class="hl opt">)</span>
        <span class="hl opt">}</span>

        <span class="hl kwa">for</span> i <span class="hl opt">:=</span> <span class="hl num">1</span><span class="hl opt">;</span> i <span class="hl opt">&lt;= *</span>n<span class="hl opt">;</span> i<span class="hl opt">++ {</span>
                tasks <span class="hl opt">&lt;-</span> i
        <span class="hl opt">}</span>

        <span class="hl kwa">for</span> i <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt; *</span>jobs<span class="hl opt">;</span> i<span class="hl opt">++ {</span>
                tasks <span class="hl opt">&lt;-</span> <span class="hl num">0</span>
                <span class="hl opt">&lt;-</span> done
        <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwa">func</span> <span class="hl kwd">runner</span><span class="hl opt">(</span>tasks <span class="hl kwa">chan</span> <span class="hl kwb">int</span><span class="hl opt">,</span> done <span class="hl kwa">chan</span> <span class="hl kwb">bool</span><span class="hl opt">) {</span>
        <span class="hl kwa">for</span> <span class="hl opt">{</span>
                <span class="hl kwa">if</span> arg <span class="hl opt">:= &lt;-</span> tasks<span class="hl opt">;</span> arg <span class="hl opt">==</span> <span class="hl num">0</span> <span class="hl opt">{</span>
                        <span class="hl kwa">break</span>
                <span class="hl opt">}</span>
                <span class="hl kwd">worker</span><span class="hl opt">()</span>
        <span class="hl opt">}</span>
        done <span class="hl opt">&lt;-</span> <span class="hl kwb">true</span>
<span class="hl opt">}</span>

<span class="hl kwa">func</span> <span class="hl kwd">worker</span><span class="hl opt">()</span> <span class="hl kwb">int</span> <span class="hl opt">{</span>
        <span class="hl kwa">return</span> <span class="hl num">0</span>
<span class="hl opt">}</span>
</pre>

<p>Makefile для прогона по серии параметров:</p>

<pre class="hl">
target <span class="hl opt">=</span> go_threading

<span class="hl kwa">all</span><span class="hl opt">:</span> build

build<span class="hl opt">:</span>
        <span class="hl num">6</span>g <span class="hl opt">$(</span>target<span class="hl opt">)</span>.go
        <span class="hl num">6l</span> <span class="hl opt">-</span>o <span class="hl opt">$(</span>target<span class="hl opt">) $(</span>target<span class="hl opt">)</span><span class="hl num">.6</span>

run<span class="hl opt">:</span>
        <span class="hl opt">(</span>time <span class="hl opt">-</span>p .<span class="hl opt">/$(</span>target<span class="hl opt">) -</span>tasks<span class="hl opt">=$(</span>args<span class="hl opt">)</span> \
                <span class="hl num">1</span><span class="hl opt">&gt;/</span>dev<span class="hl opt">/</span>null<span class="hl opt">)</span> <span class="hl num">2</span><span class="hl opt">&gt;&amp;</span><span class="hl num">1</span> | head <span class="hl opt">-</span><span class="hl num">1</span> | awk <span class="hl str">'{ print $$2 }'</span>

n <span class="hl opt">=</span> \
<span class="hl num">10000</span> \
<span class="hl num">100000</span> \
<span class="hl num">1000000</span> \
<span class="hl num">10000000</span> \
<span class="hl num">100000000</span>

<span class="hl kwa">test</span><span class="hl opt">:</span>
        &#64;for i in <span class="hl opt">$(</span>n<span class="hl opt">);</span> do \
                echo <span class="hl str">&quot;`printf '% 10d' $$i`&quot;</span> <span class="hl str">`$(MAKE) args=$$i run`</span><span class="hl opt">;</span> \
        done
</pre>

<p>Программа на C++:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;iostream&gt;</span>
<span class="hl ppc">#include &lt;boost/thread.hpp&gt;</span>
<span class="hl ppc">#include &lt;boost/bind.hpp&gt;</span>
<span class="hl ppc">#include &lt;queue&gt;</span>
<span class="hl ppc">#include &lt;string&gt;</span>
<span class="hl ppc">#include &lt;sstream&gt;</span>

<span class="hl kwc">class</span> thread_pool <span class="hl opt">{</span>

  <span class="hl kwc">typedef</span> boost<span class="hl opt">::</span>function0<span class="hl opt">&lt;</span><span class="hl kwb">void</span><span class="hl opt">&gt;</span> worker<span class="hl opt">;</span>

  boost<span class="hl opt">::</span>thread_group threads_<span class="hl opt">;</span>
  std<span class="hl opt">::</span>queue<span class="hl opt">&lt;</span>worker<span class="hl opt">&gt;</span> queue_<span class="hl opt">;</span>
  boost<span class="hl opt">::</span>mutex mutex_<span class="hl opt">;</span>
  boost<span class="hl opt">::</span>condition_variable cv_<span class="hl opt">;</span>
  <span class="hl kwb">bool</span> done_<span class="hl opt">;</span>

 <span class="hl kwc">public</span><span class="hl opt">:</span>

  <span class="hl kwd">thread_pool</span><span class="hl opt">() :</span> <span class="hl kwd">done_</span><span class="hl opt">(</span><span class="hl kwa">false</span><span class="hl opt">) {</span>
    <span class="hl kwa">for</span><span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> boost<span class="hl opt">::</span>thread<span class="hl opt">::</span><span class="hl kwd">hardware_concurrency</span><span class="hl opt">(); ++</span>i<span class="hl opt">)</span>
      threads_<span class="hl opt">.</span><span class="hl kwd">create_thread</span><span class="hl opt">(</span>boost<span class="hl opt">::</span><span class="hl kwd">bind</span><span class="hl opt">(&amp;</span>thread_pool<span class="hl opt">::</span>run<span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">));</span>
  <span class="hl opt">}</span>

  <span class="hl kwb">void</span> <span class="hl kwd">join</span><span class="hl opt">() {</span>
    threads_<span class="hl opt">.</span><span class="hl kwd">join_all</span><span class="hl opt">();</span>
  <span class="hl opt">}</span>

  <span class="hl kwb">void</span> <span class="hl kwd">run</span><span class="hl opt">() {</span>
    <span class="hl kwa">while</span> <span class="hl opt">(</span><span class="hl kwa">true</span><span class="hl opt">) {</span>
      worker job<span class="hl opt">;</span>
      <span class="hl opt">{</span>
        boost<span class="hl opt">::</span>mutex<span class="hl opt">::</span>scoped_lock <span class="hl kwd">lock</span><span class="hl opt">(</span>mutex_<span class="hl opt">);</span>
        <span class="hl kwa">while</span> <span class="hl opt">(</span>queue_<span class="hl opt">.</span><span class="hl kwd">empty</span><span class="hl opt">() &amp;&amp; !</span>done_<span class="hl opt">)</span>
          cv_<span class="hl opt">.</span><span class="hl kwd">wait</span><span class="hl opt">(</span>lock<span class="hl opt">);</span>

        <span class="hl kwa">if</span> <span class="hl opt">(</span>queue_<span class="hl opt">.</span><span class="hl kwd">empty</span><span class="hl opt">() &amp;&amp;</span> done_<span class="hl opt">)</span> <span class="hl kwa">return</span><span class="hl opt">;</span>

        job <span class="hl opt">=</span> queue_<span class="hl opt">.</span><span class="hl kwd">front</span><span class="hl opt">();</span>
        queue_<span class="hl opt">.</span><span class="hl kwd">pop</span><span class="hl opt">();</span>
      <span class="hl opt">}</span>
      <span class="hl kwd">execute</span><span class="hl opt">(</span>job<span class="hl opt">);</span>
    <span class="hl opt">}</span>
  <span class="hl opt">}</span>

  <span class="hl kwb">void</span> <span class="hl kwd">execute</span><span class="hl opt">(</span><span class="hl kwb">const</span> worker<span class="hl opt">&amp;</span> job<span class="hl opt">) {</span>
    <span class="hl kwd">job</span><span class="hl opt">();</span>
  <span class="hl opt">}</span>

  <span class="hl kwb">void</span> <span class="hl kwd">add</span><span class="hl opt">(</span><span class="hl kwb">const</span> worker<span class="hl opt">&amp;</span> job<span class="hl opt">) {</span>
    boost<span class="hl opt">::</span>mutex<span class="hl opt">::</span>scoped_lock <span class="hl kwd">lock</span><span class="hl opt">(</span>mutex_<span class="hl opt">);</span>
    queue_<span class="hl opt">.</span><span class="hl kwd">push</span><span class="hl opt">(</span>job<span class="hl opt">);</span>
    cv_<span class="hl opt">.</span><span class="hl kwd">notify_one</span><span class="hl opt">();</span>
  <span class="hl opt">}</span>

  <span class="hl kwb">void</span> <span class="hl kwd">finish</span><span class="hl opt">() {</span>
    boost<span class="hl opt">::</span>mutex<span class="hl opt">::</span>scoped_lock <span class="hl kwd">lock</span><span class="hl opt">(</span>mutex_<span class="hl opt">);</span>
    done_ <span class="hl opt">=</span> <span class="hl kwa">true</span><span class="hl opt">;</span>
    cv_<span class="hl opt">.</span><span class="hl kwd">notify_all</span><span class="hl opt">();</span>
  <span class="hl opt">}</span>
<span class="hl opt">};</span>

<span class="hl kwb">void</span> <span class="hl kwd">task</span><span class="hl opt">() {</span>
  <span class="hl kwc">volatile</span> <span class="hl kwb">int</span> r <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[]) {</span>
  thread_pool pool<span class="hl opt">;</span>
  <span class="hl kwb">int</span> n <span class="hl opt">=</span> argc <span class="hl opt">&gt;</span> <span class="hl num">1</span> ? std<span class="hl opt">::</span><span class="hl kwd">atoi</span><span class="hl opt">(</span>argv<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]) :</span> <span class="hl num">10000</span><span class="hl opt">;</span>

  <span class="hl kwb">int</span> threads <span class="hl opt">=</span> boost<span class="hl opt">::</span>thread<span class="hl opt">::</span><span class="hl kwd">hardware_concurrency</span><span class="hl opt">();</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;- executing &quot;</span> <span class="hl opt">&lt;&lt;</span> threads <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot; concurrent job(s)&quot;</span> <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;- running &quot;</span> <span class="hl opt">&lt;&lt;</span> n <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot; tasks&quot;</span> <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> n<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
    pool<span class="hl opt">.</span><span class="hl kwd">add</span><span class="hl opt">(</span>task<span class="hl opt">);</span>
  <span class="hl opt">}</span>

  pool<span class="hl opt">.</span><span class="hl kwd">finish</span><span class="hl opt">();</span>
  pool<span class="hl opt">.</span><span class="hl kwd">join</span><span class="hl opt">();</span>

  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Makefile:</p>

<pre class="hl">
BOOST <span class="hl opt">=</span> ~<span class="hl opt">/</span>opt<span class="hl opt">/</span>boost-1.46<span class="hl num">.1</span>

target <span class="hl opt">=</span> boost_threading

build<span class="hl opt">:</span>
        g<span class="hl opt">++ -</span>O2 <span class="hl opt">-</span>I <span class="hl opt">$(</span>BOOST<span class="hl opt">) -</span>o <span class="hl opt">$(</span>target<span class="hl opt">)</span> \
                <span class="hl opt">-</span>lpthread \
                <span class="hl opt">-</span>lboost_thread \
                 <span class="hl opt">-</span>L <span class="hl opt">$(</span>BOOST<span class="hl opt">)/</span>stage<span class="hl opt">/</span>lib \
                <span class="hl opt">$(</span>target<span class="hl opt">)</span>.<span class="hl kwa">cpp</span>

run<span class="hl opt">:</span>
        <span class="hl opt">(</span>time <span class="hl opt">-</span>p LD_LIBRARY_PATH<span class="hl opt">=$(</span>BOOST<span class="hl opt">)/</span>stage<span class="hl opt">/</span>lib .<span class="hl opt">/$(</span>target<span class="hl opt">) $(</span>args<span class="hl opt">)</span> \
                <span class="hl num">1</span><span class="hl opt">&gt;/</span>dev<span class="hl opt">/</span>null<span class="hl opt">)</span> <span class="hl num">2</span><span class="hl opt">&gt;&amp;</span><span class="hl num">1</span> | head <span class="hl opt">-</span><span class="hl num">1</span> | awk <span class="hl str">'{ print $$2 }'</span>

n <span class="hl opt">=</span> \
<span class="hl num">10000</span> \
<span class="hl num">100000</span> \
<span class="hl num">1000000</span> \
<span class="hl num">10000000</span> \
<span class="hl num">100000000</span>

<span class="hl kwa">test</span><span class="hl opt">:</span>
        &#64;for i in <span class="hl opt">$(</span>n<span class="hl opt">);</span> do \
                echo <span class="hl str">&quot;`printf '% 10d' $$i`&quot;</span> <span class="hl str">`$(MAKE) args=$$i run`</span><span class="hl opt">;</span> \
        done
</pre>

<p>В обоих языках число потоков будет равно количеству процессоров - 8. Количество задач, прогоняемых через эти восемь поток будет варьироваться.</p>

<p>Запускаем программу на C++:</p>

<pre><code>make &amp;&amp; make -s test

g++ -O2 -I ~/opt/boost-1.46.1 -o boost_threading \
                -lpthread \
                -lboost_thread \
                 -L ~/opt/boost-1.46.1/stage/lib \
                boost_threading.cpp
(time -p LD_LIBRARY_PATH=~/opt/boost-1.46.1/stage/lib ./boost_threading  \
                1&gt;/dev/null) 2&gt;&amp;1 | head -1 | awk '{ print $2 }'
     10000 0.03
    100000 0.35
   1000000 3.43
  10000000 29.57
 100000000 327.37
</code></pre>

<p>Теперь Go:</p>

<pre><code>make &amp;&amp; make -s test

6g go_threading.go
6l -o go_threading go_threading.6
     10000 0.00
    100000 0.03
   1000000 0.35
  10000000 3.72
 100000000 38.27
</code></pre>

<p>Разница очевидна.</p>

<p>Может быть я сравниваю соленое с красным, и результаты просто неадекватны. Будет очень признателен за подсказку, в каких попугаях на правильно измерять.</p>

<p>Посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2011/04/12/multithreading-in-go/">Пример многопоточного программирования в Go</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Test Framework 1.6.0]]></title>
    <link href="http://demin.ws/blog/russian/2011/04/18/google-test-framework-160/"/>
    <updated>2011-04-18T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/04/18/google-test-framework-160/</id>
    <content type="html"><![CDATA[<p>Только что вышла <a href="http://code.google.com/p/googletest/downloads/list">новая версия</a> отличной библиотеки для unit-тестирования на С++ - Google C++ Testing Framework.</p>

<p>Вот список изменений:</p>

<ul>
<li>New feature: ADD_FAILURE_AT() for reporting a test failure at the given source location &ndash; useful for writing testing utilities.</li>
<li>New feature: the universal value printer is moved from Google Mock to Google Test.</li>
<li>New feature: type parameters and value parameters are reported in the XML report now.</li>
<li>A gtest_disable_pthreads CMake option.</li>
<li>Colored output works in GNU Screen sessions now.</li>
<li>Parameters of value-parameterized tests are now printed in the textual output.</li>
<li>Failures from ad hoc test assertions run before RUN_ALL_TESTS() are now correctly reported.</li>
<li>Arguments of ASSERT_XY and EXPECT_XY no longer need to support &lt;&lt; to ostream.</li>
<li>More complete handling of exceptions.</li>
<li>GTEST_ASSERT_XY can be used instead of ASSERT_XY in case the latter name is already used by another library.</li>
<li>&ndash;gtest_catch_exceptions is now true by default, allowing a test program to continue after an exception is thrown.</li>
<li>Value-parameterized test fixtures can now derive from Test and</li>
<li>WithParamInterface<T> separately, easing conversion of legacy tests.</li>
<li>Death test messages are clearly marked to make them more distinguishable from other messages.</li>
<li>Compatibility fixes for Android, Google Native Client, MinGW, HP UX, PowerPC, Lucid autotools, libCStd, Sun C++, Borland C++ Builder (Code Gear), IBM XL C++ (Visual Age C++), and C++0x.</li>
<li>Bug fixes and implementation clean-ups.</li>
<li>Potentially incompatible changes: disables the harmful &lsquo;make install&rsquo; command in autotools.</li>
</ul>

<p><a href="http://code.google.com/p/googletest/source/browse/trunk/CHANGES">Полная история версий Google Test</a>.</p>

<p>Каких-то радикально новых возможностей вроде нет, но исправлено несколько неприятных багов.</p>

<p>Лично я очень ждал исправления мелких, но неприятных несовместимостей с компиляторами HP-UX, Sun и AIX.</p>

<p>Посты по теме и почти по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2010/04/16/google-test-framework-150/">Google Test Framework 1.5.0</a></li>
<li><a href="http://demin.ws/blog/russian/2009/10/03/google-test-framework-140/">Google Test Framework 1.4.0</a></li>
<li><a href="http://demin.ws/blog/russian/2009/03/19/google-test-framework-130/">Google Test Framework 1.3.0</a></li>
<li><a href="http://demin.ws/blog/russian/2009/07/15/googletest-for-beginners-in-russian/">Руководство для начинающих по Google Test на русском</a></li>
<li><a href="http://demin.ws/blog/russian/2009/10/13/googlemock-for-beginner-in-russian/">Руководство для начинающих по Google Mock на русском</a></li>
<li><a href="http://demin.ws/blog/russian/2009/10/07/google-test-framework-authors-presentation/">Презентация от авторов Google C++ Testing Framework</a></li>
<li><a href="http://demin.ws/blog/russian/2009/10/15/introduction-to-googlemock-talk/">Введение в Google Mock (видео)</a></li>
</ul>

<p><strong>UPDATE</strong></p>

<p>По ходу вышел еще и Google Mock 1.6.0.</p>

<p>Что нового тут:</p>

<ul>
<li>Compilation is much faster and uses much less memory, especially when the constructor and destructor of a mock class are moved out of the class body.</li>
<li>New matchers: Pointwise(), Each().</li>
<li>New actions: ReturnPointee() and ReturnRefOfCopy().</li>
<li>CMake support.</li>
<li>Project files for Visual Studio 2010.</li>
<li>AllOf() and AnyOf() can handle up-to 10 arguments now.</li>
<li>Google Mock doctor understands Clang error messages now.</li>
<li>SetArgPointee&lt;&gt; now accepts string literals.</li>
<li>gmock_gen.py handles storage specifier macros and template return types now.</li>
<li>Compatibility fixes.</li>
<li>Bug fixes and implementation clean-ups.</li>
<li>Potentially incompatible changes: disables the harmful &lsquo;make install&rsquo; command in autotools.</li>
</ul>

<p><a href="http://code.google.com/p/googlemock/source/browse/trunk/CHANGES">Полная история версий Google Mock</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Конференция ACCU 2011]]></title>
    <link href="http://demin.ws/blog/russian/2011/04/12/accu-2011-conference/"/>
    <updated>2011-04-12T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/04/12/accu-2011-conference/</id>
    <content type="html"><![CDATA[<p>Хоть на Google I/O в этом году не получилось попасть, так как все было распродано менее чем за час, есть другие интересные конференции.</p>

<p>Например, <a href="http://accu.org/index.php/conferences/accu_conference_2011">ACCU 2011</a>. Место проведения от моего офиса всего в часе езды, не пришлось платить за гостиницу.</p>

<p>Тематики <a href="http://accu.org/index.php/conferences/accu_conference_2011/accu2011_schedule">сессий</a> весьма разнообразные.</p>

<p>Сегодня я посетил:</p>

<ul>
<li><p><a href="http://accu.org/index.php/conferences/accu_conference_2011/accu2011_speakers#Peter%20Pilgrim">Introduction to Scala</a>. До этого я про язык Scala только название, поэтому это были весьма полезные полтора часа. Если вы любите Java, но вам не хватает функциональных примочек типа списковых выражений, currying, pattern matching, call by name и более краткого синтаксиса в целом, но при этом вы хотите иметь обьектно- и функционально- ориентированный язык, компилирующий для JVM, то Scala - это самое оно. Хотя лично у меня впечатление неоднозначное из-за дикой перегруженности языка наворотами, из-за которой для &ldquo;правильного программирования&rdquo; надо также овладеть &ldquo;правильными шаблонами&rdquo;. А тут уже какой-то С++ получается. Сама презентация была весьма живая и информативная. Для интересующихся - <a href="http://www.xenonique.co.uk/blog/">блог автора</a>.</p></li>

<li><p><a href="http://accu.org/index.php/conferences/accu_conference_2011/accu2011_speakers#Juha-Pekka%20Tolvanen">Worst practices for creating domain-specific modelling languages</a>. Не самая захватывающая, но таки полезная презентация о том, почему и как создаются проблемно ориентированные языки.</p></li>

<li><p><a href="http://accu.org/index.php/conferences/accu_conference_2011/accu2011_speakers#Eleanor%20McHugh">GoLightly: Building VM-based Language Runtimes In Go</a>. Меня презентация реально вставила. Тетка отожгла неимоверно. За полтора часа она умудрилась дать очень понятную вводную по ключевым возможностям Go, успев даже коснуться недокументированных модулей типа &ldquo;unsafe&rdquo; и показать как можно обойти стройную систему безопасной типизации в Go, и затем описала свой проект по моделированию разных процессорных архитектур на этом языке. Ниже есть слайды ее презентации, но к сожалению в них нет той части про надругательноство на системой типов в Go. Может она выложит обновленную версию сегодня-завтра.</p></li>
</ul>

<div style="width:425px" id="__ss_5446102"><iframe src="http://www.slideshare.net/slideshow/embed_code/5446102" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe></div>

<p>Завтра хочу сходить на &ldquo;<a href="http://accu.org/index.php/conferences/accu_conference_2011/accu2011_sessions#Distributed%20Computing%202.0">Distributed Computing 2.0</a>&rdquo;, &ldquo;<a href="http://accu.org/index.php/conferences/accu_conference_2011/accu2011_sessions#ComputErl%20-%20Erlang-based%20Framework%20for%20Many%20Task%20Computing">ComputErl - Erlang-based Framework for Many Task Computing</a>&rdquo;, &ldquo;<a href="http://accu.org/index.php/conferences/accu_conference_2011/accu2011_sessions#CPU%20Caches%20and%20Why%20You%20Care">CPU Caches and Why You Care</a>&rdquo; Скотта Меерса.</p>

<p>Кстати, чтобы уж два раза не вставать, в последнем выпуске ACCU&rsquo;шного журнала CVu была моя статейка &ldquo;<a href="http://accu.org/var/uploads/journals/cvu241.pdf">The First Little Step into Test-Driven Development</a>&rdquo; (так как электронная версия журнала находится в платной части сайта, то я выложил только страницы с моей статьей).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Пример многопоточного программирования в Go]]></title>
    <link href="http://demin.ws/blog/russian/2011/04/12/multithreading-in-go/"/>
    <updated>2011-04-12T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/04/12/multithreading-in-go/</id>
    <content type="html"><![CDATA[<p>Возникла задача: у нас есть компилятор собственного языка программирования, которым мы компилируем некоторый диалект бейсика в исходник на C.</p>

<p>К сожалению, по историческим причинам, у нас не было четкого регрессионного тестирования для этого компилятора. Но сейчас, на основе исходников бизнес-приложения, написанного на этом бейсике, решили сделать полноценное тестирование.</p>

<p>План таков: принять какую-то текущую версию компилятора, на которую нет открытых жалоб от клиентов, за эталон. Скомпилировать этой версией приличное количество исходников, сохранить результат, и затем каждый раз при внесении в компилятор изменений прогонять все эти исходники и смотреть, генерируется ли точно такой же вывод. Это не защитит от появления ошибок в целом, но по крайне мере будет уверенность, что существующий бизнес код все еще компилируется правильно.</p>

<p>Несложная задача. Только есть одно &ldquo;но&rdquo;. Количество исходников, которые планируется использовать как эталонные - около 15 тысяч файлов, суммарным объемом чуть меньше гига (для удобства они завернуты в один TAR). Подобный &ldquo;прогон&rdquo; может быть весьма долгим. И есть естественное желание сделать тест максимально быстрым, используя многопроцессорную машину, ибо задача прекрасно распараллеливается.</p>

<p>Как вариант - можно сделать Makefile и запускать его с ключом <code>-j</code> в GNU Make. Но если написать специализированную многопоточную программу, то можно достичь лучшей производительности.</p>

<p>Итак, очевидно: вместо последовательного выполнения нужно запускать компиляцию каждого файла в параллельных потоках. Но так как файлов много (~15 тысяч), неэффективно просто одновременно запустить столько много потоков. Разумнее всего будет иметь пул потоков, где их количество будет определяться, например, количеством процессоров (например, умноженное на 2). Пул будет назначать очередную задачу на свободный поток, и если все потоки заняты, он будет блокироваться до тех пор, пока не появиться свободный.</p>

<p>Таким образом, мы будем поддерживать занятыми N потоков, обеспечивая оптимальную загрузку процессоров, не тратя время на лишние переключения контекста и постоянное создание и уничтожение потоков.</p>

<p>Сначала я решил написать все на С++ и pthreads. После нескольких часов танцов вокруг функторов, мьютексов, семафоров и условных переменных, у меня так ничего реально работающего не вышло. И тут я вспомнил про Go. Не поверите - через час работы у меня была готова первая версия, включая мелочевку типа работы с TAR, командной строкой и запуском внешнего процесса.</p>

<p>Итак: данная программа берет TAR с исходниками, распаковывает его, и каждый файл прогоняет через компилятор.</p>

<p>Сразу скажу, цель того, что я все это пишу тут, это продемонстрировать (и не более того), как просто и удобно на Go можно писать многопоточные императивные программы.</p>

<p>Главная концепция, которая используется в этой программе - это <a href="http://golang.org/doc/effective_go.html#channels">каналы</a>. По каналам можно синхронно передавать данные и функции между потоками (<a href="http://golang.org/doc/effective_go.html#goroutines">Go-рутинами</a>).</p>

<p>Далее, можно просто смотреть по исходнику. Самое интересное место там, где видно, как функция &ldquo;compile()&rdquo; может вызываться из нескольких потоков без каких-либо изменений.</p>

<pre class="hl">
<span class="hl kwa">package</span> main

<span class="hl kwa">import</span> <span class="hl opt">(</span>
        <span class="hl str">&quot;archive/tar&quot;</span>
        <span class="hl str">&quot;container/vector&quot;</span>
        <span class="hl str">&quot;exec&quot;</span>
        <span class="hl str">&quot;flag&quot;</span>
        <span class="hl str">&quot;fmt&quot;</span>
        <span class="hl str">&quot;io&quot;</span>
        <span class="hl str">&quot;os&quot;</span>
        <span class="hl str">&quot;strings&quot;</span>
<span class="hl opt">)</span>

<span class="hl slc">// Два флага: количество потоков и имя компилятора.</span>
<span class="hl kwa">var</span> jobs <span class="hl opt">*</span><span class="hl kwb">int</span> <span class="hl opt">=</span> flag<span class="hl opt">.</span><span class="hl kwd">Int</span><span class="hl opt">(</span><span class="hl str">&quot;jobs&quot;</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl str">&quot;number of concurrent jobs&quot;</span><span class="hl opt">)</span>
<span class="hl kwa">var</span> compiler <span class="hl opt">*</span><span class="hl kwb">string</span> <span class="hl opt">=</span> flag<span class="hl opt">.</span><span class="hl kwd">String</span><span class="hl opt">(</span><span class="hl str">&quot;cc&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;bcom&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;compiler name&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">func</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
        flag<span class="hl opt">.</span><span class="hl kwd">Parse</span><span class="hl opt">()</span>
        os<span class="hl opt">.</span>Args <span class="hl opt">=</span> flag<span class="hl opt">.</span><span class="hl kwd">Args</span><span class="hl opt">()</span>
        args <span class="hl opt">:=</span> os<span class="hl opt">.</span>Args

        ar <span class="hl opt">:=</span> args<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]</span>
        r<span class="hl opt">,</span> err <span class="hl opt">:=</span> os<span class="hl opt">.</span><span class="hl kwd">Open</span><span class="hl opt">(</span>ar<span class="hl opt">,</span> os<span class="hl opt">.</span>O_RDONLY<span class="hl opt">,</span> <span class="hl num">0666</span><span class="hl opt">);</span>
        <span class="hl kwa">if</span> err <span class="hl opt">!=</span> <span class="hl kwb">nil</span> <span class="hl opt">{</span>
                fmt<span class="hl opt">.</span><span class="hl kwd">Printf</span><span class="hl opt">(</span><span class="hl str">&quot;unable to open TAR %s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> ar<span class="hl opt">)</span>
                os<span class="hl opt">.</span><span class="hl kwd">Exit</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">)</span>
        <span class="hl opt">}</span>
        <span class="hl slc">// defer - это аналог &quot;finally {}&quot;, гарантированное выполнение</span>
        <span class="hl slc">// кода при выходе из блока.</span>
        <span class="hl kwa">defer</span> r<span class="hl opt">.</span><span class="hl kwd">Close</span><span class="hl opt">()</span>

        <span class="hl slc">// Цикл распаковки TAR.</span>
        fmt<span class="hl opt">.</span><span class="hl kwd">Printf</span><span class="hl opt">(</span><span class="hl str">&quot;- extracting %s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> ar<span class="hl opt">)</span>
        <span class="hl slc">// Создаем контекст для распаковки.</span>
        tr <span class="hl opt">:=</span> tar<span class="hl opt">.</span><span class="hl kwd">NewReader</span><span class="hl opt">(</span>r<span class="hl opt">)</span>
        tests <span class="hl opt">:=</span> <span class="hl kwb">new</span><span class="hl opt">(</span>vector<span class="hl opt">.</span>StringVector<span class="hl opt">)</span>
        <span class="hl slc">// Последовательный проход по архиву, сохранение файлов и составление</span>
        <span class="hl slc">// списка для компиляции.</span>
        <span class="hl kwa">for</span> <span class="hl opt">{</span>
                <span class="hl slc">// Получаем дескриптор следующего файла в архиве.</span>
                hdr<span class="hl opt">,</span> _ <span class="hl opt">:=</span> tr<span class="hl opt">.</span><span class="hl kwd">Next</span><span class="hl opt">()</span>
                <span class="hl kwa">if</span> hdr <span class="hl opt">==</span> <span class="hl kwb">nil</span> <span class="hl opt">{</span>
                        <span class="hl kwa">break</span>
                <span class="hl opt">}</span>
                name <span class="hl opt">:= &amp;</span>hdr<span class="hl opt">.</span>Name
                <span class="hl slc">// Если это не заголовочный файл, сохраним имя.</span>
                <span class="hl kwa">if</span> <span class="hl opt">!</span>strings<span class="hl opt">.</span><span class="hl kwd">HasPrefix</span><span class="hl opt">(*</span>name<span class="hl opt">,</span> <span class="hl str">&quot;HDR_&quot;</span><span class="hl opt">) {</span>
                        tests<span class="hl opt">.</span><span class="hl kwd">Push</span><span class="hl opt">(*</span>name<span class="hl opt">)</span>
                <span class="hl opt">}</span>
                <span class="hl slc">// Создаем новый файл.</span>
                w<span class="hl opt">,</span> err <span class="hl opt">:=</span> os<span class="hl opt">.</span><span class="hl kwd">Open</span><span class="hl opt">(</span><span class="hl str">&quot;data/&quot;</span> <span class="hl opt">+ *</span>name<span class="hl opt">,</span> os<span class="hl opt">.</span>O_CREAT | os<span class="hl opt">.</span>O_RDWR<span class="hl opt">,</span> <span class="hl num">0666</span><span class="hl opt">)</span>
                <span class="hl kwa">if</span> err <span class="hl opt">!=</span> <span class="hl kwb">nil</span> <span class="hl opt">{</span>
                        fmt<span class="hl opt">.</span><span class="hl kwd">Printf</span><span class="hl opt">(</span><span class="hl str">&quot;unable to create %s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">, *</span>name<span class="hl opt">)</span>
                        os<span class="hl opt">.</span><span class="hl kwd">Exit</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">)</span>
                <span class="hl opt">}</span>
                <span class="hl slc">// Копируем содержимое в текущий файл.</span>
                io<span class="hl opt">.</span><span class="hl kwd">Copy</span><span class="hl opt">(</span>w<span class="hl opt">,</span> tr<span class="hl opt">)</span>
                w<span class="hl opt">.</span><span class="hl kwd">Close</span><span class="hl opt">()</span>
        <span class="hl opt">}</span>

        fmt<span class="hl opt">.</span><span class="hl kwd">Printf</span><span class="hl opt">(</span><span class="hl str">&quot;- compiling...</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">)</span>
        <span class="hl opt">*</span>compiler <span class="hl opt">,</span> _ <span class="hl opt">=</span> exec<span class="hl opt">.</span><span class="hl kwd">LookPath</span><span class="hl opt">(*</span>compiler<span class="hl opt">)</span>
        fmt<span class="hl opt">.</span><span class="hl kwd">Printf</span><span class="hl opt">(</span><span class="hl str">&quot;- compiler %s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">, *</span>compiler<span class="hl opt">)</span>

        <span class="hl kwa">if</span> <span class="hl opt">*</span>jobs <span class="hl opt">==</span> <span class="hl num">0</span> <span class="hl opt">{</span>
                <span class="hl slc">// Вызываем &quot;compile()&quot; последовательно, в основном потоке.</span>
                fmt<span class="hl opt">.</span><span class="hl kwd">Printf</span><span class="hl opt">(</span><span class="hl str">&quot;- running sequentially</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">)</span>
                <span class="hl kwa">for</span> i <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> tests<span class="hl opt">.</span><span class="hl kwd">Len</span><span class="hl opt">();</span> i<span class="hl opt">++ {</span>
                        <span class="hl kwd">compile</span><span class="hl opt">(</span>tests<span class="hl opt">.</span><span class="hl kwd">At</span><span class="hl opt">(</span>i<span class="hl opt">))</span>
                <span class="hl opt">}</span>
        <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
                <span class="hl slc">// Запускаем &quot;compile()&quot; в параллельных потоках.</span>
                fmt<span class="hl opt">.</span><span class="hl kwd">Printf</span><span class="hl opt">(</span><span class="hl str">&quot;- running %d concurrent job(s)</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">, *</span>jobs<span class="hl opt">)</span>

                <span class="hl slc">// Канал задач: в этот канал мы будем класть имена файлов,</span>
                <span class="hl slc">// которые надо скомпилировать. Потоки-runner'ы будут ждать</span>
                <span class="hl slc">// сообщений из этого канала. Канал имеет ограничение по</span>
                <span class="hl slc">// длине. Это аналог семафора, чтобы блокировать главный</span>
                <span class="hl slc">// поток, если все runner'ы заняты.</span>
                tasks <span class="hl opt">:=</span> <span class="hl kwb">make</span><span class="hl opt">(</span><span class="hl kwa">chan</span> <span class="hl kwb">string</span><span class="hl opt">, *</span>jobs<span class="hl opt">)</span>

                <span class="hl slc">// Канал подтверждения полного завершение потока-runner'а.</span>
                <span class="hl slc">// Главный поток будет ждать, пока все runner'ы ответят</span>
                <span class="hl slc">// по этому каналу. Тип сообщений тут не важен.</span>
                done <span class="hl opt">:=</span> <span class="hl kwb">make</span><span class="hl opt">(</span><span class="hl kwa">chan</span> <span class="hl kwb">bool</span><span class="hl opt">)</span>

                <span class="hl slc">// Запускаем runner'ы.</span>
                <span class="hl kwa">for</span> i <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt; *</span>jobs<span class="hl opt">;</span> i<span class="hl opt">++ {</span>
                        <span class="hl kwa">go</span> <span class="hl kwd">runner</span><span class="hl opt">(</span>tasks<span class="hl opt">,</span> done<span class="hl opt">)</span>
                <span class="hl opt">}</span>

                <span class="hl slc">// Передаем в канал имена файлов для обработки. При</span>
                <span class="hl slc">// достижении максимального размера канала, главный поток</span>
                <span class="hl slc">// будет заблокирован.</span>
                <span class="hl kwa">for</span> i <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> tests<span class="hl opt">.</span><span class="hl kwd">Len</span><span class="hl opt">();</span> i<span class="hl opt">++ {</span>
                        tasks <span class="hl opt">&lt;-</span> tests<span class="hl opt">.</span><span class="hl kwd">At</span><span class="hl opt">(</span>i<span class="hl opt">)</span>
                <span class="hl opt">}</span>

                <span class="hl slc">// Посылаем всем потокам команду завершиться и ждем</span>
                <span class="hl slc">// подтверждения о нормальном выходе от каждого потока.</span>
                <span class="hl kwa">for</span> i <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt; *</span>jobs<span class="hl opt">;</span> i<span class="hl opt">++ {</span>
                        tasks <span class="hl opt">&lt;-</span> <span class="hl str">&quot;&quot;</span>
                        <span class="hl opt">&lt;-</span> done
                <span class="hl opt">}</span>
        <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl slc">// Поток-runner.</span>
<span class="hl kwa">func</span> <span class="hl kwd">runner</span><span class="hl opt">(</span>tasks <span class="hl kwa">chan</span> <span class="hl kwb">string</span><span class="hl opt">,</span> done <span class="hl kwa">chan</span> <span class="hl kwb">bool</span><span class="hl opt">) {</span>
        <span class="hl slc">// Бесконечный цикл.</span>
        <span class="hl kwa">for</span> <span class="hl opt">{</span>
                <span class="hl slc">// Ждем сообщения из канала. Обычно, поток заблокирован</span>
                <span class="hl slc">// на этом месте.</span>
                name <span class="hl opt">:= &lt;-</span> tasks
                <span class="hl slc">// Если имя пустое, нас просят завершиться.</span>
                <span class="hl kwa">if</span> <span class="hl kwb">len</span><span class="hl opt">(</span>name<span class="hl opt">) ==</span> <span class="hl num">0</span> <span class="hl opt">{</span>
                        <span class="hl kwa">break</span>
                <span class="hl opt">}</span>
                <span class="hl slc">// Компилируем файл.</span>
                <span class="hl kwd">compile</span><span class="hl opt">(</span>name<span class="hl opt">)</span>
        <span class="hl opt">}</span>
        <span class="hl slc">// Посылаем сообщение, что поток завершился.</span>
        done <span class="hl opt">&lt;-</span> <span class="hl kwb">true</span>
<span class="hl opt">}</span>

<span class="hl kwa">func</span> <span class="hl kwd">compile</span><span class="hl opt">(</span>name <span class="hl kwb">string</span><span class="hl opt">) {</span>
        <span class="hl slc">// Вызываем компилятор.</span>
        c<span class="hl opt">,</span> err <span class="hl opt">:=</span> exec<span class="hl opt">.</span><span class="hl kwd">Run</span><span class="hl opt">(*</span>compiler<span class="hl opt">, []</span><span class="hl kwb">string</span><span class="hl opt">{*</span>compiler<span class="hl opt">,</span> name<span class="hl opt">},</span>
                           os<span class="hl opt">.</span><span class="hl kwd">Environ</span><span class="hl opt">(),</span> <span class="hl str">&quot;./data&quot;</span><span class="hl opt">,</span> exec<span class="hl opt">.</span>DevNull<span class="hl opt">,</span>
                           exec<span class="hl opt">.</span>PassThrough<span class="hl opt">,</span> exec<span class="hl opt">.</span>PassThrough<span class="hl opt">)</span>
        <span class="hl kwa">if</span> err <span class="hl opt">!=</span> <span class="hl kwb">nil</span> <span class="hl opt">{</span>
                fmt<span class="hl opt">.</span><span class="hl kwd">Printf</span><span class="hl opt">(</span><span class="hl str">&quot;unable to compile %s (%s)</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> name<span class="hl opt">,</span> err<span class="hl opt">.</span><span class="hl kwd">String</span><span class="hl opt">())</span>
                os<span class="hl opt">.</span><span class="hl kwd">Exit</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">)</span>
        <span class="hl opt">}</span>
        c<span class="hl opt">.</span><span class="hl kwd">Wait</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">)</span>
<span class="hl opt">}</span>
</pre>

<p>Makefile:</p>

<pre class="hl">
target <span class="hl opt">=</span> tar_extractor

<span class="hl kwa">all</span><span class="hl opt">:</span>
        <span class="hl num">6</span>g <span class="hl opt">$(</span>target<span class="hl opt">)</span>.go
        <span class="hl num">6l</span> <span class="hl opt">-</span>o <span class="hl opt">$(</span>target<span class="hl opt">) $(</span>target<span class="hl opt">)</span><span class="hl num">.6</span>
</pre>

<p>Я погонял это добро под Линуксом 64-бит на восьми процессорном блейде. Во время тестирования я был на машине один, так что результаты разных прогонов можно сравнивать. Файл &ldquo;huge.tar&rdquo; содержит ~15 тысяч исходников и имеет размер один гигабайт.</p>

<p>Так выглядит загрузка процессоров, когда машина ничего не делает (все процессоры почти на 100% в idle):</p>

<pre><code>Cpu0  :  0.0%us,  0.0%sy,  0.0%ni,100.0%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st
Cpu1  :  0.0%us,  0.0%sy,  0.0%ni, 99.7%id,  0.3%wa,  0.0%hi,  0.0%si,  0.0%st
Cpu2  :  0.0%us,  0.0%sy,  0.0%ni,100.0%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st
Cpu3  :  0.0%us,  0.0%sy,  0.0%ni,100.0%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st
Cpu4  :  0.0%us,  0.0%sy,  0.0%ni,100.0%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st
Cpu5  :  0.0%us,  0.3%sy,  0.0%ni, 99.3%id,  0.3%wa,  0.0%hi,  0.0%si,  0.0%st
Cpu6  :  0.0%us,  0.0%sy,  0.0%ni,100.0%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st
Cpu7  :  0.0%us,  0.0%sy,  0.0%ni,100.0%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st
</code></pre>

<p>Запускаем в последовательном режиме (<code>-jobs 0</code>):</p>

<pre><code>make &amp;&amp; time -p ./tar_extractor -jobs 0 huge.tar
</code></pre>

<p>Время работы:</p>

<pre><code>real 213.81
user 187.32
sys 61.33
</code></pre>

<p>Практически все процессоры на 70-80% ничего не делают (все снимки я делал во время стадии компиляции):</p>

<pre><code>Cpu0  : 11.9%us,  4.3%sy,  0.0%ni, 82.5%id,  1.3%wa,  0.0%hi,  0.0%si,  0.0%st
Cpu1  :  9.6%us,  2.7%sy,  0.0%ni, 87.7%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st
Cpu2  :  4.3%us,  1.3%sy,  0.0%ni, 92.7%id,  1.7%wa,  0.0%hi,  0.0%si,  0.0%st
Cpu3  : 16.0%us,  6.0%sy,  0.0%ni, 78.0%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st
Cpu4  : 12.6%us,  4.3%sy,  0.0%ni, 82.7%id,  0.3%wa,  0.0%hi,  0.0%si,  0.0%st
Cpu5  : 11.6%us,  3.3%sy,  0.0%ni, 85.0%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st
Cpu6  :  4.7%us,  1.3%sy,  0.0%ni, 94.0%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st
Cpu7  : 16.6%us,  6.3%sy,  0.0%ni, 77.1%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st
</code></pre>

<p>Суммарная загрузка процессоров - 2.7%:</p>

<pre><code> PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND
</code></pre>

<p>15054 tester    18   0 41420 4980 1068 S  2.7  0.1   0:02.96 tar_extractor</p>

<p>Теперь запускаем с пулом потоков, но только с одним каналом (<code>-jobs 1</code>):</p>

<p>Время:</p>

<pre><code>real 217.87
user 191.42
sys 62.53
</code></pre>

<p>Процессоры:</p>

<pre><code>Cpu0  :  5.7%us,  1.7%sy,  0.0%ni, 92.7%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st
Cpu1  : 13.3%us,  5.3%sy,  0.0%ni, 81.3%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st
Cpu2  :  7.0%us,  2.7%sy,  0.0%ni, 89.3%id,  0.7%wa,  0.0%hi,  0.3%si,  0.0%st
Cpu3  : 15.3%us,  5.7%sy,  0.0%ni, 77.7%id,  1.3%wa,  0.0%hi,  0.0%si,  0.0%st
Cpu4  :  6.0%us,  2.0%sy,  0.0%ni, 92.0%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st
Cpu5  : 14.3%us,  7.3%sy,  0.0%ni, 78.4%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st
Cpu6  :  7.0%us,  2.3%sy,  0.0%ni, 90.7%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st
Cpu7  : 15.3%us,  6.6%sy,  0.0%ni, 78.1%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st
</code></pre>

<p>Понятно, что картина такая же, так как реально мы также гоняем один поток.</p>

<p>А теперь включаем пул потоков (<code>-jobs 32</code>):</p>

<pre><code>make &amp;&amp; time -p ./tar_extractor -jobs 32 huge.tar
</code></pre>

<p>Время работы упало почти в семь раз:</p>

<pre><code>real 38.38
user 195.55
sys 69.92
</code></pre>

<p>Общая загрузка процессоров (во время стадии компиляции) возросла до 23%:</p>

<pre><code>  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND
17488 tester    16   0 45900 9732 1076 S 23.6  0.1   0:06.40 tar_extractor
</code></pre>

<p>Видно, что все процессоры реально заняты:</p>

<pre><code>Cpu0  : 56.3%us, 26.3%sy,  0.0%ni, 17.3%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st
Cpu1  : 55.5%us, 27.9%sy,  0.0%ni, 15.6%id,  1.0%wa,  0.0%hi,  0.0%si,  0.0%st
Cpu2  : 56.1%us, 25.9%sy,  0.0%ni, 15.0%id,  0.7%wa,  0.3%hi,  2.0%si,  0.0%st
Cpu3  : 58.1%us, 26.2%sy,  0.0%ni, 15.6%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st
Cpu4  : 57.2%us, 25.8%sy,  0.0%ni, 17.1%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st
Cpu5  : 56.8%us, 26.2%sy,  0.0%ni, 16.9%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st
Cpu6  : 59.0%us, 26.3%sy,  0.0%ni, 13.0%id,  1.7%wa,  0.0%hi,  0.0%si,  0.0%st
Cpu7  : 56.5%us, 27.2%sy,  0.0%ni, 16.3%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st
</code></pre>

<p>Данное тестирование предназначено исключительно для понимания, как простейший параллельный код ускоряет все в разы. И также для демонстрации, как просто и относительно безопасно можно программировать параллельные вычисления в Go.</p>

<p>Посты по теме Go:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2011/02/24/url-shortener-in-go-in-one-hour/">Язык Go в действии - мультисерверная сокращалка URL&rsquo;ов менее чем за час</a></li>
<li><a href="http://demin.ws/blog/russian/2010/03/06/what-is-faster-on-eratosthenes-seive-go-c-cpp/">Решето Эратосфена - кто быстрее: Go, C или C++?</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Код возврата процесса в случае его падения]]></title>
    <link href="http://demin.ws/blog/russian/2011/04/06/process-exit-code-on-crash/"/>
    <updated>2011-04-06T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/04/06/process-exit-code-on-crash/</id>
    <content type="html"><![CDATA[<p>Был интересный баг - в процессе выполнения скрипта сборки выполнение тестов приводило к жесткому падению процесса. Там был какой-то явный баг с памятью. Но самое интересное дальше. Makefile после падения процесса, выполняющего тесты, продолжал работать, что означало завершение упавшего процесса с нулевым кодом, а должно было быть что-то явно ненулевое.</p>

<p>С багом мы разобрались (включая проблему в Makefile), но возник у меня общий вопрос: с каким именно кодом завершается процесс, если он упал, не успев выполнить <a href="http://linux.die.net/man/3/exit">exit()</a>.</p>

<p>В UNIXах есть специальные макросы, которыми можно проинспектировать код возврата <a href="http://linux.die.net/man/2/wait">wait()</a>. Но, все UNIXы разные, и к тому же есть еще Windows.</p>

<p>В итоге я написал небольшую самопадающую программу:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;stdio.h&gt;</span>
<span class="hl ppc">#include &lt;stdlib.h&gt;</span>
<span class="hl ppc">#include &lt;string.h&gt;</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[]) {</span>
  <span class="hl kwb">char</span> cmd<span class="hl opt">[</span><span class="hl num">80</span><span class="hl opt">];</span>
  <span class="hl kwb">int</span> r<span class="hl opt">;</span>
  <span class="hl kwd">sprintf</span><span class="hl opt">(</span>cmd<span class="hl opt">,</span> <span class="hl str">&quot;%s ?&quot;</span><span class="hl opt">,</span> argv<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]);</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>argc <span class="hl opt">&gt;</span> <span class="hl num">1</span><span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>argv<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">][</span><span class="hl kwd">strlen</span><span class="hl opt">(</span>argv<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]) -</span> <span class="hl num">1</span><span class="hl opt">] ==</span> <span class="hl str">'1'</span><span class="hl opt">)</span>
      <span class="hl opt">*(</span><span class="hl kwb">char</span> <span class="hl opt">*)</span><span class="hl num">0</span> <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwd">exit</span><span class="hl opt">(</span><span class="hl num">0x77</span><span class="hl opt">);</span>
  <span class="hl opt">}</span>
  <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;Normal: %08X</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> <span class="hl kwd">system</span><span class="hl opt">(</span>cmd<span class="hl opt">));</span>
  cmd<span class="hl opt">[</span><span class="hl kwd">strlen</span><span class="hl opt">(</span>cmd<span class="hl opt">) -</span> <span class="hl num">1</span><span class="hl opt">] =</span> <span class="hl str">'1'</span><span class="hl opt">;</span>
  <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;Crash : %08X</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> <span class="hl kwd">system</span><span class="hl opt">(</span>cmd<span class="hl opt">));</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>И запустил на некоторых характерных машинах.</p>

<p><strong>Windows 7, Visual Studio 2010</strong>, <code>cl crash.c &amp;&amp; crash</code>:</p>

<pre><code>Normal: 00000077
Crash : C0000005
</code></pre>

<p><strong>Linux x86_64</strong> (<code>cс -o crash crash.c &amp;&amp; ./crash</code>):</p>

<pre><code>Normal: 00007700
Crash : 0000000B
</code></pre>

<p>Сигнал <code>0x0B</code> (13) - это, кстати, <code>SIGSEGV</code>, segmentation violation, что, собственно, и произошло.</p>

<p><strong>Solaris SPARC 5.10</strong>:</p>

<pre><code>Normal: 00007700
Segmentation Fault - core dumped
Crash : 00008B00
</code></pre>

<p><strong>HP-UX Itanium 2</strong>:</p>

<p>Normal: 00007700
sh: 25112 Memory fault(coredump)
Crash : 00008B00</p>

<p><strong>AIX 5.2</strong></p>

<p>Normal: 00007700
Crash : FFFFFFFF</p>

<p>Тут, видимо, до <code>system()</code> код возврата не дошел совсем.</p>

<p>Вывод: все крайне зависит (как всегда) от операционной системы.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit-тестирование для подсветки грамматики]]></title>
    <link href="http://demin.ws/blog/russian/2011/04/02/unit-tests-for-syntax-highlighting/"/>
    <updated>2011-04-02T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/04/02/unit-tests-for-syntax-highlighting/</id>
    <content type="html"><![CDATA[<p>Я сейчас делаю небольшой проект по добавлению в putty возможности налету, прямо на уровне терминала, подсвечивать грамматику некоторого языка программирования. Основная сложность у меня в том, что язык крайне неуклюж - это некоторый диалект бейсика с парой сотней операторов, заточенных для работы с базой данных. Грамматика не контекстно-свободна, нерегулярна и полна неоднозначностей, которые разрешаются на основе огромного количества частных случаев.</p>

<p>В итоге я занимаюсь тем, что исправляю то там, то тут эти частные случаи. И обычно меняешь одно, и ломаешь десяток других мест.</p>

<p>В итоге после пары недель мытарств, я таки взял <a href="http://code.google.com/p/cmockery/">cmockery</a>, написал всю необходимую «обвеску» и переделал все примеры в тесты.</p>

<p>Например:</p>

<pre class="hl">
<span class="hl kwb">void</span> <span class="hl kwd">test_Ticket_dd6a19efa5_DATE</span><span class="hl opt">(</span><span class="hl kwb">void</span> <span class="hl opt">**</span>state<span class="hl opt">) {</span>
  <span class="hl kwd">string_eq</span><span class="hl opt">(</span><span class="hl str">&quot;0029  ENTRIES&lt;1, AB.CDE.VALUE.DATE&gt;    = TODAY&quot;</span><span class="hl opt">,</span>
            <span class="hl str">&quot;..............a........................b......&quot;</span><span class="hl opt">);</span>
  <span class="hl kwd">string_eq</span><span class="hl opt">(</span><span class="hl str">&quot;0036  ENTRIES&lt;1, AB.CDE.BOOKING.DATE&gt;  = TODAY&quot;</span><span class="hl opt">,</span>
            <span class="hl str">&quot;..............a........................b......&quot;</span><span class="hl opt">);</span>
  <span class="hl kwd">string_eq</span><span class="hl opt">(</span><span class="hl str">&quot;0036  ENTRIES&lt;1, AB.CDE.TOOKING DATE&gt;  = TODAY&quot;</span><span class="hl opt">,</span>
            <span class="hl str">&quot;..............a.................bbbb...c......&quot;</span><span class="hl opt">);</span>
  <span class="hl kwd">string_eq</span><span class="hl opt">(</span><span class="hl str">&quot;0036 DATE = TODAY&quot;</span><span class="hl opt">,</span>
            <span class="hl str">&quot;.....aaaa.b......&quot;</span><span class="hl opt">);</span>
  <span class="hl kwd">string_eq</span><span class="hl opt">(</span><span class="hl str">&quot;0036  DATE = TODAY&quot;</span><span class="hl opt">,</span>
            <span class="hl str">&quot;......aaaa.b......&quot;</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">test_Ticket_e8e02762a0_V_TIME</span><span class="hl opt">(</span><span class="hl kwb">void</span> <span class="hl opt">**</span>state<span class="hl opt">) {</span>
  <span class="hl kwd">string_eq</span><span class="hl opt">(</span><span class="hl str">&quot;0017     V.TIME = 'x'&quot;</span><span class="hl opt">,</span>
            <span class="hl str">&quot;................a.bbb&quot;</span><span class="hl opt">);</span>
  <span class="hl kwd">string_eq</span><span class="hl opt">(</span><span class="hl str">&quot;0034     V.DELTA = TIME() - TIME1&quot;</span><span class="hl opt">,</span>
            <span class="hl str">&quot;.................a.bbbb...c......&quot;</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">test_Ticket_0bcfac1fb6_READNEXT_FROM</span><span class="hl opt">(</span><span class="hl kwb">void</span> <span class="hl opt">**</span>state<span class="hl opt">) {</span>
  <span class="hl kwd">string_eq</span><span class="hl opt">(</span><span class="hl str">&quot;0167     READNEXT ID FROM 9 ELSE DONE = 1 &quot;</span><span class="hl opt">,</span>
            <span class="hl str">&quot;.........aaaaaaaa....bbbb.c.dddd......e.f.&quot;</span><span class="hl opt">);</span>
<span class="hl opt">}</span>
</pre>

<p>И таких тестов сотни.</p>

<p>Макрос <code>string_eq</code> не является стандартным для cmockery, и под ним скрывается приличный кусок моего велосипеда. Вызывается функция подсветки строки, и по ней делается проход для отмечания факта смены цвета путем увеличения индекса (начальный индекс цвета - <code>а</code>). Точка значит неподсвеченный символ. Немного топорно, но позволяет не хардкодить в тестах коды конретных цветов. Конечно, сильно облегчает жизнь тот факт, что данный язык строчно-ориентированный. Иначе все было бы сложнее.</p>

<p>После этого жизнь радикально изменилась. Теперь я легко меняю код и одной командой проверяю, не сломал ли я чего из старого. Те два дня, что я потратил на написание дополнительного кода для тестов уже в сотни раз окупились.</p>

<p>Каждую новую фичу (=очередной частный случай) или багфикс я начинаю с теста. И только потом код. Реально не могу представить, как бы я дальше работал над проектом без тестов.</p>

<p>Тут получается вообще чистая класска TDD – сначала тесты, а только потом код.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Задача: выборы мэра]]></title>
    <link href="http://demin.ws/blog/russian/2011/03/17/mayor-selection-problem/"/>
    <updated>2011-03-17T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/03/17/mayor-selection-problem/</id>
    <content type="html"><![CDATA[<p>В городе N жителей. Надо выбрать мэра. Чтобы минимизировать коррупцию во власти, мэр должен быть таким человеком, которого лично знают все, но он лично не знает никого.</p>

<p>Как выбрать мэра?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Скрипты на Lua в С++, версия 2]]></title>
    <link href="http://demin.ws/blog/russian/2011/03/08/lua-scripts-in-cpp-version-2/"/>
    <updated>2011-03-08T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/03/08/lua-scripts-in-cpp-version-2/</id>
    <content type="html"><![CDATA[<p>В прошлом году я <a href="http://demin.ws/blog/russian/2009/06/12/lua-scripts-in-cpp/">писал</a> мою <a href="http://code.google.com/p/luascript">микро библиотеку для встраивания Lua как скриптового языка в программы на С++</a>.</p>

<p>С тех пор библиотека практически не изменилась. Она устраивала меня, а сторонних пользователей у нее особо не было.</p>

<p>Недавно <strong>Alexei Bezborodov</strong> вдохнул в проект новую жизнь, исправив несколько ошибок и, самое главное, выпустив новую версию.</p>

<p><a href="http://code.google.com/p/luascript/source/browse/?r=main">Его ветка</a> теперь является основной, а старая оставлена для истории.</p>

<hr />

<p>Ниже анонс от Алексея.</p>

<p>Напишу здесь последние новости для интересующихся.</p>

<p>Появилась <a href="http://luascript.googlecode.com/files/luascript-0.1.0.zip">новая версия 0.1.0</a>.</p>

<p>В ней добавлено:</p>

<ul>
<li>Новый тип <code>LuaScript::Double_LuaArg</code></li>
<li>Полноценный вектор <code>LuaScript::Vector_LuaArg</code></li>
<li>Нестатические функции. Возможность передавать в функцию локальные объекты.</li>
<li><a href="http://code.google.com/p/luascript/wiki/Introduction">Новое описание</a>.</li>
</ul>

<p>Рекомендую посмотреть тесты. В них есть пример работы с двухмерным вектором и другие полезности.</p>

<p>Стиль кода немного изменился. Для тех кто хочет работать со старым стилем, выложил <a href="http://code.google.com/p/luascript/downloads/list">версию 0.0.2</a>. В ней исправлены некоторые мелкие недочеты, но новые возможности отсутствуют.</p>

<p>Информация по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2009/06/12/lua-scripts-in-cpp/">Скрипты на Lua в С++</a></li>
<li><a href="http://code.google.com/p/luascript">Lua C++ Wrapper</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ACE против boost или какую библиотеку выбрать]]></title>
    <link href="http://demin.ws/blog/russian/2011/03/07/ace-vs-boost/"/>
    <updated>2011-03-07T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/03/07/ace-vs-boost/</id>
    <content type="html"><![CDATA[<p>Есть задача: у нас есть несколько подсистем, для которых нужны следующие вещи:</p>

<ul>
<li>сокеты (клиентские, серверные, с SSL и без)</li>
<li><a href="http://ru.wikipedia.org/wiki/Fork">fork()</a> для рождение дочернего процесса, который наследует сокет для обслуживания соединения</li>
<li>потоки</li>
<li>таймеры и задержки</li>
<li>logger</li>
</ul>

<p>Все перечисленное должно работать без исключения на Windows <sup>2003</sup>&frasl;<sub>2008</sub>, Linux AS5+, AIX <sup>5</sup>&frasl;<sub>6</sub>, Solaris (Intel/AMD), HP-UX v3.</p>

<p>Для всего остального мы прекрасно довольствуемся STL.</p>

<p>Компиляторы только &ldquo;родные&rdquo; для каждой платформы (то есть, например, Cygwin не годится для Windows, и gcc только на Linux).</p>

<p>Мы давного используем <a href="http://www.cs.wustl.edu/~schmidt/ACE.html">ACE</a>, как основную библиотеку. В ней есть все из выше сказанного, даже имитация fork под Windows, когда идентификатор сокета передается в символьном виде дочернему процессу через командную строку.</p>

<p>Вообще, <code>fork()</code> - это настоящая засада под Windows. Для его полноценной реализации нужно использовать недокументированные функции и структуры, как это делается в Cygwin, что, конечно, для нас неприемлемо в плане последующей поддержки. Что еще усугбляет ситуацию - нет возможности отказаться от мульти-процессной модели и просто перейти на потоки (поэтому и нужен fork).</p>

<p>Но ACE - это монстр, который еще и труден в правильной сборке на AIX и HP-UX. В нашем случае - это как стрелять из пушки по воробьям.</p>

<p>У нас есть желание пересеть на другую библиотеку. Например, boost. Но это тоже монстр, к тому же монстр, требовательный к свежести компиляторов в плане С++, но мы вынуждены &ldquo;сидеть&rdquo; порой на старых компиляторах, так как сотни клиентов их используют. Так что вопрос простоты сборки boost&rsquo;а тоже под большим вопросом.</p>

<p>Есть и еще вариант - написать все самим на основе системных вызовов, openssl и pthreads. Здесь начинается проблема сопровождения и тщательного тестирования на каждой платформе. С другой стороных - нет зависимости от стороннего почти ненужного монстра (ACE или boost), легкость и прозрачность исходников.</p>

<p>Можно также подобный доморощенный framework выложнить в open-source, и может быть привлечь тем самым сторонних людей для полировки библиотеки.</p>

<p>Хотел бы совета на тему, какую бы такую легковесную библиотеку выбрать, которая бы делала что описано выше, и при этом не была монструозной.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Бонусы]]></title>
    <link href="http://demin.ws/blog/russian/2011/03/06/bonuses/"/>
    <updated>2011-03-06T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/03/06/bonuses/</id>
    <content type="html"><![CDATA[<p>Многие компании платят бонусы по итогам года. Обычно их выплачивают в начале следующего года, когда формально подведены итоги, сделаны все performance review, получены данные о прибыли компании за год, ее ситуации на рынке и т.д.</p>

<p>Как вы думаете, что обычно происходит сразу после знаменательной даты выплаты бонусов? Правильно - начинается массовое катапультирование людей (другими словами, те, кто планировал уволится - пишут заявление). И забавно наблюдать, как десятки людей уходят практически в один день.</p>

<p>Мораль: готовые ожидаемые бонусы - это дестабилизирующее зло. Плати людям достойную зарплату регулярно и выплачивай бонусы по итогам сделанной работы сразу, чтобы для их получeния надо было работать, а не просиживать штаны в их ожидании.</p>

<p>В декабре я ушел из Блумберга и с начала года вернулся в свою предыдущую компанию <a href="http://temenos.com/">Теменос</a>.</p>

<p>Я не стал ждать златоносного бонусного марта. Мне сделали отличное предложение на менеджерскую позицию, от которого было невозможно отказаться.</p>

<p>А давеча вчера я был на коллективной пьянке нашего солидарного программисткого брата, в общем и целом просвященной пачке увольненцев из Блумберга. Сейчас реальная движуха на рынке - инвестиционные банки берут людей пачками, предлагая очень хорошие зарплаты.</p>

<p>В целом, в ротации людей нет особо ничего плохого. Те, кто уходят, довольны, что нашли что-то лучше. Те, кто остается, тоже не должны особо страдать, так как появляются места в компании, которые можно будет заполнить. Еще это значит, что в компании начинается новый виток найма.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Кто из компиляторов быстрее: cl, lcc или tcc]]></title>
    <link href="http://demin.ws/blog/russian/2011/03/04/who-is-faster-cl-lcc-tcc/"/>
    <updated>2011-03-04T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/03/04/who-is-faster-cl-lcc-tcc/</id>
    <content type="html"><![CDATA[<p>Люблю делать всякие сравнения компиляторов.</p>

<p>Сегодня на ринге Студия 2010, <a href="http://www.cs.virginia.edu/~lcc-win32/">lcc</a> и <a href="http://bellard.org/tcc/">tcc</a>. Все три я активно использую под Windows для языка С.</p>

<p>Сравнивать будем на любимом решете Эратосфена (<code>erato-c-int.c</code>):</p>

<pre class="hl">
<span class="hl ppc">#include &lt;stdio.h&gt;</span>
<span class="hl ppc">#include &lt;stdlib.h&gt;</span>
<span class="hl ppc">#include &lt;memory.h&gt;</span>
<span class="hl ppc">#include &lt;string.h&gt;</span>
<span class="hl ppc">#include &lt;math.h&gt;</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[]) {</span>
  <span class="hl kwb">int</span> n <span class="hl opt">=</span> argc <span class="hl opt">&gt;</span> <span class="hl num">1</span> ? <span class="hl kwd">atoi</span><span class="hl opt">(</span>argv<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]) :</span> <span class="hl num">100</span><span class="hl opt">;</span>
  <span class="hl kwb">int</span><span class="hl opt">*</span> S<span class="hl opt">;</span>
  <span class="hl kwb">int</span> count<span class="hl opt">;</span>
  <span class="hl kwb">int</span> sz <span class="hl opt">=</span> n <span class="hl opt">*</span> <span class="hl kwa">sizeof</span><span class="hl opt">(*</span>S<span class="hl opt">);</span>
  <span class="hl kwb">int</span> i<span class="hl opt">,</span> j<span class="hl opt">;</span>

  <span class="hl kwb">long</span> sqrt_n <span class="hl opt">=</span> <span class="hl kwd">sqrt</span><span class="hl opt">(</span>n<span class="hl opt">) +</span> <span class="hl num">1</span><span class="hl opt">;</span>

  <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;%d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> n<span class="hl opt">);</span>

  S <span class="hl opt">=</span> <span class="hl kwd">malloc</span><span class="hl opt">(</span>sz<span class="hl opt">);</span>
  <span class="hl kwd">memset</span><span class="hl opt">(</span>S<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> sz<span class="hl opt">);</span>

  <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">2</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> sqrt_n<span class="hl opt">; ++</span>i<span class="hl opt">)</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>S<span class="hl opt">[</span>i<span class="hl opt">] ==</span> <span class="hl num">0</span><span class="hl opt">)</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span>j <span class="hl opt">=</span> i<span class="hl opt">*</span>i<span class="hl opt">;</span> j <span class="hl opt">&lt;</span> n<span class="hl opt">;</span> j<span class="hl opt">+=</span>i<span class="hl opt">)</span>
        S<span class="hl opt">[</span>j<span class="hl opt">] =</span> <span class="hl num">1</span><span class="hl opt">;</span>

  count <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">2</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> n<span class="hl opt">; ++</span>i<span class="hl opt">)</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>S<span class="hl opt">[</span>i<span class="hl opt">] ==</span> <span class="hl num">0</span><span class="hl opt">)</span>
      count<span class="hl opt">++;</span>

  <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;%d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> count<span class="hl opt">);</span>

  <span class="hl kwd">free</span><span class="hl opt">(</span>S<span class="hl opt">);</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Скрипт для запуска (Makefile):</p>

<pre class="hl">
SRC<span class="hl opt">=</span>erato-c-int
N<span class="hl opt">=</span><span class="hl num">100000000</span>

<span class="hl kwa">all</span><span class="hl opt">:</span>  build run

build<span class="hl opt">:</span> build-cl build-lcc build-tcc

run<span class="hl opt">:</span> run-cl run-lcc run-tcc

build-cl<span class="hl opt">:</span>
  &#64;cl <span class="hl opt">/</span>nologo <span class="hl opt">/</span>O2 <span class="hl opt">-</span>Fe<span class="hl opt">$(</span>SRC<span class="hl opt">)-</span>cl.exe <span class="hl opt">$(</span>SRC<span class="hl opt">)</span>.c

run-cl<span class="hl opt">:</span>
  &#64;echo <span class="hl opt">---</span>
  <span class="hl opt">-</span>&#64;cl <span class="hl num">2</span><span class="hl opt">&gt;&amp;</span><span class="hl num">1</span> | findstr Compiler
  &#64;ntimer.exe <span class="hl opt">$(</span>SRC<span class="hl opt">)-</span>cl.exe <span class="hl opt">$(</span>N<span class="hl opt">)</span> | findstr ETime

build-lcc<span class="hl opt">:</span>
  &#64;c<span class="hl opt">:</span>\lcc<span class="hl esc">\b</span>in\lcc <span class="hl opt">-</span>O2 <span class="hl opt">-</span>o <span class="hl opt">$(</span>SRC<span class="hl opt">)-</span>lcc.obj <span class="hl opt">$(</span>SRC<span class="hl opt">)</span>.c
  &#64;c<span class="hl opt">:</span>\lcc<span class="hl esc">\b</span>in\lcclnk <span class="hl opt">-</span>o <span class="hl opt">$(</span>SRC<span class="hl opt">)-</span>lcc.exe <span class="hl opt">$(</span>SRC<span class="hl opt">)-</span>lcc.obj

run-lcc<span class="hl opt">:</span>
  &#64;echo <span class="hl opt">---</span>
  &#64;c<span class="hl opt">:</span>\lcc<span class="hl esc">\b</span>in\lcc <span class="hl opt">-</span>v
  &#64;ntimer.exe <span class="hl opt">$(</span>SRC<span class="hl opt">)-</span>lcc.exe <span class="hl opt">$(</span>N<span class="hl opt">)</span> | findstr ETime

build-tcc<span class="hl opt">:</span>
  &#64;c<span class="hl opt">:</span><span class="hl esc">\t</span>cc<span class="hl esc">\t</span>cc <span class="hl opt">-</span>O2 <span class="hl opt">-</span>o <span class="hl opt">$(</span>SRC<span class="hl opt">)-</span>tcc.exe <span class="hl opt">$(</span>SRC<span class="hl opt">)</span>.c

run-tcc<span class="hl opt">:</span>
  &#64;echo <span class="hl opt">---</span>
  &#64;c<span class="hl opt">:</span><span class="hl esc">\t</span>cc<span class="hl esc">\t</span>cc <span class="hl opt">-</span>v
  &#64;ntimer.exe <span class="hl opt">$(</span>SRC<span class="hl opt">)-</span>tcc.exe <span class="hl opt">$(</span>N<span class="hl opt">)</span> | findstr ETime
</pre>

<p>Погнали:</p>

<pre><code>---
Microsoft (R) 32-bit C/C++ Optimizing Compiler Version 16.00.30319.01 for 80x86
ETime(   0:00:04.374 ) UTime(   0:00:04.196 ) KTime(   0:00:00.124 )
---
Logiciels/Informatique lcc-win32 version 3.8. Compilation date: Jan 29 2011 11:51:05
ETime(   0:00:04.415 ) UTime(   0:00:04.102 ) KTime(   0:00:00.202 )
---
tcc version 0.9.25
ETime(   0:00:04.944 ) UTime(   0:00:04.492 ) KTime(   0:00:00.280 )
</code></pre>

<p>Вывод не особо захватывающий. Все выступили примерно одинаково.</p>

<p>Посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2010/03/06/what-is-faster-on-eratosthenes-seive-go-c-cpp/">Решето Эратосфена - кто быстрее: Go, C или C++?</a></li>
<li><a href="http://demin.ws/blog/russian/2009/02/01/what-is-faster-vector-int-or-bool/">Кто быстрее: vector<bool> или vector<int></a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Моделирование электронных схем в Proteus ISIS]]></title>
    <link href="http://demin.ws/blog/russian/2011/03/02/circut-modelling-in-proteus-isis/"/>
    <updated>2011-03-02T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/03/02/circut-modelling-in-proteus-isis/</id>
    <content type="html"><![CDATA[<p>Этот пост будет не про программирование в привычном понимании, а в несколько ином ключе.</p>

<p>Когда-то я немного увлекался микроэлектроникой, и в частности, программированием микроконтроллеров типа PICmicro. Мои познания в мире электронных схем, особенно аналоговых, крайне скромны и не уходят дальше институтского курса электротехники. Хотя в цифровой электронике немного проще, ибо там многое уже идет из понятного двоичного мира.</p>

<p>Когда возишься с микроконтроллерами так или иначе приходится брать в руки паяльник. Я это не очень люблю, хотя даже освоил весьма забавный способ нанесения разводки на печатную плату с помощью лазерного принтера и утюга для последующего травление хлорным железом. Мне сразу хочется перейдти к возьне с прошивкой, нежели с пайкой. Благо, современные средства макетирования типа того, что на картинке ниже, сильно упрощают задачу.</p>

<p><img src="http://demin.ws/images/blog/breadboard-counter.jpg" /></p>

<p>Подобные макетные платы меня весьма устраивали.</p>

<p>Но сегодня я познал совершенно иной уровень - абсолютно цифровой.</p>

<p>Брат дал возможность повозиться с софтом для эмулирования электрических схем. Называется, <a href="http://www.labcenter.com/">Proteus ISIS</a>.</p>

<p>Тут просто какой-то беспредел. Ты просто рисуешь схему, набирая ее из огромной базы компонент, а потом ее просто запускаешь! В реальном времени! И этот софт делает имитацию схемы на уровне законов физики в плане электричества. Я не знаю, какова &ldquo;глубина&rdquo; имитации (врядли на уровне электронов ;-), но выглядит, очень убедительно (см. мои примеры ниже).</p>

<p>Конечно, первым делом мы нарисовали классический <a href="http://ru.wikipedia.org/wiki/%D0%9C%D1%83%D0%BB%D1%8C%D1%82%D0%B8%D0%B2%D0%B8%D0%B1%D1%80%D0%B0%D1%82%D0%BE%D1%80">мульти-вибратор</a>.</p>

<p>На видео видно, как происходит симуляция (рекомендую полный экран). Обратите внимание на поведение светодиода, вольтметров и амперметров, и, самое прикольное, пластин конденсаторов! Они показывают, как и когда происходит их заряд-разряд.</p>

<iframe width="425" height="344" src="https://www.youtube.com/embed/5xAiLa5fp5o?color=white&theme=light"></iframe>

<p>А теперь подключаем осциллограф! Конечно тоже цифровой.</p>

<iframe width="425" height="344" src="https://www.youtube.com/embed/YTjiOVDrXE4?color=white&theme=light"></iframe>

<p>Тут тебе и фронты сигналов, задержки, развертки и все такое.</p>

<p>Я вообще человек не очень впечатлительный в плане софта, но тут у меня была минута молчания, пока я осознавал масштабы возможностей. Ты фактически создаешь аналоговую схему, но макетируешь ее не то, чтобы без паяльника, я просто водя мышкой по экрану.</p>

<p>Я не подозревал, что все ушло так далеко вперед.</p>

<p>Дальше, больше. Резисторы, емкости, транзисторы и т.д. - это мелочи. Данный софт позволяет вставить в схему микроконтроллер! Например, PICmicro, загрузить в него прошивку, подать виртуальные вольты/амперы питания и поглядеть, как это все будет шевелиться в реальном времени!</p>

<p>Среди множества стандартных примеров в дистрибутиве есть проект - музыкальный звонок.</p>

<p>Я открыл проект и запустил.</p>

<iframe width="425" height="344" src="https://www.youtube.com/embed/CFqBCfhAGPk?color=white&theme=light"></iframe>

<p>Например, меняя номинал резистора, можно видеть, как меняется свечение связанного с ним светодиода. Также на видео ниже видно работу эмулятора микроконтроллера.</p>

<iframe width="425" height="344" src="https://www.youtube.com/embed/6itRt23F4CU?color=white&theme=light"></iframe>

<p>Ну и под занавес (пристегните ремни!). Допустим, вы разрабатываете на микроконтроллере устройство, которое будет подключаться к компьютеру по USB. Вам надо собрать реальный макет, залить в него прошивку, позаботиться о драйвере и уже только после этого подключать и смотреть, работает или нет (с первого раза, скорее всего нет).</p>

<p>В этом софте можно сделать проект (схему, прошивку) и виртуально подключить в реальную подсистему USB Windows! И попробовать ваше устройство в деле после двух-трех кликов мышкой.</p>

<p>В общем, господа, лично я полном шоке.</p>

<p>Дистрибутив весит всего около 70 мегов.</p>

<p>P.S. Софт коммерческий, поэтому не спрашивайте меня, где его брать.</p>

<p>P.S. Видеокаст записывал первый раз в жизни, поэтому прошу прощения за некоторый сумбур.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Язык Go в действии - мультисерверная сокращалка URL'ов менее чем за час]]></title>
    <link href="http://demin.ws/blog/russian/2011/02/24/url-shortener-in-go-in-one-hour/"/>
    <updated>2011-02-24T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/02/24/url-shortener-in-go-in-one-hour/</id>
    <content type="html"><![CDATA[<p><embed src="http://blip.tv/play/AYKP1AYC" type="application/x-shockwave-flash" width="480" height="390" allowscriptaccess="always" allowfullscreen="true"></embed></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MicroXP - легковесная верcия Windows XP]]></title>
    <link href="http://demin.ws/blog/russian/2011/02/23/microxp/"/>
    <updated>2011-02-23T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/02/23/microxp/</id>
    <content type="html"><![CDATA[<p>Задача - есть необходимость подключаться к некоторой удаленной сети по <a href="http://en.wikipedia.org/wiki/Remote_Desktop_Protocol">RDP</a>. Для осуществления такого соединения на машине должен быть установлен специальный софт, создающий закрытый канал между клиентской машиной и удаленной сетью. После установки этого софта можно уже запускать не только клиент RDP (mstsc.exe), но и другие разрешенные программы (telnet/ssh, ftp, radmin и т.д.), которым нужен доступ в удаленную сеть.</p>

<p>И все бы ничего, когда клиентская машина работает на Windows. В этом случае ты просто заходишь на страничку, логин/пароль, прямо со страницы стартует activex, который ставит и запускает все что нужно, и можно работать.</p>

<p>Сложности начинаются, когда клиентская машина - это не Windows. Конечно, клиенты RDP уже есть не только под Windows, но это не особо помогает, так как без того особого софта для туннеля ничего работать все равно не будет. И как назло, нет возможности докупить серверную часть этого VPN&rsquo;а для поддержки клиентов не только под Windows.</p>

<p>Что люди, пользователи Linux и Mac, вынуждены делать? Ставить Windows на виртуальной машине и запускать RDP в ней. Хорошее решение, но с одним недостатком. Виртуальная машина с обычными виндами расползается на пару гигов как минимум, и загружается не очень быстро.</p>

<p>Я немного погуглил, и наткнулся на <a href="http://www.google.co.uk/search?q=MicroXP-0.82.iso">MicroXP</a>. Это сильно урезанная версия XP SP3. Дистрибутив занимает ~100 мегов, а в установленном виде ~250. Под VirtualBox&rsquo;ом на Mac Air установка занимает минут пять, а уже установленная система статует секунд за 10. Виртуальная машина минимальна - динамический диск на 300 мегов (реально будет ~250) и 64 мегов памяти.</p>

<p>После установки MicroXP надо доустановить &ldquo;Virtual Box Guest Additions&rdquo; (~200кб) для возможности расшаривать каталоги и не мучаться с мышкой, и добавить <a href="http://www.google.co.uk/search?q=RemoteDesktop-MicroXp-0.82.zip">клиента RDP</a> (его, как раз, можно перенести через расшареный каталог).</p>

<p>В общем, если вам нужны минималистические ультрабыстрые XP, то MicroXP отличный кандидат.</p>

<p>P.S. Вопросы легальности этой сборки XP оставим на бортом. Поэтому ссылки ведут на торренты. Кстати, не ходите на сайт microxp.org. Это fake, для сбора почтовых адресов, видимо.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ссылка на анализ результатов взлома программы однокомандного процессора NORCPU]]></title>
    <link href="http://demin.ws/blog/russian/2011/02/16/norcpu-hack-me-challenge-analysis-link/"/>
    <updated>2011-02-16T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/02/16/norcpu-hack-me-challenge-analysis-link/</id>
    <content type="html"><![CDATA[<p>По какой-то причине Google Reader не смог проиндексировать мой большой предыдущий пост - <a href="http://demin.ws/blog/russian/2011/02/16/norcpu-hack-me-challenge-analysis/">Анализ результатов взлома программы однокомандного процессора NORCPU</a>, посему для тех, кто читает через Google Reader, делаю этот пост-ссылку.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Анализ результатов взлома программы однокомандного процессора NORCPU]]></title>
    <link href="http://demin.ws/blog/russian/2011/02/16/norcpu-hack-me-challenge-analysis/"/>
    <updated>2011-02-16T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/02/16/norcpu-hack-me-challenge-analysis/</id>
    <content type="html"><![CDATA[<p>Итак, <a href="http://demin.ws/blog/russian/2011/02/08/norcpu-hack-me-challenge/">публикуя анонс</a> <a href="http://demin.ws/projects/norcpu/challenge/norcpu.html">задачи</a> по взлому программы, работающей на однокомандном процессоре NORCPU, я наивно думал, что хотя бы до конца марта я получу какое-нибудь решение.</p>

<p>Замечание: все цитируемые ниже фрагменты приводятся как есть, с минимальными правками в плане форматирования на странице.</p>

<p>В реальности все было иначе. Буквально через пару часов после <a href="http://habrahabr.ru/blogs/crazydev/113406/">поста на Хабре</a> пришло письмо от <strong>Vasiliy Artemev</strong>:</p>

<blockquote>
<p>Secret code: 139471</p>
</blockquote>

<p>Это было правильным ответом. Василий официально стал первым и получил законные 100$ призовых. Он любезно рассказал, что взломал методом грубой силы, перебором. Действительно, простейшая переборная атака заставляла программу выдать секретное слово уже на 3-х символьном пароле. Увы, моя реализация хеш-функции для пароля стала уязвимым звеном.</p>

<p>Но полного анализа не было, и к тому же Василий предложил спонсировать дальнейший анализ задачи в виде 50$ из начального призового фонда. В общем, анализ продолжался.</p>

<p>Тем временем я сделал <a href="http://demin.ws/projects/norcpu/challenge/norcpu2.html">новую версию задачи</a>, где уже не было хеширования, а был просто зашифрованный пароль. Я думал, это усложнит взлом. Но вечером того же дня приходит письмо от <strong>Anton Bukov</strong>:</p>

<blockquote>
<p>Ответ на NORCPU hackme challenge, Version 2: &ldquo;R0und2 D0ne!&rdquo; ?</p>
</blockquote>

<p>Это правильный ответ. Я недоумевал. Как можно было так быстро разобраться?</p>

<p>Антон также любезно рассказал, как ему удалось получить ответ:</p>

<blockquote>
<p>Мой взлом основан на строке:</p>
</blockquote>

<pre class="hl">
mem <span class="hl opt">=</span> mem_0<span class="hl opt">.</span><span class="hl kwd">slice</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">);</span>
</pre>

<blockquote>
<p>Тут массив копируется, если дважды вызвать функцию calc на одном массиве, то для любого пароля будет отображен ответ. У меня в коде это выглядело так:</p>
</blockquote>

<pre class="hl">
wcout <span class="hl opt">&lt;&lt;</span> <span class="hl kwd">calc</span><span class="hl opt">(</span>L<span class="hl str">&quot;0&quot;</span><span class="hl opt">) &lt;&lt;</span> endl <span class="hl opt">&lt;&lt;</span> <span class="hl kwd">calc</span><span class="hl opt">(</span>L<span class="hl str">&quot;0&quot;</span><span class="hl opt">) &lt;&lt;</span> endl<span class="hl opt">;</span>
</pre>

<blockquote>
<p>Я так догадываюсь для предотвращения этого и осуществлялось копирование. Боюсь это не тот способ, которого вы ждали. Я и сам удивился, когда заметил ответ в output-е. Ну а после уже разобрался из-за чего он вылез.</p>
</blockquote>

<p>Антон случайно нашел баг, из-за которого программа опять сама выдавала секрет. Надо было запустить программу повторно без приведения памяти эмулятора в исходное состояния.</p>

<p>Корень проблемы:</p>

<pre class="hl">
...
  IS_0<span class="hl opt">(</span>flag<span class="hl opt">)</span>
  <span class="hl kwa">JZ</span> okay
  EXIT<span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">)</span>
<span class="hl kwc">okay:</span>
  <span class="hl slc">; print the secret</span>
...
</pre>

<p>После первого неправильного прогона и отказа в выводе секрета программа останавливалась в строке 4, и регистр комманд <code>ip</code> уже указывал на метку <code>okay</code>. Поэтому если интерпретатор просто запустить еще раз без инициализации памяти (а все регистры, включая <code>ip</code> находятся в памяти), он продолжит выполнение с метки <code>okay</code> и выведет секрет.</p>

<p>Досадно. Я быстро исправил проблему и выложил версию 2.1, в котором этого эффекта уже не было.</p>

<p>Прошло пару дней.</p>

<p>И вот приходит письмо от пользователя <strong>a5b</strong> с Хабра:</p>

<blockquote>
<p>Хотпатчинг переходов и ответ pw: <code>abcd</code> resp: <code>R0und2 D0ne!</code></p>

<ul>
<li>пароль естественно неверный</li>
<li>инвертировал записываемые данные в <code>(i == 27692 || i == 31712)</code></li>
</ul>
</blockquote>

<p>Формально, это решение, но нет пароля, а значит полного анализа тоже нет.</p>

<p>Но через час от <strong>a5b</strong> приходит довесок:</p>

<blockquote>
<pre><code>h1cKmE1fUsAn

input data:
chr conI LEET xor
CHR1 13417 13313 104 h
CHR2 39953 39968 49 1
CHR3 54302 54397 99 c
CHR4 32223 32148 75 K
CHR5 30900 30937 109 m
CHR6 27373 27304 69 E
CHR7 16420 16405 49 1
CHR8 49210 49244 102 f
CHR9 16740 16689 85 U
CHR10 50115 50096 115 s
CHR11 19308 19245 65 A
CHR12 57802 57764 110 n

static init:
CHRi 59609= 59651
CONi 59610= 59634
CNTR 59611=12
SUM 59608=0
LEET 59607 = 13313

1:
[59609]+1 -&gt; [59609] // select next chr
[59610]+1 -&gt; [59610] // select next con

SUM |= CHRi ^ LEET ^ CONi
LEET = LEET * 3 + 29

[59611]: if([59611] != 0) Loop 1

...
if(SUM != 0) exit
else print R0und2 D0ne // эту часть подробно не смотрел.
// Судя по модификациям кода (продвижение индекса), загружает 12 констант:
// 29528 22899 2971 9089 27542 17353 52278 25635 11626 34909 39131 51838,
// над каждой колдует и пишет в вывод
</code></pre>
</blockquote>

<p>А вот это уже анализ. <strong>a5b</strong> стал первым, кто прислал алгоритм <a href="http://demin.ws/projects/norcpu/challenge/norcpu2.html">задачи номер 2</a>.</p>

<p>В тот же день вечером приходит письмо от <strong>Max Filippov</strong>:</p>

<blockquote>
<p>Algorithm that was used to check password correctness in the first round was the following:</p>
</blockquote>

<pre class="hl">
<span class="hl kwb">bool</span> <span class="hl kwd">check</span><span class="hl opt">(</span><span class="hl kwb">const char</span> <span class="hl opt">*</span>p<span class="hl opt">)</span>
<span class="hl opt">{</span>
   <span class="hl kwb">int</span> v <span class="hl opt">=</span> <span class="hl num">0x1040</span><span class="hl opt">;</span>

   <span class="hl kwa">for</span><span class="hl opt">(; *</span>p<span class="hl opt">; ++</span>p<span class="hl opt">)</span>
   <span class="hl opt">{</span>
       v <span class="hl opt">^= *</span>p<span class="hl opt">;</span>
       <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> <span class="hl num">8</span><span class="hl opt">; ++</span>i<span class="hl opt">)</span>
       <span class="hl opt">{</span>
           <span class="hl kwb">int</span> f <span class="hl opt">=</span> v <span class="hl opt">&amp;</span> <span class="hl num">1</span><span class="hl opt">;</span>
           v <span class="hl opt">&gt;&gt;=</span> <span class="hl num">1</span><span class="hl opt">;</span>
           <span class="hl kwa">if</span> <span class="hl opt">(</span>f<span class="hl opt">)</span>
               v <span class="hl opt">^=</span> <span class="hl num">0x1408</span><span class="hl opt">;</span>
       <span class="hl opt">}</span>
   <span class="hl opt">}</span>
   <span class="hl kwa">return</span> v <span class="hl opt">==</span> <span class="hl num">0x1c89</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<blockquote>
<p>that is, sort of CRC.</p>

<p>To discover it I&rsquo;ve collected NORCPU execution trace and &ldquo;disassembled&rdquo; it.</p>

<p>Modified NORCPU source and disassembler are attached, and also may be found there: <a href="http://jcmvbkbc.spb.ru/git/?p=dumb/norcpu.git;a=summary">http://jcmvbkbc.spb.ru/git/?p=dumb/norcpu.git;a=summary</a></p>
</blockquote>

<p>И довесок:</p>

<blockquote>
<p>The method used is pretty straightforward:</p>

<ul>
<li>collect execution trace</li>
<li>recognize instruction patterns and collapse sequences of primitive instructions to more complex ones</li>
<li>analyze disassembled trace</li>
</ul>

<p>So, first I needed trace: I copied javascript text into cpp source, fixed lingual differences and inserted the following printf:</p>
</blockquote>

<pre class="hl">
<span class="hl kwa">while</span> <span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">) {</span>
  <span class="hl kwb">int</span> i <span class="hl opt">=</span> mem<span class="hl opt">[</span>ip<span class="hl opt">];</span>
  <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;%04x:NOR(%04x, %04x =&gt; %04x) &quot;</span><span class="hl opt">,</span> i<span class="hl opt">,</span> mem<span class="hl opt">[</span>i<span class="hl opt">],</span> mem<span class="hl opt">[</span>i <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">],</span> mem<span class="hl opt">[</span>i <span class="hl opt">+</span> <span class="hl num">2</span><span class="hl opt">]);</span>
  <span class="hl kwb">int</span> a <span class="hl opt">=</span> mem<span class="hl opt">[</span>i <span class="hl opt">+</span> <span class="hl num">0</span><span class="hl opt">];</span>
</pre>

<blockquote>
<p>so that I got a long line (about 8Mb) of primitive instruction execution trace.</p>

<p>Then I started constructing <code>sed</code> script that would make it readable.</p>

<p>First, it broke the trace line-wise, one instruction per line (288323 lines, will read it in case of insomnia). I took a look at processed trace and recorded several obvious instruction patterns into <code>sed</code>. Then reran script, took next look, recorded more patterns, &hellip;</p>

<p>This way I figured out all boolean logic commands and jumps. Then rotations left. Each time new command got recognized, new filtered processed trace was suggesting next step, e.g. 15 ROTL equals ROTR etc.</p>

<p>Then I looked into your article at &ldquo;<a href="http://demin.ws/blog/russian/2010/03/26/one-command-cpu/">Модель процессора с одной командой</a>&rdquo;. And found addition pattern in disassembly. And recorded it in <code>sed</code> script.</p>

<p>After that I was able to just read the trace (which shrunk to 1035 lines). Its inner loop fit into one page, I just made some notes on a scratchpad:</p>

<pre><code>[f1ba]: current in-T index (i)
[f1b4]: LEN
[f1b5]: 8

0012-0035:[f1b9] ^= (T[i] &amp; 0xff)

006d-007b:[f1b8] = [f1b9] &amp; 1
008a-0158:[f1b9] &gt;&gt;= 1
0167-10c7:[f1aa] = [f1b8] + -1, [f1ab] = !carry
10ca-10e6:jmp on carry to 1145:110d

110d-111b:[f1b9] ^= 1408

1145-1f4f:--[f1b5]
20a5-3005:[f1aa] = [f1b5] + -1, f1ab = !carry
3008-3024:jmp on carry to 006d:304b

304b-304b:++i
3fab-3fab:--LEN
4f0b-5e8a:jmp on carry to 5eb1:6
</code></pre>

<p>then I browsed through the repetitions of this inner loop and found the end of the outer loop.</p>

<pre><code>5eb1-6e74:check 1c89
</code></pre>

<p>Then just translated it into C. It all took me three evenings.</p>
</blockquote>

<p>Затем от <strong>Max Filippov</strong> пришло решение и <a href="http://demin.ws/projects/norcpu/challenge/norcpu2.html">второй задачи</a>.</p>

<blockquote>
<p>Ответ на второй тур &ndash; <code>h1cKmE1fUsAn</code></p>

<p>Результат &ndash; <code>R0und2 D0ne!</code></p>

<p>Алгоритм проверки пароля такой:</p>
</blockquote>

<pre class="hl">
<span class="hl kwb">bool</span> <span class="hl kwd">check</span><span class="hl opt">(</span><span class="hl kwb">const char</span> <span class="hl opt">*</span>p<span class="hl opt">)</span>
<span class="hl opt">{</span>
   <span class="hl kwb">static const int</span> xor_array<span class="hl opt">[] = {</span>
       <span class="hl num">0x3469</span><span class="hl opt">,</span>
       <span class="hl num">0x9c11</span><span class="hl opt">,</span>
       <span class="hl num">0xd41e</span><span class="hl opt">,</span>
       <span class="hl num">0x7ddf</span><span class="hl opt">,</span>
       <span class="hl num">0x78b4</span><span class="hl opt">,</span>
       <span class="hl num">0x6aed</span><span class="hl opt">,</span>
       <span class="hl num">0x4024</span><span class="hl opt">,</span>
       <span class="hl num">0xc03a</span><span class="hl opt">,</span>
       <span class="hl num">0x4164</span><span class="hl opt">,</span>
       <span class="hl num">0xc3c3</span><span class="hl opt">,</span>
       <span class="hl num">0x4b6c</span><span class="hl opt">,</span>
       <span class="hl num">0xe1ca</span><span class="hl opt">,</span>
   <span class="hl opt">};</span>

   <span class="hl kwb">int</span> v <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
   <span class="hl kwb">int</span> x <span class="hl opt">=</span> <span class="hl num">0x3401</span><span class="hl opt">;</span>

   <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> <span class="hl num">12</span><span class="hl opt">; ++</span>i<span class="hl opt">)</span>
   <span class="hl opt">{</span>
       <span class="hl kwb">int</span> f <span class="hl opt">=</span> p<span class="hl opt">[</span>i<span class="hl opt">] ^</span> x <span class="hl opt">^</span> xor_array<span class="hl opt">[</span>i<span class="hl opt">];</span>
       <span class="hl slc">// printf(&quot;x: %04x, f: %04x\n&quot;, x, f);</span>
       v <span class="hl opt">|=</span> f<span class="hl opt">;</span>
       x <span class="hl opt">= (</span>x <span class="hl opt">*</span> <span class="hl num">3</span> <span class="hl opt">+</span> <span class="hl num">0x1d</span><span class="hl opt">) &amp;</span> <span class="hl num">0xffff</span><span class="hl opt">;</span>
   <span class="hl opt">}</span>
   <span class="hl kwa">return</span> <span class="hl opt">!</span>v<span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<blockquote>
<p>Закомментированный <code>printf</code> выводит ключевую фразу по ходу.</p>

<p>Методика анализа &ndash; как и в первом туре &ndash; дизассемблирование трассы выполнения.</p>

<p>Первый тур был откровенно интереснее.</p>
</blockquote>

<p>И, наконец, последнее полученное решение от <strong>Salo Kril</strong> для <a href="http://demin.ws/projects/norcpu/challenge/norcpu.html">первой задачи</a>.</p>

<p>Особых пояснений нет &ndash; просто исходники.</p>

<pre class="hl">
<span class="hl slc">// Генерация паролей</span>

<span class="hl slc">// Brute_force(3);</span>

WORD <span class="hl kwd">ks_f</span><span class="hl opt">(</span><span class="hl kwb">char</span> <span class="hl opt">*</span>buff<span class="hl opt">,</span> <span class="hl kwb">int</span> len<span class="hl opt">)</span>
<span class="hl opt">{</span>
   <span class="hl kwb">int</span> i<span class="hl opt">,</span> j<span class="hl opt">;</span>
   WORD ks <span class="hl opt">=</span> <span class="hl num">0x1040</span><span class="hl opt">;</span>

   <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> len<span class="hl opt">;</span> i<span class="hl opt">++)</span>
   <span class="hl opt">{</span>
       ks <span class="hl opt">^=</span> buff<span class="hl opt">[</span>i<span class="hl opt">];</span>
       <span class="hl kwa">for</span> <span class="hl opt">(</span>j <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> j <span class="hl opt">&lt;</span> <span class="hl num">8</span><span class="hl opt">;</span> j<span class="hl opt">++)</span>
       <span class="hl opt">{</span>
           <span class="hl kwa">if</span><span class="hl opt">((</span>ks <span class="hl opt">&amp;</span> <span class="hl num">1</span><span class="hl opt">) ==</span> <span class="hl num">0</span><span class="hl opt">)</span>
               ks <span class="hl opt">=</span> ks <span class="hl opt">&gt;&gt;</span> <span class="hl num">1</span><span class="hl opt">;</span>
           <span class="hl kwa">else</span>
               ks <span class="hl opt">= (</span>ks <span class="hl opt">&gt;&gt;</span> <span class="hl num">1</span><span class="hl opt">) ^</span> <span class="hl num">0x1408</span><span class="hl opt">;</span>
       <span class="hl opt">}</span>
   <span class="hl opt">}</span>
   <span class="hl kwa">return</span> ks<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">Brute_force</span><span class="hl opt">(</span><span class="hl kwb">int</span> n<span class="hl opt">)</span>
<span class="hl opt">{</span>
   <span class="hl kwb">int</span> i<span class="hl opt">;</span>
   <span class="hl kwb">static char</span> alphabet<span class="hl opt">[] =</span>
       <span class="hl str">&quot;</span><span class="hl esc">\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F</span><span class="hl str">&quot;</span>
       <span class="hl str">&quot;</span><span class="hl esc">\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B\x3C\x3D\x3E\x3F</span><span class="hl str">&quot;</span>
       <span class="hl str">&quot;</span><span class="hl esc">\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F</span><span class="hl str">&quot;</span>
       <span class="hl str">&quot;</span><span class="hl esc">\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5A\x5B\x5C\x5D\x5E\x5F</span><span class="hl str">&quot;</span>
       <span class="hl str">&quot;</span><span class="hl esc">\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6A\x6B\x6C\x6D\x6E\x6F</span><span class="hl str">&quot;</span>
       <span class="hl str">&quot;</span><span class="hl esc">\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7A\x7B\x7C\x7D\x7E</span><span class="hl str">&quot;</span><span class="hl opt">;</span>

   <span class="hl kwa">if</span><span class="hl opt">(</span>n <span class="hl opt">==</span> <span class="hl num">0</span><span class="hl opt">)</span>
   <span class="hl opt">{</span>
       <span class="hl kwa">if</span><span class="hl opt">(</span><span class="hl kwd">ks_f</span><span class="hl opt">(</span>buff_bf<span class="hl opt">,</span> BF_N<span class="hl opt">) ==</span> <span class="hl num">0x1c89</span><span class="hl opt">)</span>
           <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;%s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span>buff_bf<span class="hl opt">);</span>
       <span class="hl kwa">return</span><span class="hl opt">;</span>
   <span class="hl opt">}</span>

   n<span class="hl opt">--;</span>
   <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> alphabet<span class="hl opt">[</span>i<span class="hl opt">];</span> i<span class="hl opt">++)</span>
   <span class="hl opt">{</span>
       buff_bf<span class="hl opt">[</span>n<span class="hl opt">] =</span> alphabet<span class="hl opt">[</span>i<span class="hl opt">];</span>
       <span class="hl kwd">Brute_force</span><span class="hl opt">(</span>n<span class="hl opt">);</span>
   <span class="hl opt">}</span>
<span class="hl opt">}</span>
</pre>

<p>и реконструированный код:</p>

<pre class="hl">
<span class="hl ppc">#define DEST_COUNT  0xF1FE</span>
<span class="hl kwc">extern</span> WORD mem<span class="hl opt">[];</span>

<span class="hl com">/*</span>
<span class="hl com">    Secret code: 139471</span>
<span class="hl com">*/</span>
<span class="hl kwb">void</span> <span class="hl kwd">reconstructed_fn</span><span class="hl opt">(</span><span class="hl kwb">void</span><span class="hl opt">)</span>
<span class="hl opt">{</span>
    <span class="hl kwb">int</span> i<span class="hl opt">,</span> j<span class="hl opt">;</span>
    WORD src<span class="hl opt">,</span> dest<span class="hl opt">,</span> key<span class="hl opt">,</span> count<span class="hl opt">,</span> hash<span class="hl opt">,</span> hash_OK<span class="hl opt">,</span> key_const<span class="hl opt">;</span>

    src <span class="hl opt">=</span> mem<span class="hl opt">[</span><span class="hl num">0xF1BA</span><span class="hl opt">];</span>     <span class="hl slc">// input string</span>
    count <span class="hl opt">=</span> mem<span class="hl opt">[</span><span class="hl num">0xF1ED</span><span class="hl opt">];</span>   <span class="hl slc">// input string length</span>
    dest <span class="hl opt">=</span> mem<span class="hl opt">[</span><span class="hl num">0xF1BB</span><span class="hl opt">];</span>    <span class="hl slc">// 0xf1ff</span>
    hash_OK <span class="hl opt">=</span> mem<span class="hl opt">[</span><span class="hl num">0xF1BC</span><span class="hl opt">];</span> <span class="hl slc">// 0x1c89</span>
    hash <span class="hl opt">=</span> mem<span class="hl opt">[</span><span class="hl num">0xF1B9</span><span class="hl opt">];</span>    <span class="hl slc">// 0x1040</span>


    <span class="hl kwa">for</span><span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> count<span class="hl opt">;</span> i<span class="hl opt">++)</span>
    <span class="hl opt">{</span>
        hash <span class="hl opt">^=</span> mem<span class="hl opt">[</span>src <span class="hl opt">+</span> i<span class="hl opt">] &amp;</span> <span class="hl num">0xFF</span><span class="hl opt">;</span>

        <span class="hl kwa">for</span> <span class="hl opt">(</span>j <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> j <span class="hl opt">&lt;</span> <span class="hl num">8</span><span class="hl opt">;</span> j<span class="hl opt">++)</span>
        <span class="hl opt">{</span>
            <span class="hl kwa">if</span> <span class="hl opt">((</span>hash <span class="hl opt">&amp;</span> <span class="hl num">1</span><span class="hl opt">) ==</span> <span class="hl num">0</span><span class="hl opt">)</span>
                hash <span class="hl opt">=</span> hash <span class="hl opt">&gt;&gt;</span> <span class="hl num">1</span><span class="hl opt">;</span>
            <span class="hl kwa">else</span>
                hash <span class="hl opt">= (</span>hash <span class="hl opt">&gt;&gt;</span> <span class="hl num">1</span><span class="hl opt">) ^</span> <span class="hl num">0x1408</span><span class="hl opt">;</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>hash <span class="hl opt">==</span> hash_OK<span class="hl opt">)</span>
    <span class="hl opt">{</span>
        src <span class="hl opt">=</span> mem<span class="hl opt">[</span><span class="hl num">0x6EB6</span><span class="hl opt">];</span>              <span class="hl slc">// &quot;Secret code: 139471&quot;</span>
        count <span class="hl opt">=</span> mem<span class="hl opt">[</span><span class="hl num">0xF1C7</span><span class="hl opt">];</span>            <span class="hl slc">// 19</span>
        key <span class="hl opt">= ((</span>hash <span class="hl opt">&gt;&gt;</span> <span class="hl num">8</span><span class="hl opt">) ^</span> hash<span class="hl opt">) +</span> <span class="hl num">1</span><span class="hl opt">;</span>
        key_const <span class="hl opt">=</span> mem<span class="hl opt">[</span><span class="hl num">0x6EA8</span><span class="hl opt">];</span>        <span class="hl slc">// 11</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">else</span>
    <span class="hl opt">{</span>
        src <span class="hl opt">=</span> mem<span class="hl opt">[</span><span class="hl num">0x5EBE</span><span class="hl opt">];</span>          <span class="hl slc">// &quot;Wrong password!&quot;</span>
        count <span class="hl opt">=</span> mem<span class="hl opt">[</span><span class="hl num">0xF1DC</span><span class="hl opt">];</span>        <span class="hl slc">// 15</span>
        key <span class="hl opt">=</span> mem<span class="hl opt">[</span><span class="hl num">0xF1BD</span><span class="hl opt">];</span>
        key_const <span class="hl opt">=</span> mem<span class="hl opt">[</span><span class="hl num">0xF1BE</span><span class="hl opt">];</span>    <span class="hl slc">// 17</span>
    <span class="hl opt">}</span>

    mem<span class="hl opt">[</span>DEST_COUNT<span class="hl opt">] =</span> count<span class="hl opt">;</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> count<span class="hl opt">;</span> i<span class="hl opt">++)</span>
    <span class="hl opt">{</span>
        mem<span class="hl opt">[</span>dest <span class="hl opt">+</span> i<span class="hl opt">] =</span> mem<span class="hl opt">[</span>src <span class="hl opt">+</span> i<span class="hl opt">] ^</span> key<span class="hl opt">;</span>
        key <span class="hl opt">=</span> key <span class="hl opt">*</span> <span class="hl num">3</span> <span class="hl opt">+</span> key_const<span class="hl opt">;</span>
    <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl com">/*</span>
<span class="hl com">--------------------------------------------------------------------------------------------</span>
<span class="hl com">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span>
<span class="hl com">--------------------------------------------------------------------------------------------</span>
<span class="hl com">*/</span>
WORD <span class="hl kwa">and</span><span class="hl opt">(</span>WORD w1<span class="hl opt">,</span> WORD w2<span class="hl opt">)</span>
<span class="hl opt">{</span>
    <span class="hl kwa">return</span> w1 <span class="hl opt">&amp;</span> w2<span class="hl opt">;</span>
<span class="hl opt">}</span>

WORD <span class="hl kwa">or</span><span class="hl opt">(</span>WORD w1<span class="hl opt">,</span> WORD w2<span class="hl opt">)</span>
<span class="hl opt">{</span>
    <span class="hl kwa">return</span> w1 <span class="hl opt">|</span> w2<span class="hl opt">;</span>
<span class="hl opt">}</span>

WORD <span class="hl kwa">xor</span><span class="hl opt">(</span>WORD w1<span class="hl opt">,</span> WORD w2<span class="hl opt">)</span>
<span class="hl opt">{</span>
    <span class="hl kwa">return</span> w1 <span class="hl opt">^</span> w2<span class="hl opt">;</span>
<span class="hl opt">}</span>

WORD <span class="hl kwd">rol</span><span class="hl opt">(</span>WORD w1<span class="hl opt">,</span> WORD n<span class="hl opt">)</span>
<span class="hl opt">{</span>
    <span class="hl kwa">return</span> <span class="hl opt">(</span>w1 <span class="hl opt">&lt;&lt;</span> n<span class="hl opt">) | (</span>w1 <span class="hl opt">&gt;&gt; (</span><span class="hl num">16</span> <span class="hl opt">-</span> n<span class="hl opt">));</span>
<span class="hl opt">}</span>

WORD <span class="hl kwd">ror</span><span class="hl opt">(</span>WORD w1<span class="hl opt">,</span> WORD n<span class="hl opt">)</span>
<span class="hl opt">{</span>
    <span class="hl kwa">return</span> <span class="hl opt">(</span>w1 <span class="hl opt">&gt;&gt;</span> n<span class="hl opt">) | (</span>w1 <span class="hl opt">&lt;&lt; (</span><span class="hl num">16</span> <span class="hl opt">-</span> n<span class="hl opt">));</span>
<span class="hl opt">}</span>
WORD <span class="hl kwd">extend_16</span><span class="hl opt">(</span>WORD k1<span class="hl opt">)</span>
<span class="hl opt">{</span>
    <span class="hl kwb">int</span> i<span class="hl opt">,</span> k2<span class="hl opt">;</span>

    <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> k2 <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> <span class="hl num">16</span><span class="hl opt">;</span> i<span class="hl opt">++)</span>
    <span class="hl opt">{</span>
        k2 <span class="hl opt">=</span> <span class="hl kwa">or</span><span class="hl opt">(</span>k2<span class="hl opt">,</span> k1<span class="hl opt">);</span>
        k1 <span class="hl opt">=</span> <span class="hl kwd">rol</span><span class="hl opt">(</span>k1<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">return</span> k2<span class="hl opt">;</span>
<span class="hl opt">}</span>

WORD <span class="hl kwd">add</span><span class="hl opt">(</span>WORD <span class="hl opt">*</span>kk1<span class="hl opt">,</span> WORD a<span class="hl opt">,</span> WORD b<span class="hl opt">)</span>
<span class="hl opt">{</span>
    WORD mask_bit<span class="hl opt">,</span> aa0<span class="hl opt">,</span> aa1<span class="hl opt">,</span> tmp1<span class="hl opt">,</span> i<span class="hl opt">,</span> k1<span class="hl opt">,</span> k2<span class="hl opt">;</span>
    k1 <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    k2 <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    mask_bit <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>

    <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> <span class="hl num">16</span><span class="hl opt">;</span> i<span class="hl opt">++)</span>
    <span class="hl opt">{</span>
        k1 <span class="hl opt">=</span> <span class="hl kwa">and</span><span class="hl opt">(</span>k1<span class="hl opt">,</span> mask_bit<span class="hl opt">);</span>
        aa0 <span class="hl opt">=</span> <span class="hl kwa">xor</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">);</span>
        tmp1 <span class="hl opt">=</span> <span class="hl kwa">xor</span><span class="hl opt">(</span>aa0<span class="hl opt">,</span> k1<span class="hl opt">);</span>
        tmp1 <span class="hl opt">=</span> <span class="hl kwa">and</span><span class="hl opt">(</span>tmp1<span class="hl opt">,</span> mask_bit<span class="hl opt">);</span>
        k2 <span class="hl opt">=</span> <span class="hl kwa">or</span><span class="hl opt">(</span>tmp1<span class="hl opt">,</span> k2<span class="hl opt">);</span>
        aa1 <span class="hl opt">=</span> <span class="hl kwa">and</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">);</span>
        aa0 <span class="hl opt">=</span> <span class="hl kwa">and</span><span class="hl opt">(</span>k1<span class="hl opt">,</span> aa0<span class="hl opt">);</span>
        k1 <span class="hl opt">=</span> <span class="hl kwa">or</span><span class="hl opt">(</span>aa1<span class="hl opt">,</span> aa0<span class="hl opt">);</span>
        k1 <span class="hl opt">=</span> <span class="hl kwd">rol</span><span class="hl opt">(</span>k1<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">);</span>
        mask_bit <span class="hl opt">=</span> <span class="hl kwd">rol</span><span class="hl opt">(</span>mask_bit<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
    k1 <span class="hl opt">=</span> <span class="hl kwa">and</span><span class="hl opt">(</span>k1<span class="hl opt">,</span> mask_bit<span class="hl opt">);</span>
    <span class="hl opt">*</span>kk1 <span class="hl opt">=</span> <span class="hl kwd">extend_16</span><span class="hl opt">(</span>k1<span class="hl opt">);</span>

    <span class="hl kwa">return</span> k2<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">reconstr</span><span class="hl opt">(</span><span class="hl kwb">void</span><span class="hl opt">)</span>
<span class="hl opt">{</span>
    WORD k1<span class="hl opt">,</span> k2<span class="hl opt">,</span> src<span class="hl opt">,</span> dest<span class="hl opt">,</span> tmp1<span class="hl opt">,</span> key<span class="hl opt">,</span> count<span class="hl opt">,</span> tmp2<span class="hl opt">,</span> tmp3<span class="hl opt">,</span> i<span class="hl opt">,</span> ks<span class="hl opt">,</span> ks_OK<span class="hl opt">,</span> key_a<span class="hl opt">;</span>
    WORD mask_bit<span class="hl opt">,</span> aa1<span class="hl opt">,</span> aa0<span class="hl opt">;</span>

    k1 <span class="hl opt">=</span> mem<span class="hl opt">[</span><span class="hl num">0xF1AF</span><span class="hl opt">];</span>    <span class="hl slc">// 0x88</span>
    k2 <span class="hl opt">=</span> mem<span class="hl opt">[</span><span class="hl num">0xF1A3</span><span class="hl opt">];</span>    <span class="hl slc">// 0x47</span>
    src <span class="hl opt">=</span> mem<span class="hl opt">[</span><span class="hl num">0xF1BA</span><span class="hl opt">];</span>   <span class="hl slc">// input string</span>
    count <span class="hl opt">=</span> mem<span class="hl opt">[</span><span class="hl num">0xF1ED</span><span class="hl opt">];</span> <span class="hl slc">// input string length</span>
    dest <span class="hl opt">=</span> mem<span class="hl opt">[</span><span class="hl num">0xF1BB</span><span class="hl opt">];</span>  <span class="hl slc">// 0xf1ff</span>
    ks_OK <span class="hl opt">=</span> mem<span class="hl opt">[</span><span class="hl num">0xF1BC</span><span class="hl opt">];</span> <span class="hl slc">// 0x1c89             &quot;w&quot;:ks=0x0ACC   &quot;WWW&quot;:0x0FCE   &quot;123456789&quot;:ks=0x05E3</span>
    ks <span class="hl opt">=</span> mem<span class="hl opt">[</span><span class="hl num">0xF1B9</span><span class="hl opt">];</span>    <span class="hl slc">// 0x1040</span>


l_0006<span class="hl opt">:</span>
    ks <span class="hl opt">=</span> <span class="hl kwa">xor</span><span class="hl opt">(</span>ks<span class="hl opt">,</span> <span class="hl kwa">and</span><span class="hl opt">(</span>mem<span class="hl opt">[</span>src<span class="hl opt">],</span> <span class="hl num">0xFF</span><span class="hl opt">));</span>
    i <span class="hl opt">=</span> <span class="hl num">8</span><span class="hl opt">;</span>

l_006D<span class="hl opt">:</span>
    tmp3 <span class="hl opt">=</span> <span class="hl kwa">and</span><span class="hl opt">(</span>ks<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">);</span>
    ks <span class="hl opt">=</span> <span class="hl kwd">ror</span><span class="hl opt">(</span>ks<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">);</span>
    ks <span class="hl opt">=</span> <span class="hl kwa">and</span><span class="hl opt">(</span>ks<span class="hl opt">,</span> <span class="hl num">0x7FFF</span><span class="hl opt">);</span>
    tmp2 <span class="hl opt">=</span> <span class="hl kwd">add</span><span class="hl opt">(&amp;</span>k2<span class="hl opt">,</span> tmp3<span class="hl opt">, -</span><span class="hl num">1</span><span class="hl opt">);</span>
    <span class="hl kwa">if</span><span class="hl opt">(</span>k2 <span class="hl opt">!=</span> <span class="hl num">0</span><span class="hl opt">)</span>
    <span class="hl opt">{</span>
        ks <span class="hl opt">=</span> <span class="hl kwa">xor</span><span class="hl opt">(</span>ks<span class="hl opt">,</span> <span class="hl num">0x1408</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>

l_1145<span class="hl opt">:</span>
    i <span class="hl opt">=</span> <span class="hl kwd">add</span><span class="hl opt">(&amp;</span>k1<span class="hl opt">,</span> i<span class="hl opt">, -</span><span class="hl num">1</span><span class="hl opt">);</span>
    tmp2 <span class="hl opt">=</span> <span class="hl kwd">add</span><span class="hl opt">(&amp;</span>k2<span class="hl opt">,</span> i<span class="hl opt">, -</span><span class="hl num">1</span><span class="hl opt">);</span>
    <span class="hl kwa">if</span><span class="hl opt">(</span>k2 <span class="hl opt">!=</span> <span class="hl num">0</span><span class="hl opt">)</span>
        <span class="hl kwa">goto</span> l_006D<span class="hl opt">;</span>

l_304B<span class="hl opt">:</span>
    src <span class="hl opt">=</span> <span class="hl kwd">add</span><span class="hl opt">(&amp;</span>k1<span class="hl opt">,</span> src<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">);</span>
    count <span class="hl opt">=</span> <span class="hl kwd">add</span><span class="hl opt">(&amp;</span>k1<span class="hl opt">,</span> count<span class="hl opt">, -</span><span class="hl num">1</span><span class="hl opt">);</span>
    tmp2 <span class="hl opt">=</span> <span class="hl kwd">add</span><span class="hl opt">(&amp;</span>k2<span class="hl opt">,</span> count<span class="hl opt">, -</span><span class="hl num">1</span><span class="hl opt">);</span>
    <span class="hl kwa">if</span><span class="hl opt">(</span>k2 <span class="hl opt">!=</span> <span class="hl num">0</span><span class="hl opt">)</span>
        <span class="hl kwa">goto</span> l_0006<span class="hl opt">;</span>


    src <span class="hl opt">=</span> mem<span class="hl opt">[</span><span class="hl num">0x5EBE</span><span class="hl opt">];</span>    <span class="hl slc">// Wrong password!</span>
    count <span class="hl opt">=</span> mem<span class="hl opt">[</span><span class="hl num">0xF1DC</span><span class="hl opt">];</span>  <span class="hl slc">// 15</span>
    key <span class="hl opt">=</span> mem<span class="hl opt">[</span><span class="hl num">0xF1BD</span><span class="hl opt">];</span>
    key_a <span class="hl opt">=</span> mem<span class="hl opt">[</span><span class="hl num">0xF1BE</span><span class="hl opt">];</span>
    ks_OK <span class="hl opt">=</span> <span class="hl kwa">xor</span><span class="hl opt">(</span>ks_OK<span class="hl opt">,</span> ks<span class="hl opt">);</span>
    tmp2 <span class="hl opt">=</span> <span class="hl kwd">add</span><span class="hl opt">(&amp;</span>k2<span class="hl opt">,</span> ks_OK<span class="hl opt">, -</span><span class="hl num">1</span><span class="hl opt">);</span>

    <span class="hl kwa">if</span><span class="hl opt">(</span>k2 <span class="hl opt">!=</span> <span class="hl num">0</span><span class="hl opt">)</span>
        <span class="hl kwa">goto</span> l_8552<span class="hl opt">;</span>

l_6E9B<span class="hl opt">:</span>
    src <span class="hl opt">=</span> mem<span class="hl opt">[</span><span class="hl num">0x6EB6</span><span class="hl opt">];</span>     <span class="hl slc">// Secret code: 139471</span>
    count <span class="hl opt">=</span> mem<span class="hl opt">[</span><span class="hl num">0xF1C7</span><span class="hl opt">];</span>   <span class="hl slc">// 19</span>
    key <span class="hl opt">=</span> ks<span class="hl opt">;</span>
    key_a <span class="hl opt">=</span> mem<span class="hl opt">[</span><span class="hl num">0x6EA8</span><span class="hl opt">];</span>

    key <span class="hl opt">=</span> <span class="hl kwd">ror</span><span class="hl opt">(</span>key<span class="hl opt">,</span> <span class="hl num">8</span><span class="hl opt">);</span>
    key <span class="hl opt">=</span> <span class="hl kwa">and</span><span class="hl opt">(</span>key<span class="hl opt">,</span> <span class="hl num">0xFF</span><span class="hl opt">);</span>
    key <span class="hl opt">=</span> <span class="hl kwa">xor</span><span class="hl opt">(</span>ks<span class="hl opt">,</span> key<span class="hl opt">);</span>
    key <span class="hl opt">=</span> <span class="hl kwa">and</span><span class="hl opt">(</span>key<span class="hl opt">,</span> <span class="hl num">0x7FFF</span><span class="hl opt">);</span>
    key <span class="hl opt">=</span> <span class="hl kwd">add</span><span class="hl opt">(&amp;</span>k1<span class="hl opt">,</span> key<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">);</span>


l_8552<span class="hl opt">:</span>
    mem<span class="hl opt">[</span>DEST_COUNT<span class="hl opt">] =</span> count<span class="hl opt">;</span>
l_8558<span class="hl opt">:</span>
    mem<span class="hl opt">[</span>dest<span class="hl opt">] =</span> <span class="hl kwa">xor</span><span class="hl opt">(</span>mem<span class="hl opt">[</span>src<span class="hl opt">],</span> key<span class="hl opt">);</span>
    tmp3 <span class="hl opt">=</span> <span class="hl kwd">add</span><span class="hl opt">(&amp;</span>k1<span class="hl opt">,</span> key<span class="hl opt">,</span> key<span class="hl opt">);</span>
    key <span class="hl opt">=</span> <span class="hl kwd">add</span><span class="hl opt">(&amp;</span>k1<span class="hl opt">,</span> key<span class="hl opt">,</span> tmp3<span class="hl opt">);</span>
    key <span class="hl opt">=</span> <span class="hl kwd">add</span><span class="hl opt">(&amp;</span>k1<span class="hl opt">,</span> key<span class="hl opt">,</span> key_a<span class="hl opt">);</span>
    src <span class="hl opt">=</span> <span class="hl kwd">add</span><span class="hl opt">(&amp;</span>k1<span class="hl opt">,</span> src<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">);</span>
    dest <span class="hl opt">=</span> <span class="hl kwd">add</span><span class="hl opt">(&amp;</span>k1<span class="hl opt">,</span> dest<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">);</span>
    count <span class="hl opt">=</span> <span class="hl kwd">add</span><span class="hl opt">(&amp;</span>k1<span class="hl opt">,</span> count<span class="hl opt">, -</span><span class="hl num">1</span><span class="hl opt">);</span>
    tmp2 <span class="hl opt">=</span> <span class="hl kwd">add</span><span class="hl opt">(&amp;</span>k2<span class="hl opt">,</span> count<span class="hl opt">, -</span><span class="hl num">1</span><span class="hl opt">);</span>
    <span class="hl kwa">if</span><span class="hl opt">(</span>k2 <span class="hl opt">!=</span> <span class="hl num">0</span><span class="hl opt">)</span>
        <span class="hl kwa">goto</span> l_8558<span class="hl opt">;</span>

l_F186<span class="hl opt">:</span>
    mem<span class="hl opt">[</span><span class="hl num">0xF1B2</span><span class="hl opt">] =</span> mem<span class="hl opt">[</span><span class="hl num">0xF193</span><span class="hl opt">];</span> <span class="hl slc">// nc</span>
<span class="hl opt">}</span>
</pre>

<p>Итак, как вы уже поняли, решения были полностью исчерпывающими.</p>

<p>Всем приславшим огромное спасибо за проявленное внимание.</p>

<p>Ниже привожу оригинальные исходники обоих задач. Надо просто запустить питоновский скрипт, он скомпилирует код, написанный через функции-макросы, сделает тестовый прогон и сгенерирует html-страничку (нужен файл-шаблон <code>template.html</code>).</p>

<p>Весь архив вместе c решениями-взломами доступны в виде <a href="https://github.com/begoon/norcpu/">git репозитория</a>.</p>

<h2>Задача 1</h2>

<p>Файл <a href="https://github.com/begoon/norcpu/blob/master/v1/norcpu.py">norcpu.py</a> (<a href="https://github.com/begoon/norcpu/blob/master/v1/template.html">template.html</a>):</p>

<pre class="hl">
<span class="hl kwa">import</span> sys<span class="hl opt">,</span> re<span class="hl opt">,</span> time<span class="hl opt">,</span> string<span class="hl opt">,</span> binascii

verbose <span class="hl opt">=</span> <span class="hl kwa">False</span>
verbose_cpu <span class="hl opt">=</span> <span class="hl kwa">False</span>
scramble <span class="hl opt">=</span> <span class="hl kwa">True</span>

test_wrong_crc <span class="hl opt">=</span> <span class="hl num">0</span>

secret_code <span class="hl opt">=</span> <span class="hl str">&quot;Secret code: 139471&quot;</span>
password <span class="hl opt">=</span> <span class="hl str">&quot;h0cKmE1fUsAn&quot;</span>
guess    <span class="hl opt">=</span> <span class="hl str">&quot;123456789012&quot;</span>
guess    <span class="hl opt">=</span> password

<span class="hl slc"># Secret code message encryption mask.</span>
secret_coef_add <span class="hl opt">=</span> <span class="hl num">17</span>

message_text <span class="hl opt">=</span> <span class="hl str">&quot;Wrong password!&quot;</span>
<span class="hl slc"># Wrong password message encryption mask.</span>
message_mask <span class="hl opt">=</span> <span class="hl num">0x6301</span>
message_coef_add <span class="hl opt">=</span> <span class="hl num">11</span>

<span class="hl slc"># Non-standard CRC initial value (should be 0xFFFF).</span>
crc16_initial_value <span class="hl opt">=</span> <span class="hl num">0x1040</span>

<span class="hl slc"># Non-standard CRC constant (should be 0x8401).</span>
crc16_constant <span class="hl opt">=</span> <span class="hl num">0x1408</span>

code_segment <span class="hl opt">= []</span>
data_segment <span class="hl opt">= []</span>

label_count <span class="hl opt">=</span> <span class="hl num">0</span>

<span class="hl kwa">def</span> <span class="hl kwd">dump</span><span class="hl opt">(</span>data<span class="hl opt">,</span> length <span class="hl opt">=</span> <span class="hl num">8</span><span class="hl opt">):</span>
  result <span class="hl opt">= []</span>
  <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl kwb">xrange</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl kwb">len</span><span class="hl opt">(</span>data<span class="hl opt">),</span> length<span class="hl opt">):</span>
    line <span class="hl opt">=</span> data<span class="hl opt">[</span>i<span class="hl opt">:</span>i <span class="hl opt">+</span> length<span class="hl opt">]</span>
    hex_line <span class="hl opt">=</span> <span class="hl str">' '</span><span class="hl opt">.</span><span class="hl kwd">join</span><span class="hl opt">([</span><span class="hl str">&quot;%04X&quot;</span> <span class="hl opt">%</span> x <span class="hl kwa">for</span> x <span class="hl kwa">in</span> line<span class="hl opt">])</span>
    result<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span><span class="hl str">&quot;%04X: %-*s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl opt">% (</span>i<span class="hl opt">,</span> length<span class="hl opt">*</span><span class="hl num">5</span><span class="hl opt">,</span> hex_line<span class="hl opt">))</span>
  <span class="hl kwa">return</span> <span class="hl str">''</span><span class="hl opt">.</span><span class="hl kwd">join</span><span class="hl opt">(</span>result<span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">dump_js</span><span class="hl opt">(</span>data<span class="hl opt">,</span> length <span class="hl opt">=</span> <span class="hl num">8</span><span class="hl opt">):</span>
  result <span class="hl opt">= []</span>
  <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl kwb">xrange</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl kwb">len</span><span class="hl opt">(</span>data<span class="hl opt">),</span> length<span class="hl opt">):</span>
    line <span class="hl opt">=</span> data<span class="hl opt">[</span>i<span class="hl opt">:</span>i <span class="hl opt">+</span> length<span class="hl opt">]</span>
    hex_line <span class="hl opt">=</span> <span class="hl str">' '</span><span class="hl opt">.</span><span class="hl kwd">join</span><span class="hl opt">([</span><span class="hl str">&quot;0x%04X,&quot;</span> <span class="hl opt">%</span> x <span class="hl kwa">for</span> x <span class="hl kwa">in</span> line<span class="hl opt">])</span>
    result<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span><span class="hl str">&quot;%-*s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl opt">% (</span>length<span class="hl opt">*</span><span class="hl num">5</span><span class="hl opt">,</span> hex_line<span class="hl opt">))</span>
  <span class="hl kwa">return</span> <span class="hl str">''</span><span class="hl opt">.</span><span class="hl kwd">join</span><span class="hl opt">(</span>result<span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">calc_crc16</span><span class="hl opt">(</span>data<span class="hl opt">):</span>
  <span class="hl kwa">global</span> crc16_initial_value
  <span class="hl kwa">global</span> crc16_constant

  crc16 <span class="hl opt">=</span> crc16_initial_value
  <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl kwb">len</span><span class="hl opt">(</span>data<span class="hl opt">)):</span>
    ch <span class="hl opt">=</span> <span class="hl kwb">ord</span><span class="hl opt">(</span>data<span class="hl opt">[</span>i<span class="hl opt">]) &amp;</span> <span class="hl num">0xff</span>
    crc16 <span class="hl opt">=</span> crc16 ^ ch
    <span class="hl kwa">for</span> j <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">8</span><span class="hl opt">):</span>
      <span class="hl kwa">if</span> <span class="hl opt">((</span>crc16 <span class="hl opt">&amp;</span> <span class="hl num">1</span><span class="hl opt">) !=</span> <span class="hl num">0</span><span class="hl opt">):</span>
        crc16 <span class="hl opt">= (</span>crc16 <span class="hl opt">&gt;&gt;</span> <span class="hl num">1</span><span class="hl opt">)</span> ^ crc16_constant
      <span class="hl kwa">else</span><span class="hl opt">:</span>
        crc16 <span class="hl opt">=</span> crc16 <span class="hl opt">&gt;&gt;</span> <span class="hl num">1</span>
  <span class="hl kwa">return</span> crc16

crc16 <span class="hl opt">=</span> <span class="hl kwd">calc_crc16</span><span class="hl opt">(</span>password<span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">encode_string</span><span class="hl opt">(</span>data<span class="hl opt">,</span> name<span class="hl opt">,</span> mask<span class="hl opt">,</span> coef_add<span class="hl opt">):</span>
  <span class="hl kwa">global</span> mem<span class="hl opt">,</span> names
  offset <span class="hl opt">=</span> names<span class="hl opt">[</span>name<span class="hl opt">]</span>
  offset_sz <span class="hl opt">=</span> names<span class="hl opt">[</span>name <span class="hl opt">+</span> <span class="hl str">&quot;_sz&quot;</span><span class="hl opt">]</span>
  <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl kwb">len</span><span class="hl opt">(</span>data<span class="hl opt">)):</span>
    mem<span class="hl opt">[</span>offset <span class="hl opt">+</span> i<span class="hl opt">] =</span> <span class="hl kwb">ord</span><span class="hl opt">(</span>data<span class="hl opt">[</span>i<span class="hl opt">])</span> ^ mask
    mask <span class="hl opt">= (</span>mask <span class="hl opt">*</span> <span class="hl num">3</span> <span class="hl opt">+</span> coef_add<span class="hl opt">) &amp;</span> <span class="hl num">0xffff</span>
  mem<span class="hl opt">[</span>offset_sz<span class="hl opt">] =</span> <span class="hl kwb">len</span><span class="hl opt">(</span>data<span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">put_string</span><span class="hl opt">(</span>data<span class="hl opt">,</span> name<span class="hl opt">):</span>
  <span class="hl kwa">global</span> mem<span class="hl opt">,</span> names
  offset <span class="hl opt">=</span> names<span class="hl opt">[</span>name<span class="hl opt">]</span>
  offset_sz <span class="hl opt">=</span> names<span class="hl opt">[</span>name <span class="hl opt">+</span> <span class="hl str">&quot;_sz&quot;</span><span class="hl opt">]</span>
  <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl kwb">len</span><span class="hl opt">(</span>data<span class="hl opt">)):</span>
    mem<span class="hl opt">[</span>offset <span class="hl opt">+</span> i<span class="hl opt">] =</span> <span class="hl kwb">ord</span><span class="hl opt">(</span>data<span class="hl opt">[</span>i<span class="hl opt">])</span>
  mem<span class="hl opt">[</span>offset_sz<span class="hl opt">] =</span> <span class="hl kwb">len</span><span class="hl opt">(</span>data<span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">save_mem</span><span class="hl opt">(</span>name<span class="hl opt">,</span> size <span class="hl opt">= -</span><span class="hl num">1</span><span class="hl opt">):</span>
  f <span class="hl opt">=</span> <span class="hl kwb">open</span><span class="hl opt">(</span>name<span class="hl opt">,</span> <span class="hl str">&quot;w&quot;</span><span class="hl opt">)</span>
  <span class="hl kwa">if</span> size <span class="hl opt">== -</span><span class="hl num">1</span><span class="hl opt">:</span> size <span class="hl opt">=</span> <span class="hl kwb">len</span><span class="hl opt">(</span>mem<span class="hl opt">)</span>
  <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl opt">(</span>mem<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">:</span>size<span class="hl opt">]):</span>
    <span class="hl kwb">hex</span> <span class="hl opt">=</span> <span class="hl str">&quot;%04X&quot;</span> <span class="hl opt">%</span> i
    bin <span class="hl opt">=</span> binascii<span class="hl opt">.</span><span class="hl kwd">a2b_hex</span><span class="hl opt">(</span><span class="hl kwb">hex</span><span class="hl opt">)</span>
    f<span class="hl opt">.</span><span class="hl kwd">write</span><span class="hl opt">(</span>bin<span class="hl opt">)</span>
  f<span class="hl opt">.</span><span class="hl kwd">close</span><span class="hl opt">()</span>

<span class="hl kwa">def</span> <span class="hl kwd">next_label</span><span class="hl opt">():</span>
  <span class="hl kwa">global</span> label_count
  label_count <span class="hl opt">=</span> label_count <span class="hl opt">+</span> <span class="hl num">1</span>
  <span class="hl kwa">return</span> <span class="hl str">&quot;label_%04d&quot;</span> <span class="hl opt">%</span> label_count

<span class="hl kwa">def</span> <span class="hl kwd">code_rem</span><span class="hl opt">(</span>comment<span class="hl opt">):</span>
  code_segment<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span><span class="hl str">'; '</span> <span class="hl opt">+</span> comment<span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">data_rem</span><span class="hl opt">(</span>comment<span class="hl opt">):</span>
  data_segment<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span><span class="hl str">'; '</span> <span class="hl opt">+</span> comment<span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">data_label</span><span class="hl opt">(</span>name<span class="hl opt">):</span>
  data_segment<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span>name <span class="hl opt">+</span> <span class="hl str">&quot;:&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">code_label</span><span class="hl opt">(</span>name<span class="hl opt">):</span>
  code_segment<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span>name <span class="hl opt">+</span> <span class="hl str">&quot;:&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">code</span><span class="hl opt">(</span>value<span class="hl opt">):</span>
  printed <span class="hl opt">=</span> value
  <span class="hl kwa">if</span> <span class="hl kwb">type</span><span class="hl opt">(</span>value<span class="hl opt">).</span>__name__ <span class="hl opt">==</span> <span class="hl str">'int'</span><span class="hl opt">:</span>
    printed <span class="hl opt">=</span> <span class="hl str">&quot;%d&quot;</span> <span class="hl opt">%</span> value
  code_segment<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span><span class="hl str">&quot;  dw %s&quot;</span> <span class="hl opt">%</span> printed<span class="hl opt">)</span>

scramble_counter <span class="hl opt">=</span> <span class="hl num">0x27</span>

<span class="hl kwa">def</span> <span class="hl kwd">next_scramble_counter</span><span class="hl opt">():</span>
  <span class="hl kwa">global</span> scramble_counter
  scramble_counter <span class="hl opt">=</span> scramble_counter <span class="hl opt">*</span> <span class="hl num">3</span> <span class="hl opt">+</span> <span class="hl num">7</span>
  <span class="hl kwa">return</span> scramble_counter <span class="hl opt">&amp;</span> <span class="hl num">0xff</span>

<span class="hl kwa">def</span> <span class="hl kwd">word</span><span class="hl opt">(</span>value<span class="hl opt">):</span>
  <span class="hl kwa">if</span> value <span class="hl opt">== -</span><span class="hl num">1</span><span class="hl opt">:</span>
    <span class="hl kwa">if</span> scramble<span class="hl opt">:</span>
      value <span class="hl opt">=</span> <span class="hl kwd">next_scramble_counter</span><span class="hl opt">()</span>
    <span class="hl kwa">else</span><span class="hl opt">:</span>
      value <span class="hl opt">=</span> <span class="hl num">0</span>
  printed <span class="hl opt">=</span> value
  <span class="hl kwa">if</span> <span class="hl kwb">type</span><span class="hl opt">(</span>value<span class="hl opt">).</span>__name__ <span class="hl opt">==</span> <span class="hl str">'int'</span><span class="hl opt">:</span>
    printed <span class="hl opt">=</span> <span class="hl str">&quot;%d&quot;</span> <span class="hl opt">%</span> value
  data_segment<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span><span class="hl str">&quot;  dw %s&quot;</span> <span class="hl opt">%</span> printed<span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwb">buffer</span><span class="hl opt">(</span>length<span class="hl opt">,</span> value <span class="hl opt">= -</span><span class="hl num">1</span><span class="hl opt">):</span>
  <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> length<span class="hl opt">):</span>
    <span class="hl kwd">word</span><span class="hl opt">(</span>value<span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">var</span><span class="hl opt">(</span>name<span class="hl opt">,</span> value <span class="hl opt">= -</span><span class="hl num">1</span><span class="hl opt">):</span>
  <span class="hl kwd">data_label</span><span class="hl opt">(</span>name<span class="hl opt">);</span>
  <span class="hl kwd">word</span><span class="hl opt">(</span>value<span class="hl opt">);</span>

<span class="hl kwa">def</span> <span class="hl kwd">NOR</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">,</span> r<span class="hl opt">):</span>
  <span class="hl kwd">code_rem</span><span class="hl opt">(</span><span class="hl str">'NOR '</span> <span class="hl opt">+</span> <span class="hl kwb">str</span><span class="hl opt">(</span>a<span class="hl opt">) +</span> <span class="hl str">' '</span> <span class="hl opt">+</span> <span class="hl kwb">str</span><span class="hl opt">(</span>b<span class="hl opt">) +</span> <span class="hl str">' '</span> <span class="hl opt">+</span> <span class="hl kwb">str</span><span class="hl opt">(</span>r<span class="hl opt">))</span>
  <span class="hl kwd">code</span><span class="hl opt">(</span>a<span class="hl opt">)</span>
  <span class="hl kwd">code</span><span class="hl opt">(</span>b<span class="hl opt">)</span>
  <span class="hl kwd">code</span><span class="hl opt">(</span>r<span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">NOT</span><span class="hl opt">(</span>a<span class="hl opt">,</span> r<span class="hl opt">):</span>
  <span class="hl kwd">NOR</span><span class="hl opt">(</span>a<span class="hl opt">,</span> a<span class="hl opt">,</span> r<span class="hl opt">);</span>

<span class="hl kwa">def</span> <span class="hl kwd">OR</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">,</span> r<span class="hl opt">):</span>
  <span class="hl kwd">NOR</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">,</span> <span class="hl str">&quot;or_reg&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">NOT</span><span class="hl opt">(</span><span class="hl str">&quot;or_reg&quot;</span><span class="hl opt">,</span> r<span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;or_reg&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">AND</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">,</span> r<span class="hl opt">):</span>
  <span class="hl kwd">NOT</span><span class="hl opt">(</span>a<span class="hl opt">,</span> <span class="hl str">&quot;and_reg_a&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">NOT</span><span class="hl opt">(</span>b<span class="hl opt">,</span> <span class="hl str">&quot;and_reg_b&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">OR</span><span class="hl opt">(</span><span class="hl str">&quot;and_reg_a&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;and_reg_b&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;and_reg_a&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">NOT</span><span class="hl opt">(</span><span class="hl str">&quot;and_reg_a&quot;</span><span class="hl opt">,</span> r<span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;and_reg_a&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;and_reg_b&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">ANDi</span><span class="hl opt">(</span>a<span class="hl opt">,</span> imm<span class="hl opt">,</span> r<span class="hl opt">):</span>
  <span class="hl kwd">MOVi</span><span class="hl opt">(</span>imm<span class="hl opt">,</span> <span class="hl str">&quot;and_i_reg&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">AND</span><span class="hl opt">(</span>a<span class="hl opt">,</span> <span class="hl str">&quot;and_i_reg&quot;</span><span class="hl opt">,</span> r<span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;and_i_reg&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">XOR</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">,</span> r<span class="hl opt">):</span>
  <span class="hl kwd">NOT</span><span class="hl opt">(</span>a<span class="hl opt">,</span> <span class="hl str">&quot;xor_reg_a&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">NOT</span><span class="hl opt">(</span>b<span class="hl opt">,</span> <span class="hl str">&quot;xor_reg_b&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">AND</span><span class="hl opt">(</span>a<span class="hl opt">,</span> <span class="hl str">&quot;xor_reg_b&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;xor_reg_b&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">AND</span><span class="hl opt">(</span>b<span class="hl opt">,</span> <span class="hl str">&quot;xor_reg_a&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;xor_reg_a&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">OR</span><span class="hl opt">(</span><span class="hl str">&quot;xor_reg_a&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;xor_reg_b&quot;</span><span class="hl opt">,</span> r<span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;xor_reg_a&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;xor_reg_b&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">XORi</span><span class="hl opt">(</span>a<span class="hl opt">,</span> imm<span class="hl opt">,</span> r<span class="hl opt">):</span>
  <span class="hl kwd">MOVi</span><span class="hl opt">(</span>imm<span class="hl opt">,</span> <span class="hl str">&quot;xor_i_reg&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">XOR</span><span class="hl opt">(</span>a<span class="hl opt">,</span> <span class="hl str">&quot;xor_i_reg&quot;</span><span class="hl opt">,</span> r<span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;xor_i_reg&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">MOV</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">):</span>
  <span class="hl kwd">code_rem</span><span class="hl opt">(</span><span class="hl str">'MOV '</span> <span class="hl opt">+</span> <span class="hl kwb">str</span><span class="hl opt">(</span>a<span class="hl opt">) +</span> <span class="hl str">' '</span> <span class="hl opt">+</span> <span class="hl kwb">str</span><span class="hl opt">(</span>b<span class="hl opt">))</span>
  <span class="hl kwd">NOT</span><span class="hl opt">(</span>a<span class="hl opt">,</span> <span class="hl str">&quot;move_reg&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">NOT</span><span class="hl opt">(</span><span class="hl str">&quot;move_reg&quot;</span><span class="hl opt">,</span> b<span class="hl opt">)</span>
  <span class="hl kwd">code_rem</span><span class="hl opt">(</span><span class="hl str">'MOV END'</span><span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;move_reg&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">JMP</span><span class="hl opt">(</span>a<span class="hl opt">):</span>
  <span class="hl kwd">code_rem</span><span class="hl opt">(</span><span class="hl str">'JMP '</span> <span class="hl opt">+</span> <span class="hl kwb">str</span><span class="hl opt">(</span>a<span class="hl opt">))</span>
  <span class="hl kwd">MOV</span><span class="hl opt">(</span>a<span class="hl opt">,</span> <span class="hl str">&quot;ip&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">JMPi</span><span class="hl opt">(</span>a<span class="hl opt">):</span>
  <span class="hl kwd">code_rem</span><span class="hl opt">(</span><span class="hl str">'JMPi '</span> <span class="hl opt">+</span> <span class="hl kwb">str</span><span class="hl opt">(</span>a<span class="hl opt">))</span>
  label <span class="hl opt">=</span> <span class="hl kwd">next_label</span><span class="hl opt">()</span>
  <span class="hl kwd">JMP</span><span class="hl opt">(</span>label<span class="hl opt">)</span>
  <span class="hl kwd">code_label</span><span class="hl opt">(</span>label<span class="hl opt">)</span>
  <span class="hl kwd">code</span><span class="hl opt">(</span>a<span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">MOVi</span><span class="hl opt">(</span>imm<span class="hl opt">,</span> a<span class="hl opt">):</span>
  <span class="hl kwd">code_rem</span><span class="hl opt">(</span><span class="hl str">'MOVi #'</span> <span class="hl opt">+</span> <span class="hl kwb">str</span><span class="hl opt">(</span>imm<span class="hl opt">) +</span> <span class="hl str">' '</span> <span class="hl opt">+</span> <span class="hl kwb">str</span><span class="hl opt">(</span>a<span class="hl opt">))</span>
  label_data <span class="hl opt">=</span> <span class="hl kwd">next_label</span><span class="hl opt">()</span>
  label_jump <span class="hl opt">=</span> <span class="hl kwd">next_label</span><span class="hl opt">()</span>
  <span class="hl kwd">MOV</span><span class="hl opt">(</span>label_data<span class="hl opt">,</span> a<span class="hl opt">)</span>
  <span class="hl kwd">JMPi</span><span class="hl opt">(</span>label_jump<span class="hl opt">)</span>
  <span class="hl kwd">code_label</span><span class="hl opt">(</span>label_data<span class="hl opt">)</span>
  <span class="hl kwd">code</span><span class="hl opt">(</span>imm<span class="hl opt">)</span>
  <span class="hl kwd">code_label</span><span class="hl opt">(</span>label_jump<span class="hl opt">)</span>

<span class="hl slc"># [a] -&gt; b</span>
<span class="hl kwa">def</span> <span class="hl kwd">PEEK</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">):</span>
  label1 <span class="hl opt">=</span> <span class="hl kwd">next_label</span><span class="hl opt">()</span>
  label2 <span class="hl opt">=</span> <span class="hl kwd">next_label</span><span class="hl opt">()</span>
  <span class="hl kwd">MOV</span><span class="hl opt">(</span>a<span class="hl opt">,</span> label1<span class="hl opt">)</span>
  <span class="hl kwd">MOV</span><span class="hl opt">(</span>a<span class="hl opt">,</span> label2<span class="hl opt">)</span>
  <span class="hl kwd">code_label</span><span class="hl opt">(</span>label1<span class="hl opt">)</span>  <span class="hl slc"># NOT(0, 0, move_reg)</span>
  <span class="hl kwd">code</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">)</span>             <span class="hl slc"># &lt;- a</span>
  <span class="hl kwd">code_label</span><span class="hl opt">(</span>label2<span class="hl opt">)</span>  <span class="hl slc">#</span>
  <span class="hl kwd">code</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">)</span>             <span class="hl slc"># &lt;- a</span>
  <span class="hl kwd">code</span><span class="hl opt">(</span><span class="hl str">&quot;move_reg&quot;</span><span class="hl opt">)</span>    <span class="hl slc">#</span>
  <span class="hl kwd">NOT</span><span class="hl opt">(</span><span class="hl str">&quot;move_reg&quot;</span><span class="hl opt">,</span> b<span class="hl opt">)</span>

<span class="hl slc"># a -&gt; [b]</span>
<span class="hl kwa">def</span> <span class="hl kwd">POKE</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">):</span>
  <span class="hl kwd">code_rem</span><span class="hl opt">(</span><span class="hl str">'POKE '</span> <span class="hl opt">+</span> <span class="hl kwb">str</span><span class="hl opt">(</span>a<span class="hl opt">) +</span> <span class="hl str">' ['</span> <span class="hl opt">+</span> <span class="hl kwb">str</span><span class="hl opt">(</span>b<span class="hl opt">) +</span> <span class="hl str">']'</span><span class="hl opt">)</span>
  label <span class="hl opt">=</span> <span class="hl kwd">next_label</span><span class="hl opt">()</span>
  <span class="hl kwd">MOV</span><span class="hl opt">(</span>b<span class="hl opt">,</span> label<span class="hl opt">)</span>
  <span class="hl kwd">NOT</span><span class="hl opt">(</span>a<span class="hl opt">,</span> <span class="hl str">&quot;move_reg&quot;</span><span class="hl opt">)</span>  <span class="hl slc"># +3 (three operations)</span>
  <span class="hl kwd">code</span><span class="hl opt">(</span><span class="hl str">&quot;move_reg&quot;</span><span class="hl opt">)</span>    <span class="hl slc"># +4</span>
  <span class="hl kwd">code</span><span class="hl opt">(</span><span class="hl str">&quot;move_reg&quot;</span><span class="hl opt">)</span>    <span class="hl slc"># +5</span>
  <span class="hl kwd">code_label</span><span class="hl opt">(</span>label<span class="hl opt">)</span>
  <span class="hl kwd">code</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">)</span>             <span class="hl slc"># &lt;- b</span>

<span class="hl slc"># imm -&gt; [a]</span>
<span class="hl kwa">def</span> <span class="hl kwd">POKEi</span><span class="hl opt">(</span>imm<span class="hl opt">,</span> a<span class="hl opt">):</span>
  <span class="hl kwd">MOVi</span><span class="hl opt">(</span>imm<span class="hl opt">,</span> <span class="hl str">&quot;poke_i_reg&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">POKE</span><span class="hl opt">(</span><span class="hl str">&quot;poke_i_reg&quot;</span><span class="hl opt">,</span> a<span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;poke_i_reg&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">EXIT</span><span class="hl opt">(</span>a<span class="hl opt">):</span>
  <span class="hl kwd">MOV</span><span class="hl opt">(</span>a<span class="hl opt">,</span> <span class="hl str">&quot;exit_reg&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">EXITi</span><span class="hl opt">(</span>a<span class="hl opt">):</span>
  <span class="hl kwd">MOVi</span><span class="hl opt">(</span>a<span class="hl opt">,</span> <span class="hl str">&quot;exit_reg&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">FADD</span><span class="hl opt">(</span>mask<span class="hl opt">,</span> carry<span class="hl opt">,</span> a<span class="hl opt">,</span> b<span class="hl opt">,</span> r<span class="hl opt">):</span>
  <span class="hl kwd">AND</span><span class="hl opt">(</span>a<span class="hl opt">,</span> mask<span class="hl opt">,</span> <span class="hl str">&quot;fadd_reg_a&quot;</span><span class="hl opt">)</span>  <span class="hl slc"># zero bits in 'a' except mask'ed</span>
  <span class="hl kwd">AND</span><span class="hl opt">(</span>b<span class="hl opt">,</span> mask<span class="hl opt">,</span> <span class="hl str">&quot;fadd_reg_b&quot;</span><span class="hl opt">)</span>  <span class="hl slc"># zero bits in 'b' except mask'ed</span>
  <span class="hl kwd">AND</span><span class="hl opt">(</span>carry<span class="hl opt">,</span> mask<span class="hl opt">,</span> carry<span class="hl opt">)</span>     <span class="hl slc"># zero bits in 'carry' except mask'ed</span>

  <span class="hl slc"># SUM = (a ^ b) ^ carry</span>
  <span class="hl kwd">XOR</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">,</span> <span class="hl str">&quot;fadd_reg_t1&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">XOR</span><span class="hl opt">(</span><span class="hl str">&quot;fadd_reg_t1&quot;</span><span class="hl opt">,</span> carry<span class="hl opt">,</span> <span class="hl str">&quot;fadd_reg_bit_r&quot;</span><span class="hl opt">)</span>

  <span class="hl slc"># Leave only 'mask'ed bit in bit_r.</span>
  <span class="hl kwd">AND</span><span class="hl opt">(</span><span class="hl str">&quot;fadd_reg_bit_r&quot;</span><span class="hl opt">,</span> mask<span class="hl opt">,</span> <span class="hl str">&quot;fadd_reg_bit_r&quot;</span><span class="hl opt">)</span>

  <span class="hl slc"># Add current added bit to the result.</span>
  <span class="hl kwd">OR</span><span class="hl opt">(</span><span class="hl str">&quot;fadd_reg_bit_r&quot;</span><span class="hl opt">,</span> r<span class="hl opt">,</span> r<span class="hl opt">)</span>

  <span class="hl slc"># CARRY = (a &amp; b) | (carry &amp; (a ^ b))</span>
  <span class="hl kwd">AND</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">,</span> <span class="hl str">&quot;fadd_reg_t2&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">AND</span><span class="hl opt">(</span>carry<span class="hl opt">,</span> <span class="hl str">&quot;fadd_reg_t1&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;fadd_reg_t1&quot;</span><span class="hl opt">)</span>

  <span class="hl slc"># CARRY is calculated, and 'shift_reg' contains the same value</span>
  <span class="hl slc"># but shifted the left by 1 bit.</span>
  <span class="hl kwd">OR</span><span class="hl opt">(</span><span class="hl str">&quot;fadd_reg_t2&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;fadd_reg_t1&quot;</span><span class="hl opt">,</span> carry<span class="hl opt">)</span>

  <span class="hl slc"># CARRY is shifted the left by 1 bit to be used on the next round.</span>
  <span class="hl kwd">MOV</span><span class="hl opt">(</span><span class="hl str">&quot;shift_reg&quot;</span><span class="hl opt">,</span> carry<span class="hl opt">)</span>

  <span class="hl slc"># shift_reg = mask &lt;&lt; 1</span>
  <span class="hl kwd">MOV</span><span class="hl opt">(</span>mask<span class="hl opt">,</span> mask<span class="hl opt">)</span>
  <span class="hl slc"># mask = shift (effectively &quot;mask = mask &lt;&lt; 1&quot;)</span>
  <span class="hl kwd">MOV</span><span class="hl opt">(</span><span class="hl str">&quot;shift_reg&quot;</span><span class="hl opt">,</span> mask<span class="hl opt">)</span>

  <span class="hl kwd">AND</span><span class="hl opt">(</span>carry<span class="hl opt">,</span> mask<span class="hl opt">,</span> carry<span class="hl opt">)</span>

<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;fadd_reg_a&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;fadd_reg_b&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;fadd_reg_bit_r&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;fadd_reg_t1&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;fadd_reg_t2&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">ZERO</span><span class="hl opt">(</span>a<span class="hl opt">):</span>
  <span class="hl kwd">XOR</span><span class="hl opt">(</span>a<span class="hl opt">,</span> a<span class="hl opt">,</span> a<span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">FADC</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">,</span> r<span class="hl opt">):</span>
  <span class="hl kwd">ZERO</span><span class="hl opt">(</span><span class="hl str">&quot;fadc_reg_t&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">MOV</span><span class="hl opt">(</span><span class="hl str">&quot;const_1&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;fadc_reg_mask&quot;</span><span class="hl opt">)</span>
  <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">16</span><span class="hl opt">):</span>
    <span class="hl kwd">FADD</span><span class="hl opt">(</span><span class="hl str">&quot;fadc_reg_mask&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;carry_reg&quot;</span><span class="hl opt">,</span> a<span class="hl opt">,</span> b<span class="hl opt">,</span> <span class="hl str">&quot;fadc_reg_t&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">MOV</span><span class="hl opt">(</span><span class="hl str">&quot;fadc_reg_t&quot;</span><span class="hl opt">,</span> r<span class="hl opt">)</span>

  <span class="hl kwd">ZERO</span><span class="hl opt">(</span><span class="hl str">&quot;fadc_reg_t&quot;</span><span class="hl opt">)</span>

  <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">16</span><span class="hl opt">):</span>
    <span class="hl kwd">OR</span><span class="hl opt">(</span><span class="hl str">&quot;fadc_reg_t&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;carry_reg&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;fadc_reg_t&quot;</span><span class="hl opt">)</span>
    <span class="hl kwd">MOV</span><span class="hl opt">(</span><span class="hl str">&quot;carry_reg&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;carry_reg&quot;</span><span class="hl opt">)</span>
    <span class="hl kwd">MOV</span><span class="hl opt">(</span><span class="hl str">&quot;shift_reg&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;carry_reg&quot;</span><span class="hl opt">)</span>

  <span class="hl kwd">MOV</span><span class="hl opt">(</span><span class="hl str">&quot;fadc_reg_t&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;carry_reg&quot;</span><span class="hl opt">)</span>

<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;fadc_reg_mask&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;fadc_reg_t&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">ADD</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">,</span> r<span class="hl opt">):</span>
  <span class="hl kwd">ZERO</span><span class="hl opt">(</span><span class="hl str">&quot;carry_reg&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">FADC</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">,</span> r<span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">ADDi</span><span class="hl opt">(</span>a<span class="hl opt">,</span> imm<span class="hl opt">,</span> r<span class="hl opt">):</span>
  <span class="hl kwd">MOVi</span><span class="hl opt">(</span>imm<span class="hl opt">,</span> <span class="hl str">&quot;add_i_reg&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">ADD</span><span class="hl opt">(</span>a<span class="hl opt">,</span> <span class="hl str">&quot;add_i_reg&quot;</span><span class="hl opt">,</span> r<span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;add_i_reg&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">PUSH</span><span class="hl opt">(</span>a<span class="hl opt">):</span>
  <span class="hl kwd">ADD</span><span class="hl opt">(</span><span class="hl str">&quot;stack_reg&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;const_minus_1&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;stack_reg&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">POKE</span><span class="hl opt">(</span>a<span class="hl opt">,</span> <span class="hl str">&quot;stack_reg&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">PUSHi</span><span class="hl opt">(</span>imm<span class="hl opt">):</span>
  <span class="hl kwd">MOVi</span><span class="hl opt">(</span>imm<span class="hl opt">,</span> <span class="hl str">&quot;push_i_reg&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">PUSH</span><span class="hl opt">(</span><span class="hl str">&quot;push_i_reg&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;push_i_reg&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">POP</span><span class="hl opt">(</span>a<span class="hl opt">):</span>
  <span class="hl kwd">PEEK</span><span class="hl opt">(</span><span class="hl str">&quot;stack_reg&quot;</span><span class="hl opt">,</span> a<span class="hl opt">)</span>
  <span class="hl kwd">ADD</span><span class="hl opt">(</span><span class="hl str">&quot;stack_reg&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;const_1&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;stack_reg&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">CALL</span><span class="hl opt">(</span>a<span class="hl opt">):</span>
  label <span class="hl opt">=</span> <span class="hl kwd">next_label</span><span class="hl opt">()</span>
  <span class="hl kwd">PUSHi</span><span class="hl opt">(</span>label<span class="hl opt">)</span>
  <span class="hl kwd">JMP</span><span class="hl opt">(</span>a<span class="hl opt">)</span>
  <span class="hl kwd">code_label</span><span class="hl opt">(</span>label<span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">CALLi</span><span class="hl opt">(</span>a<span class="hl opt">):</span>
  label <span class="hl opt">=</span> <span class="hl kwd">next_label</span><span class="hl opt">()</span>
  <span class="hl kwd">PUSHi</span><span class="hl opt">(</span>label<span class="hl opt">)</span>
  <span class="hl kwd">JMPi</span><span class="hl opt">(</span>a<span class="hl opt">)</span>
  <span class="hl kwd">code_label</span><span class="hl opt">(</span>label<span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">RET</span><span class="hl opt">():</span>
  <span class="hl kwd">POP</span><span class="hl opt">(</span><span class="hl str">&quot;ip&quot;</span><span class="hl opt">)</span>

<span class="hl slc"># Jump 'a', if cond = FFFF, and 'b' if conf = 0000</span>
<span class="hl kwa">def</span> <span class="hl kwd">BRANCH</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">,</span> cond<span class="hl opt">):</span>
  <span class="hl kwd">AND</span><span class="hl opt">(</span>a<span class="hl opt">,</span> cond<span class="hl opt">,</span> <span class="hl str">&quot;branch_reg_a&quot;</span><span class="hl opt">)</span>              <span class="hl slc"># reg_a = a &amp; cond</span>
  <span class="hl kwd">NOT</span><span class="hl opt">(</span>cond<span class="hl opt">,</span> <span class="hl str">&quot;branch_reg_b&quot;</span><span class="hl opt">)</span>                 <span class="hl slc"># reg_b = !cond</span>
  <span class="hl kwd">AND</span><span class="hl opt">(</span>b<span class="hl opt">,</span> <span class="hl str">&quot;branch_reg_b&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;branch_reg_b&quot;</span><span class="hl opt">)</span>    <span class="hl slc"># reg_b = b &amp; reg_b = b &amp; !cond</span>
  <span class="hl kwd">OR</span><span class="hl opt">(</span><span class="hl str">&quot;branch_reg_a&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;branch_reg_b&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;ip&quot;</span><span class="hl opt">)</span>  <span class="hl slc"># ip = (a &amp; cond) | (b &amp; !cond)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;branch_reg_a&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;branch_reg_b&quot;</span><span class="hl opt">)</span>

<span class="hl slc"># Jump 'a', if cond = FFFF, and 'b' if conf = 0000</span>
<span class="hl kwa">def</span> <span class="hl kwd">BRANCHi</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">,</span> cond<span class="hl opt">):</span>
  <span class="hl kwd">MOVi</span><span class="hl opt">(</span>a<span class="hl opt">,</span> <span class="hl str">&quot;branch_i_reg_a&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">MOVi</span><span class="hl opt">(</span>b<span class="hl opt">,</span> <span class="hl str">&quot;branch_i_reg_b&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">BRANCH</span><span class="hl opt">(</span><span class="hl str">&quot;branch_i_reg_a&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;branch_i_reg_b&quot;</span><span class="hl opt">,</span> cond<span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;branch_i_reg_a&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;branch_i_reg_b&quot;</span><span class="hl opt">)</span>

<span class="hl slc"># if a != 0 -&gt; carry = FFFF else carry = 0000</span>
<span class="hl kwa">def</span> <span class="hl kwd">IS_0</span><span class="hl opt">(</span>a<span class="hl opt">):</span>
  <span class="hl kwd">ZERO</span><span class="hl opt">(</span><span class="hl str">&quot;carry_reg&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">FADC</span><span class="hl opt">(</span>a<span class="hl opt">,</span> <span class="hl str">&quot;const_minus_1&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;is_0_reg&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">NOT</span><span class="hl opt">(</span><span class="hl str">&quot;carry_reg&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;zero_reg&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;is_0_reg&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;zero_reg&quot;</span><span class="hl opt">)</span>

<span class="hl slc"># ip = (zero_reg == FFFF ? a : ip)</span>
<span class="hl kwa">def</span> <span class="hl kwd">JZi</span><span class="hl opt">(</span>a<span class="hl opt">):</span>
  label <span class="hl opt">=</span> <span class="hl kwd">next_label</span><span class="hl opt">()</span>
  <span class="hl kwd">BRANCHi</span><span class="hl opt">(</span>a<span class="hl opt">,</span> label<span class="hl opt">,</span> <span class="hl str">&quot;zero_reg&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">code_label</span><span class="hl opt">(</span>label<span class="hl opt">)</span>

<span class="hl slc"># ip = (zero_reg == FFFF ? a : ip)</span>
<span class="hl kwa">def</span> <span class="hl kwd">JNZi</span><span class="hl opt">(</span>a<span class="hl opt">):</span>
  label <span class="hl opt">=</span> <span class="hl kwd">next_label</span><span class="hl opt">()</span>
  <span class="hl kwd">BRANCHi</span><span class="hl opt">(</span>label<span class="hl opt">,</span> a<span class="hl opt">,</span> <span class="hl str">&quot;zero_reg&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">code_label</span><span class="hl opt">(</span>label<span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">ROL</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">):</span>
  <span class="hl kwd">MOV</span><span class="hl opt">(</span>a<span class="hl opt">,</span> a<span class="hl opt">)</span>            <span class="hl slc"># shift_reg = a &lt;&lt; 1</span>
  <span class="hl kwd">MOV</span><span class="hl opt">(</span><span class="hl str">&quot;shift_reg&quot;</span><span class="hl opt">,</span> b<span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">ROR</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">):</span>
  <span class="hl kwd">MOV</span><span class="hl opt">(</span>a<span class="hl opt">,</span> <span class="hl str">&quot;ror_reg&quot;</span><span class="hl opt">)</span>
  <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">15</span><span class="hl opt">):</span>
    <span class="hl kwd">ROL</span><span class="hl opt">(</span><span class="hl str">&quot;ror_reg&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;ror_reg&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">MOV</span><span class="hl opt">(</span><span class="hl str">&quot;ror_reg&quot;</span><span class="hl opt">,</span> b<span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;ror_reg&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">SHL</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">):</span>
  <span class="hl kwd">ROL</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">)</span>
  <span class="hl kwd">ANDi</span><span class="hl opt">(</span>b<span class="hl opt">,</span> <span class="hl num">0x0001</span><span class="hl opt">,</span> b<span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">SHR</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">):</span>
  <span class="hl kwd">ROR</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">)</span>
  <span class="hl kwd">ANDi</span><span class="hl opt">(</span>b<span class="hl opt">,</span> <span class="hl num">0x7FFF</span><span class="hl opt">,</span> b<span class="hl opt">)</span>

<span class="hl slc"># NORCPU code</span>

<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;ip&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;start&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;shift_reg&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;carry_reg&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;const_1&quot;</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;const_minus_1&quot;</span><span class="hl opt">,</span> <span class="hl num">0xFFFF</span><span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;exit_reg&quot;</span><span class="hl opt">)</span>

<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;stack_reg&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;stack&quot;</span><span class="hl opt">)</span>

<span class="hl kwd">code_label</span><span class="hl opt">(</span><span class="hl str">&quot;start&quot;</span><span class="hl opt">)</span>

<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;i&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;j&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;ch&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;mask&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;t&quot;</span><span class="hl opt">)</span>

<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;crc16&quot;</span><span class="hl opt">,</span> crc16_initial_value<span class="hl opt">)</span>

<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;ptr&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;password&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">MOV</span><span class="hl opt">(</span><span class="hl str">&quot;password_sz&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;i&quot;</span><span class="hl opt">)</span>

crc_loop <span class="hl opt">=</span> <span class="hl kwd">next_label</span><span class="hl opt">()</span>
<span class="hl kwd">code_label</span><span class="hl opt">(</span>crc_loop<span class="hl opt">)</span>          <span class="hl slc"># crc_loop</span>
<span class="hl slc"># ch = *ptr</span>
<span class="hl kwd">PEEK</span><span class="hl opt">(</span><span class="hl str">&quot;ptr&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;ch&quot;</span><span class="hl opt">)</span>
<span class="hl slc"># ch &amp;= 0xFF</span>
<span class="hl kwd">ANDi</span><span class="hl opt">(</span><span class="hl str">&quot;ch&quot;</span><span class="hl opt">,</span> <span class="hl num">0xFF</span><span class="hl opt">,</span> <span class="hl str">&quot;ch&quot;</span><span class="hl opt">)</span>
<span class="hl slc"># crc16 ^= ch</span>
<span class="hl kwd">XOR</span><span class="hl opt">(</span><span class="hl str">&quot;crc16&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;ch&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;crc16&quot;</span><span class="hl opt">)</span>

<span class="hl kwd">MOVi</span><span class="hl opt">(</span><span class="hl num">8</span><span class="hl opt">,</span> <span class="hl str">&quot;j&quot;</span><span class="hl opt">)</span>
crc_loop_j <span class="hl opt">=</span> <span class="hl kwd">next_label</span><span class="hl opt">()</span>
<span class="hl kwd">code_label</span><span class="hl opt">(</span>crc_loop_j<span class="hl opt">)</span>        <span class="hl slc"># crc_loop_j</span>

<span class="hl slc"># t = crc16 &amp; 1</span>
<span class="hl kwd">ANDi</span><span class="hl opt">(</span><span class="hl str">&quot;crc16&quot;</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl str">&quot;t&quot;</span><span class="hl opt">)</span>
<span class="hl slc"># crc16 &gt;&gt;= 1</span>
<span class="hl kwd">SHR</span><span class="hl opt">(</span><span class="hl str">&quot;crc16&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;crc16&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">IS_0</span><span class="hl opt">(</span><span class="hl str">&quot;t&quot;</span><span class="hl opt">)</span>
crc_loop_1 <span class="hl opt">=</span> <span class="hl kwd">next_label</span><span class="hl opt">()</span>
<span class="hl kwd">JZi</span><span class="hl opt">(</span>crc_loop_1<span class="hl opt">)</span>
<span class="hl slc"># crc16 ^= crc16_constant</span>
<span class="hl kwd">XORi</span><span class="hl opt">(</span><span class="hl str">&quot;crc16&quot;</span><span class="hl opt">,</span> crc16_constant<span class="hl opt">,</span> <span class="hl str">&quot;crc16&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">code_label</span><span class="hl opt">(</span>crc_loop_1<span class="hl opt">)</span>        <span class="hl slc"># crc_loop_1</span>

<span class="hl kwd">ADD</span><span class="hl opt">(</span><span class="hl str">&quot;j&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;const_minus_1&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;j&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">IS_0</span><span class="hl opt">(</span><span class="hl str">&quot;j&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">JNZi</span><span class="hl opt">(</span>crc_loop_j<span class="hl opt">)</span>

<span class="hl slc"># ptr += 1</span>
<span class="hl kwd">ADD</span><span class="hl opt">(</span><span class="hl str">&quot;ptr&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;const_1&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;ptr&quot;</span><span class="hl opt">)</span>
<span class="hl slc"># i = i - 1</span>
<span class="hl kwd">ADD</span><span class="hl opt">(</span><span class="hl str">&quot;i&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;const_minus_1&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;i&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">IS_0</span><span class="hl opt">(</span><span class="hl str">&quot;i&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">JNZi</span><span class="hl opt">(</span>crc_loop<span class="hl opt">)</span>

<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;ptr2&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;result&quot;</span><span class="hl opt">)</span>

correct_crc <span class="hl opt">=</span> crc16 <span class="hl opt">+</span> test_wrong_crc

<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;correct_crc&quot;</span><span class="hl opt">,</span> correct_crc<span class="hl opt">)</span>

<span class="hl slc"># By default we're going to decrypt 'Wrong...' message.</span>
<span class="hl kwd">MOVi</span><span class="hl opt">(</span><span class="hl str">&quot;message&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;ptr&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">MOV</span><span class="hl opt">(</span><span class="hl str">&quot;message_sz&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;i&quot;</span><span class="hl opt">)</span>

<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;message_mask&quot;</span><span class="hl opt">,</span> message_mask<span class="hl opt">)</span>
<span class="hl kwd">MOV</span><span class="hl opt">(</span><span class="hl str">&quot;message_mask&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;mask&quot;</span><span class="hl opt">)</span>

<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;coef_add&quot;</span><span class="hl opt">,</span> message_coef_add<span class="hl opt">)</span>

wrong_label <span class="hl opt">=</span> <span class="hl kwd">next_label</span><span class="hl opt">()</span>

<span class="hl kwd">XOR</span><span class="hl opt">(</span><span class="hl str">&quot;correct_crc&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;crc16&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;correct_crc&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">IS_0</span><span class="hl opt">(</span><span class="hl str">&quot;correct_crc&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">JNZi</span><span class="hl opt">(</span>wrong_label<span class="hl opt">)</span>

<span class="hl slc"># Now we switch to descrypt the secret message.</span>
<span class="hl kwd">MOVi</span><span class="hl opt">(</span>secret_coef_add<span class="hl opt">,</span> <span class="hl str">&quot;coef_add&quot;</span><span class="hl opt">)</span>

<span class="hl kwd">MOVi</span><span class="hl opt">(</span><span class="hl str">&quot;secret&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;ptr&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">MOV</span><span class="hl opt">(</span><span class="hl str">&quot;secret_sz&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;i&quot;</span><span class="hl opt">)</span>

<span class="hl slc"># mask = ((crc16 &amp; 0xff) | ((crc16 &gt;&gt; 8) &amp; 0xff)) + 1</span>
<span class="hl kwd">MOV</span><span class="hl opt">(</span><span class="hl str">&quot;crc16&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;mask&quot;</span><span class="hl opt">)</span>
<span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">8</span><span class="hl opt">):</span>
  <span class="hl kwd">SHR</span><span class="hl opt">(</span><span class="hl str">&quot;mask&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;mask&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">XOR</span><span class="hl opt">(</span><span class="hl str">&quot;crc16&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;mask&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;mask&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">ANDi</span><span class="hl opt">(</span><span class="hl str">&quot;mask&quot;</span><span class="hl opt">,</span> <span class="hl num">0xff</span><span class="hl opt">,</span> <span class="hl str">&quot;mask&quot;</span><span class="hl opt">)</span>

<span class="hl kwd">ADD</span><span class="hl opt">(</span><span class="hl str">&quot;mask&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;const_1&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;mask&quot;</span><span class="hl opt">)</span>

<span class="hl kwd">code_label</span><span class="hl opt">(</span>wrong_label<span class="hl opt">)</span>

<span class="hl kwd">MOV</span><span class="hl opt">(</span><span class="hl str">&quot;i&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;result_sz&quot;</span><span class="hl opt">)</span>

loop <span class="hl opt">=</span> <span class="hl kwd">next_label</span><span class="hl opt">()</span>
<span class="hl kwd">code_label</span><span class="hl opt">(</span>loop<span class="hl opt">)</span>              <span class="hl slc"># loop</span>
<span class="hl slc"># ch = *ptr</span>
<span class="hl kwd">PEEK</span><span class="hl opt">(</span><span class="hl str">&quot;ptr&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;ch&quot;</span><span class="hl opt">)</span>
<span class="hl slc"># ch ^= mask</span>
<span class="hl kwd">XOR</span><span class="hl opt">(</span><span class="hl str">&quot;ch&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;mask&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;ch&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">POKE</span><span class="hl opt">(</span><span class="hl str">&quot;ch&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;ptr2&quot;</span><span class="hl opt">)</span>
<span class="hl slc"># mask = mask * 3 + 11</span>
<span class="hl kwd">ADD</span><span class="hl opt">(</span><span class="hl str">&quot;mask&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;mask&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;t&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">ADD</span><span class="hl opt">(</span><span class="hl str">&quot;mask&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;t&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;mask&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">ADD</span><span class="hl opt">(</span><span class="hl str">&quot;mask&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;coef_add&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;mask&quot;</span><span class="hl opt">)</span>
<span class="hl slc"># ptr += 1</span>
<span class="hl kwd">ADD</span><span class="hl opt">(</span><span class="hl str">&quot;ptr&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;const_1&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;ptr&quot;</span><span class="hl opt">)</span>
<span class="hl slc"># ptr2 += 1</span>
<span class="hl kwd">ADD</span><span class="hl opt">(</span><span class="hl str">&quot;ptr2&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;const_1&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;ptr2&quot;</span><span class="hl opt">)</span>
<span class="hl slc"># i = i - 1</span>
<span class="hl kwd">ADD</span><span class="hl opt">(</span><span class="hl str">&quot;i&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;const_minus_1&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;i&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">IS_0</span><span class="hl opt">(</span><span class="hl str">&quot;i&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">JNZi</span><span class="hl opt">(</span>loop<span class="hl opt">)</span>

<span class="hl kwd">EXITi</span><span class="hl opt">(</span><span class="hl num">0x00</span><span class="hl opt">)</span>

<span class="hl kwb">buffer</span><span class="hl opt">(</span><span class="hl num">8</span><span class="hl opt">)</span>
<span class="hl kwd">data_label</span><span class="hl opt">(</span><span class="hl str">&quot;stack&quot;</span><span class="hl opt">)</span>

<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;secret_sz&quot;</span><span class="hl opt">,</span> <span class="hl kwb">len</span><span class="hl opt">(</span>secret_code<span class="hl opt">))</span>
<span class="hl kwd">data_label</span><span class="hl opt">(</span><span class="hl str">&quot;secret&quot;</span><span class="hl opt">)</span>
<span class="hl kwb">buffer</span><span class="hl opt">(</span><span class="hl kwb">len</span><span class="hl opt">(</span>secret_code<span class="hl opt">) +</span> <span class="hl num">1</span><span class="hl opt">)</span>

<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;message_sz&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">data_label</span><span class="hl opt">(</span><span class="hl str">&quot;message&quot;</span><span class="hl opt">)</span>
<span class="hl kwb">buffer</span><span class="hl opt">(</span><span class="hl num">16</span><span class="hl opt">)</span>

<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;password_sz&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">data_label</span><span class="hl opt">(</span><span class="hl str">&quot;password&quot;</span><span class="hl opt">)</span>
<span class="hl kwb">buffer</span><span class="hl opt">(</span><span class="hl num">16</span><span class="hl opt">)</span>

<span class="hl slc"># The buffer holding the result string.</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;result_sz&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">data_label</span><span class="hl opt">(</span><span class="hl str">&quot;result&quot;</span><span class="hl opt">)</span>
<span class="hl kwb">buffer</span><span class="hl opt">(</span><span class="hl num">32</span><span class="hl opt">)</span>

<span class="hl slc"># Compiler</span>

text <span class="hl opt">=</span> code_segment
text<span class="hl opt">.</span><span class="hl kwd">extend</span><span class="hl opt">(</span>data_segment<span class="hl opt">)</span>

<span class="hl kwa">if</span> verbose<span class="hl opt">:</span>
  <span class="hl kwa">print</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">.</span><span class="hl kwd">join</span><span class="hl opt">(</span>text<span class="hl opt">)</span>

<span class="hl slc"># Phase 1. Calculate names.</span>

addr <span class="hl opt">=</span> <span class="hl num">0</span>
names <span class="hl opt">= {}</span>
<span class="hl kwa">for</span> line <span class="hl kwa">in</span> text<span class="hl opt">:</span>
  <span class="hl kwa">if</span> line<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] ==</span> <span class="hl str">';'</span><span class="hl opt">:</span> <span class="hl kwa">continue</span>
  <span class="hl kwa">if</span> line<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] !=</span> <span class="hl str">' '</span><span class="hl opt">:</span>
    name <span class="hl opt">=</span> line<span class="hl opt">.</span><span class="hl kwd">partition</span><span class="hl opt">(</span><span class="hl str">':'</span><span class="hl opt">)[</span><span class="hl num">0</span><span class="hl opt">]</span>
    names<span class="hl opt">[</span>name<span class="hl opt">] =</span> addr
  <span class="hl kwa">else</span><span class="hl opt">:</span>
    addr <span class="hl opt">=</span> addr <span class="hl opt">+</span> <span class="hl num">1</span>

<span class="hl kwa">if</span> verbose<span class="hl opt">:</span>
  <span class="hl kwa">print</span> names

raw_text <span class="hl opt">=</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">.</span><span class="hl kwd">join</span><span class="hl opt">(</span>text<span class="hl opt">)</span>

<span class="hl slc"># Resolve names.</span>

<span class="hl kwa">for</span> name <span class="hl kwa">in</span> names<span class="hl opt">:</span>
  <span class="hl kwa">if</span> verbose<span class="hl opt">:</span>
    <span class="hl kwa">print</span> name<span class="hl opt">,</span> names<span class="hl opt">[</span>name<span class="hl opt">],</span> <span class="hl kwb">type</span><span class="hl opt">(</span>names<span class="hl opt">[</span>name<span class="hl opt">])</span>
  name_re <span class="hl opt">=</span> re<span class="hl opt">.</span><span class="hl kwb">compile</span><span class="hl opt">(</span>r<span class="hl str">'dw '</span> <span class="hl opt">+</span> name <span class="hl opt">+</span> <span class="hl str">'$'</span><span class="hl opt">,</span> re<span class="hl opt">.</span>M<span class="hl opt">)</span>
  value <span class="hl opt">=</span> <span class="hl str">&quot;%d&quot;</span> <span class="hl opt">%</span> names<span class="hl opt">[</span>name<span class="hl opt">]</span>
  raw_text <span class="hl opt">=</span> name_re<span class="hl opt">.</span><span class="hl kwd">sub</span><span class="hl opt">(</span><span class="hl str">'dw '</span> <span class="hl opt">+</span> value<span class="hl opt">,</span> raw_text<span class="hl opt">)</span>

text <span class="hl opt">=</span> raw_text<span class="hl opt">.</span><span class="hl kwd">split</span><span class="hl opt">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">if</span> verbose<span class="hl opt">:</span>
  <span class="hl kwa">print</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">.</span><span class="hl kwd">join</span><span class="hl opt">(</span>text<span class="hl opt">)</span>

<span class="hl slc"># Phase 2. Compilation.</span>

addr <span class="hl opt">=</span> <span class="hl num">0</span>
comment <span class="hl opt">=</span> <span class="hl str">&quot;&quot;</span>
mem <span class="hl opt">= []</span>
<span class="hl kwa">for</span> line <span class="hl kwa">in</span> text<span class="hl opt">:</span>
  <span class="hl kwa">if</span> line<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] ==</span> <span class="hl str">';'</span> <span class="hl kwa">or</span> line<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] !=</span> <span class="hl str">' '</span><span class="hl opt">:</span>
    comment <span class="hl opt">=</span> comment <span class="hl opt">+</span> line <span class="hl opt">+</span> <span class="hl str">' '</span>
  <span class="hl kwa">else</span><span class="hl opt">:</span>
    value <span class="hl opt">=</span> <span class="hl kwb">int</span><span class="hl opt">(</span>line<span class="hl opt">.</span><span class="hl kwd">strip</span><span class="hl opt">().</span><span class="hl kwd">partition</span><span class="hl opt">(</span><span class="hl str">&quot; &quot;</span><span class="hl opt">)[</span><span class="hl num">2</span><span class="hl opt">])</span>
    <span class="hl kwa">if</span> verbose<span class="hl opt">:</span>
      <span class="hl kwa">print</span> <span class="hl str">&quot;%04X: %04X ; %s&quot;</span> <span class="hl opt">% (</span>addr<span class="hl opt">,</span> value<span class="hl opt">,</span> comment<span class="hl opt">)</span>
    mem<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span>value<span class="hl opt">)</span>
    addr <span class="hl opt">=</span> addr <span class="hl opt">+</span> <span class="hl num">1</span>
    comment <span class="hl opt">=</span> <span class="hl str">&quot;&quot;</span>

<span class="hl slc"># Interpretation</span>

ip <span class="hl opt">=</span> names<span class="hl opt">[</span><span class="hl str">&quot;ip&quot;</span><span class="hl opt">]</span>
exit_reg <span class="hl opt">=</span> names<span class="hl opt">[</span><span class="hl str">&quot;exit_reg&quot;</span><span class="hl opt">]</span>
shift_reg <span class="hl opt">=</span> names<span class="hl opt">[</span><span class="hl str">&quot;shift_reg&quot;</span><span class="hl opt">]</span>
carry_reg <span class="hl opt">=</span> names<span class="hl opt">[</span><span class="hl str">&quot;carry_reg&quot;</span><span class="hl opt">]</span>

<span class="hl kwa">def</span> <span class="hl kwd">nor</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">):</span>
  r <span class="hl opt">=</span> a | b
  r <span class="hl opt">=</span> r ^ <span class="hl num">0xFFFF</span>
  <span class="hl kwa">return</span> r <span class="hl opt">&amp;</span> <span class="hl num">0xFFFF</span>

<span class="hl kwa">def</span> <span class="hl kwd">norcpu</span><span class="hl opt">():</span>
  <span class="hl kwa">while</span> <span class="hl num">1</span><span class="hl opt">:</span>
    i <span class="hl opt">=</span> mem<span class="hl opt">[</span>ip<span class="hl opt">];</span>
    a <span class="hl opt">=</span> mem<span class="hl opt">[</span>i <span class="hl opt">+</span> <span class="hl num">0</span><span class="hl opt">]</span>
    b <span class="hl opt">=</span> mem<span class="hl opt">[</span>i <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">]</span>
    r <span class="hl opt">=</span> mem<span class="hl opt">[</span>i <span class="hl opt">+</span> <span class="hl num">2</span><span class="hl opt">]</span>
    mem<span class="hl opt">[</span>ip<span class="hl opt">] =</span> i <span class="hl opt">+</span> <span class="hl num">3</span>
    f <span class="hl opt">=</span> <span class="hl kwd">nor</span><span class="hl opt">(</span>mem<span class="hl opt">[</span>a<span class="hl opt">],</span> mem<span class="hl opt">[</span>b<span class="hl opt">])</span>
    mem<span class="hl opt">[</span>r<span class="hl opt">] =</span> f
    mem<span class="hl opt">[</span>shift_reg<span class="hl opt">] = ((</span>f <span class="hl opt">&gt;&gt;</span> <span class="hl num">15</span><span class="hl opt">) &amp;</span> <span class="hl num">1</span><span class="hl opt">)</span> | <span class="hl opt">((</span>f <span class="hl opt">&amp;</span> <span class="hl num">0x7FFF</span><span class="hl opt">) &lt;&lt;</span> <span class="hl num">1</span><span class="hl opt">)</span>

    <span class="hl kwa">if</span> verbose_cpu<span class="hl opt">:</span>
      <span class="hl kwa">print</span> <span class="hl str">&quot;%04X: %04X [%04X] %04X [%04X] -&gt; %04X [%04X]&quot;</span> <span class="hl opt">%</span> \
            <span class="hl opt">(</span>i<span class="hl opt">,</span> a<span class="hl opt">,</span> mem<span class="hl opt">[</span>a<span class="hl opt">],</span> b<span class="hl opt">,</span> mem<span class="hl opt">[</span>b<span class="hl opt">],</span> r<span class="hl opt">,</span> mem<span class="hl opt">[</span>r<span class="hl opt">])</span>
    <span class="hl kwa">if</span> r <span class="hl opt">==</span> exit_reg<span class="hl opt">:</span>
      <span class="hl kwa">break</span>

<span class="hl kwa">print</span> <span class="hl str">&quot;Starting from [%04X]&quot;</span> <span class="hl opt">%</span> mem<span class="hl opt">[</span>ip<span class="hl opt">]</span>

<span class="hl slc"># Encrypt the secret code.</span>
secret_mask <span class="hl opt">= ((</span>crc16 <span class="hl opt">&amp;</span> <span class="hl num">0xff</span><span class="hl opt">)</span> ^ <span class="hl opt">((</span>crc16 <span class="hl opt">&gt;&gt;</span> <span class="hl num">8</span><span class="hl opt">) &amp;</span> <span class="hl num">0xff</span><span class="hl opt">)) +</span> <span class="hl num">1</span>
<span class="hl kwd">encode_string</span><span class="hl opt">(</span>secret_code<span class="hl opt">,</span> <span class="hl str">&quot;secret&quot;</span><span class="hl opt">,</span> secret_mask<span class="hl opt">,</span> secret_coef_add<span class="hl opt">);</span>

<span class="hl slc"># Encrypt 'Wrong...' message.</span>
<span class="hl kwd">encode_string</span><span class="hl opt">(</span>message_text<span class="hl opt">,</span> <span class="hl str">&quot;message&quot;</span><span class="hl opt">,</span> message_mask<span class="hl opt">,</span> message_coef_add<span class="hl opt">);</span>

mem_js <span class="hl opt">=</span> <span class="hl kwd">dump_js</span><span class="hl opt">(</span>mem<span class="hl opt">)</span>
<span class="hl kwd">save_mem</span><span class="hl opt">(</span><span class="hl str">&quot;norcpu-1-before.bin&quot;</span><span class="hl opt">)</span>
mem_sz <span class="hl opt">=</span> <span class="hl kwb">len</span><span class="hl opt">(</span>mem<span class="hl opt">)</span>

<span class="hl kwa">if</span> <span class="hl kwb">len</span><span class="hl opt">(</span>mem<span class="hl opt">) &gt;=</span> <span class="hl num">0x10000</span><span class="hl opt">:</span>
  <span class="hl kwa">print</span> <span class="hl str">&quot;Too much code (%08X, %04X)&quot;</span> <span class="hl opt">% (</span><span class="hl kwb">len</span><span class="hl opt">(</span>mem<span class="hl opt">),</span> <span class="hl kwb">len</span><span class="hl opt">(</span>mem<span class="hl opt">) -</span> <span class="hl num">0x10000</span><span class="hl opt">)</span>
  sys<span class="hl opt">.</span><span class="hl kwd">exit</span><span class="hl opt">()</span>

<span class="hl slc"># Inject plain password in the last moment (for testing).</span>
<span class="hl kwd">put_string</span><span class="hl opt">(</span>guess<span class="hl opt">,</span> <span class="hl str">&quot;password&quot;</span><span class="hl opt">)</span>

<span class="hl kwd">save_mem</span><span class="hl opt">(</span><span class="hl str">&quot;norcpu-2-before-with-password.bin&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">if</span> verbose<span class="hl opt">:</span>
  <span class="hl kwa">print</span> <span class="hl str">&quot;Original memory:&quot;</span>
  <span class="hl kwa">print</span> <span class="hl kwd">dump</span><span class="hl opt">(</span>mem<span class="hl opt">)</span>

start_time <span class="hl opt">=</span> time<span class="hl opt">.</span><span class="hl kwd">time</span><span class="hl opt">()</span>

<span class="hl kwd">norcpu</span><span class="hl opt">()</span>

end_time <span class="hl opt">=</span> time<span class="hl opt">.</span><span class="hl kwd">time</span><span class="hl opt">()</span>

<span class="hl kwd">save_mem</span><span class="hl opt">(</span><span class="hl str">&quot;norcpu-3-after.bin&quot;</span><span class="hl opt">,</span> mem_sz<span class="hl opt">)</span>

<span class="hl kwa">if</span> verbose<span class="hl opt">:</span>
  <span class="hl kwa">print</span> <span class="hl str">&quot;Memory after:&quot;</span>
  <span class="hl kwd">dump</span><span class="hl opt">(</span>mem<span class="hl opt">)</span>

<span class="hl kwa">print</span>
<span class="hl kwa">print</span> <span class="hl str">&quot;Size: %X&quot;</span> <span class="hl opt">%</span> <span class="hl kwb">len</span><span class="hl opt">(</span>mem<span class="hl opt">)</span>
<span class="hl kwa">print</span> <span class="hl str">&quot;Time: %d&quot;</span> <span class="hl opt">% (</span>end_time <span class="hl opt">-</span> start_time<span class="hl opt">)</span>
<span class="hl kwa">print</span> <span class="hl str">&quot;Exit: %04X&quot;</span> <span class="hl opt">%</span> mem<span class="hl opt">[</span>exit_reg<span class="hl opt">]</span>

<span class="hl kwa">print</span><span class="hl opt">(</span><span class="hl str">&quot;CRC : %04X (%04X)&quot;</span> <span class="hl opt">% (</span>crc16<span class="hl opt">,</span> correct_crc<span class="hl opt">))</span>

result <span class="hl opt">=</span> names<span class="hl opt">[</span><span class="hl str">&quot;result&quot;</span><span class="hl opt">]</span>
result_value <span class="hl opt">=</span> <span class="hl str">&quot;&quot;</span>
<span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> mem<span class="hl opt">[</span>names<span class="hl opt">[</span><span class="hl str">&quot;result_sz&quot;</span><span class="hl opt">]]):</span>
  result_value <span class="hl opt">=</span> result_value <span class="hl opt">+</span> <span class="hl kwb">chr</span><span class="hl opt">(</span>mem<span class="hl opt">[</span>result <span class="hl opt">+</span> i<span class="hl opt">] &amp;</span> <span class="hl num">0xff</span><span class="hl opt">)</span>

<span class="hl kwa">if</span> result_value <span class="hl opt">!=</span> secret_code<span class="hl opt">:</span>
  <span class="hl kwa">print</span> <span class="hl str">&quot;ERROR: [%s] != [%s]&quot;</span> <span class="hl opt">% (</span>secret_code<span class="hl opt">,</span> result_value<span class="hl opt">)</span>

js <span class="hl opt">=</span> string<span class="hl opt">.</span><span class="hl kwd">Template</span><span class="hl opt">(</span><span class="hl kwb">open</span><span class="hl opt">(</span><span class="hl str">'template.html'</span><span class="hl opt">,</span> <span class="hl str">'r'</span><span class="hl opt">).</span><span class="hl kwd">read</span><span class="hl opt">())</span>

js <span class="hl opt">=</span> js<span class="hl opt">.</span><span class="hl kwd">substitute</span><span class="hl opt">(</span> \
  ip <span class="hl opt">=</span> names<span class="hl opt">[</span><span class="hl str">&quot;ip&quot;</span><span class="hl opt">],</span>
  exit_reg <span class="hl opt">=</span> names<span class="hl opt">[</span><span class="hl str">&quot;exit_reg&quot;</span><span class="hl opt">],</span>
  shift_reg <span class="hl opt">=</span> names<span class="hl opt">[</span><span class="hl str">&quot;shift_reg&quot;</span><span class="hl opt">],</span>
  password <span class="hl opt">=</span> names<span class="hl opt">[</span><span class="hl str">&quot;password&quot;</span><span class="hl opt">],</span>
  password_sz <span class="hl opt">=</span> names<span class="hl opt">[</span><span class="hl str">&quot;password_sz&quot;</span><span class="hl opt">],</span>
  result <span class="hl opt">=</span> names<span class="hl opt">[</span><span class="hl str">&quot;result&quot;</span><span class="hl opt">],</span>
  result_sz <span class="hl opt">=</span> names<span class="hl opt">[</span><span class="hl str">&quot;result_sz&quot;</span><span class="hl opt">],</span>
  mem_js <span class="hl opt">=</span> mem_js
<span class="hl opt">)</span>

f <span class="hl opt">=</span> <span class="hl kwb">open</span><span class="hl opt">(</span><span class="hl str">&quot;norcpu.html&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;w&quot;</span><span class="hl opt">)</span>
f<span class="hl opt">.</span><span class="hl kwd">write</span><span class="hl opt">(</span>js<span class="hl opt">)</span>
f<span class="hl opt">.</span><span class="hl kwd">close</span><span class="hl opt">()</span>
</pre>

<h2>Задача 2</h2>

<p>Файл <a href="https://github.com/begoon/norcpu/blob/master/v2/norcpu.py">norcpu.py</a> (<a href="https://github.com/begoon/norcpu/blob/master/v2/template.html">template.html</a>).</p>

<pre class="hl">
<span class="hl kwa">import</span> sys<span class="hl opt">,</span> re<span class="hl opt">,</span> time<span class="hl opt">,</span> string<span class="hl opt">,</span> binascii

verbose <span class="hl opt">=</span> <span class="hl kwa">False</span>
verbose_cpu <span class="hl opt">=</span> <span class="hl kwa">False</span>
scramble <span class="hl opt">=</span> <span class="hl kwa">True</span>

secret_password <span class="hl opt">=</span> <span class="hl str">&quot;h1cKmE1fUsAn&quot;</span>
secret_password_xor_mask <span class="hl opt">=</span> <span class="hl num">0x3401</span>
secret_password_add <span class="hl opt">=</span> <span class="hl num">29</span>

secret_code <span class="hl opt">=</span> <span class="hl str">&quot;R0und2 D0ne!&quot;</span>
secret_code_xor_mask <span class="hl opt">=</span> <span class="hl num">0x730A</span>
secret_code_add <span class="hl opt">=</span> <span class="hl num">37</span>

guess <span class="hl opt">=</span> <span class="hl str">&quot;123456789012&quot;</span>
guess <span class="hl opt">=</span> secret_password

code_segment <span class="hl opt">= []</span>
data_segment <span class="hl opt">= []</span>

label_count <span class="hl opt">=</span> <span class="hl num">0</span>

<span class="hl kwa">def</span> <span class="hl kwd">dump</span><span class="hl opt">(</span>data<span class="hl opt">,</span> length <span class="hl opt">=</span> <span class="hl num">8</span><span class="hl opt">):</span>
  result <span class="hl opt">= []</span>
  <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl kwb">xrange</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl kwb">len</span><span class="hl opt">(</span>data<span class="hl opt">),</span> length<span class="hl opt">):</span>
    line <span class="hl opt">=</span> data<span class="hl opt">[</span>i<span class="hl opt">:</span>i <span class="hl opt">+</span> length<span class="hl opt">]</span>
    hex_line <span class="hl opt">=</span> <span class="hl str">' '</span><span class="hl opt">.</span><span class="hl kwd">join</span><span class="hl opt">([</span><span class="hl str">&quot;%04X&quot;</span> <span class="hl opt">%</span> x <span class="hl kwa">for</span> x <span class="hl kwa">in</span> line<span class="hl opt">])</span>
    result<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span><span class="hl str">&quot;%04X: %-*s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl opt">% (</span>i<span class="hl opt">,</span> length<span class="hl opt">*</span><span class="hl num">5</span><span class="hl opt">,</span> hex_line<span class="hl opt">))</span>
  <span class="hl kwa">return</span> <span class="hl str">''</span><span class="hl opt">.</span><span class="hl kwd">join</span><span class="hl opt">(</span>result<span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">dump_js</span><span class="hl opt">(</span>data<span class="hl opt">,</span> length <span class="hl opt">=</span> <span class="hl num">8</span><span class="hl opt">):</span>
  result <span class="hl opt">= []</span>
  <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl kwb">xrange</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl kwb">len</span><span class="hl opt">(</span>data<span class="hl opt">),</span> length<span class="hl opt">):</span>
    line <span class="hl opt">=</span> data<span class="hl opt">[</span>i<span class="hl opt">:</span>i <span class="hl opt">+</span> length<span class="hl opt">]</span>
    hex_line <span class="hl opt">=</span> <span class="hl str">' '</span><span class="hl opt">.</span><span class="hl kwd">join</span><span class="hl opt">([</span><span class="hl str">&quot;0x%04X,&quot;</span> <span class="hl opt">%</span> x <span class="hl kwa">for</span> x <span class="hl kwa">in</span> line<span class="hl opt">])</span>
    result<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span><span class="hl str">&quot;%-*s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl opt">% (</span>length<span class="hl opt">*</span><span class="hl num">5</span><span class="hl opt">,</span> hex_line<span class="hl opt">))</span>
  <span class="hl kwa">return</span> <span class="hl str">''</span><span class="hl opt">.</span><span class="hl kwd">join</span><span class="hl opt">(</span>result<span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">encode_string</span><span class="hl opt">(</span>data<span class="hl opt">,</span> name<span class="hl opt">,</span> mask<span class="hl opt">,</span> coef_add<span class="hl opt">):</span>
  <span class="hl kwa">global</span> mem<span class="hl opt">,</span> names
  offset <span class="hl opt">=</span> names<span class="hl opt">[</span>name<span class="hl opt">]</span>
  offset_sz <span class="hl opt">=</span> names<span class="hl opt">[</span>name <span class="hl opt">+</span> <span class="hl str">&quot;_sz&quot;</span><span class="hl opt">]</span>
  <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl kwb">len</span><span class="hl opt">(</span>data<span class="hl opt">)):</span>
    mem<span class="hl opt">[</span>offset <span class="hl opt">+</span> i<span class="hl opt">] =</span> <span class="hl kwb">ord</span><span class="hl opt">(</span>data<span class="hl opt">[</span>i<span class="hl opt">])</span> ^ mask
    mask <span class="hl opt">= (</span>mask <span class="hl opt">*</span> <span class="hl num">3</span> <span class="hl opt">+</span> coef_add<span class="hl opt">) &amp;</span> <span class="hl num">0xffff</span>
  mem<span class="hl opt">[</span>offset_sz<span class="hl opt">] =</span> <span class="hl kwb">len</span><span class="hl opt">(</span>data<span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">put_string</span><span class="hl opt">(</span>data<span class="hl opt">,</span> name<span class="hl opt">):</span>
  <span class="hl kwa">global</span> mem<span class="hl opt">,</span> names
  offset <span class="hl opt">=</span> names<span class="hl opt">[</span>name<span class="hl opt">]</span>
  offset_sz <span class="hl opt">=</span> names<span class="hl opt">[</span>name <span class="hl opt">+</span> <span class="hl str">&quot;_sz&quot;</span><span class="hl opt">]</span>
  <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl kwb">len</span><span class="hl opt">(</span>data<span class="hl opt">)):</span>
    mem<span class="hl opt">[</span>offset <span class="hl opt">+</span> i<span class="hl opt">] =</span> <span class="hl kwb">ord</span><span class="hl opt">(</span>data<span class="hl opt">[</span>i<span class="hl opt">])</span>
  mem<span class="hl opt">[</span>offset_sz<span class="hl opt">] =</span> <span class="hl kwb">len</span><span class="hl opt">(</span>data<span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">save_mem</span><span class="hl opt">(</span>name<span class="hl opt">,</span> size <span class="hl opt">= -</span><span class="hl num">1</span><span class="hl opt">):</span>
  f <span class="hl opt">=</span> <span class="hl kwb">open</span><span class="hl opt">(</span>name<span class="hl opt">,</span> <span class="hl str">&quot;w&quot;</span><span class="hl opt">)</span>
  <span class="hl kwa">if</span> size <span class="hl opt">== -</span><span class="hl num">1</span><span class="hl opt">:</span> size <span class="hl opt">=</span> <span class="hl kwb">len</span><span class="hl opt">(</span>mem<span class="hl opt">)</span>
  <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl opt">(</span>mem<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">:</span>size<span class="hl opt">]):</span>
    <span class="hl kwb">hex</span> <span class="hl opt">=</span> <span class="hl str">&quot;%04X&quot;</span> <span class="hl opt">%</span> i
    bin <span class="hl opt">=</span> binascii<span class="hl opt">.</span><span class="hl kwd">a2b_hex</span><span class="hl opt">(</span><span class="hl kwb">hex</span><span class="hl opt">)</span>
    f<span class="hl opt">.</span><span class="hl kwd">write</span><span class="hl opt">(</span>bin<span class="hl opt">)</span>
  f<span class="hl opt">.</span><span class="hl kwd">close</span><span class="hl opt">()</span>

<span class="hl kwa">def</span> <span class="hl kwd">next_label</span><span class="hl opt">():</span>
  <span class="hl kwa">global</span> label_count
  label_count <span class="hl opt">=</span> label_count <span class="hl opt">+</span> <span class="hl num">1</span>
  <span class="hl kwa">return</span> <span class="hl str">&quot;label_%04d&quot;</span> <span class="hl opt">%</span> label_count

<span class="hl kwa">def</span> <span class="hl kwd">code_rem</span><span class="hl opt">(</span>comment<span class="hl opt">):</span>
  code_segment<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span><span class="hl str">'; '</span> <span class="hl opt">+</span> comment<span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">data_rem</span><span class="hl opt">(</span>comment<span class="hl opt">):</span>
  data_segment<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span><span class="hl str">'; '</span> <span class="hl opt">+</span> comment<span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">data_label</span><span class="hl opt">(</span>name<span class="hl opt">):</span>
  data_segment<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span>name <span class="hl opt">+</span> <span class="hl str">&quot;:&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">code_label</span><span class="hl opt">(</span>name<span class="hl opt">):</span>
  code_segment<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span>name <span class="hl opt">+</span> <span class="hl str">&quot;:&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">code</span><span class="hl opt">(</span>value<span class="hl opt">):</span>
  printed <span class="hl opt">=</span> value
  <span class="hl kwa">if</span> <span class="hl kwb">type</span><span class="hl opt">(</span>value<span class="hl opt">).</span>__name__ <span class="hl opt">==</span> <span class="hl str">'int'</span><span class="hl opt">:</span>
    printed <span class="hl opt">=</span> <span class="hl str">&quot;%d&quot;</span> <span class="hl opt">%</span> value
  code_segment<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span><span class="hl str">&quot;  dw %s&quot;</span> <span class="hl opt">%</span> printed<span class="hl opt">)</span>

scramble_counter <span class="hl opt">=</span> <span class="hl num">0x2743</span>

<span class="hl kwa">def</span> <span class="hl kwd">next_scramble_counter</span><span class="hl opt">():</span>
  <span class="hl kwa">global</span> scramble_counter
  scramble_counter <span class="hl opt">=</span> scramble_counter <span class="hl opt">*</span> <span class="hl num">3</span> <span class="hl opt">+</span> <span class="hl num">7</span>
  <span class="hl kwa">return</span> scramble_counter <span class="hl opt">&amp;</span> <span class="hl num">0xffff</span>

<span class="hl kwa">def</span> <span class="hl kwd">word</span><span class="hl opt">(</span>value<span class="hl opt">):</span>
  <span class="hl kwa">if</span> value <span class="hl opt">== -</span><span class="hl num">1</span><span class="hl opt">:</span>
    <span class="hl kwa">if</span> scramble<span class="hl opt">:</span>
      value <span class="hl opt">=</span> <span class="hl kwd">next_scramble_counter</span><span class="hl opt">()</span>
    <span class="hl kwa">else</span><span class="hl opt">:</span>
      value <span class="hl opt">=</span> <span class="hl num">0</span>
  printed <span class="hl opt">=</span> value
  <span class="hl kwa">if</span> <span class="hl kwb">type</span><span class="hl opt">(</span>value<span class="hl opt">).</span>__name__ <span class="hl opt">==</span> <span class="hl str">'int'</span><span class="hl opt">:</span>
    printed <span class="hl opt">=</span> <span class="hl str">&quot;%d&quot;</span> <span class="hl opt">%</span> value
  data_segment<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span><span class="hl str">&quot;  dw %s&quot;</span> <span class="hl opt">%</span> printed<span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwb">buffer</span><span class="hl opt">(</span>length<span class="hl opt">,</span> value <span class="hl opt">= -</span><span class="hl num">1</span><span class="hl opt">):</span>
  <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> length<span class="hl opt">):</span>
    <span class="hl kwd">word</span><span class="hl opt">(</span>value<span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">var</span><span class="hl opt">(</span>name<span class="hl opt">,</span> value <span class="hl opt">= -</span><span class="hl num">1</span><span class="hl opt">):</span>
  <span class="hl kwd">data_label</span><span class="hl opt">(</span>name<span class="hl opt">);</span>
  <span class="hl kwd">word</span><span class="hl opt">(</span>value<span class="hl opt">);</span>

<span class="hl slc"># Macros</span>

<span class="hl kwa">def</span> <span class="hl kwd">NOR</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">,</span> r<span class="hl opt">):</span>
  <span class="hl kwd">code_rem</span><span class="hl opt">(</span><span class="hl str">'NOR '</span> <span class="hl opt">+</span> <span class="hl kwb">str</span><span class="hl opt">(</span>a<span class="hl opt">) +</span> <span class="hl str">' '</span> <span class="hl opt">+</span> <span class="hl kwb">str</span><span class="hl opt">(</span>b<span class="hl opt">) +</span> <span class="hl str">' '</span> <span class="hl opt">+</span> <span class="hl kwb">str</span><span class="hl opt">(</span>r<span class="hl opt">))</span>
  <span class="hl kwd">code</span><span class="hl opt">(</span>a<span class="hl opt">)</span>
  <span class="hl kwd">code</span><span class="hl opt">(</span>b<span class="hl opt">)</span>
  <span class="hl kwd">code</span><span class="hl opt">(</span>r<span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">NOT</span><span class="hl opt">(</span>a<span class="hl opt">,</span> r<span class="hl opt">):</span>
  <span class="hl kwd">NOR</span><span class="hl opt">(</span>a<span class="hl opt">,</span> a<span class="hl opt">,</span> r<span class="hl opt">);</span>

<span class="hl kwa">def</span> <span class="hl kwd">OR</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">,</span> r<span class="hl opt">):</span>
  <span class="hl kwd">NOR</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">,</span> <span class="hl str">&quot;or_reg&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">NOT</span><span class="hl opt">(</span><span class="hl str">&quot;or_reg&quot;</span><span class="hl opt">,</span> r<span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;or_reg&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">AND</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">,</span> r<span class="hl opt">):</span>
  <span class="hl kwd">NOT</span><span class="hl opt">(</span>a<span class="hl opt">,</span> <span class="hl str">&quot;and_reg_a&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">NOT</span><span class="hl opt">(</span>b<span class="hl opt">,</span> <span class="hl str">&quot;and_reg_b&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">OR</span><span class="hl opt">(</span><span class="hl str">&quot;and_reg_a&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;and_reg_b&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;and_reg_a&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">NOT</span><span class="hl opt">(</span><span class="hl str">&quot;and_reg_a&quot;</span><span class="hl opt">,</span> r<span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;and_reg_a&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;and_reg_b&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">ANDi</span><span class="hl opt">(</span>a<span class="hl opt">,</span> imm<span class="hl opt">,</span> r<span class="hl opt">):</span>
  <span class="hl kwd">MOVi</span><span class="hl opt">(</span>imm<span class="hl opt">,</span> <span class="hl str">&quot;and_i_reg&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">AND</span><span class="hl opt">(</span>a<span class="hl opt">,</span> <span class="hl str">&quot;and_i_reg&quot;</span><span class="hl opt">,</span> r<span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;and_i_reg&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">XOR</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">,</span> r<span class="hl opt">):</span>
  <span class="hl kwd">NOT</span><span class="hl opt">(</span>a<span class="hl opt">,</span> <span class="hl str">&quot;xor_reg_a&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">NOT</span><span class="hl opt">(</span>b<span class="hl opt">,</span> <span class="hl str">&quot;xor_reg_b&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">AND</span><span class="hl opt">(</span>a<span class="hl opt">,</span> <span class="hl str">&quot;xor_reg_b&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;xor_reg_b&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">AND</span><span class="hl opt">(</span>b<span class="hl opt">,</span> <span class="hl str">&quot;xor_reg_a&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;xor_reg_a&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">OR</span><span class="hl opt">(</span><span class="hl str">&quot;xor_reg_a&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;xor_reg_b&quot;</span><span class="hl opt">,</span> r<span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;xor_reg_a&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;xor_reg_b&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">XORi</span><span class="hl opt">(</span>a<span class="hl opt">,</span> imm<span class="hl opt">,</span> r<span class="hl opt">):</span>
  <span class="hl kwd">MOVi</span><span class="hl opt">(</span>imm<span class="hl opt">,</span> <span class="hl str">&quot;xor_i_reg&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">XOR</span><span class="hl opt">(</span>a<span class="hl opt">,</span> <span class="hl str">&quot;xor_i_reg&quot;</span><span class="hl opt">,</span> r<span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;xor_i_reg&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">MOV</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">):</span>
  <span class="hl kwd">code_rem</span><span class="hl opt">(</span><span class="hl str">'MOV '</span> <span class="hl opt">+</span> <span class="hl kwb">str</span><span class="hl opt">(</span>a<span class="hl opt">) +</span> <span class="hl str">' '</span> <span class="hl opt">+</span> <span class="hl kwb">str</span><span class="hl opt">(</span>b<span class="hl opt">))</span>
  <span class="hl kwd">NOT</span><span class="hl opt">(</span>a<span class="hl opt">,</span> <span class="hl str">&quot;move_reg&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">NOT</span><span class="hl opt">(</span><span class="hl str">&quot;move_reg&quot;</span><span class="hl opt">,</span> b<span class="hl opt">)</span>
  <span class="hl kwd">code_rem</span><span class="hl opt">(</span><span class="hl str">'MOV END'</span><span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;move_reg&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">JMP</span><span class="hl opt">(</span>a<span class="hl opt">):</span>
  <span class="hl kwd">code_rem</span><span class="hl opt">(</span><span class="hl str">'JMP '</span> <span class="hl opt">+</span> <span class="hl kwb">str</span><span class="hl opt">(</span>a<span class="hl opt">))</span>
  <span class="hl kwd">MOV</span><span class="hl opt">(</span>a<span class="hl opt">,</span> <span class="hl str">&quot;ip&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">JMPi</span><span class="hl opt">(</span>a<span class="hl opt">):</span>
  <span class="hl kwd">code_rem</span><span class="hl opt">(</span><span class="hl str">'JMPi '</span> <span class="hl opt">+</span> <span class="hl kwb">str</span><span class="hl opt">(</span>a<span class="hl opt">))</span>
  label <span class="hl opt">=</span> <span class="hl kwd">next_label</span><span class="hl opt">()</span>
  <span class="hl kwd">JMP</span><span class="hl opt">(</span>label<span class="hl opt">)</span>
  <span class="hl kwd">code_label</span><span class="hl opt">(</span>label<span class="hl opt">)</span>
  <span class="hl kwd">code</span><span class="hl opt">(</span>a<span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">MOVi</span><span class="hl opt">(</span>imm<span class="hl opt">,</span> a<span class="hl opt">):</span>
  <span class="hl kwd">code_rem</span><span class="hl opt">(</span><span class="hl str">'MOVi #'</span> <span class="hl opt">+</span> <span class="hl kwb">str</span><span class="hl opt">(</span>imm<span class="hl opt">) +</span> <span class="hl str">' '</span> <span class="hl opt">+</span> <span class="hl kwb">str</span><span class="hl opt">(</span>a<span class="hl opt">))</span>
  label_data <span class="hl opt">=</span> <span class="hl kwd">next_label</span><span class="hl opt">()</span>
  label_jump <span class="hl opt">=</span> <span class="hl kwd">next_label</span><span class="hl opt">()</span>
  <span class="hl kwd">MOV</span><span class="hl opt">(</span>label_data<span class="hl opt">,</span> a<span class="hl opt">)</span>
  <span class="hl kwd">JMPi</span><span class="hl opt">(</span>label_jump<span class="hl opt">)</span>
  <span class="hl kwd">code_label</span><span class="hl opt">(</span>label_data<span class="hl opt">)</span>
  <span class="hl kwd">code</span><span class="hl opt">(</span>imm<span class="hl opt">)</span>
  <span class="hl kwd">code_label</span><span class="hl opt">(</span>label_jump<span class="hl opt">)</span>

<span class="hl slc"># [a] -&gt; b</span>
<span class="hl kwa">def</span> <span class="hl kwd">PEEK</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">):</span>
  label1 <span class="hl opt">=</span> <span class="hl kwd">next_label</span><span class="hl opt">()</span>
  label2 <span class="hl opt">=</span> <span class="hl kwd">next_label</span><span class="hl opt">()</span>
  <span class="hl kwd">MOV</span><span class="hl opt">(</span>a<span class="hl opt">,</span> label1<span class="hl opt">)</span>
  <span class="hl kwd">MOV</span><span class="hl opt">(</span>a<span class="hl opt">,</span> label2<span class="hl opt">)</span>
  <span class="hl kwd">code_label</span><span class="hl opt">(</span>label1<span class="hl opt">)</span>  <span class="hl slc"># NOT(0, 0, move_reg)</span>
  <span class="hl kwd">code</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">)</span>             <span class="hl slc"># &lt;- a</span>
  <span class="hl kwd">code_label</span><span class="hl opt">(</span>label2<span class="hl opt">)</span>  <span class="hl slc">#</span>
  <span class="hl kwd">code</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">)</span>             <span class="hl slc"># &lt;- a</span>
  <span class="hl kwd">code</span><span class="hl opt">(</span><span class="hl str">&quot;move_reg&quot;</span><span class="hl opt">)</span>    <span class="hl slc">#</span>
  <span class="hl kwd">NOT</span><span class="hl opt">(</span><span class="hl str">&quot;move_reg&quot;</span><span class="hl opt">,</span> b<span class="hl opt">)</span>

<span class="hl slc"># a -&gt; [b]</span>
<span class="hl kwa">def</span> <span class="hl kwd">POKE</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">):</span>
  <span class="hl kwd">code_rem</span><span class="hl opt">(</span><span class="hl str">'POKE '</span> <span class="hl opt">+</span> <span class="hl kwb">str</span><span class="hl opt">(</span>a<span class="hl opt">) +</span> <span class="hl str">' ['</span> <span class="hl opt">+</span> <span class="hl kwb">str</span><span class="hl opt">(</span>b<span class="hl opt">) +</span> <span class="hl str">']'</span><span class="hl opt">)</span>
  label <span class="hl opt">=</span> <span class="hl kwd">next_label</span><span class="hl opt">()</span>
  <span class="hl kwd">MOV</span><span class="hl opt">(</span>b<span class="hl opt">,</span> label<span class="hl opt">)</span>
  <span class="hl kwd">NOT</span><span class="hl opt">(</span>a<span class="hl opt">,</span> <span class="hl str">&quot;move_reg&quot;</span><span class="hl opt">)</span>  <span class="hl slc"># +3 (three operations)</span>
  <span class="hl kwd">code</span><span class="hl opt">(</span><span class="hl str">&quot;move_reg&quot;</span><span class="hl opt">)</span>    <span class="hl slc"># +4</span>
  <span class="hl kwd">code</span><span class="hl opt">(</span><span class="hl str">&quot;move_reg&quot;</span><span class="hl opt">)</span>    <span class="hl slc"># +5</span>
  <span class="hl kwd">code_label</span><span class="hl opt">(</span>label<span class="hl opt">)</span>
  <span class="hl kwd">code</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">)</span>             <span class="hl slc"># &lt;- b</span>

<span class="hl slc"># imm -&gt; [a]</span>
<span class="hl kwa">def</span> <span class="hl kwd">POKEi</span><span class="hl opt">(</span>imm<span class="hl opt">,</span> a<span class="hl opt">):</span>
  <span class="hl kwd">MOVi</span><span class="hl opt">(</span>imm<span class="hl opt">,</span> <span class="hl str">&quot;poke_i_reg&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">POKE</span><span class="hl opt">(</span><span class="hl str">&quot;poke_i_reg&quot;</span><span class="hl opt">,</span> a<span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;poke_i_reg&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">EXIT</span><span class="hl opt">(</span>a<span class="hl opt">):</span>
  <span class="hl kwd">MOV</span><span class="hl opt">(</span>a<span class="hl opt">,</span> <span class="hl str">&quot;exit_reg&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">EXITi</span><span class="hl opt">(</span>a<span class="hl opt">):</span>
  <span class="hl kwd">MOVi</span><span class="hl opt">(</span>a<span class="hl opt">,</span> <span class="hl str">&quot;exit_reg&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">FADD</span><span class="hl opt">(</span>mask<span class="hl opt">,</span> carry<span class="hl opt">,</span> a<span class="hl opt">,</span> b<span class="hl opt">,</span> r<span class="hl opt">):</span>
  <span class="hl kwd">AND</span><span class="hl opt">(</span>a<span class="hl opt">,</span> mask<span class="hl opt">,</span> <span class="hl str">&quot;fadd_reg_a&quot;</span><span class="hl opt">)</span>  <span class="hl slc"># zero bits in 'a' except mask'ed</span>
  <span class="hl kwd">AND</span><span class="hl opt">(</span>b<span class="hl opt">,</span> mask<span class="hl opt">,</span> <span class="hl str">&quot;fadd_reg_b&quot;</span><span class="hl opt">)</span>  <span class="hl slc"># zero bits in 'b' except mask'ed</span>
  <span class="hl kwd">AND</span><span class="hl opt">(</span>carry<span class="hl opt">,</span> mask<span class="hl opt">,</span> carry<span class="hl opt">)</span>     <span class="hl slc"># zero bits in 'carry' except mask'ed</span>

  <span class="hl slc"># SUM = (a ^ b) ^ carry</span>
  <span class="hl kwd">XOR</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">,</span> <span class="hl str">&quot;fadd_reg_t1&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">XOR</span><span class="hl opt">(</span><span class="hl str">&quot;fadd_reg_t1&quot;</span><span class="hl opt">,</span> carry<span class="hl opt">,</span> <span class="hl str">&quot;fadd_reg_bit_r&quot;</span><span class="hl opt">)</span>

  <span class="hl slc"># Leave only 'mask'ed bit in bit_r.</span>
  <span class="hl kwd">AND</span><span class="hl opt">(</span><span class="hl str">&quot;fadd_reg_bit_r&quot;</span><span class="hl opt">,</span> mask<span class="hl opt">,</span> <span class="hl str">&quot;fadd_reg_bit_r&quot;</span><span class="hl opt">)</span>

  <span class="hl slc"># Add current added bit to the result.</span>
  <span class="hl kwd">OR</span><span class="hl opt">(</span><span class="hl str">&quot;fadd_reg_bit_r&quot;</span><span class="hl opt">,</span> r<span class="hl opt">,</span> r<span class="hl opt">)</span>

  <span class="hl slc"># CARRY = (a &amp; b) | (carry &amp; (a ^ b))</span>
  <span class="hl kwd">AND</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">,</span> <span class="hl str">&quot;fadd_reg_t2&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">AND</span><span class="hl opt">(</span>carry<span class="hl opt">,</span> <span class="hl str">&quot;fadd_reg_t1&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;fadd_reg_t1&quot;</span><span class="hl opt">)</span>

  <span class="hl slc"># CARRY is calculated, and 'shift_reg' contains the same value</span>
  <span class="hl slc"># but shifted the left by 1 bit.</span>
  <span class="hl kwd">OR</span><span class="hl opt">(</span><span class="hl str">&quot;fadd_reg_t2&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;fadd_reg_t1&quot;</span><span class="hl opt">,</span> carry<span class="hl opt">)</span>

  <span class="hl slc"># CARRY is shifted the left by 1 bit to be used on the next round.</span>
  <span class="hl kwd">MOV</span><span class="hl opt">(</span><span class="hl str">&quot;shift_reg&quot;</span><span class="hl opt">,</span> carry<span class="hl opt">)</span>

  <span class="hl slc"># shift_reg = mask &lt;&lt; 1</span>
  <span class="hl kwd">MOV</span><span class="hl opt">(</span>mask<span class="hl opt">,</span> mask<span class="hl opt">)</span>
  <span class="hl slc"># mask = shift (effectively &quot;mask = mask &lt;&lt; 1&quot;)</span>
  <span class="hl kwd">MOV</span><span class="hl opt">(</span><span class="hl str">&quot;shift_reg&quot;</span><span class="hl opt">,</span> mask<span class="hl opt">)</span>

  <span class="hl kwd">AND</span><span class="hl opt">(</span>carry<span class="hl opt">,</span> mask<span class="hl opt">,</span> carry<span class="hl opt">)</span>

<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;fadd_reg_a&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;fadd_reg_b&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;fadd_reg_bit_r&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;fadd_reg_t1&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;fadd_reg_t2&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">ZERO</span><span class="hl opt">(</span>a<span class="hl opt">):</span>
  <span class="hl kwd">XOR</span><span class="hl opt">(</span>a<span class="hl opt">,</span> a<span class="hl opt">,</span> a<span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">FADC</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">,</span> r<span class="hl opt">):</span>
  <span class="hl kwd">ZERO</span><span class="hl opt">(</span><span class="hl str">&quot;fadc_reg_t&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">MOV</span><span class="hl opt">(</span><span class="hl str">&quot;const_1&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;fadc_reg_mask&quot;</span><span class="hl opt">)</span>
  <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">16</span><span class="hl opt">):</span>
    <span class="hl kwd">FADD</span><span class="hl opt">(</span><span class="hl str">&quot;fadc_reg_mask&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;carry_reg&quot;</span><span class="hl opt">,</span> a<span class="hl opt">,</span> b<span class="hl opt">,</span> <span class="hl str">&quot;fadc_reg_t&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">MOV</span><span class="hl opt">(</span><span class="hl str">&quot;fadc_reg_t&quot;</span><span class="hl opt">,</span> r<span class="hl opt">)</span>

  <span class="hl kwd">ZERO</span><span class="hl opt">(</span><span class="hl str">&quot;fadc_reg_t&quot;</span><span class="hl opt">)</span>

  <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">16</span><span class="hl opt">):</span>
    <span class="hl kwd">OR</span><span class="hl opt">(</span><span class="hl str">&quot;fadc_reg_t&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;carry_reg&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;fadc_reg_t&quot;</span><span class="hl opt">)</span>
    <span class="hl kwd">MOV</span><span class="hl opt">(</span><span class="hl str">&quot;carry_reg&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;carry_reg&quot;</span><span class="hl opt">)</span>
    <span class="hl kwd">MOV</span><span class="hl opt">(</span><span class="hl str">&quot;shift_reg&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;carry_reg&quot;</span><span class="hl opt">)</span>

  <span class="hl kwd">MOV</span><span class="hl opt">(</span><span class="hl str">&quot;fadc_reg_t&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;carry_reg&quot;</span><span class="hl opt">)</span>

<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;fadc_reg_mask&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;fadc_reg_t&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">ADD</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">,</span> r<span class="hl opt">):</span>
  <span class="hl kwd">ZERO</span><span class="hl opt">(</span><span class="hl str">&quot;carry_reg&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">FADC</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">,</span> r<span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">ADDi</span><span class="hl opt">(</span>a<span class="hl opt">,</span> imm<span class="hl opt">,</span> r<span class="hl opt">):</span>
  <span class="hl kwd">MOVi</span><span class="hl opt">(</span>imm<span class="hl opt">,</span> <span class="hl str">&quot;add_i_reg&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">ADD</span><span class="hl opt">(</span>a<span class="hl opt">,</span> <span class="hl str">&quot;add_i_reg&quot;</span><span class="hl opt">,</span> r<span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;add_i_reg&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">PUSH</span><span class="hl opt">(</span>a<span class="hl opt">):</span>
  <span class="hl kwd">ADD</span><span class="hl opt">(</span><span class="hl str">&quot;stack_reg&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;const_minus_1&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;stack_reg&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">POKE</span><span class="hl opt">(</span>a<span class="hl opt">,</span> <span class="hl str">&quot;stack_reg&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">PUSHi</span><span class="hl opt">(</span>imm<span class="hl opt">):</span>
  <span class="hl kwd">MOVi</span><span class="hl opt">(</span>imm<span class="hl opt">,</span> <span class="hl str">&quot;push_i_reg&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">PUSH</span><span class="hl opt">(</span><span class="hl str">&quot;push_i_reg&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;push_i_reg&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">POP</span><span class="hl opt">(</span>a<span class="hl opt">):</span>
  <span class="hl kwd">PEEK</span><span class="hl opt">(</span><span class="hl str">&quot;stack_reg&quot;</span><span class="hl opt">,</span> a<span class="hl opt">)</span>
  <span class="hl kwd">ADD</span><span class="hl opt">(</span><span class="hl str">&quot;stack_reg&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;const_1&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;stack_reg&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">CALL</span><span class="hl opt">(</span>a<span class="hl opt">):</span>
  label <span class="hl opt">=</span> <span class="hl kwd">next_label</span><span class="hl opt">()</span>
  <span class="hl kwd">PUSHi</span><span class="hl opt">(</span>label<span class="hl opt">)</span>
  <span class="hl kwd">JMP</span><span class="hl opt">(</span>a<span class="hl opt">)</span>
  <span class="hl kwd">code_label</span><span class="hl opt">(</span>label<span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">CALLi</span><span class="hl opt">(</span>a<span class="hl opt">):</span>
  label <span class="hl opt">=</span> <span class="hl kwd">next_label</span><span class="hl opt">()</span>
  <span class="hl kwd">PUSHi</span><span class="hl opt">(</span>label<span class="hl opt">)</span>
  <span class="hl kwd">JMPi</span><span class="hl opt">(</span>a<span class="hl opt">)</span>
  <span class="hl kwd">code_label</span><span class="hl opt">(</span>label<span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">RET</span><span class="hl opt">():</span>
  <span class="hl kwd">POP</span><span class="hl opt">(</span><span class="hl str">&quot;ip&quot;</span><span class="hl opt">)</span>

<span class="hl slc"># Jump 'a', if cond = FFFF, and 'b' if conf = 0000</span>
<span class="hl kwa">def</span> <span class="hl kwd">BRANCH</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">,</span> cond<span class="hl opt">):</span>
  <span class="hl kwd">AND</span><span class="hl opt">(</span>a<span class="hl opt">,</span> cond<span class="hl opt">,</span> <span class="hl str">&quot;branch_reg_a&quot;</span><span class="hl opt">)</span>              <span class="hl slc"># reg_a = a &amp; cond</span>
  <span class="hl kwd">NOT</span><span class="hl opt">(</span>cond<span class="hl opt">,</span> <span class="hl str">&quot;branch_reg_b&quot;</span><span class="hl opt">)</span>                 <span class="hl slc"># reg_b = !cond</span>
  <span class="hl kwd">AND</span><span class="hl opt">(</span>b<span class="hl opt">,</span> <span class="hl str">&quot;branch_reg_b&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;branch_reg_b&quot;</span><span class="hl opt">)</span>    <span class="hl slc"># reg_b = b &amp; reg_b = b &amp; !cond</span>
  <span class="hl kwd">OR</span><span class="hl opt">(</span><span class="hl str">&quot;branch_reg_a&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;branch_reg_b&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;ip&quot;</span><span class="hl opt">)</span>  <span class="hl slc"># ip = (a &amp; cond) | (b &amp; !cond)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;branch_reg_a&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;branch_reg_b&quot;</span><span class="hl opt">)</span>

<span class="hl slc"># Jump 'a', if cond = FFFF, and 'b' if conf = 0000</span>
<span class="hl kwa">def</span> <span class="hl kwd">BRANCHi</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">,</span> cond<span class="hl opt">):</span>
  <span class="hl kwd">MOVi</span><span class="hl opt">(</span>a<span class="hl opt">,</span> <span class="hl str">&quot;branch_i_reg_a&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">MOVi</span><span class="hl opt">(</span>b<span class="hl opt">,</span> <span class="hl str">&quot;branch_i_reg_b&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">BRANCH</span><span class="hl opt">(</span><span class="hl str">&quot;branch_i_reg_a&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;branch_i_reg_b&quot;</span><span class="hl opt">,</span> cond<span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;branch_i_reg_a&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;branch_i_reg_b&quot;</span><span class="hl opt">)</span>

<span class="hl slc"># if a != 0 -&gt; carry = FFFF else carry = 0000</span>
<span class="hl kwa">def</span> <span class="hl kwd">IS_0</span><span class="hl opt">(</span>a<span class="hl opt">):</span>
  <span class="hl kwd">ZERO</span><span class="hl opt">(</span><span class="hl str">&quot;carry_reg&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">FADC</span><span class="hl opt">(</span>a<span class="hl opt">,</span> <span class="hl str">&quot;const_minus_1&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;is_0_reg&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">NOT</span><span class="hl opt">(</span><span class="hl str">&quot;carry_reg&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;zero_reg&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;is_0_reg&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;zero_reg&quot;</span><span class="hl opt">)</span>

<span class="hl slc"># ip = (zero_reg == FFFF ? a : ip)</span>
<span class="hl kwa">def</span> <span class="hl kwd">JZi</span><span class="hl opt">(</span>a<span class="hl opt">):</span>
  label <span class="hl opt">=</span> <span class="hl kwd">next_label</span><span class="hl opt">()</span>
  <span class="hl kwd">BRANCHi</span><span class="hl opt">(</span>a<span class="hl opt">,</span> label<span class="hl opt">,</span> <span class="hl str">&quot;zero_reg&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">code_label</span><span class="hl opt">(</span>label<span class="hl opt">)</span>

<span class="hl slc"># ip = (zero_reg == FFFF ? a : ip)</span>
<span class="hl kwa">def</span> <span class="hl kwd">JNZi</span><span class="hl opt">(</span>a<span class="hl opt">):</span>
  label <span class="hl opt">=</span> <span class="hl kwd">next_label</span><span class="hl opt">()</span>
  <span class="hl kwd">BRANCHi</span><span class="hl opt">(</span>label<span class="hl opt">,</span> a<span class="hl opt">,</span> <span class="hl str">&quot;zero_reg&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">code_label</span><span class="hl opt">(</span>label<span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">ROL</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">):</span>
  <span class="hl kwd">MOV</span><span class="hl opt">(</span>a<span class="hl opt">,</span> a<span class="hl opt">)</span>            <span class="hl slc"># shift_reg = a &lt;&lt; 1</span>
  <span class="hl kwd">MOV</span><span class="hl opt">(</span><span class="hl str">&quot;shift_reg&quot;</span><span class="hl opt">,</span> b<span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">ROR</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">):</span>
  <span class="hl kwd">MOV</span><span class="hl opt">(</span>a<span class="hl opt">,</span> <span class="hl str">&quot;ror_reg&quot;</span><span class="hl opt">)</span>
  <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">15</span><span class="hl opt">):</span>
    <span class="hl kwd">ROL</span><span class="hl opt">(</span><span class="hl str">&quot;ror_reg&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;ror_reg&quot;</span><span class="hl opt">)</span>
  <span class="hl kwd">MOV</span><span class="hl opt">(</span><span class="hl str">&quot;ror_reg&quot;</span><span class="hl opt">,</span> b<span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;ror_reg&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">SHL</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">):</span>
  <span class="hl kwd">ROL</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">)</span>
  <span class="hl kwd">ANDi</span><span class="hl opt">(</span>b<span class="hl opt">,</span> <span class="hl num">0x0001</span><span class="hl opt">,</span> b<span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">SHR</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">):</span>
  <span class="hl kwd">ROR</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">)</span>
  <span class="hl kwd">ANDi</span><span class="hl opt">(</span>b<span class="hl opt">,</span> <span class="hl num">0x7FFF</span><span class="hl opt">,</span> b<span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">MUL3</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">):</span>
  <span class="hl kwd">ADD</span><span class="hl opt">(</span>a<span class="hl opt">,</span> a<span class="hl opt">,</span> <span class="hl str">&quot;mul3_reg&quot;</span><span class="hl opt">)</span>    <span class="hl slc"># mul3_reg = a + a</span>
  <span class="hl kwd">ADD</span><span class="hl opt">(</span><span class="hl str">&quot;mul3_reg&quot;</span><span class="hl opt">,</span> a<span class="hl opt">,</span> b<span class="hl opt">)</span>    <span class="hl slc"># b = mul3_reg + a</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;mul3_reg&quot;</span><span class="hl opt">)</span>

<span class="hl slc"># NORCPU code</span>

<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;ip&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;start&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;shift_reg&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;carry_reg&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;const_1&quot;</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;const_minus_1&quot;</span><span class="hl opt">,</span> <span class="hl num">0xFFFF</span><span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;exit_reg&quot;</span><span class="hl opt">)</span>

<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;stack_reg&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;stack&quot;</span><span class="hl opt">)</span>

<span class="hl kwd">code_label</span><span class="hl opt">(</span><span class="hl str">&quot;start&quot;</span><span class="hl opt">)</span>

<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;ch&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;t&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;xor_mask&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;cmp_flag&quot;</span><span class="hl opt">)</span>

<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;ptr&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;ptr2&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;i&quot;</span><span class="hl opt">)</span>

<span class="hl kwd">MOVi</span><span class="hl opt">(</span><span class="hl str">&quot;exchange&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;ptr&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">MOVi</span><span class="hl opt">(</span><span class="hl str">&quot;secret_password&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;ptr2&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">MOVi</span><span class="hl opt">(</span>secret_password_xor_mask<span class="hl opt">,</span> <span class="hl str">&quot;xor_mask&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">MOVi</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl str">&quot;cmp_flag&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">MOVi</span><span class="hl opt">(</span><span class="hl kwb">len</span><span class="hl opt">(</span>secret_password<span class="hl opt">),</span> <span class="hl str">&quot;i&quot;</span><span class="hl opt">)</span>

cmp_loop <span class="hl opt">=</span> <span class="hl kwd">next_label</span><span class="hl opt">()</span>
<span class="hl kwd">code_label</span><span class="hl opt">(</span>cmp_loop<span class="hl opt">)</span>               <span class="hl slc"># cmp_loop:</span>
<span class="hl kwd">PEEK</span><span class="hl opt">(</span><span class="hl str">&quot;ptr&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;ch&quot;</span><span class="hl opt">)</span>                                      <span class="hl slc"># ch = *ptr</span>
<span class="hl kwd">XOR</span><span class="hl opt">(</span><span class="hl str">&quot;ch&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;xor_mask&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;ch&quot;</span><span class="hl opt">)</span>                            <span class="hl slc"># ch ^= xor_mask</span>
<span class="hl kwd">PEEK</span><span class="hl opt">(</span><span class="hl str">&quot;ptr2&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;t&quot;</span><span class="hl opt">)</span>                                      <span class="hl slc"># t = *ptr2</span>
<span class="hl kwd">XOR</span><span class="hl opt">(</span><span class="hl str">&quot;ch&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;t&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;ch&quot;</span><span class="hl opt">)</span>                                   <span class="hl slc"># ch = ch ^ t</span>
<span class="hl kwd">OR</span><span class="hl opt">(</span><span class="hl str">&quot;cmp_flag&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;ch&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;cmp_flag&quot;</span><span class="hl opt">)</span>                       <span class="hl slc"># cmp_flag |= ch</span>
<span class="hl kwd">ADD</span><span class="hl opt">(</span><span class="hl str">&quot;ptr&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;const_1&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;ptr&quot;</span><span class="hl opt">)</span>                           <span class="hl slc"># ptr += 1</span>
<span class="hl kwd">ADD</span><span class="hl opt">(</span><span class="hl str">&quot;ptr2&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;const_1&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;ptr2&quot;</span><span class="hl opt">)</span>                         <span class="hl slc"># ptr2 += 1</span>
<span class="hl kwd">MUL3</span><span class="hl opt">(</span><span class="hl str">&quot;xor_mask&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;xor_mask&quot;</span><span class="hl opt">)</span>                           <span class="hl slc"># xor_mask *= 3</span>
<span class="hl kwd">ADDi</span><span class="hl opt">(</span><span class="hl str">&quot;xor_mask&quot;</span><span class="hl opt">,</span> secret_password_add<span class="hl opt">,</span> <span class="hl str">&quot;xor_mask&quot;</span><span class="hl opt">)</span>      <span class="hl slc"># xor_mask += add_const</span>
<span class="hl kwd">ADD</span><span class="hl opt">(</span><span class="hl str">&quot;i&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;const_minus_1&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;i&quot;</span><span class="hl opt">)</span>                         <span class="hl slc"># i -= 1</span>
<span class="hl kwd">IS_0</span><span class="hl opt">(</span><span class="hl str">&quot;i&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">JNZi</span><span class="hl opt">(</span>cmp_loop<span class="hl opt">)</span>

<span class="hl kwd">MOVi</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl str">&quot;exchange_sz&quot;</span><span class="hl opt">)</span>

ok_label <span class="hl opt">=</span> <span class="hl kwd">next_label</span><span class="hl opt">()</span>
<span class="hl kwd">IS_0</span><span class="hl opt">(</span><span class="hl str">&quot;cmp_flag&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">JZi</span><span class="hl opt">(</span>ok_label<span class="hl opt">)</span>

exit_label <span class="hl opt">=</span> <span class="hl kwd">next_label</span><span class="hl opt">()</span>
<span class="hl kwd">JMPi</span><span class="hl opt">(</span>exit_label<span class="hl opt">)</span>

<span class="hl kwd">code_label</span><span class="hl opt">(</span>ok_label<span class="hl opt">)</span>

<span class="hl kwd">MOVi</span><span class="hl opt">(</span><span class="hl str">&quot;secret_code&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;ptr&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">MOV</span><span class="hl opt">(</span><span class="hl str">&quot;secret_code_sz&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;i&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">MOVi</span><span class="hl opt">(</span>secret_code_xor_mask<span class="hl opt">,</span> <span class="hl str">&quot;xor_mask&quot;</span><span class="hl opt">)</span>

<span class="hl kwd">MOVi</span><span class="hl opt">(</span><span class="hl str">&quot;exchange&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;ptr2&quot;</span><span class="hl opt">)</span>

<span class="hl kwd">MOV</span><span class="hl opt">(</span><span class="hl str">&quot;i&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;exchange_sz&quot;</span><span class="hl opt">)</span>

loop <span class="hl opt">=</span> <span class="hl kwd">next_label</span><span class="hl opt">()</span>
<span class="hl kwd">code_label</span><span class="hl opt">(</span>loop<span class="hl opt">)</span>                   <span class="hl slc"># loop:</span>
<span class="hl kwd">PEEK</span><span class="hl opt">(</span><span class="hl str">&quot;ptr&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;ch&quot;</span><span class="hl opt">)</span>                             <span class="hl slc"># ch = *ptr</span>
<span class="hl kwd">XOR</span><span class="hl opt">(</span><span class="hl str">&quot;ch&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;xor_mask&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;ch&quot;</span><span class="hl opt">)</span>                   <span class="hl slc"># ch ^= xor_mask</span>
<span class="hl kwd">POKE</span><span class="hl opt">(</span><span class="hl str">&quot;ch&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;ptr2&quot;</span><span class="hl opt">)</span>                            <span class="hl slc"># *ptr2 = ch</span>
<span class="hl kwd">MUL3</span><span class="hl opt">(</span><span class="hl str">&quot;xor_mask&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;xor_mask&quot;</span><span class="hl opt">)</span>                  <span class="hl slc"># xor_mask *= 3</span>
<span class="hl kwd">ADDi</span><span class="hl opt">(</span><span class="hl str">&quot;xor_mask&quot;</span><span class="hl opt">,</span> secret_code_add<span class="hl opt">,</span> <span class="hl str">&quot;xor_mask&quot;</span><span class="hl opt">)</span> <span class="hl slc"># xor_mask += add_const</span>
<span class="hl kwd">ADD</span><span class="hl opt">(</span><span class="hl str">&quot;ptr&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;const_1&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;ptr&quot;</span><span class="hl opt">)</span>                  <span class="hl slc"># ptr += 1</span>
<span class="hl kwd">ADD</span><span class="hl opt">(</span><span class="hl str">&quot;ptr2&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;const_1&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;ptr2&quot;</span><span class="hl opt">)</span>                <span class="hl slc"># ptr2 += 1</span>
<span class="hl kwd">ADD</span><span class="hl opt">(</span><span class="hl str">&quot;i&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;const_minus_1&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;i&quot;</span><span class="hl opt">)</span>                <span class="hl slc"># i = i - 1</span>
<span class="hl kwd">IS_0</span><span class="hl opt">(</span><span class="hl str">&quot;i&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">JNZi</span><span class="hl opt">(</span>loop<span class="hl opt">)</span>

<span class="hl kwd">code_label</span><span class="hl opt">(</span>exit_label<span class="hl opt">)</span>             <span class="hl slc"># exit_label:</span>
<span class="hl kwd">EXITi</span><span class="hl opt">(</span><span class="hl num">0x00</span><span class="hl opt">)</span>

<span class="hl kwb">buffer</span><span class="hl opt">(</span><span class="hl num">8</span><span class="hl opt">)</span>
<span class="hl kwd">data_label</span><span class="hl opt">(</span><span class="hl str">&quot;stack&quot;</span><span class="hl opt">)</span>

<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;secret_code_sz&quot;</span><span class="hl opt">,</span> <span class="hl kwb">len</span><span class="hl opt">(</span>secret_code<span class="hl opt">))</span>
<span class="hl kwd">data_label</span><span class="hl opt">(</span><span class="hl str">&quot;secret_code&quot;</span><span class="hl opt">)</span>
<span class="hl kwb">buffer</span><span class="hl opt">(</span><span class="hl kwb">len</span><span class="hl opt">(</span>secret_code<span class="hl opt">))</span>

<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;secret_password_sz&quot;</span><span class="hl opt">)</span>
<span class="hl kwd">data_label</span><span class="hl opt">(</span><span class="hl str">&quot;secret_password&quot;</span><span class="hl opt">)</span>
<span class="hl kwb">buffer</span><span class="hl opt">(</span><span class="hl num">16</span><span class="hl opt">)</span>

<span class="hl kwd">var</span><span class="hl opt">(</span><span class="hl str">&quot;exchange_sz&quot;</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">)</span>
<span class="hl kwd">data_label</span><span class="hl opt">(</span><span class="hl str">&quot;exchange&quot;</span><span class="hl opt">)</span>
<span class="hl kwb">buffer</span><span class="hl opt">(</span><span class="hl num">32</span><span class="hl opt">)</span>

<span class="hl slc"># Compiler</span>

text <span class="hl opt">=</span> code_segment
text<span class="hl opt">.</span><span class="hl kwd">extend</span><span class="hl opt">(</span>data_segment<span class="hl opt">)</span>

<span class="hl kwa">if</span> verbose<span class="hl opt">:</span>
  <span class="hl kwa">print</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">.</span><span class="hl kwd">join</span><span class="hl opt">(</span>text<span class="hl opt">)</span>

<span class="hl slc"># Phase 1. Calculate names.</span>

addr <span class="hl opt">=</span> <span class="hl num">0</span>
names <span class="hl opt">= {}</span>
<span class="hl kwa">for</span> line <span class="hl kwa">in</span> text<span class="hl opt">:</span>
  <span class="hl kwa">if</span> line<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] ==</span> <span class="hl str">';'</span><span class="hl opt">:</span> <span class="hl kwa">continue</span>
  <span class="hl kwa">if</span> line<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] !=</span> <span class="hl str">' '</span><span class="hl opt">:</span>
    name <span class="hl opt">=</span> line<span class="hl opt">.</span><span class="hl kwd">partition</span><span class="hl opt">(</span><span class="hl str">':'</span><span class="hl opt">)[</span><span class="hl num">0</span><span class="hl opt">]</span>
    names<span class="hl opt">[</span>name<span class="hl opt">] =</span> addr
  <span class="hl kwa">else</span><span class="hl opt">:</span>
    addr <span class="hl opt">=</span> addr <span class="hl opt">+</span> <span class="hl num">1</span>

<span class="hl kwa">if</span> verbose<span class="hl opt">:</span>
  <span class="hl kwa">print</span> names

raw_text <span class="hl opt">=</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">.</span><span class="hl kwd">join</span><span class="hl opt">(</span>text<span class="hl opt">)</span>

<span class="hl slc"># Resolve names.</span>

<span class="hl kwa">for</span> name <span class="hl kwa">in</span> names<span class="hl opt">:</span>
  <span class="hl kwa">if</span> verbose<span class="hl opt">:</span>
    <span class="hl kwa">print</span> name<span class="hl opt">,</span> names<span class="hl opt">[</span>name<span class="hl opt">],</span> <span class="hl kwb">type</span><span class="hl opt">(</span>names<span class="hl opt">[</span>name<span class="hl opt">])</span>
  name_re <span class="hl opt">=</span> re<span class="hl opt">.</span><span class="hl kwb">compile</span><span class="hl opt">(</span>r<span class="hl str">'dw '</span> <span class="hl opt">+</span> name <span class="hl opt">+</span> <span class="hl str">'$'</span><span class="hl opt">,</span> re<span class="hl opt">.</span>M<span class="hl opt">)</span>
  value <span class="hl opt">=</span> <span class="hl str">&quot;%d&quot;</span> <span class="hl opt">%</span> names<span class="hl opt">[</span>name<span class="hl opt">]</span>
  raw_text <span class="hl opt">=</span> name_re<span class="hl opt">.</span><span class="hl kwd">sub</span><span class="hl opt">(</span><span class="hl str">'dw '</span> <span class="hl opt">+</span> value<span class="hl opt">,</span> raw_text<span class="hl opt">)</span>

text <span class="hl opt">=</span> raw_text<span class="hl opt">.</span><span class="hl kwd">split</span><span class="hl opt">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">if</span> verbose<span class="hl opt">:</span>
  <span class="hl kwa">print</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">.</span><span class="hl kwd">join</span><span class="hl opt">(</span>text<span class="hl opt">)</span>

<span class="hl slc"># Phase 2. Compilation.</span>

addr <span class="hl opt">=</span> <span class="hl num">0</span>
comment <span class="hl opt">=</span> <span class="hl str">&quot;&quot;</span>
mem <span class="hl opt">= []</span>
<span class="hl kwa">for</span> line <span class="hl kwa">in</span> text<span class="hl opt">:</span>
  <span class="hl kwa">if</span> line<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] ==</span> <span class="hl str">';'</span> <span class="hl kwa">or</span> line<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] !=</span> <span class="hl str">' '</span><span class="hl opt">:</span>
    comment <span class="hl opt">=</span> comment <span class="hl opt">+</span> line <span class="hl opt">+</span> <span class="hl str">' '</span>
  <span class="hl kwa">else</span><span class="hl opt">:</span>
    value <span class="hl opt">=</span> <span class="hl kwb">int</span><span class="hl opt">(</span>line<span class="hl opt">.</span><span class="hl kwd">strip</span><span class="hl opt">().</span><span class="hl kwd">partition</span><span class="hl opt">(</span><span class="hl str">&quot; &quot;</span><span class="hl opt">)[</span><span class="hl num">2</span><span class="hl opt">])</span>
    <span class="hl kwa">if</span> verbose<span class="hl opt">:</span>
      <span class="hl kwa">print</span> <span class="hl str">&quot;%04X: %04X ; %s&quot;</span> <span class="hl opt">% (</span>addr<span class="hl opt">,</span> value<span class="hl opt">,</span> comment<span class="hl opt">)</span>
    mem<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span>value<span class="hl opt">)</span>
    addr <span class="hl opt">=</span> addr <span class="hl opt">+</span> <span class="hl num">1</span>
    comment <span class="hl opt">=</span> <span class="hl str">&quot;&quot;</span>

<span class="hl slc"># Interpretation</span>

ip <span class="hl opt">=</span> names<span class="hl opt">[</span><span class="hl str">&quot;ip&quot;</span><span class="hl opt">]</span>
exit_reg <span class="hl opt">=</span> names<span class="hl opt">[</span><span class="hl str">&quot;exit_reg&quot;</span><span class="hl opt">]</span>
shift_reg <span class="hl opt">=</span> names<span class="hl opt">[</span><span class="hl str">&quot;shift_reg&quot;</span><span class="hl opt">]</span>
carry_reg <span class="hl opt">=</span> names<span class="hl opt">[</span><span class="hl str">&quot;carry_reg&quot;</span><span class="hl opt">]</span>

<span class="hl kwa">def</span> <span class="hl kwd">nor</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">):</span>
  r <span class="hl opt">=</span> a | b
  r <span class="hl opt">=</span> r ^ <span class="hl num">0xFFFF</span>
  <span class="hl kwa">return</span> r <span class="hl opt">&amp;</span> <span class="hl num">0xFFFF</span>

<span class="hl kwa">def</span> <span class="hl kwd">norcpu</span><span class="hl opt">():</span>
  <span class="hl kwa">while</span> <span class="hl num">1</span><span class="hl opt">:</span>
    i <span class="hl opt">=</span> mem<span class="hl opt">[</span>ip<span class="hl opt">];</span>
    a <span class="hl opt">=</span> mem<span class="hl opt">[</span>i <span class="hl opt">+</span> <span class="hl num">0</span><span class="hl opt">]</span>
    b <span class="hl opt">=</span> mem<span class="hl opt">[</span>i <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">]</span>
    r <span class="hl opt">=</span> mem<span class="hl opt">[</span>i <span class="hl opt">+</span> <span class="hl num">2</span><span class="hl opt">]</span>
    mem<span class="hl opt">[</span>ip<span class="hl opt">] =</span> i <span class="hl opt">+</span> <span class="hl num">3</span>
    f <span class="hl opt">=</span> <span class="hl kwd">nor</span><span class="hl opt">(</span>mem<span class="hl opt">[</span>a<span class="hl opt">],</span> mem<span class="hl opt">[</span>b<span class="hl opt">])</span>
    mem<span class="hl opt">[</span>r<span class="hl opt">] =</span> f
    mem<span class="hl opt">[</span>shift_reg<span class="hl opt">] = ((</span>f <span class="hl opt">&gt;&gt;</span> <span class="hl num">15</span><span class="hl opt">) &amp;</span> <span class="hl num">1</span><span class="hl opt">)</span> | <span class="hl opt">((</span>f <span class="hl opt">&amp;</span> <span class="hl num">0x7FFF</span><span class="hl opt">) &lt;&lt;</span> <span class="hl num">1</span><span class="hl opt">)</span>

    <span class="hl kwa">if</span> verbose_cpu<span class="hl opt">:</span>
      <span class="hl kwa">print</span> <span class="hl str">&quot;%04X: %04X [%04X] %04X [%04X] -&gt; %04X [%04X]&quot;</span> <span class="hl opt">%</span> \
            <span class="hl opt">(</span>i<span class="hl opt">,</span> a<span class="hl opt">,</span> mem<span class="hl opt">[</span>a<span class="hl opt">],</span> b<span class="hl opt">,</span> mem<span class="hl opt">[</span>b<span class="hl opt">],</span> r<span class="hl opt">,</span> mem<span class="hl opt">[</span>r<span class="hl opt">])</span>
    <span class="hl kwa">if</span> r <span class="hl opt">==</span> exit_reg<span class="hl opt">:</span>
      <span class="hl kwa">break</span>

<span class="hl kwa">print</span> <span class="hl str">&quot;Starting from [%04X]&quot;</span> <span class="hl opt">%</span> mem<span class="hl opt">[</span>ip<span class="hl opt">]</span>

<span class="hl kwd">encode_string</span><span class="hl opt">(</span>secret_code<span class="hl opt">,</span> <span class="hl str">&quot;secret_code&quot;</span><span class="hl opt">,</span> secret_code_xor_mask<span class="hl opt">,</span> secret_code_add<span class="hl opt">);</span>
<span class="hl kwd">encode_string</span><span class="hl opt">(</span>secret_password<span class="hl opt">,</span> <span class="hl str">&quot;secret_password&quot;</span><span class="hl opt">,</span> secret_password_xor_mask<span class="hl opt">,</span> secret_password_add<span class="hl opt">);</span>

mem_js <span class="hl opt">=</span> <span class="hl kwd">dump_js</span><span class="hl opt">(</span>mem<span class="hl opt">)</span>
<span class="hl kwd">save_mem</span><span class="hl opt">(</span><span class="hl str">&quot;norcpu-1-before.bin&quot;</span><span class="hl opt">)</span>
mem_sz <span class="hl opt">=</span> <span class="hl kwb">len</span><span class="hl opt">(</span>mem<span class="hl opt">)</span>

<span class="hl kwa">if</span> <span class="hl kwb">len</span><span class="hl opt">(</span>mem<span class="hl opt">) &gt;=</span> <span class="hl num">0x10000</span><span class="hl opt">:</span>
  <span class="hl kwa">print</span> <span class="hl str">&quot;Too much code (%08X, %04X)&quot;</span> <span class="hl opt">% (</span><span class="hl kwb">len</span><span class="hl opt">(</span>mem<span class="hl opt">),</span> <span class="hl kwb">len</span><span class="hl opt">(</span>mem<span class="hl opt">) -</span> <span class="hl num">0x10000</span><span class="hl opt">)</span>
  sys<span class="hl opt">.</span><span class="hl kwd">exit</span><span class="hl opt">()</span>

<span class="hl slc"># Inject plain password in the last moment (for testing).</span>
<span class="hl kwd">put_string</span><span class="hl opt">(</span>guess<span class="hl opt">,</span> <span class="hl str">&quot;exchange&quot;</span><span class="hl opt">)</span>

<span class="hl kwd">save_mem</span><span class="hl opt">(</span><span class="hl str">&quot;norcpu-2-before-with-password.bin&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">if</span> verbose<span class="hl opt">:</span>
  <span class="hl kwa">print</span> <span class="hl str">&quot;Original memory:&quot;</span>
  <span class="hl kwa">print</span> <span class="hl kwd">dump</span><span class="hl opt">(</span>mem<span class="hl opt">)</span>

start_time <span class="hl opt">=</span> time<span class="hl opt">.</span><span class="hl kwd">time</span><span class="hl opt">()</span>

<span class="hl kwd">norcpu</span><span class="hl opt">()</span>

end_time <span class="hl opt">=</span> time<span class="hl opt">.</span><span class="hl kwd">time</span><span class="hl opt">()</span>

<span class="hl kwd">save_mem</span><span class="hl opt">(</span><span class="hl str">&quot;norcpu-3-after.bin&quot;</span><span class="hl opt">,</span> mem_sz<span class="hl opt">)</span>

<span class="hl kwa">if</span> verbose<span class="hl opt">:</span>
  <span class="hl kwa">print</span> <span class="hl str">&quot;Memory after:&quot;</span>
  <span class="hl kwd">dump</span><span class="hl opt">(</span>mem<span class="hl opt">)</span>

<span class="hl kwa">print</span>
<span class="hl kwa">print</span> <span class="hl str">&quot;Size: %X&quot;</span> <span class="hl opt">%</span> <span class="hl kwb">len</span><span class="hl opt">(</span>mem<span class="hl opt">)</span>
<span class="hl kwa">print</span> <span class="hl str">&quot;Time: %d&quot;</span> <span class="hl opt">% (</span>end_time <span class="hl opt">-</span> start_time<span class="hl opt">)</span>
<span class="hl kwa">print</span> <span class="hl str">&quot;Exit: %04X&quot;</span> <span class="hl opt">%</span> mem<span class="hl opt">[</span>exit_reg<span class="hl opt">]</span>

exchange <span class="hl opt">=</span> names<span class="hl opt">[</span><span class="hl str">&quot;exchange&quot;</span><span class="hl opt">]</span>
result_value <span class="hl opt">=</span> <span class="hl str">&quot;&quot;</span>
<span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> mem<span class="hl opt">[</span>names<span class="hl opt">[</span><span class="hl str">&quot;exchange_sz&quot;</span><span class="hl opt">]]):</span>
  result_value <span class="hl opt">=</span> result_value <span class="hl opt">+</span> <span class="hl kwb">chr</span><span class="hl opt">(</span>mem<span class="hl opt">[</span>exchange <span class="hl opt">+</span> i<span class="hl opt">] &amp;</span> <span class="hl num">0xff</span><span class="hl opt">)</span>

<span class="hl kwa">print</span> <span class="hl str">&quot;Result: [%s]&quot;</span> <span class="hl opt">%</span> result_value

<span class="hl kwa">if</span> <span class="hl kwb">len</span><span class="hl opt">(</span>result_value<span class="hl opt">) ==</span> <span class="hl num">0</span><span class="hl opt">:</span>
  <span class="hl kwa">print</span> <span class="hl str">&quot;ERROR: Wrong password&quot;</span>

js <span class="hl opt">=</span> string<span class="hl opt">.</span><span class="hl kwd">Template</span><span class="hl opt">(</span><span class="hl kwb">open</span><span class="hl opt">(</span><span class="hl str">'template.html'</span><span class="hl opt">,</span> <span class="hl str">'r'</span><span class="hl opt">).</span><span class="hl kwd">read</span><span class="hl opt">())</span>

js <span class="hl opt">=</span> js<span class="hl opt">.</span><span class="hl kwd">substitute</span><span class="hl opt">(</span> \
  ip <span class="hl opt">=</span> names<span class="hl opt">[</span><span class="hl str">&quot;ip&quot;</span><span class="hl opt">],</span>
  exit_reg <span class="hl opt">=</span> names<span class="hl opt">[</span><span class="hl str">&quot;exit_reg&quot;</span><span class="hl opt">],</span>
  shift_reg <span class="hl opt">=</span> names<span class="hl opt">[</span><span class="hl str">&quot;shift_reg&quot;</span><span class="hl opt">],</span>
  exchange <span class="hl opt">=</span> names<span class="hl opt">[</span><span class="hl str">&quot;exchange&quot;</span><span class="hl opt">],</span>
  exchange_sz <span class="hl opt">=</span> names<span class="hl opt">[</span><span class="hl str">&quot;exchange_sz&quot;</span><span class="hl opt">],</span>
  mem_js <span class="hl opt">=</span> mem_js
<span class="hl opt">)</span>

f <span class="hl opt">=</span> <span class="hl kwb">open</span><span class="hl opt">(</span><span class="hl str">&quot;norcpu2.html&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;w&quot;</span><span class="hl opt">)</span>
f<span class="hl opt">.</span><span class="hl kwd">write</span><span class="hl opt">(</span>js<span class="hl opt">)</span>
f<span class="hl opt">.</span><span class="hl kwd">close</span><span class="hl opt">()</span>
</pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Challenge 24 Pre Electronic Сontest]]></title>
    <link href="http://demin.ws/blog/russian/2011/02/14/challenge-24-pre-electronic-contest/"/>
    <updated>2011-02-14T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/02/14/challenge-24-pre-electronic-contest/</id>
    <content type="html"><![CDATA[<p>В эту субботу наша команда в составе <a href="http://www.topcoder.com/tc?module=MemberProfile&amp;cr=19825431">Leonid</a>, <a href="http://www.topcoder.com/tc?module=MemberProfile&amp;cr=22654571">Lomir</a> и меня &ldquo;разогревались&rdquo; на тестовом раунде <a href="http://ch24.org/">Challenge 24 Contest</a>. <a href="http://ch24.org/preec/html/">Задачи</a> уже доступны. В этом раунде не было никакого рейтинга, а просто можно было ознакомиться с правилами и системой. Хотя лично для меня задачи были вполне себе серьезные. Например, <a href="http://ch24.org/preec/html/P.html">P</a>, конечно, совсем простая, но остальные для меня вполне реальны.</p>

<p>Мне нравится этот контест тем, что он не заточен исключительно на алгоритмические задачи. Например, в <a href="http://ch24.org/preec/html/Q.html">Q</a> надо было сделать хорошую эвристику, в <a href="http://ch24.org/preec/html/R.html">R</a> - типа взломать код, ну а <a href="http://ch24.org/preec/html/S.html">S</a> - это алгоритм.</p>

<p>Я по-пенсионерски попросился решать <a href="http://ch24.org/preec/html/R.html">R</a>. В итоге написал какой-то невообразимый велосипед на С++, которым таки получилось сделать играемый wav, прослушать сообщения и сдать задачу, и только потом, немного успокоившись, на питоне получилась короткая программа, делающая чистые 16-битные wav&rsquo;ы.</p>

<pre class="hl">
<span class="hl kwa">import</span> wave<span class="hl opt">,</span> struct

<span class="hl kwa">def</span> <span class="hl kwd">make_soundfile</span><span class="hl opt">(</span>sample<span class="hl opt">,</span> freq<span class="hl opt">,</span> fname<span class="hl opt">):</span>
    frate <span class="hl opt">=</span> <span class="hl num">7000</span>

    data_size <span class="hl opt">=</span> <span class="hl kwb">len</span><span class="hl opt">(</span>sample<span class="hl opt">)</span>

    sine_list <span class="hl opt">= []</span>
    <span class="hl kwa">for</span> x <span class="hl kwa">in</span> sample<span class="hl opt">:</span>
        sine_list<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span><span class="hl kwb">float</span><span class="hl opt">(</span>x<span class="hl opt">) /</span> <span class="hl num">2</span> <span class="hl opt">*</span> <span class="hl num">32768</span><span class="hl opt">)</span>

    wav_file <span class="hl opt">=</span> wave<span class="hl opt">.</span><span class="hl kwb">open</span><span class="hl opt">(</span>fname <span class="hl opt">+</span> <span class="hl str">&quot;.wav&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;w&quot;</span><span class="hl opt">)</span>

    nchannels <span class="hl opt">=</span> <span class="hl num">1</span>
    sampwidth <span class="hl opt">=</span> <span class="hl num">2</span>
    framerate <span class="hl opt">=</span> <span class="hl kwb">int</span><span class="hl opt">(</span>frate<span class="hl opt">)</span>
    nframes <span class="hl opt">=</span> data_size
    comptype <span class="hl opt">=</span> <span class="hl str">&quot;NONE&quot;</span>
    compname <span class="hl opt">=</span> <span class="hl str">&quot;not compressed&quot;</span>

    wav_file<span class="hl opt">.</span><span class="hl kwd">setparams</span><span class="hl opt">((</span>nchannels<span class="hl opt">,</span> sampwidth<span class="hl opt">,</span> framerate<span class="hl opt">,</span> nframes<span class="hl opt">,</span> comptype<span class="hl opt">,</span> compname<span class="hl opt">))</span>
    <span class="hl kwa">for</span> s <span class="hl kwa">in</span> sine_list<span class="hl opt">:</span>
        wav_file<span class="hl opt">.</span><span class="hl kwd">writeframes</span><span class="hl opt">(</span>struct<span class="hl opt">.</span><span class="hl kwd">pack</span><span class="hl opt">(</span><span class="hl str">'h'</span><span class="hl opt">,</span> <span class="hl kwb">int</span><span class="hl opt">(</span>s<span class="hl opt">)))</span>
    wav_file<span class="hl opt">.</span><span class="hl kwd">close</span><span class="hl opt">()</span>

 <span class="hl kwa">for</span> n <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">11</span><span class="hl opt">):</span>
    fname <span class="hl opt">=</span> <span class="hl str">&quot;test-%02d.tst&quot;</span> <span class="hl opt">%</span> n
    <span class="hl kwa">print</span> fname
    sample <span class="hl opt">=</span> <span class="hl kwb">open</span><span class="hl opt">(</span>fname<span class="hl opt">).</span><span class="hl kwd">readlines</span><span class="hl opt">()</span>
    sample <span class="hl opt">=</span> sample<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">:]</span>
    freq <span class="hl opt">=</span> <span class="hl kwb">len</span><span class="hl opt">(</span>sample<span class="hl opt">)</span>
    <span class="hl kwd">make_soundfile</span><span class="hl opt">(</span>sample<span class="hl opt">,</span> freq<span class="hl opt">,</span> fname<span class="hl opt">)</span>

</pre>

<p>Конечно, авторское решение было еще проще.</p>

<pre><code>awk 'NR &gt; 1 {printf &quot;%c&quot;,int(128*($1+1))}' *.in &gt;/dev/dsp
</code></pre>

<p>Погдядим, что будет в реальном раунде в эту субботу.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows борется с написанием вирусов]]></title>
    <link href="http://demin.ws/blog/russian/2011/02/14/windows-fights-against-viruses/"/>
    <updated>2011-02-14T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/02/14/windows-fights-against-viruses/</id>
    <content type="html"><![CDATA[<p>Мы тут столкнулись с интересной проблемой - какая-то катастрофически медленная скорость сборки системы под Windows на одной из наших сборочных машин.</p>

<p>Но когда я узнал причину - вот это действительно вызвало у меня минуту молчания.</p>

<p>Причина - это антивирус, а точнее его &ldquo;активная защита&rdquo;, которая проверяла каждый божий файл (а их там тысячи), генерируемый при сборке. Просто забыли ее выключить при установке системы.</p>

<p>Получается, в принципе, пишу я вирус, компилирую, а тут бабах - и при сборке мне говорят, что результат вашей компиляции был убит, убит еще до того, как успел в первый раз родиться, так как бинарь содержит код, похожий на вирус (я же вирус пишу!).</p>

<p>Ведь антивирус не знает, является ли этот новый файл просто результатом компиляции из исходника, или файл скачивается из интернета.</p>

<p>В общем, отключили антивирус &ndash; сборка ускорилась в разы.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Примеры хорошого кода]]></title>
    <link href="http://demin.ws/blog/russian/2011/02/08/examples-of-good-code/"/>
    <updated>2011-02-08T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/02/08/examples-of-good-code/</id>
    <content type="html"><![CDATA[<p>Я люблю читать хороший код. Код, который вызывает минимальное количество внутренних противоречий или не вызывает их вообще. Можно до бесконечности спорить, что есть хороший код, обсуждать концепции, стили, подходы. Но есть случаи, когда не надо спорить. Ты смотришь и наслаждаешься. А порой и дергаешь там-сям кусочки для себя.</p>

<p>Вот мой список:</p>

<ul>
<li><a href="http://src.chromium.org/viewvc/chrome/">Chromium</a> - пример сложного и успешного проекта на С++, в котором процветают unit-тестирование и жесткий coding-style.</li>
<li><a href="http://src.chromium.org/viewvc/native_client/">Google Native Client</a> - гремучая смесь С, С++ и систем сборки</li>
<li><a href="http://pdos.csail.mit.edu/6.828/2010/xv6-book/index.html">xv6</a> - классический UNIX V6 (ядро и несколько утилит), переписанный на ANSI C и работающий на x86, для обучение студентов MIT. Это просто шедевр.</li>
<li><a href="http://code.google.com/p/go/source/browse">Go</a> - язык программирования, реализованный на С. Много, много кода на С.</li>
</ul>

<p>Как я понял, подобные проекты должны быть большими по размеру, ибо только на огромном количестве исходников проявляется умение постоянно кодировать красиво и единообразно.</p>

<p>Увы, такие примеры попадаются нечастно.</p>

<p>Есть бесчисленное множество почти хороших исходников, но в этот список я поместил свои случаи без &ldquo;почти&rdquo;.</p>

<p>У вас есть подобные примеры?</p>

<p>Будем добавлять в список.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NORCPU hackme challenge или взлом программы для однокомандного процессора]]></title>
    <link href="http://demin.ws/blog/russian/2011/02/08/norcpu-hack-me-challenge/"/>
    <updated>2011-02-08T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/02/08/norcpu-hack-me-challenge/</id>
    <content type="html"><![CDATA[<p>Разного рода &ldquo;ненормальное&rdquo; программирование весьма популярно среди любителей поломать голову над разными задачками. Порой программу для очередной &ldquo;ненормальной&rdquo; среды программирования уже нереально написать вручную, а надо писать генератор, создающий код.</p>

<p>В задаче, что предлагаю я, программы все еще можно писать вручную на некотором высокоуровневом макроассемблере.</p>

<p>Итак, имеется модель некоторого виртуального процессора, выполняющего только одну логическую операцию - <a href="http://ru.wikipedia.org/wiki/%D0%A1%D1%82%D1%80%D0%B5%D0%BB%D0%BA%D0%B0_%D0%9F%D0%B8%D1%80%D1%81%D0%B0">Стрелку Пирса</a>.</p>

<p>На этом процессоре написана программа, на вход которой подается некоторый пароль. Если пароль неверный, то в ответ выдается строка &ldquo;Wrong password!&rdquo;. Если верный, то выдается определенное волшебное сообщение.</p>

<p>Задача: любым образом выяснить это волшебное сообщение. Как вариант, можно, например, угадать пароль, и программа сама выдаст секрет.</p>

<p>Логика написана таким образом, что разобравшись в алгоритме, можно без труда расшифровать волшебное сообщение.</p>

<p>В прошлом году <a href="http://demin.ws/blog/russian/2010/03/26/one-command-cpu/">я описал использованный подход во всех деталях</a>.</p>

<p>Оригинальный подход, на котором основан мой эксперимент, был не совсем &ldquo;чистым&rdquo;, так как команда сложения был вынесена за логику процессора. В моей версии все до единой команды реализованы на самом процессоре. Для этого потребовалось немного изменить интерпретатор, добавив в него сдвиговый регистр.</p>

<p>Для желающих попробовать взломать мой эксперимент, я сделал страничку, на которой на JavaScript&rsquo;e реализован выше описанный виртуальный процессор с одной командой и программа для него, проверяющая пароль.</p>

<p>Итак, <a href="http://demin.ws/projects/norcpu/challenge/norcpu.html">прошу на взлом!</a></p>

<p>Удачи.</p>

<p>P.S. Для первого взломавшего - небольшой приз! Информация по ссылке.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Стереть и переписать все нафиг!]]></title>
    <link href="http://demin.ws/blog/russian/2011/02/04/rewrite-everything/"/>
    <updated>2011-02-04T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/02/04/rewrite-everything/</id>
    <content type="html"><![CDATA[<p>Какая традиционная первая реакция на явно старомодный или просто дрянной код или проектное решение? «Стереть к чертовой матери и написать заново на [подставить любимый язык]».</p>

<p>Это здоровая реакция нормального разработчика, бесконечно стремящегося к совершенству кода.
Но, увы, в больших системах, которые разрабатывались годами или даже десятилетиями нельзя просто так взять и все переписать. Бизнес не даст этого сделать.</p>

<p>Вот и возникает волшебное слово «legacy» код.</p>

<p>Лично на своем опыте я убедился, что работы со «старым» - это умение, и умение очень полезное. Парадокс, но порой выгоднее взять старый код, работающий годами, и просто обернуть его красивый интерфейс текущего «правильного» языка, чем тратить титанические усилия на полностью новую разработку.</p>

<p>Ну и что, что Фортран с common-переменными повсюду или С, ну что, что там код 80-х годов с функциями на десятки экранов без каких-либо зачатков unit-тестирования, и потрогать этот код просто страшно. Но трогать его не надо, а надо понять интерфейс и изолировать его.</p>

<p>Лично у меня подобное «прозрение» случилось только недавно, примерно аналогично как с unit-тестированием. Слово «legacy» код не должно синонимом «стереть и переписать все нафиг!», а должно быть знаком того, что надо сделать взвешенную оценку поддержки старого «тлеющего» кода против новой разработки. Любой код начинает тлеть сразу поле релиза, но когда он вам уже достался тлеющим – это другая история.</p>

<p>А корень парадокса в том, что пользователи не хотят вашу новую версию, переписанную с нуля на модном языке Х, они хотят проверенную версию, что далеко не всегда означает одно и то же.</p>

<p>Как пример, банки – это одни из консервативнейших потребителей программных продуктов. И их можно понять – фаза тестирования перед внедрением на боевую обычно длится месяцами и стоит приличных денег, а уж после того, как системы запущена, никто не будет ничего менять без веской причины. А слова «мы тут все переписали заново, пожалуйста, поставьте…» обычно игнорируются на слове «все».</p>

<p>В общем, если хотите рассматривать создание программных продуктов не просто как написание «идеального кода», а как бизнес, работа со старым кодом – это один из навыков, который придется освоить.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fossil - контроль версий, баг-трекер и wiki в одном флаконе]]></title>
    <link href="http://demin.ws/blog/russian/2011/01/26/fossil-version-control/"/>
    <updated>2011-01-26T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/01/26/fossil-version-control/</id>
    <content type="html"><![CDATA[<p>Есть множество бесплатных хостингов для проектов с открытым кодом. Также есть места, где можно держать и закрытые проекты, но такие хостинги часто платные. Да и в целом, если уж есть какой-то закрытый проект, и есть причины его закрытости, то выкладывать его на хостинг третьих лиц было как-то нелогично.</p>

<p>Лично я люблю git для UNIX и mercurial для Windows. Каждая система имеет пачку удобных хостингов, как говорится, выбирай на вкус.</p>

<p>И вот у меня образовался закрытый проект, который мало того, что активно развивается, так еще и накапливает баг-репорты, приправленные файлами отчетов и картинками, и требует ведения документации.</p>

<p>Начал я его вести в mercurial, но когда начал утопать в письмах и документации, то осознал необходимость баг-трекера и wiki. Настраивать все это локально (на публичные готовые хостинги выложить не могу) как-то лень. И тут я вспомнил по <a href="http://www.fossil-scm.org/">fossil</a>.</p>

<p>Fossil - это распределенный контроль версий, баг-трекер и wiki в одном флаконе. Более того, его автор &ndash; ни кто иной, как автор SQLite, борец за минимализм, простоту и надежность. Как и в случае с небезызвестной базой данных, которую кто уже только не использует, все, что вам нужно - это один единственный файл &ndash; <code>fossil[.exe]</code>.</p>

<p>Для командной строки - это просто SCM, а будучи запущенной с параметром &ldquo;ui&rdquo;, превращается в локальный веб-сервер, в котором есть &ldquo;морда&rdquo; для просмотра репозитория, баг-трекера и wiki. Более того, все данные живут также в одном единственном файле-репозитории, который по сути является SQLite-базой. Для переноса его в другое место, другую операционную систему или резервного копирования, нужно просто скопировать один файл.</p>

<p>fossil <a href="http://www.fossil-scm.org/index.html/doc/trunk/www/inout.wiki">умеет импортировать и экспортировать в git</a>, поэтому я сначала <a href="http://hivelogic.com/articles/converting-from-mercurial-to-git">перегнал существующий репозиторий из mercurial в git</a>, а потом импортировал из git в fossil.</p>

<p>В целом, fossil хорош. Вылизанный и минималистичный. Говорят, что из-за использования SQLite в качестве хранилища, с одной стороны получаешь надежность и транзакционность любых изменений (понятно, что хоть остальные системы работают просто с файлами, у них с целостностью тоже все в порядке), но с другой стороны, по скорости может радикально проигрывать git или mercurial на больших проектах. Но для небольших &ldquo;домашних&rdquo;, но секретных проектов - сложно представить удобнее утилиты.</p>

<p>Даже в рамках компании, можно личный проект в два счета превратить в общий, просто запустив fossil в режиме сервера и дав коллегам его адрес. <a href="http://www.fossil-scm.org/">Домашняя страничка fossil</a> по сути является сервером, работающим на fossil (там можно увидеть живой <a href="http://www.fossil-scm.org/index.html/rptview?rn=1">трекер</a> и <a href="http://www.fossil-scm.org/index.html/wiki?name=Fossil">wiki</a>). Не самое плохое доказательство уверенности автора fossil&rsquo;а в своем детище.</p>

<p>Да, лицензия у fossil, конечно, BSD.</p>

<p>Итак, для дома для семьи &ndash; очень удобно.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Баг в компиляторе LCC]]></title>
    <link href="http://demin.ws/blog/russian/2011/01/25/bug-in-lcc-compiler/"/>
    <updated>2011-01-25T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/01/25/bug-in-lcc-compiler/</id>
    <content type="html"><![CDATA[<p>Благополучно нарвался на баг в компиляторе <a href="http://demin.ws/blog/russian/2011/01/18/lcc-compiler-for-windows/">LCC</a>.</p>

<pre><code>c:\lcc\bin\lcc -v

Logiciels/Informatique lcc-win32 version 3.8. Compilation date: Dec  4 2010 13:14:58
</code></pre>

<p>Файл: <code>t.c</code>:</p>

<pre class="hl">
<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
    <span class="hl kwb">char</span><span class="hl opt">*</span> p<span class="hl opt">;</span>
    <span class="hl kwb">char</span><span class="hl opt">*</span> s<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] = {</span> p <span class="hl opt">};</span>
<span class="hl opt">}</span>
</pre>

<pre><code>c:\lcc\bin\lcc t.c
Error t.c 3 Compiler error (trap). Stopping compilation
</code></pre>

<p>Обычно ж как бывает, начинает проявляется &ldquo;баг компилятора&rdquo; &ndash; программа ведется себя странно, исключения почему-то не ловятся, наблюдаются неожиданные падения программы и т.д. В подавляющим случаев, увы, все кончается просто ошибками работы с памятью. Ничего сверхестественного.</p>

<p>Баги же типа этого, проявляющиеся на тривиальном примере - это всегда событие.</p>

<p>Из недавнего:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2009/09/12/codegear-borland-compiler-bug-when-casting-pointers/">Ошибка в компиляторе Godegear (Borland) C++ при приведении типов указателей</a></li>
<li><a href="http://demin.ws/blog/russian/2009/09/21/doubled-semicolon-in-variables-declaration/">Двойная точка с запятой в разделе объявления переменных</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Вопросы на интервью, на которые нельзя не знать ответы]]></title>
    <link href="http://demin.ws/blog/russian/2011/01/20/must-know-question-for-interviews/"/>
    <updated>2011-01-20T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/01/20/must-know-question-for-interviews/</id>
    <content type="html"><![CDATA[<p>Так сложилось, что за последние полгода, я активно участвовал в процессе интервьирования программистов в компании Bloomberg.</p>

<p>Также на многократном личном опыте знаю, что когда тебе оказывают – это всегда обидно и досадно, какой бы причина там ни была. Но это случается почти со всеми.</p>

<p>К сожалению, отказывать приходится порой из-за радикально тривиальных вещей, незнание которых просто несовместимо с профессией.</p>

<p>У меня накопилось несколько вопросов, незнание ответа на которые является почти стопроцентной причиной, когда я в своем отчете писал отказ.</p>

<p>Интервьюирование было на позицию &ldquo;Senior C/C++ developer”.</p>

<p>Ответы приведу тут же, так как они очевидны.</p>

<p><strong>1. Сколько примерно будет 2^32? (обычно задается по телефону)</strong></p>

<p>Ответ &ldquo;Около четырех миллиардов&rdquo; является исчерпывающим.</p>

<p>Я вообще и не могу понять, как человек, в названии профессии которого есть слово &ldquo;программист&rdquo; может этого не знать. Увы, это далеко не единичные случаи.</p>

<p><strong>2. Как сравнить две переменные типа double или float на равенство? (обычно задается по телефону)</strong></p>

<p>Ответ &ldquo;Вычесть одно из другого и сравнить результат на больше/меньше с каким-то малым числом, например 10E-6&rdquo; является исчерпывающим. Конечно, много зависит от используемой библиотеки работы с числами с плавающей точкой, но смысл, в целом, одинаков.</p>

<p>Увы, количество неотвечающих тоже весьма значительно.</p>

<p><strong>3. (Хит!) Что распечатает данная программа? (не забываем, что собеседование на позицию разработчика на C/C++). В принципе, его тоже можно задать по телефону.</strong></p>

<pre class="hl">
<span class="hl kwb">char</span><span class="hl opt">*</span> <span class="hl kwd">f</span><span class="hl opt">() {</span>
  <span class="hl kwb">char</span> buf<span class="hl opt">[</span><span class="hl num">100</span><span class="hl opt">];</span>
  <span class="hl kwd">strcpy</span><span class="hl opt">(</span>buf<span class="hl opt">,</span> <span class="hl str">&quot;TEST”);</span>
<span class="hl str">  return buf;</span>
<span class="hl str">}</span>
<span class="hl str"></span>
<span class="hl str">int main() {</span>
<span class="hl str">  char* s = f();</span>
<span class="hl str">  /* (1) */</span>
<span class="hl str">  printf(&quot;</span><span class="hl opt">%</span>s<span class="hl esc">\n</span><span class="hl str">&quot;, s);</span>
<span class="hl str">}</span>
</pre>

<p>Ответ: &ldquo;Нельзя сказать с уверенностью, скорее всего мусор, но в целом это неопределенное поведение, так как локальный буфер формально прекращает существование после выхода из функции f()&rdquo; является почти исчерпывающим.</p>

<p>Почему &ldquo;почти&rdquo;? Потому что обычно за ним дополнительный вопрос: &ldquo;Что именно может с высокой вероятностью затирать заветное слово TEST и приводить к выводу мусора? Для конкретности: платформа x86, 32-bit, компилятор Visual Studio. Если остановить программу отладчиком в точке (1) и посмотреть, на что указывает указатель &ldquo;s&rdquo;, то очень высока вероятность, что там будет таки &ldquo;TEST&rdquo;, а вот printf() таки с высокой вероятностью распечатает мусор. Почему?&ldquo;.</p>

<p>Более половины собеседований, в которых я участвовал, заканчивались со знаком &ldquo;минус&rdquo;, так как человек даже не делал попытку сказать что-то типа &ldquo;В данных условиях скорее всегда слово TEST будет перезатерто параметрами функции printf(), которые передаются через стек и ложатся на то место, где был раньше размещен буфер &ldquo;buf&rdquo;. Конечно, многое зависит от режимов оптимизации, так как аргументы могут быть переданы через регистры.&rdquo;</p>

<p>Фактически, произнесенные слова &ldquo;стек&rdquo; и &ldquo;параметры функции&rdquo; являются достаточным ответом на вопрос.</p>

<p>Повторюсь, я лично считаю, что на собеседовании задача интервьюера не показать, на сколько он сам умен (читать задачи по бумажке может каждый), а попытаться разглядеть в собеседнике те качества, которые требуются для данной позиции. И просто отказывать человеку из-за того, что он не ответил, как тебе кажется, на один элементарный вопрос, также глупо, как и делать из этого вывод о прочих знаниях кандидата.</p>

<p>Но все же есть такая черта, ниже которой уже нельзя.</p>

<p>А у вас есть вопросы, &ldquo;неответы&rdquo; на которые вы лично можете считать поводом для практически однозначного отказа?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Самые глупые ответы на интервью, что я когда-либо давал]]></title>
    <link href="http://demin.ws/blog/russian/2011/01/20/my-most-stupid-answers-on-interviews/"/>
    <updated>2011-01-20T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/01/20/my-most-stupid-answers-on-interviews/</id>
    <content type="html"><![CDATA[<p>Решил я вспомнить, какие самые невозможно глупые ответы я когда-либо давал на интервью, за которые мне до сих пор даже перед самим собой стыдно неимоверно.</p>

<p>Как-то яростно пытался доказать, что тип int является за 100% атомарным без каких-либо гвоздей на платформе x86. Не доказал (<a href="http://demin.ws/blog/russian/2010/12/27/atomicy-of-int-and-pointer/">и вот почему</a>).</p>

<p>Вопрос: «При множественном виртуальном наследовании в С++, кто и как должен заботиться о правильном однократном вызове конструктора базового класса (подразумевается, что у этого конструктора есть параметр)?». Я сказал, что это компилятор, и вдобавок еще не смог объяснить почему.</p>

<p>Ну и лидер нашего хит-парада. Вопрос: «В С++ таблица виртуальных функций принадлежит классу или экземпляру класса?» Барабанная дробь: я сказал, что каждый экземпляр одного класса имеет собственную копию таблицу. Почему я так сказал, я до сих пор не знаю.</p>

<p>Все это еще раз подтверждает факт того, что на нервах можно сморозить такое, что потом сам будешь думать о причинах сказанного.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Компилятор языка С: LCC-WIN32]]></title>
    <link href="http://demin.ws/blog/russian/2011/01/18/lcc-compiler-for-windows/"/>
    <updated>2011-01-18T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/01/18/lcc-compiler-for-windows/</id>
    <content type="html"><![CDATA[<p>Потребовалось мне тут прикрутить к замечательной программе putty подсветку синтаксиса на лету в терминальной сессии. И так вышло, что на новом рабочем ноутбуке я пока еще не успел поставить Студию. У putty есть makefile’ы для Visual Studio, Borland’а, Cygwin’а и LCC. Первых двух у меня не было, и взять их было негде, Cygwin недолюбливаю из-за необходимости таскать с собой потом dll’ки, и чудом выбор пал на LCC. До этого я никогда этот компилятор не использовал.</p>

<p>И я был приятно удивлен практически всему увиденному. Во всего шести мегабайтах дистрибутива вы получаете быстрый компилятор С99 с поддержкой современных процессоров, линковщик, ассемблер, компилятор ресурсов и внушительную библиотеку.</p>

<p>Про библиотеку хочу сказать отдельно. Помимо стандартного набора libc и Win32 API, там полно всего остального. Лично я был несказанно удивлен простой, и порой столь нужной функцией <code>ping()</code> (и не надо больше вызывать <code>ping.exe</code> в скрытом окне).</p>

<p>В общем, с помощью также идущих в комплекте регулярных выражений, я быстро подхачил putty как мне было нужно. Попутно проронил ностальгическую слезу от программирования оконного интерфейса на чистом Win32 API и ощутил некоторые приятности С99. Например, объявление переменных не в начале блока, а где удобно, и размер автоматических массивов задавать не статически, а из переменной. C99 однозначно стоит внимательного изучения.</p>

<p>Приведу небольшую выжимку из идущих в комплекте библиотек (кроме стандартных libc и Windows API, конечно). Думаю, названия говорят сами за себя.</p>

<pre><code>gl.h             OpenGL
sqlite.h     
bignums.h        Работа с числами произвольной точности
bitstring.h     
bluetoothapis.h     
d3d.h     
d3dx.h     
dynloader.h      Работа с DLL’ками
gc.h             Сборщик мусора (требует запуска, конечно)
getopt.h     
icmpapi.h     
int128.h     
matrix.h         Работа с векторами и матрицами
mq.h             IBM MQ
msi.h     
netmon.h     
netsh.h     
pcre.h           Регулярные выражения в стиле Perl
ping.h           PING!
ras.h     
regexp.h         Простой API для регулярных выражений (regcomp() и regexec())
snmp.h     
sqlite3.h     
str.h            Работа со строками в стиле C99
tapi.h     
</code></pre>

<p>Итак, если вам быстро нужен небольшой компилятор (дистрибутив всего шесть мегабайт), для написания программы на С99 под Windows (для графического интерфейса придется все делать на чистом Win32 API), имеющий в комплекте в дополнение к libc и Win32 API приличный набор разнообразных библиотек, то LCC – это очень сильный кандидат.</p>

<p>Кстати, отдельно можно скачать и 64-битную версию компилятора.</p>

<p>Единственное, чего я не пробовал – это линковать объектники LCC с другими компиляторами. Кто имеет опыт – поделитесь.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Сайты с алгоритмами на C++ и Java]]></title>
    <link href="http://demin.ws/blog/russian/2011/01/18/web-sites-with-algorithms-on-cpp-and-java/"/>
    <updated>2011-01-18T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/01/18/web-sites-with-algorithms-on-cpp-and-java/</id>
    <content type="html"><![CDATA[<p>Не побоюсь повториться &ndash; две совершенно волшебные, на мой взгяд, ссылки на реализации множества алгоритмов на C++ и Java.</p>

<p><a href="http://e-maxx.ru/algo/">http://e-maxx.ru/algo/</a> - алгоримты на С++ с минимумом теории
<a href="http://sites.google.com/site/indy256/">http://sites.google.com/site/indy256/</a> - алгоритмы на Java и С++</p>

<p>Если у вас есть в заначке ссылка на ресурс подобного качества, поделитесь пожалуйста.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Учет рабочего времени]]></title>
    <link href="http://demin.ws/blog/russian/2011/01/16/working-time-billing/"/>
    <updated>2011-01-16T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2011/01/16/working-time-billing/</id>
    <content type="html"><![CDATA[<p>Во многих софтверных компаниях, даже средних размеров, менеджмент пытается измерить эффективность труда программистов, хоть как-то привязать ее к измеряемой величине – часам или денежным единицам.</p>

<p>Распространенный подход – это учет рабочего времени. Программистов обязывают отмечать, сколько времени было потрачено на выполняемые задачи. Более того, бывает, что эта суммарная цифра должна быть не меньше, заявленной в трудовом договоре. Подписался на 45 часов в неделю, изволь представить недельный отчет на эти часы как минимум.</p>

<p>Например, типичный отчет за день:</p>

<pre><code>2 часа  встреча по проекту Х
1 час   недельная летучка всего отдела
4 часа  работа над багфиксом #ААААА
1 час   телефонное интервью
1 час   работа над проектом Y
</code></pre>

<p>В целом, замечательное начинание с прекрасной целью. Множество полезной статистики можно вынести из такой отчетности: багфиксы какого клиента занимают сколько времени, каково соотношение между багфиксами и разработкой, какой проект явно требует больше усилий, чем планировалось и т.д.</p>

<p>Но есть тут одно &ldquo;но&rdquo;. Лично на моем опыте могу сказать, что у программиста ничего кроме нервотрепки обязанность делать такие отчеты не вызывает. Обычно это кончается решением задачи поиска дырки, куда бы приткнуть лишнее время, так как на проект биллить неохота из-за уже зашкаливающего коэффициента «Забиллено/Запланировано».</p>

<p>Но такая отчетность нужна в том или ином виде, и этой работой должен заниматься не программист, а его менеджер, и не формально, пытаясь понять, выполняются ли контрактные 45 часов, а неформально, не привязывая итоговые цифры по проекту/отделу конкретно к программисту.</p>

<p>Вы спросите, как тогда оценивать эффективность самого программиста? Уж точно не по часовой разблюдовке его дней, а по комплексному показателю: качество выполненных проектов, отзывы клиентов или партнеров, отзывы коллег и т.д.</p>

<p>Качество формально насаженного обязательства отмечать рабочее время обычно оставляет желать лучшего. Только если сам программист понимает и видит, как его отчеты помогают компании правильно планировать, может представлять действительно полезные отчеты, я не формалистику «чтобы ко мне не приставали».</p>

<p>А у вас в компании есть &ldquo;биллинг&rdquo; времени?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Коллекции электронных книг]]></title>
    <link href="http://demin.ws/blog/russian/2010/12/28/ebook-collections/"/>
    <updated>2010-12-28T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/12/28/ebook-collections/</id>
    <content type="html"><![CDATA[<p>Решил собрать в одном месте ссылки на ресурсы с электронными книгами (в одном из недавних постов в коментах была отличная подборка).</p>

<ul>
<li><a href="http://www.mccme.ru/free-books/">http://www.mccme.ru/free-books/</a></li>
<li><a href="http://e-maxx.ru/bookz/">http://e-maxx.ru/bookz/</a></li>
<li><a href="http://eqworld.ipmnet.ru/indexr.htm">http://eqworld.ipmnet.ru/indexr.htm</a></li>
<li><a href="http://infanata.com/category/computers">http://infanata.com/category/computers</a></li>
<li><a href="http://www.avaxhome.ws/ebooks">http://www.avaxhome.ws/ebooks</a></li>
<li><a href="http://gen.lib.rus.ec/">http://gen.lib.rus.ec/</a></li>
<li><a href="http://ebdb.ru/">http://ebdb.ru/</a></li>
<li><a href="http://bib.tiera.ru/">http://bib.tiera.ru/</a></li>
<li><a href="http://all-ebooks.com/">http://all-ebooks.com/</a></li>
<li><a href="http://www.flazx.us/">http://www.flazx.us/</a></li>
<li><a href="http://www.pdfbook-s.com/">http://www.pdfbook-s.com/</a> (Добавлено!)</li>
</ul>

<p>Буду признателем за информацию на подобные ресурсы. Обновления буду добавлять в пост.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Opengrok]]></title>
    <link href="http://demin.ws/blog/russian/2010/12/28/opengrok/"/>
    <updated>2010-12-28T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/12/28/opengrok/</id>
    <content type="html"><![CDATA[<p>Исходники – это основной источник информации для программиста, особенно если в компании (или проекте) размер кодовой базы переваливает за 200-300 тысяч строк.</p>

<p>Чтобы найти драгоценное зерно в такой куче, нужна правильная утилита для просмотра, а главное, поиска (типа «дай-ка я гляну, как народ эту функцию вызывает?» или «как там правильно создать экземпляр этого класса?» и т.д.).</p>

<p>Большинство систем контроля версий имеют веб-интерфейс для подобных целей. Также есть независимые системы, и одна из них называется <a href="http://hub.opensolaris.org/bin/view/Project+opengrok/WebHome">Opengrok</a>.</p>

<p><img src="http://demin.ws/images/blog/opengrok.jpg" /></p>

<p>Это система с открытым кодом под лицензией CDDL. Может индексировать репозитории почти всех основных систем контроля версий, а для некоторых понимает и историю файлов. Множество критериев поиска. Крайне полезно, что можно одновременно подключать для индексирования несколько репозиториев, причем от разных VCS. Естественно, при просмотре исходник представляется гипертекстовым документом, через который можно двигаться дальше.</p>

<p>Кстати, можно <a href="http://src.opensolaris.org/source/">вживую пощупать Opengrok на исходниках OpenSolaris’а</a>.</p>

<p>В общем, лично у меня крайне положительный опыт работы с этой системой на весьма значительной по размеру, разнообразию языков и подключенных одновременно VCS кодовой базе. Всячески рекомендую.</p>

<p>P.S. Я как-то в целом давно не писал про всякие организационные примочки, облегчающие работу программиста.</p>

<p>Поэтому, небольшой списочек из старенького, но все еще актуального:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2009/04/26/continuous-integration-with-hudson/">Система автоматизированной интеграции Hudson</a></li>
<li><a href="http://demin.ws/blog/russian/2009/02/23/static-code-analysis-coverity-klocwork/">Статический анализ кода - Coverity, Klocwork</a></li>
<li><a href="http://demin.ws/blog/russian/2009/04/03/code-bullseye-coverage/">Анализатор покрытия кода тестами Bullseye Coverage</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Атомарность типа int и указателя]]></title>
    <link href="http://demin.ws/blog/russian/2010/12/27/atomicy-of-int-and-pointer/"/>
    <updated>2010-12-27T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/12/27/atomicy-of-int-and-pointer/</id>
    <content type="html"><![CDATA[<p>Меня давно занимает вопрос атомарности типа <code>int</code> (да и любого типа, равного по длине шине процессора, например, указателя или <code>float</code> для x86).</p>

<p>Ясно, что в теории, нельзя полагаться на факт такой атомарности. Но давайте конкретизируем: платформа x86, и переменная объявлена как <code>volatile int a</code>. Тут я не играюсь с <code>reinterpret_cast</code>’ом и приведением указателей, то есть можно гарантировать, что компилятор обеспечит правильное выравнивание, соответствующее шине процессора и памяти, тем самым гарантируя, что доступ к этой ячейке произойдет за один такт.</p>

<p>Есть ли хоть какой-то шанс с ненулевой вероятностью, что какое-то вычисление (команда процессора) по отношению к <code>а</code> может быть тут неатомарна? Может ли так быть, что операция <code>a++</code> или <code>a += arbitrary_stuff</code> и т.д. выполниться не целиком?</p>

<p>Так как переменная <code>volatile</code>, значит любые оптимизации будут компилятором запрещены, и не выйдет так, что вместо полноценной 32-х битной команды (обнуления, инкремента, умножения и т.д) компилятор использует, например, каскад двух 8-ми битных команд для операции, которую можно сделать одной 32-х битной.</p>

<p>Ведь где бы значение переменной <code>а</code> не обрабатывалось (в регистре, в кэше, в памяти), везде это будет та или иная одиночная команда процесса, которая, очевидно, атомарна.</p>

<p>Ясно, что правилом хорошего тона считается не полагаться на атомарность <code>int</code>’а. Но современная архитектура процессоров (микроконтроллеры пока не берем) практически гарантирует эту атомарность, разве нет?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[В блоге новая система комментирования DISQUS]]></title>
    <link href="http://demin.ws/blog/russian/2010/12/19/disqus/"/>
    <updated>2010-12-19T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/12/19/disqus/</id>
    <content type="html"><![CDATA[<p>Подглядел у &ldquo;<a href="http://james-iry.blogspot.com/">One Div Zero</a>&rdquo; - движок комментирования <a href="http://disqus.com/">DISQUS</a> и установил себе.</p>

<p>Что это такое? Это весьма продвинутый движок комментирования (с шахматами и гимназистками) со множеством современных примочек на замену стандартному: сортировка при просмотре, кнопки Не/Нравится, ответ на конкретный комментарий. Ну и разные административные/модераторские возможности.</p>

<p>В целом, ничего особенно, но по сравнению со стандартным движком Блогспота - это небо и земля.</p>

<p>Установка, удивительно, простая. Вообще ничего делать не надо - просто указать имя блога на Blogger&rsquo;е и разрешить доступ на модификацию шаблона. Далее все происходит автоматически. Вроде даже существующие комментарии проимпортировались.</p>

<p>В общем, посмотрим. Будут глюки - пишите.</p>

<p>UPDATE: Оказывается, тут можно редактировать собственные комментарии. Ура!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[А какая у вас зарплата?]]></title>
    <link href="http://demin.ws/blog/russian/2010/12/18/what-is-your-salary/"/>
    <updated>2010-12-18T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/12/18/what-is-your-salary/</id>
    <content type="html"><![CDATA[<p>Когда я ходил на свои первые интервью в Англии, меня приводил в недоумение вопрос, который почти всегда задают рекрутеры (независимые агенты или сотрудники отделов кадров конкретной компании) – «А какая у вас сейчас зарплата?». Не имея достаточно опыта подобного общения и толком не понимая причину этого вопроса, я имел глупость говорить эту сумму.</p>

<p>Обычно рекрутеры объясняют причину этого вопроса так, мол, это требование клиента, так как клиент хочет понимать, какой потенциальный скачок зарплаты ты себе хочешь. И часто, когда я пытался сопротивляться ответу на этот вопрос, агенты говорили, что тогда они не смогут дальше продвигать мое резюме клиенту. Часто люди на это ведутся, как велся и я.</p>

<p>Сейчас, имея приличный опыт общения с различными рекрутерами, я могу сказать только одно: <strong>никогда</strong> не надо сообщать рекрутерам своей текущей зарплаты. Достаточно вежливо сказать, что это, раз, личная информация, и, два, она не имеет <strong>никакого</strong> отношения к вопросу потенциального устройства на новую работу.</p>

<p>Почему компании хотят знать вашу текущую зарплату? Все просто. После того, как успешно прошел все собеседования, и принято решения тебя брать, в работу включаются внутренние рекрутеры компании, цель которых нанять человека за возможно меньшие деньги. И если вдруг выходит, например, что ты пытаешься договориться на сумму, в два раза превышающую, что было раньше, это может быть еще одним доводом при обсуждении зарплаты, чтобы ее сбить (типа «где вы видели повышения зарплаты сразу в два раза?»). Действительно, для рынка труда в Англии это действительно маловероятное повышение, но, опять-таки, к переговорам это не имеет никого отношения.</p>

<p>Далее, тема того, что если не сообщать рекрутинговому агенту своей зарплаты, то он типа не сможет подать твое резюме в ту или иную компанию. Это самый натуральный блеф. У меня лично было несколько случаев, когда два разных агента предлагали позицию в одной и той же компании, обоим мной было отказано в вопросе о зарплате, и один сказал, что дальше работать со мной не будет (и был послан), а второй все прекрасно сделал и без знания моей текущей зарплаты.</p>

<p>Ну уж а если так выходит, кто представители компании вам прямо говорят, что если вы не скажете нам свою текущую зарплату, мы отклоним ваше резюме – это верный знак, что в такую компанию не стоит идти работать (на моем опыте пока такого не было).</p>

<p>И еще парадокс в том, что подавляющем большинстве компаний зарплата является крайне секретной информацией и всегда обсуждается сугубо персонально. Поэтому сообщать ее каким-то рекрутерам было бы крайне странно.</p>

<p>Есть небольшое замечание, что конкретно в Англии, в процессе оформления документов при поступлении на работу (контракт, всякие кодексы, соглашения о неразглашении и т.д.) ты должен предоставить формальные налоговые выписки о твоих доходах с предыдущего места работы (по ним можно понять зарплату), чтобы бухгалтерия правильно рассчитала тебе налоги, но все это происходит уже после, когда контракт уже согласован и подписан, и уже формально взят на работу.</p>

<p>Вот.</p>

<p>Кстати, может кто-нибудь поделиться опытом устройства на работу через кадровые агентства в России и других республиках и государствах нашего региона?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Интервью с домашним заданием]]></title>
    <link href="http://demin.ws/blog/russian/2010/12/07/interview-with-homework/"/>
    <updated>2010-12-07T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/12/07/interview-with-homework/</id>
    <content type="html"><![CDATA[<p>После прохождения более сотни различных интервью по поводу работы за последние несколько лет, телефонных и личных, удачных и позорно провальных, у меня как-то вошло в привычку периодически интервьюироваться (благо рынок сейчас реально снова пошел вверх).
И вовсе не потому, что я часто люблю менять работу (совсем наоборот). А потому, что в этом процессе есть несколько полезных сторон.</p>

<p>Для начала – это вызов. Задача, которую надо решить (ведь помните, что мы должны быть разносторонними, а не только на С++ программировать). Это как участвовать в ТопКодере. У меня это всегда легкое (а порой и не очень легкое) волнение и ощущение бабочек внизу живота. Предлагаемая задача не решается в лоб академическими знаниями и всегда требует, чтобы ты себя проявил.</p>

<p>Затем идет чисто практическая сторона – опыт, который никаким другим способом не получить. Даже если тебя все устраивает на текущей работе или собственном бизнесе, всякое может случиться, и иметь опыт устройства на работу (как бы формально и прагматично это не звучало) иметь стоит. К тому же усилий для его получения надо не так и много. Чтобы успешно пройти интервью – надо уметь это делать. Хоть многие компании и заявляют, что они целенаправленно набирают специалистов, а не специалистов по устройству на работу – это блеф. Люди всегда оценивают людей. И порой надо догадаться, что за критерии отбора скрыты за вопросами и задачами, предлагаемыми тебе на интервью.</p>

<p>Например, многие думают, что все интервьюеры – это супер/мега/экстра спецы, которые видят тебя насквозь. И причина этому – просто что «он» задает тебе вопросы, а не ты ему. Хотя в большинстве случаев, особенно в больших компаниях, интервьюируют обычные разработчики (а некоторые и без особого желания), и если догадаешься, что ему надо – успех гарантирован.</p>

<p>Лично я понял, увы, не сразу, насколько важно быть не только технически подкованным, но и собрать максимально информации и компании, а по возможности и о предстоящем интервьюере. Благо сейчас у всех есть блоги, ЖЖ, Фейсбук, ЛинкедИн, МайСпейс и т.д.</p>

<p>А любой, даже самый позорный провал – это крайне полезная пища для самоанализа и понимания путей развития. Лично я всегда тщательно анализирую все интервью, разбираю задачи, на которых облажался, и много раз это возвращалось – люди ленивы, и не все интервьюеры утруждаются придумыванием задач, так что шанс получить однажды нерешенную задачу в другом месте очень даже велик.</p>

<p>Ну и под занавес – наблюдение процесса интервью со стороны кандидата позволяет лучше интервьюировать самому. Быстро начинаешь понимать цену, смысл и назначение тех или иных вопросов. Мне это очень помогает при интервьюировании в Блумберге.</p>

<p>Ладно, это лирика.</p>

<p>Хочу поделиться интересным примером.</p>

<p>Интервьюировался я недавно в одной небольшой трейдинговой фирме на позицию обычного разработчика на С++. Сначала было очень короткое пятнадцатиминутное телефонное интервью, которое я легко прошел (но увы, я не вынес из него всей полезной информации – см. ниже). Стандартный набор: С++, multithreading и пару вопросов про сложность. Под занавес товарищ ненавязчиво спросил, какими скриптовыми и функциональными языками я в принципе владею и интересуюсь.</p>

<p>Затем, они мне прислали домашнее задание.</p>

<p>Суть задачи: есть шахматная доска MxN и набор фигур: короли, ферзи, слоны, кони и ладьи (каждой фигуры есть некоторое количество). Пешек нет, и цвет фигур не имеет значения. Надо сгенерировать все возможные расстановки данных фигур на поле. В расстановке должны участвовать в точности все данные фигуры.</p>

<p>Было дано несколько простых тестовых данных. Для задачи большой размерности (поле 7 на 7, 2 короля, 2 ферзя, 2 слона и одна ладья) надо только вывести количество возможных позиций.</p>

<p>И далее было самое главное ограничение: можно писать задачу на любом языке, кроме C, C++, C#, Java, Python, PHP, Pascal.</p>

<p>Срок – неделя.</p>

<p>Я сначала почесал репу (вроде все выглядит как перебор с возвратами, и надо только позаботиться об исключении повторяющихся конфигураций), написал все сначала, конечно, на С++, отладил алгоритм. И стал думать, на чем мне сдавать задачу. Решил на Go. Написал, проверил. Результаты совпадают.</p>

<p>Отправил. Приходит ответ, что все неплохо, но типа мы ищем человека с более оригинальным подходом, чем использование С-подобного языка Go, когда мы явно не рекомендовали использовать императивные языки, тем более из семейства С, и ожидали реализацию на каком-то скриптовом или функциональном языке. Увы, отказ.</p>

<p>Ну, в общем, суть понятна. Задача была не в задаче, а в «показать себя разносторонним программистом», не который если что, так расчехляет С++.</p>

<p>Я поблагодарил их за время, а себя записал еще одно поражение из-за недостаточного анализа требований, пусть и весьма расплывчатых.</p>

<p>Вот.</p>

<p>P.S. Для желающих – <a href="http://code.google.com/p/easy-coding/source/browse/chess_problem">исходники моей оригинальной программы</a> на <a href="http://code.google.com/p/easy-coding/source/browse/chess_problem/problem.cpp">С++</a>. Там же есть версия на <a href="http://code.google.com/p/easy-coding/source/browse/chess_problem/go">Go</a>, но плюсовый вариант содержит самый быстрый алгоритм, который я сумел придумать.</p>

<p>У меня больше нет идей, чтобы еще можно ускорить.</p>

<p>Желающие могут попробовать. Было бы очень интересно время работы теста #3.</p>

<p>Тесты (можно и добавлять свои) и проверяющая система уже встроены прямо в исходник. Его можно скомпилировать:</p>

<pre><code>cl /O2 /EHsc problem.cpp
</code></pre>

<p>У меня печатается:</p>

<pre><code>Case #0 OK (line 235)
Case #1 OK (line 248)
Case #2 OK (line 271)
Case #3 OK (line 318) time 1.495s
</code></pre>

<p>Для своей версии вам надо переписать функцию <code>solve()</code>. Присваивая переменной <code>problem_filter</code> значения, отличные от <code>-1</code>, можно запускать не все тесты, а по одному.</p>

<p>Вообще, я спользую эту мини проверяющую систему для олимпиадных задач. Предложения приветствуются.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[На каком языке вы более продуктивны?]]></title>
    <link href="http://demin.ws/blog/russian/2010/11/17/most-productive-language/"/>
    <updated>2010-11-17T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/11/17/most-productive-language/</id>
    <content type="html"><![CDATA[<p>В <a href="http://experience.openquality.ru/alexander-demin-interview/">интервью</a> проекту &ldquo;<a href="http://openquality.ru/">OpenQuality</a>&rdquo; в сказал, что не имею особого пристрастия к конкретному языку. Важен проект, а не язык, на котором он реализуется.</p>

<p>А как насчет вопроса «а на каком языке вы наиболее продуктивны»?</p>

<p>Например, спортивное программирование, где нужно как можно быстрее выдать работающий код, нагруженный часто сложными алгоритмами.</p>

<p>Кстати, есть распространенное заблуждение, что спортивное программирование – это обычно куча корявого и запутанного, хоть и работающего кода, который совершенно непригоден для «обычного» программирования. Это не так, и зависит от конкретного человека. Можно, например, посмотреть код двух ТопКодеровских лидеров – <a href="http://www.topcoder.com/tc?module=MemberProfile&amp;cr=19849563&amp;tab=alg">ACRush</a> и <a href="http://www.topcoder.com/tc?module=MemberProfile&amp;cr=10574855&amp;tab=alg">Petr</a>. Код второго очень чистый, начиная от нормального форматирования и заканчивая общей понятной структурой решения. Код же первого же – обычно по внешнему виду оставляет желать лучшего (хотя это нисколько не умаляет его бесспорного лидерства), и читать его гораздо сложнее.</p>

<p>Так вот, я задал себе вопрос – а на каком языке я бы мог участвовать в контестах, где идет учет времени, и нет возможности копаться в документации по языку или библиотеке? И честно говоря, С++ находится далеко впереди Java и C# (Си не берем из-за бедности стандартной библиотеки). Мой уровень «погружения» в С++ (моменты языка, бесчисленные шаблоны уже виденного кода, знание библиотеки и т.д.) не сравним с той же Java.</p>

<p>А сколько языков у вас «живут в пальцах»?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Неконстантные ссылки]]></title>
    <link href="http://demin.ws/blog/russian/2010/11/17/non-const-references/"/>
    <updated>2010-11-17T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/11/17/non-const-references/</id>
    <content type="html"><![CDATA[<p>Обсуждалось наверное миллионы раз, но в очередной раз имел спор с коллегой на эту тему, посему решил сформулировать свой подход.</p>

<p>Проблема: использовать ли не константные ссылки в аргументах функций?</p>

<p>Мой подход: нет.</p>

<p>Почему? Причина тут только одна: использование неконстантной ссылки для аргумента функции скрывает в вызывающем коде факт возможной модификации объекта, передаваемого в качестве параметра.</p>

<p>Лично нарвался недавно на собственную мину (конечно, упрощенный вариант):</p>

<pre class="hl">
T a <span class="hl opt">=</span> <span class="hl num">10</span><span class="hl opt">;</span>
<span class="hl opt">...</span>
<span class="hl kwd">f</span><span class="hl opt">(</span>a<span class="hl opt">);</span>
<span class="hl opt">...</span>
<span class="hl kwa">assert</span><span class="hl opt">(</span>a <span class="hl opt">==</span> <span class="hl num">10</span><span class="hl opt">);</span> <span class="hl slc">// BOOM!!! WTF?! Who changed this?</span>
</pre>

<p>А причина в <code>void f(T&amp; a);</code>, а должно быть <code>void f(const T&amp; a);</code> или <code>void f(T* a);</code>. Функция <code>f()</code> почему-то изменила значение «а», а писал я ее давно и успел забыть такую ее «особенность». Но из кода <code>f(a)</code> сходу не видно – может эта функция изменить <code>а</code> или нет.</p>

<p>А как могло произойти, что мне вообще пришло в голову сделать параметр <code>a</code> неконстантной ссылкой? Лично у меня это случается, когда переменная изначально была внутри функции, и в какой-то момент я решил сделать ее параметром, а менять в коде везде <code>a.</code> на <code>a-&gt;</code> было просто лень, вот и сделал ссылку, вместо указателя. За что и поплатился, позже.</p>

<p>Кстати, один из аргументов, приводимый людьми, выступающими за неконстантные ссылки –это «писать <code>a.</code> приятнее и понятнее, чем <code>a-&gt;</code> или <code>*a</code>». Также ссылка более надежна с точки зрения <code>NULL</code> (сделать ссылку, указывающую на <code>NULL</code> конечно можно, но тут уже надо постараться). Тут можно выйти положения так:</p>

<pre class="hl">
<span class="hl kwb">void</span> <span class="hl kwd">f</span><span class="hl opt">(</span>T<span class="hl opt">*</span> ptr_a<span class="hl opt">) {</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>ptr_a <span class="hl opt">!=</span> NULL<span class="hl opt">);</span>
  T<span class="hl opt">&amp;</span> a <span class="hl opt">= *</span>ptr_a<span class="hl opt">;</span>
  <span class="hl opt">...</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>a<span class="hl opt">.</span><span class="hl kwd">foo</span><span class="hl opt">()) ...</span>
<span class="hl opt">}</span>
</pre>

<p>Небольшой лишний код, но решены обе проблемы: проверка на <code>NULL</code> и необходимость разыменовывать указатель каждый раз. А главное, в вызывающем коде придется писать так: <code>f(&amp;a)</code>, что явно укажет на факт возможной модификации аргумента внутри функции.</p>

<p>Например, в C# есть специальной ключевое слово <code>ref</code>, которое надо ставить перед аргументами в вызывающем коде, если хочется передать что-то по ссылке. По мне,это очень хорошее свойство языка.</p>

<p>Исключения из правила</p>

<p>Я пока выработал для себя одно исключение: сложные, сервисные прокси-объекты, типа потока или базы данных можно передавать по неконстантной ссылке. Но тут надо четко понимать, не вы меняете этот объект внутри функции, а он меняется сам при обращении к нему.</p>

<p>Например:</p>

<pre class="hl">
<span class="hl kwb">void</span> <span class="hl kwd">print</span><span class="hl opt">(</span>std<span class="hl opt">::</span>ostream<span class="hl opt">&amp;</span> os<span class="hl opt">,</span> <span class="hl kwb">const</span> T<span class="hl opt">&amp;</span> a<span class="hl opt">) {</span>
   os <span class="hl opt">&lt;&lt;</span> a<span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>или</p>

<pre class="hl">
<span class="hl kwb">void</span> <span class="hl kwd">save_to_db</span><span class="hl opt">(</span>Database<span class="hl opt">&amp;</span> db<span class="hl opt">, ...) {</span>
   db<span class="hl opt">.</span><span class="hl kwd">connect</span><span class="hl opt">();</span>
   db<span class="hl opt">.</span><span class="hl kwd">save</span><span class="hl opt">(...)</span>
   <span class="hl opt">...</span>
<span class="hl opt">}</span>
</pre>

<p>Ну и чтобы два раза не вставать, пара личных маленьких радостей:</p>

<ul>
<li><a href="http://experience.openquality.ru/alexander-demin-interview/">Мое интервью</a> проекту &ldquo;<a href="http://openquality.ru/">OpenQuality</a>&rdquo;.</li>
<li>Уверенно решил две задачи в недавней SRM 487. А достижение в том, что во второй задаче даже применил DP, хоть и тривиальное. В процессе контеста был последним в комнате, так как долго возился с первой задачей, но потом почти все упали на фазе challenge&rsquo;а и на тестах, и я оказался вторым в комнате. Кстати, настоятельно рекоммендую сайт <a href="http://codeforces.ru/">CodeForces</a>. Наши ребята сделали отличный сайт для контестов и регулярно их там проводят. В отличие от ТопКодера русский язык там в почете, задания предоставляются на обоих языках, и выбор язык программирования гораздо шире. Также можно там спросить совета по задачам и получить квалифицированный ответ от бойцов.</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Screencast’ы]]></title>
    <link href="http://demin.ws/blog/russian/2010/11/13/screencasts/"/>
    <updated>2010-11-13T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/11/13/screencasts/</id>
    <content type="html"><![CDATA[<p>А вы смотрите скринкасты?</p>

<p>Лично я только совершенно недавно открыл для себя этот способ постижения технической информации. И пока у меня сугубо положительные ощущения – скорость и эффективность восприятия гораздо быстрее, чем при простом чтении.</p>

<p>Например, посмотрев три видео <a href="http://www.pragprog.com/screencasts/v-bdobjc/coding-in-objective-c-2-0">Coding in Objective-C 2.0</a>, я могу написать небольшую программу на этом языке с использованием классов и имею представление, как работает управление памятью в Objective-C (кстати, весьма интересная концепция, я бы ее назвал – ручной сборщик мусора, когда память освобождается вроде как автоматически, но ответственность за правильность подсчета активных ссылок на объект возлагается на программиста).</p>

<p>Сейчас в процессе просмотра <a href="http://www.pragprog.com/screencasts/v-bdiphone/writing-your-first-iphone-application">Writing Your First iPhone Application</a> и на очереди <a href="http://www.pragprog.com/screencasts/v-kserl/erlang-in-practice">Erlang in Practice</a>.</p>

<p>Но есть со скринкастами одна засада – они должны быть качественно сделаны, иначе будет только сожаление о потерянном времени. Скринкасты от <a href="http://www.pragprog.com/">The Pragmatic Bookshelf</a> сделаны, на мой взгляд, очень хорошо.</p>

<p>А какие скринкасты смотрите вы? Какие можете посоветовать?</p>

<p>P.S. Кстати, онлайн-магазин «The Pragmatic Bookshelf» нравится мне все больше и больше. Все книги продаются в электронном свободном варианте, причем в нескольких форматах (pdf, mobi, epub).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Как называть getter'ы и setter'ы]]></title>
    <link href="http://demin.ws/blog/russian/2010/11/09/how-to-name-getters-and-setters/"/>
    <updated>2010-11-09T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/11/09/how-to-name-getters-and-setters/</id>
    <content type="html"><![CDATA[<p>Для именования функций записи и чтения членов класса (getter/setter) в стандартном C++ есть три часто используемых приема.</p>

<p><strong>1. Чисто плюсовый вариант, основанный на семантике ссылок.</strong></p>

<pre class="hl">
<span class="hl kwc">class</span> Foo <span class="hl opt">{</span>
  Value field_<span class="hl opt">;</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
  Value<span class="hl opt">&amp;</span> <span class="hl kwd">field</span><span class="hl opt">() {</span> <span class="hl kwa">return</span> field_<span class="hl opt">; }</span>
  <span class="hl kwb">const</span> Value<span class="hl opt">&amp;</span> <span class="hl kwd">field</span><span class="hl opt">()</span> <span class="hl kwb">const</span> <span class="hl opt">{</span> <span class="hl kwa">return</span> field_<span class="hl opt">; }</span>
<span class="hl opt">};</span>
</pre>

<p>Использование:</p>

<pre class="hl">
Foo foo<span class="hl opt">;</span>
foo<span class="hl opt">.</span><span class="hl kwd">field</span><span class="hl opt">() =</span> field_instance<span class="hl opt">;</span>
field_instance <span class="hl opt">=</span> foo<span class="hl opt">.</span><span class="hl kwd">field</span><span class="hl opt">();</span>
</pre>

<p>Плюсы: краткость текста, близость к нотации <a href="http://www.cplusplus.com/forum/general/8147/">свойств</a>, и возможность использования присвоения в каскаде (<code>foo1.field() = foo2.field() = 2;</code>).</p>

<p>Минусы: использование синтаксиса вызова функции слева от знака присваивания выглядит непривычно.</p>

<p><strong>2. Способ в стиле Java.</strong></p>

<pre class="hl">
<span class="hl kwc">class</span> Foo <span class="hl opt">{</span>
  Value field_<span class="hl opt">;</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl kwb">void</span> <span class="hl kwd">setField</span><span class="hl opt">(</span><span class="hl kwb">const</span> Value<span class="hl opt">&amp;</span> value<span class="hl opt">) {</span> field_ <span class="hl opt">=</span> value<span class="hl opt">; }</span>
  <span class="hl kwb">const</span> Value<span class="hl opt">&amp;</span> <span class="hl kwd">getField</span><span class="hl opt">()</span> <span class="hl kwb">const</span> <span class="hl opt">{</span> <span class="hl kwa">return</span> field_<span class="hl opt">; }</span>
<span class="hl opt">};</span>
</pre>

<p>Использование:</p>

<pre class="hl">
Foo foo<span class="hl opt">;</span>
foo<span class="hl opt">.</span><span class="hl kwd">setField</span><span class="hl opt">(</span>field_instance<span class="hl opt">);</span>
field_instance <span class="hl opt">=</span> foo<span class="hl opt">.</span><span class="hl kwd">getField</span><span class="hl opt">();</span>
</pre>

<p>Плюсы: ясность и очевидность синтаксиса.</p>

<p>Минусы: многословность из приставок &ldquo;get&rdquo; и &ldquo;set&rdquo;.</p>

<p><strong>3. Cтиль Objective-C</strong></p>

<pre class="hl">
<span class="hl kwc">class</span> Foo <span class="hl opt">{</span>
  Value field_<span class="hl opt">;</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl kwb">void</span> <span class="hl kwd">setField</span><span class="hl opt">(</span><span class="hl kwb">const</span> Value<span class="hl opt">&amp;</span> value<span class="hl opt">) {</span> field_ <span class="hl opt">=</span> value<span class="hl opt">; }</span>
  <span class="hl kwb">const</span> Value<span class="hl opt">&amp;</span> <span class="hl kwd">field</span><span class="hl opt">()</span> <span class="hl kwb">const</span> <span class="hl opt">{</span> <span class="hl kwa">return</span> field_<span class="hl opt">; }</span>
<span class="hl opt">};</span>
</pre>

<p>Использование:</p>

<pre class="hl">
Foo foo<span class="hl opt">;</span>
foo<span class="hl opt">.</span><span class="hl kwd">setField</span><span class="hl opt">(</span>field_instance<span class="hl opt">);</span>
field_instance <span class="hl opt">=</span> foo<span class="hl opt">.</span><span class="hl kwd">field</span><span class="hl opt">();</span>
</pre>

<p>Плюсы: краткость текста при чтении (нет почти бессмысленной приставки &ldquo;get&rdquo;) и очевидность при записи.</p>

<p>Минусы: я пока не нашел таковых.</p>

<p>Понятно, что все три способа имеют право жизнь. Но с точки зрения стилистики, стоит выбрать один и придерживаться его в рамках одного проекта.</p>

<p>Лично я почти всегда предпочитал способ #1, но после своего <a href="http://demin.ws/blog/russian/2010/10/29/reference-to-temporary-object-in-constructor-initialize-list/">последнего поста</a> я перешел на третий.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ссылка на временный объект в списке инициализации конструктора]]></title>
    <link href="http://demin.ws/blog/russian/2010/10/29/reference-to-temporary-object-in-constructor-initialize-list/"/>
    <updated>2010-10-29T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/10/29/reference-to-temporary-object-in-constructor-initialize-list/</id>
    <content type="html"><![CDATA[<p>Имеем два исходника:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;iostream&gt;</span>

<span class="hl kwb">struct</span> A <span class="hl opt">{</span>
  <span class="hl kwd">A</span><span class="hl opt">();</span>
  <span class="hl kwb">const int</span><span class="hl opt">&amp;</span> i<span class="hl opt">;</span>
<span class="hl opt">};</span>

A<span class="hl opt">::</span><span class="hl kwd">A</span><span class="hl opt">() :</span> <span class="hl kwd">i</span><span class="hl opt">(</span><span class="hl num">123</span><span class="hl opt">) {}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
  A a<span class="hl opt">;</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> a<span class="hl opt">.</span>i <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>и</p>

<pre class="hl">
<span class="hl ppc">#include &lt;iostream&gt;</span>

<span class="hl kwb">struct</span> A <span class="hl opt">{</span>
  <span class="hl kwd">A</span><span class="hl opt">() :</span> <span class="hl kwd">i</span><span class="hl opt">(</span><span class="hl num">123</span><span class="hl opt">) {}</span>
  <span class="hl kwb">const int</span><span class="hl opt">&amp;</span> i<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
  A a<span class="hl opt">;</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> a<span class="hl opt">.</span>i <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Будучи скомпилированными компилятором от Sun или GCC, эти два примера печатают разные результаты. И первый - неправильный. Студия же 2010, с настройками по умолчанию, дает предупреждение и генерирует код, работающий правильно (точнее, как ожидает программист) в обоих случаях.</p>

<p>Понятно, что код сам по себе несколько странный, так как сложно представить себе, кому может понадобиться инициализировать ссылку константой, которая передается в конструктор не извне, а создается временно во время обработки списка инициализации. Но вот на ошибку-опечатку вполне себе потянет.</p>

<p>Ко мне пример попал как результат анализа реального бага.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Коварная опечатка в getter'e]]></title>
    <link href="http://demin.ws/blog/russian/2010/10/26/typo-in-getter/"/>
    <updated>2010-10-26T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/10/26/typo-in-getter/</id>
    <content type="html"><![CDATA[<p>Есть (точнее был) у меня вот такой код:</p>

<pre class="hl">
<span class="hl kwb">const</span> std<span class="hl opt">::</span>string<span class="hl opt">&amp;</span> <span class="hl kwd">id</span><span class="hl opt">()</span> <span class="hl kwb">const</span> <span class="hl opt">{</span> <span class="hl kwa">return</span> id_<span class="hl opt">; }</span>
std<span class="hl opt">::</span>string <span class="hl kwd">id</span><span class="hl opt">() {</span> <span class="hl kwa">return</span> id_<span class="hl opt">; }</span>
</pre>

<p>В нем есть одна досадная опечатка, из которой код:</p>

<pre class="hl">
order<span class="hl opt">.</span><span class="hl kwd">id</span><span class="hl opt">() =</span> <span class="hl num">123</span><span class="hl opt">;</span>
</pre>

<p>делал то, что от него не ожидалось, а точнее, ничего не делал. И проблема, как вы наверное уже догадались, в пропущеном значке <code>&amp;</code> во второй строке. Должно было быть так:</p>

<pre class="hl">
<span class="hl kwb">const</span> std<span class="hl opt">::</span>string<span class="hl opt">&amp;</span> <span class="hl kwd">id</span><span class="hl opt">()</span> <span class="hl kwb">const</span> <span class="hl opt">{</span> <span class="hl kwa">return</span> id_<span class="hl opt">; }</span>
std<span class="hl opt">::</span>string<span class="hl opt">&amp;</span> <span class="hl kwd">id</span><span class="hl opt">() {</span> <span class="hl kwa">return</span> id_<span class="hl opt">; }</span>
</pre>

<p>Эта опечатка стоила мне часа поиска проблемы через вторичные признаки в виде иногда не обновляемой базы данных.</p>

<p>Причина? А все потому, что я поленился написать тесты изначально, решив, что это уж очень простые методы. Но теперь таки добавил для этого тест:</p>

<pre class="hl">
<span class="hl kwd">TEST</span><span class="hl opt">(</span>Order<span class="hl opt">,</span> GetterSetters<span class="hl opt">) {</span>
  Order order<span class="hl opt">;</span>
  <span class="hl opt">...</span>
  <span class="hl kwd">EXPECT_EQ</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> order<span class="hl opt">.</span><span class="hl kwd">id</span><span class="hl opt">());</span>   <span class="hl slc">// Must be initialized.</span>
  order<span class="hl opt">.</span><span class="hl kwd">id</span><span class="hl opt">() =</span> <span class="hl num">123</span><span class="hl opt">;</span>
  <span class="hl kwd">EXPECT_EQ</span><span class="hl opt">(</span><span class="hl num">123</span><span class="hl opt">,</span> order<span class="hl opt">.</span><span class="hl kwd">id</span><span class="hl opt">());</span>
  <span class="hl opt">...</span>
<span class="hl opt">}</span>
</pre>

<p>Решил сэкономить время, а вышло наоборот.</p>

<p>Вывод: тесты, тесты и тесты.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Умножение вручную на бумажке по-китайски]]></title>
    <link href="http://demin.ws/blog/russian/2010/10/20/chinese-method-of-multiplication-on-paper/"/>
    <updated>2010-10-20T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/10/20/chinese-method-of-multiplication-on-paper/</id>
    <content type="html"><![CDATA[<p>Не берусь утверждать, что этот способ эффективнее традиционного столбика, но все равно впечатляет.</p>

<iframe width="425" height="344" src="https://www.youtube.com/embed/EsgMzkUivKo?color=white&theme=light"></iframe>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Книги по обработке строке и производящим функциям]]></title>
    <link href="http://demin.ws/blog/russian/2010/10/07/books-about-string-processing-and-generating-functions/"/>
    <updated>2010-10-07T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/10/07/books-about-string-processing-and-generating-functions/</id>
    <content type="html"><![CDATA[<p>Покупка книг на Амазоне в Европе и Штатах дело крайне простое, удобное и быстрое (особенно для электронных книг). Тут также можно и продавать свои книги. Очень удобно и для владельца, когда надо избавиться от одноразовой книги, и для покупателя, так как можно купить реально дешевле (а потом тоже продать).</p>

<p>Надеюсь, почта России одумается и сделает нормальный сервис доставки.</p>

<p>В Лондоне мой любимый книжный - это <a href="http://www.foyles.co.uk/">Foyles</a> на Charing Cross. Ни в <a href="http://www.waterstones.com/">Waterstones</a>, ни в <a href="http://www.borders.com/">Borders</a> не видел столь огромного отдела технической литературы, которая еще и великолепно отсортирована и разобрана по разделам. Например, отдельный шкаф с книгами чисто по компиляторам, или чисто по языку Хаскель, или по QA тестированию, а вдоль стендов про Java или C++ вообще можно ехать на самокате.</p>

<p>В общем, Амазон амазоном, но здорово неспешно зависнуть в таком магазине пару часиков, полистать, пошуршать, пощупать, подумать. Хотя потом можно выписать нужное на бумажку и купить онлайн, ибо дешевле, или скачать.</p>

<p>Куда я первым делом отправился во время визита в Москву на прошлой неделе? В &ldquo;Библио-Глобус&rdquo; на Лубянке. Кто знает в Москве офлайновый магазин с большим выбором и лучшей организацией стендов - поделитесь.</p>

<p>Приятно отменить, что очень много переводных книг, причем весьма свежих.</p>

<p>Но еще более приятно, что наша литература ничем не хуже.</p>

<p>В разделе компьютерном купил:</p>

<p><a href="http://www.ozon.ru/context/detail/id/4843928/?partner=easy-coding">С. М. Окулов, Алгоритмы обработки строк</a></p>

<p><img src="http://demin.ws/images/covers/russian/string-processing-algorithms-cover.jpg" /></p>

<p>Как написано в предисловии - это книга посвящена одному вопросу - как искать подстроку в строке за линейное время. На первых страницах рассматривается <a href="http://ru.wikipedia.org/wiki/%D0%90%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC_%D0%9A%D0%BD%D1%83%D1%82%D0%B0_%E2%80%94_%D0%9C%D0%BE%D1%80%D1%80%D0%B8%D1%81%D0%B0_%E2%80%94_%D0%9F%D1%80%D0%B0%D1%82%D1%82%D0%B0">Кнут-Моррис-Пратт</a>, а дальше начинается всякая жесть. Забавно, что книга из серии &ldquo;Развитие интеллекта школьников&rdquo;, то есть для просто школьников.</p>

<p>Просто отличная форма изложения: с картинками, диаграммами, пояснениями и примерами. Одна грамотная иллюстрация бывает лучше тысячи слов. Я видел несколько книг Окулова - могу только обоими руками поддержать этого автора. Писать для школьников о сложных алгоритмах - это трудно. А делать еще и понятным языком - особенно.</p>

<p>Вывод: иметь.</p>

<p>Далее, в соседнем разделе математики купил:</p>

<p><a href="http://www.ozon.ru/context/detail/id/1280166/?partner=easy-coding">С. К. Ландо, Лекции о производящих функциях</a></p>

<p><img src="http://demin.ws/images/covers/russian/lectures-about-generating-functions-cover.jpg" /></p>

<p>Тут прямо на первых страницах этой методички понятнейшим образом объясняется, что такое производящие функции и их применение для решения комбинаторных задач, причем для понимания даже не обязательно вспоминать <a href="http://ru.wikipedia.org/wiki/%D0%9C%D0%B0%D1%82%D0%B5%D0%BC%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B9_%D0%B0%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7">Анализ</a>. Разбираются классические задачи про <a href="http://ru.wikipedia.org/wiki/%D0%9F%D1%80%D0%B0%D0%B2%D0%B8%D0%BB%D1%8C%D0%BD%D0%B0%D1%8F_%D1%81%D0%BA%D0%BE%D0%B1%D0%BE%D1%87%D0%BD%D0%B0%D1%8F_%D0%BF%D0%BE%D1%81%D0%BB%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D1%82%D0%B5%D0%BB%D1%8C%D0%BD%D0%BE%D1%81%D1%82%D1%8C">правильные скобочные последовательности</a>, <a href="http://ru.wikipedia.org/wiki/%D0%9F%D1%80%D0%B0%D0%B2%D0%B8%D0%BB%D1%8C%D0%BD%D0%B0%D1%8F_%D1%81%D0%BA%D0%BE%D0%B1%D0%BE%D1%87%D0%BD%D0%B0%D1%8F_%D0%BF%D0%BE%D1%81%D0%BB%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D1%82%D0%B5%D0%BB%D1%8C%D0%BD%D0%BE%D1%81%D1%82%D1%8C">числа Каталана</a>, <a href="http://ru.wikipedia.org/wiki/%D0%AF%D0%B7%D1%8B%D0%BA_%D0%94%D0%B8%D0%BA%D0%B0">язык Дика</a> и многие другие. Местами там, конечно, жестковато с точки зрения математики, но вводные даются просто великолепно.</p>

<p>Эта книга есть в <a href="http://www.mccme.ru/free-books/lando/lando-genfunc.pdf">свободном варианте</a>.</p>

<p>Ну и чтобы два раза не вставать, под занавес две ссылки на грамотные
подборки электронных книг.</p>

<p><a href="http://www.mccme.ru/free-books/">http://www.mccme.ru/free-books/</a>
<a href="http://e-maxx.ru/bookz/">http://e-maxx.ru/bookz/</a></p>

<p>P.S. Кто знает еще хорошие ссылки по электронным книгам - делитесь в комментах.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Тернарный '?' оператор и вызов функций]]></title>
    <link href="http://demin.ws/blog/russian/2010/09/25/ternary-operator-and-function-calls/"/>
    <updated>2010-09-25T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/09/25/ternary-operator-and-function-calls/</id>
    <content type="html"><![CDATA[<p>Был удивлен, когда компилятор С съел вот такой забавный способ условного вызова функций:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;stdio.h&gt;</span>
<span class="hl ppc">#include &lt;math.h&gt;</span>
<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
  <span class="hl kwb">int</span> i<span class="hl opt">;</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;=</span> <span class="hl num">1</span><span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
    <span class="hl kwb">float</span> a <span class="hl opt">= (</span>i ? floor <span class="hl opt">:</span> ceil<span class="hl opt">) (</span><span class="hl num">10.5</span><span class="hl opt">);</span>
    <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;%d: %f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> i<span class="hl opt">,</span> a<span class="hl opt">);</span>
  <span class="hl opt">}</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Для С++ надо написать:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;stdio.h&gt;</span>
<span class="hl ppc">#include &lt;cmath&gt;</span>
<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
  <span class="hl kwb">int</span> i<span class="hl opt">;</span>
  <span class="hl kwc">typedef</span> <span class="hl kwb">float</span> <span class="hl opt">(*</span>f<span class="hl opt">)(</span><span class="hl kwb">float</span><span class="hl opt">);</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;=</span> <span class="hl num">1</span><span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
    <span class="hl kwb">float</span> a <span class="hl opt">= (</span>i ? <span class="hl opt">(</span>f<span class="hl opt">)</span>std<span class="hl opt">::</span>floor <span class="hl opt">: (</span>f<span class="hl opt">)</span>std<span class="hl opt">::</span>ceil<span class="hl opt">) (</span><span class="hl num">10.5</span><span class="hl opt">);</span>
    <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;%d: %f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> i<span class="hl opt">,</span> a<span class="hl opt">);</span>
  <span class="hl opt">}</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>или</p>

<pre class="hl">
<span class="hl ppc">#include &lt;stdio.h&gt;</span>
<span class="hl ppc">#include &lt;cmath&gt;</span>
<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
  <span class="hl kwb">int</span> i<span class="hl opt">;</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;=</span> <span class="hl num">1</span><span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
    <span class="hl kwb">float</span> a <span class="hl opt">= (</span>i ? std<span class="hl opt">::</span>floorl <span class="hl opt">:</span> std<span class="hl opt">::</span>ceill<span class="hl opt">) (</span><span class="hl num">10.5</span><span class="hl opt">);</span>
    <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;%d: %f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> i<span class="hl opt">,</span> a<span class="hl opt">);</span>
  <span class="hl opt">}</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Все программы выводят:</p>

<pre><code>0: 11.000000
1: 10.000000
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Электронные книги - iPad, Kindle, Amazon и все все все]]></title>
    <link href="http://demin.ws/blog/russian/2010/09/19/ebooks-ipad-kindle-amazon/"/>
    <updated>2010-09-19T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/09/19/ebooks-ipad-kindle-amazon/</id>
    <content type="html"><![CDATA[<p>Недавно я обзавелся iPad&rsquo;ом. Это лучший гаджет, который был у меня в жизни. Но сейчас я расскажу только про один аспект его использования - чтение книг.</p>

<p>Я давно коллекционирую интересные мне книги в электронном виде (pdf, djvu, mobi, epub и т.д.), но они просто лежали, так как читать с экрана в удовольствие я не могу, поэтому я обычно либо печатал на бумагу, или таки покупал бумажный экземпляр.</p>

<p>И вот все изменилось. Чтение накопленных запасов книг получило новый виток - iPad.</p>

<p>Форм-фактор, свечение экрана, время работы (2-3 дня при чтении 2-3 часа в день плюс серфинг через Wifi или 3G), и главное - программы для чтения просто приковывают к этому устройству.</p>

<p>У меня нет особых сантиментов на тему ностальгии по бумажным книгам. Для меня главное - двух-кликовая доступность практически любой книги из моей коллекции в любое время, не вставая с дивана, и комфорт чтения. Техническая, а особенно справочная литература вообще умерла в бумажном виде из-за отсутствия ключевой функции - быстрого поиска.</p>

<p>Да и с художественной у меня нет особых причин не читать на айпаде. Первым делом я заправил туда подборочку любимого <a href="http://ru.wikipedia.org/wiki/%D0%AD%D0%B4%D0%BE%D0%B3%D0%B0%D0%B2%D0%B0_%D0%A0%D0%B0%D0%BC%D0%BF%D0%BE">Рампо Эдогавы</a>.</p>

<p>В общем, теперь у меня с собой весь свой шкаф книг, почти. Причем, с закладками, с поиском, личными пометками, переведенными словами и т.д.</p>

<p>PDF</p>

<p>Если это нормальный файл-исходник, а не пиксельный скан, то можно спокойно пользоваться стандартным приложением iBook и закачивать туда книги через iTunes. Очень грамотная программа для чтения (i-все-таки). Но если приходится иметь дело с pdf&rsquo;ками, которые по сути являются постраничными сканами (таких &ldquo;книг&rdquo; обычно большинство на просторах торрентов), то тут бесспорный лидер - это <a href="http://www.goodiware.com/goodreader.html">Good Reader</a>. Очень быстро работает даже с тяжелыми файлами, умеет сам выкачивать файлы из интернета (HTTP, Dropbox, Google Docs, POP3/IMAP и т.д.), и самое главное - умеет делать конфигурируемую &ldquo;обрезку&rdquo; страниц. Это о-о-очень полезно. Часто книги отсканированы через пень-колоду, и например, в порядке вещей наличие гигантских отступов-полей, которые могут отжирать и так ограниченное пространство зоны чтения. А &ldquo;обрезкой&rdquo; можно персонально для каждой книги (для четных и нечетных страниц также) задать отображаемую часть листа. Вывод: Good Reader - это номер 1.</p>

<p>DjVu</p>

<p>К сожалению, Good Reader не понимает этот формат, а те программы, которые понимают, кривые. Поэтому я просто печатаю DjVu в PDF через PDFCreator и уже PDF заправляю на айпад.</p>

<p>Где брать книги? Конечно, торренты. Тут не надо ничего объяснять.</p>

<p>Отдельно расскажу по технологию Kindle. Это амазоновская читалка. Но есть еще и приложения Kindle для iPhone/iPad/iPod, Android, Windows Mobile, PC и т.д. В чем тут цимес? Для начала - время покупки электронных Kindle-книг на Амазоне исчисляется минутами: выбрал, оплатил и через пару минут книга сама будет закачена на устройство (можно сначала бесплатно скачать preview в виде десятка первых страниц).</p>

<p>Сами книги сделаны очень добротно, с хорошей и удобной версткой. Можно делать закладки, пометки в тексте, а при клике на слово вызывается оксфордовский толковый словарь (жаль, конечно, что не русский подстрочник). Также можно искать по тексту. А теперь ключевая фича - это синхронизация между различными устройствами. Допустим, у меня зарегистрированы читалки: программа-Kindle на PC, на айпаде и на Nexus&rsquo;е. Все, что делаю с книгой на любой из читалок (ставлю закладки, пометки, позиция чтения) автоматически синхронизируется на другими устройствами.</p>

<p>Теперь я всегда на Амазоне сначала смотрю наличие электронной книги и покупаю ее, если есть (кстати, при покупке электронной версии не должно более быть проблем с доставкой, например, в Россию). Жалко, что пока ассортимент книг несравнимо мал, по сравнению с полным каталогом.</p>

<p>Есть с амазоновскими книгами одно &ldquo;но&rdquo;. Файлы книг как таковые как бы пользователю не даются. Они видны во всех зарегистрированных читалках, и их можно скачивать повторно, но вытащить напрямую &ldquo;официально&rdquo; не получается.</p>

<p>Я написал письмо в Амазон:</p>

<blockquote>
<p>Dear Sirs,</p>

<p>I&rsquo;ve purchased a few books in Kindle format via Kindle application on iPad and Nexus. I would like to have those books as files (PDF, mobi, ebook etc). How can I get my purchased items this way?</p>

<p>Thanks,
Alexander</p>
</blockquote>

<p>Получил ответ:</p>

<blockquote>
<p>Hello Alexander,</p>

<p>Content you purchase from the Kindle Store (such as books, newspapers, magazines and blogs) can be read on most Kindle devices or devices running a Kindle application registered to your Amazon.co.uk account. Information about devices that can read Kindle content can be found in our Help pages here:</p>
</blockquote>

<p><a href="http://www.amazon.co.uk/kindlesupport">http://www.amazon.co.uk/kindlesupport</a></p>

<blockquote>
<p>Kindle Store content is not currently viewable on any other electronic reading devices. We don&rsquo;t offer Kindle content in any other formats so you would have to see if they are available elsewhere in different formats to read outside Kindle applications.</p>

<p>I hope this helps.</p>
</blockquote>

<p>Значит типа &ldquo;хрен тебе&rdquo;.</p>

<p>Ясное дело, проще всего покопаться с программой на PC. Файлы с книгами я нашел быстро. Это обычный <a href="http://wiki.mobileread.com/wiki/MOBI">mobi-формат</a>, но, конечно, зашифрованный. Но если книга читается, когда интернет отключен, значит ключ где-то на самом компьютере, а значит - его можно найти. На просторах интернета нашлась волшебная программа <a href="http://www.mediafire.com/?wzjiimfmzdo">skindle</a>, которая в момент из зашифрованной DRM-ленной книги делает просто mobi-книгу.</p>

<p>И дело не в том, что я мог бы выложить книги в сеть. Я этого делать не буду, так как я за них денег платил, но сам факт ограничения доступа к файлу - это глупость. Хотя надо отметить, некоторые издательства, например &ldquo;<a href="http://www.pragprog.com/">The Pragmatic Bookshelf</a>&rdquo; уже продают книги в электронных форматах. При это тебя не ограничивают во владении файлом, делай с ним что угодно. Просто каждая страница в колонтитуле мелким шрифтом содержит твое имя, взятое из данных платежа. То есть файл типа персонализирован. Понятно, это все можно тоже вырезать, но пусть этим занимаются те, кому охота.</p>

<p>Конечно, айпад - это весьма дорогая читалка книг, есть альтернативы, но сам подход электронных книг - это какой-то нереальный скачок вперед.</p>

<p>Жаль, что почти нет изданий на русском языке, которые продавались бы в нормальном электронном виде, а не были бы уродливыми сканами с бумажных копий.</p>

<p><strong>UPDATE</strong>: Совсем забыл. Для чтения книг в CHM-формате тоже есть хорошее приложение для айпада.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Моя первая программа на Эрланге]]></title>
    <link href="http://demin.ws/blog/russian/2010/09/12/my-first-program-in-erlang/"/>
    <updated>2010-09-12T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/09/12/my-first-program-in-erlang/</id>
    <content type="html"><![CDATA[<p>Решал я тут одну <a href="http://acmp.ru/index.asp?main=task&amp;id_task=176">красивую задачу</a>. Решение - рекурсивная функция, динамическое программирование.
Для эксперимента написал свою первую программу на Эрланге как решение этой задачи.</p>

<p>Вот оригинал на C++ (рекурсия с кешированием):</p>

<pre class="hl">
bignum <span class="hl kwd">f</span><span class="hl opt">(</span><span class="hl kwb">int</span> n<span class="hl opt">,</span> <span class="hl kwb">int</span> k<span class="hl opt">,</span> <span class="hl kwb">int</span> t<span class="hl opt">,</span> <span class="hl kwb">int</span><span class="hl opt">&amp;</span> K<span class="hl opt">,</span> vector<span class="hl opt">&lt;</span>vector<span class="hl opt">&lt;</span>vector<span class="hl opt">&lt;</span>bignum<span class="hl opt">&gt; &gt; &gt;&amp;</span> dp<span class="hl opt">) {</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>n <span class="hl opt">==</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> k <span class="hl opt">==</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> t <span class="hl opt">==</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">return</span> <span class="hl num">1</span><span class="hl opt">;</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>n <span class="hl opt">==</span> <span class="hl num">0</span> <span class="hl opt">||</span> k <span class="hl opt">&lt;</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>

  <span class="hl kwa">if</span> <span class="hl opt">(!(</span>dp<span class="hl opt">[</span>t<span class="hl opt">][</span>n<span class="hl opt">][</span>k<span class="hl opt">] == -</span><span class="hl num">1</span><span class="hl opt">))</span> <span class="hl kwa">return</span> dp<span class="hl opt">[</span>t<span class="hl opt">][</span>n<span class="hl opt">][</span>k<span class="hl opt">];</span>

  bignum ans <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>

  <span class="hl kwa">if</span> <span class="hl opt">(</span>k <span class="hl opt">&lt;</span> K<span class="hl opt">) {</span>
    ans <span class="hl opt">=</span> ans <span class="hl opt">+</span> <span class="hl kwd">f</span><span class="hl opt">(</span>n <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">,</span> k <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">,</span> t<span class="hl opt">,</span> K<span class="hl opt">,</span> dp<span class="hl opt">);</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>t <span class="hl opt">==</span> <span class="hl num">1</span> <span class="hl opt">|| (</span>t <span class="hl opt">==</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> k <span class="hl opt">&lt;</span> K <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">))</span>
      ans <span class="hl opt">=</span> ans <span class="hl opt">+</span> <span class="hl kwd">f</span><span class="hl opt">(</span>n <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">,</span> k <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">,</span> t<span class="hl opt">,</span> K<span class="hl opt">,</span> dp<span class="hl opt">);</span>
  <span class="hl opt">}</span>

  <span class="hl kwa">if</span> <span class="hl opt">(</span>t <span class="hl opt">==</span> <span class="hl num">1</span> <span class="hl opt">&amp;&amp;</span> k <span class="hl opt">==</span> K<span class="hl opt">) {</span>
    ans <span class="hl opt">=</span> ans <span class="hl opt">+</span> <span class="hl kwd">f</span><span class="hl opt">(</span>n <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">,</span> k <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> K<span class="hl opt">,</span> dp<span class="hl opt">);</span>
    ans <span class="hl opt">=</span> ans <span class="hl opt">+</span> <span class="hl kwd">f</span><span class="hl opt">(</span>n <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">,</span> k <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> K<span class="hl opt">,</span> dp<span class="hl opt">);</span>
  <span class="hl opt">}</span>

  dp<span class="hl opt">[</span>t<span class="hl opt">][</span>n<span class="hl opt">][</span>k<span class="hl opt">] =</span> ans<span class="hl opt">;</span>
  <span class="hl kwa">return</span> ans<span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>А теперь Эрланг:</p>

<pre class="hl">
<span class="hl kwd">main</span><span class="hl opt">(</span>_<span class="hl opt">) -&gt;</span>
  N <span class="hl opt">=</span> <span class="hl num">50</span><span class="hl opt">,</span> K <span class="hl opt">=</span> <span class="hl num">25</span><span class="hl opt">,</span>
  <span class="hl kwc">io</span><span class="hl opt">:</span><span class="hl kwd">format</span><span class="hl opt">(</span><span class="hl str">&quot;~w</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">, [</span><span class="hl kwd">rbs</span><span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">*</span>N<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> K<span class="hl opt">)]).</span>

<span class="hl kwd">rbs</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> _<span class="hl opt">) -&gt;</span> <span class="hl num">1</span><span class="hl opt">;</span>
<span class="hl kwd">rbs</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> _<span class="hl opt">,</span> _<span class="hl opt">,</span> _<span class="hl opt">) -&gt;</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl kwd">rbs</span><span class="hl opt">(</span>_<span class="hl opt">,</span> K<span class="hl opt">,</span> _<span class="hl opt">,</span> _<span class="hl opt">)</span> <span class="hl kwa">when</span> K <span class="hl opt">&lt;</span> <span class="hl num">0</span> <span class="hl opt">-&gt;</span> <span class="hl num">0</span><span class="hl opt">;</span>

<span class="hl kwd">rbs</span><span class="hl opt">(</span>N<span class="hl opt">,</span> K<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> MAX_K<span class="hl opt">) -&gt;</span>
  <span class="hl kwa">if</span> 
    K <span class="hl opt">&lt;</span> MAX_K<span class="hl opt">-</span><span class="hl num">1</span> <span class="hl opt">-&gt;</span> <span class="hl kwd">rbs</span><span class="hl opt">(</span>N<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span> K<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> MAX_K<span class="hl opt">) +</span> <span class="hl kwd">rbs</span><span class="hl opt">(</span>N<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span> K<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> MAX_K<span class="hl opt">);</span>
    K <span class="hl opt">&lt;</span> MAX_K   <span class="hl opt">-&gt;</span> <span class="hl kwd">rbs</span><span class="hl opt">(</span>N<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span> K<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> MAX_K<span class="hl opt">);</span>
    K <span class="hl opt">=:=</span> MAX_K <span class="hl opt">-&gt;</span> <span class="hl num">0</span>
  <span class="hl kwa">end</span><span class="hl opt">;</span>

<span class="hl kwd">rbs</span><span class="hl opt">(</span>N<span class="hl opt">,</span> K<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> MAX_K<span class="hl opt">) -&gt;</span>
  <span class="hl kwa">if</span>
    K <span class="hl opt">&lt;</span> MAX_K   <span class="hl opt">-&gt;</span> <span class="hl kwd">rbs</span><span class="hl opt">(</span>N<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span> K<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> MAX_K<span class="hl opt">) +</span> <span class="hl kwd">rbs</span><span class="hl opt">(</span>N<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span> K<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> MAX_K<span class="hl opt">);</span>
    K <span class="hl opt">=:=</span> MAX_K <span class="hl opt">-&gt;</span> <span class="hl kwd">rbs</span><span class="hl opt">(</span>N<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span> K<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> MAX_K<span class="hl opt">) +</span> <span class="hl kwd">rbs</span><span class="hl opt">(</span>N<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span> K<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> MAX_K<span class="hl opt">)</span>
  <span class="hl kwa">end</span><span class="hl opt">.</span>
</pre>

<p>Красиво, а?</p>

<p>Но вот увы, кеширование результатов пришлось делать тоже вручную, так как без нее программа имеет экспоненциальное время. Так что итоговый вариант выглядит так:</p>

<pre class="hl">
#<span class="hl opt">!/</span>usr<span class="hl opt">/</span>bin<span class="hl opt">/</span>env escript

<span class="hl kwd">main</span><span class="hl opt">(</span>_<span class="hl opt">) -&gt;</span>
  N <span class="hl opt">=</span> <span class="hl num">50</span><span class="hl opt">,</span> K <span class="hl opt">=</span> <span class="hl num">25</span><span class="hl opt">,</span>
  <span class="hl kwc">io</span><span class="hl opt">:</span><span class="hl kwd">format</span><span class="hl opt">(</span><span class="hl str">&quot;~w</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">, [</span><span class="hl kwd">rbs</span><span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">*</span>N<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> K<span class="hl opt">)]).</span>

<span class="hl kwd">rbs</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> _<span class="hl opt">) -&gt;</span> <span class="hl num">1</span><span class="hl opt">;</span>
<span class="hl kwd">rbs</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> _<span class="hl opt">,</span> _<span class="hl opt">,</span> _<span class="hl opt">) -&gt;</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl kwd">rbs</span><span class="hl opt">(</span>_<span class="hl opt">,</span> K<span class="hl opt">,</span> _<span class="hl opt">,</span> _<span class="hl opt">)</span> <span class="hl kwa">when</span> K <span class="hl opt">&lt;</span> <span class="hl num">0</span> <span class="hl opt">-&gt;</span> <span class="hl num">0</span><span class="hl opt">;</span>

<span class="hl kwd">rbs</span><span class="hl opt">(</span>N<span class="hl opt">,</span> K<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> MAX_K<span class="hl opt">) -&gt;</span>
  <span class="hl kwa">if</span> 
    K <span class="hl opt">&lt;</span> MAX_K<span class="hl opt">-</span><span class="hl num">1</span> <span class="hl opt">-&gt;</span> <span class="hl kwd">rbs_memo</span><span class="hl opt">(</span>N<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span> K<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> MAX_K<span class="hl opt">) +</span> <span class="hl kwd">rbs_memo</span><span class="hl opt">(</span>N<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span> K<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> MAX_K<span class="hl opt">);</span>
    K <span class="hl opt">&lt;</span> MAX_K   <span class="hl opt">-&gt;</span> <span class="hl kwd">rbs_memo</span><span class="hl opt">(</span>N<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span> K<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> MAX_K<span class="hl opt">);</span>
    K <span class="hl opt">=:=</span> MAX_K <span class="hl opt">-&gt;</span> <span class="hl num">0</span>
  <span class="hl kwa">end</span><span class="hl opt">;</span>

<span class="hl kwd">rbs</span><span class="hl opt">(</span>N<span class="hl opt">,</span> K<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> MAX_K<span class="hl opt">) -&gt;</span>
  <span class="hl kwa">if</span>
    K <span class="hl opt">&lt;</span> MAX_K   <span class="hl opt">-&gt;</span> <span class="hl kwd">rbs_memo</span><span class="hl opt">(</span>N<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span> K<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> MAX_K<span class="hl opt">) +</span> <span class="hl kwd">rbs_memo</span><span class="hl opt">(</span>N<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span> K<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> MAX_K<span class="hl opt">);</span>
    K <span class="hl opt">=:=</span> MAX_K <span class="hl opt">-&gt;</span> <span class="hl kwd">rbs_memo</span><span class="hl opt">(</span>N<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span> K<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> MAX_K<span class="hl opt">) +</span> <span class="hl kwd">rbs_memo</span><span class="hl opt">(</span>N<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span> K<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> MAX_K<span class="hl opt">)</span>
  <span class="hl kwa">end</span><span class="hl opt">.</span>

<span class="hl kwd">rbs_memo</span><span class="hl opt">(</span>N<span class="hl opt">,</span> K<span class="hl opt">,</span> T<span class="hl opt">,</span> MAX_K<span class="hl opt">) -&gt;</span>
  Name <span class="hl opt">=</span> rbs<span class="hl opt">,</span>
  <span class="hl kwa">case</span> <span class="hl kwc">ets</span><span class="hl opt">:</span><span class="hl kwd">info</span><span class="hl opt">(</span>Name<span class="hl opt">)</span> <span class="hl kwa">of</span>
    undefined <span class="hl opt">-&gt;</span>
      <span class="hl kwc">ets</span><span class="hl opt">:</span><span class="hl kwd">new</span><span class="hl opt">(</span>Name<span class="hl opt">, [</span>public<span class="hl opt">,</span> named_table<span class="hl opt">]);</span>
    _ <span class="hl opt">-&gt;</span> true
  <span class="hl kwa">end</span><span class="hl opt">,</span>
  Key <span class="hl opt">= {</span>N<span class="hl opt">,</span> K<span class="hl opt">,</span> T<span class="hl opt">,</span> MAX_K<span class="hl opt">},</span>
  <span class="hl kwa">case</span> <span class="hl kwc">ets</span><span class="hl opt">:</span><span class="hl kwd">lookup</span><span class="hl opt">(</span>Name<span class="hl opt">,</span> Key<span class="hl opt">)</span> <span class="hl kwa">of</span>
    <span class="hl opt">[] -&gt;</span>
      Val <span class="hl opt">=</span> <span class="hl kwd">rbs</span><span class="hl opt">(</span>N<span class="hl opt">,</span> K<span class="hl opt">,</span> T<span class="hl opt">,</span> MAX_K<span class="hl opt">),</span>
      <span class="hl kwc">ets</span><span class="hl opt">:</span><span class="hl kwd">insert</span><span class="hl opt">(</span>Name<span class="hl opt">, {</span>Key<span class="hl opt">,</span> Val<span class="hl opt">}),</span>
      Val<span class="hl opt">;</span>
    <span class="hl opt">[{</span>_<span class="hl opt">,</span> Val<span class="hl opt">}] -&gt;</span> Val<span class="hl opt">;</span>
    Else <span class="hl opt">-&gt;</span> Else
  <span class="hl kwa">end</span><span class="hl opt">.</span>
</pre>

<p>Странно, ведь можно было бы заложить кеширование прямо в языке. Ведь когда функция вызывается повторно с теми же самыми аргументами, то очевидно, что результат будет такой же (ибо Эрланг - это &ldquo;чистый&rdquo; функциональный язык, и side effects тут исключены). Но в целом функция кеширования весьма универсальна и ее можно быстро адаптировать для других ситуаций.</p>

<p>По времени выполнения эрланговый вариант не уступает C++. При это надо учесть, что Эрланге по умочанию арифметика &ldquo;длинная&rdquo;, а в С++ мне пришлось использовать доморощенный класс <code>bignum</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chaos Construction 2010]]></title>
    <link href="http://demin.ws/blog/russian/2010/08/31/chaos-construction-2010/"/>
    <updated>2010-08-31T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/08/31/chaos-construction-2010/</id>
    <content type="html"><![CDATA[<p>Закончился в Питере очередной <a href="http://cc.org.ru/10/">Chaos Construction</a>. Жаль, не удалось побывать самому.</p>

<p>Один из конкурсов, от которого меня реально вставляет – это <a href="http://chaosconstructions.blogspot.com/2010/08/realtime-chip-hack_2632.html">Realtime Chip Hack</a>.</p>

<p>Вкратце суть: вам дается тестер, пара проводков и светодиодов. С помощью данного нехитрого набора требуется в некоторой реальной работающей схеме определить тип микросхемы, маркировка которой спилена. Еще как вариант – дается устройство-индикатор обратного отсчета (типа бомба). И надо с таким же набором юного сапера ее обезвредить (перерезать дорожку, или наоборот добавить проводок). Но, например, неверное действие может ускорить «бомбу» или просто сразу ее взорвать.</p>

<p>Я однозначно нахожу это крайне близкой темой к reverse-engineer’ингу, где надо просто взять и разобраться, как программа, например, проверяет ключ, и написать ключелку или битхак.</p>

<p>И прелесть тут в том, что все, что отделяет тебя от победы – это не мегабайты кода, а всего 1-2 байтика (или проводочка), которые найти и исправить.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Снова головоломки или сайт hackquest.com]]></title>
    <link href="http://demin.ws/blog/russian/2010/08/26/hackquest-com/"/>
    <updated>2010-08-26T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/08/26/hackquest-com/</id>
    <content type="html"><![CDATA[<p>Любое общение с собратьями по разуму традиционно приносит новые и новые интересные штучки.</p>

<p>На этот раз это сайт <a href="http://hackquest.com">hackquest.com</a>. Не знаю, сколько он уже существует, но я только сейчас о нем узнал.</p>

<p>Итак, это сборник разнообразных головоломок на около компьютерные тематики: логика, JavaScript, Java, reverse engineering, криптография, интернет, взломы, Flash, программирование и т.д.</p>

<p>Я вчера <a href="http://hackquest.com/user.php?op=userinfo&amp;uname=begoon">посидел пару часов и порешал задачки</a> из своей любимой темы reverse engineering&rsquo;а. Получил удовольствие.</p>

<p>Рекомендую.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Роб Пайк критикует С++ и Java]]></title>
    <link href="http://demin.ws/blog/russian/2010/08/19/rob-pike-criticise-cpp-and-java/"/>
    <updated>2010-08-19T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/08/19/rob-pike-criticise-cpp-and-java/</id>
    <content type="html"><![CDATA[<p>Из этого небольшого видео, где автор и идеолог языка Go Роб Пайк делится своим недовольством языками С++ и Java, я вынес для себя классную мысль: в С++ и Java очень &ldquo;важно&rdquo; знать и использовать паттерны (какой уважающий себя программист на этих языках не знает хотя бы одного паттерна?), но наличие паттернов (а особенно их обилие) - это отрицательное свойство! То есть знание языка как такового - это еще полдела, так как затем надо еще и знать &ldquo;правильные&rdquo; паттерны.</p>

<p>В общем, я становлюсь фанатом этого дядьки.</p>

<p><strong>Update</strong>: А комментарий с семью различными типами умных указателей в Бусте - это вообще шедевр.</p>

<iframe width="640" height="385" src="https://www.youtube.com/embed/5kj5ApnhPAE?color=white&theme=light"></iframe>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Решение кубика Рубика максимум на 20 шагов]]></title>
    <link href="http://demin.ws/blog/russian/2010/08/10/solving-rubik-cube-in-20-steps/"/>
    <updated>2010-08-10T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/08/10/solving-rubik-cube-in-20-steps/</id>
    <content type="html"><![CDATA[<p>Вроде как поставлена новая планка в алгоритме Бога для кубика Рубика. 35 машинолет были потрачены, чтобы доказать, что для решения любой позиции кубика надо не более 20 движений.</p>

<p><a href="http://www.cube20.org/">http://www.cube20.org/</a></p>

<p>Update: У нас тут есть свои блумберговские кубики, на грани которых кроме цвета нанесена корпоративная атрибутика. Подобное &ldquo;улучшение&rdquo; сильно осложняет сборку, так как необходимо правильно сориентировать остов до начала сборки слоев. Причем данная ориентация может съехать при неосторожной попытке сборки начального слоя.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Странные скобки в С++]]></title>
    <link href="http://demin.ws/blog/russian/2010/08/08/weird-brackets-in-cpp/"/>
    <updated>2010-08-08T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/08/08/weird-brackets-in-cpp/</id>
    <content type="html"><![CDATA[<p>Недавно более часа потратил на поиск проблемы в куске кода, упрощенный вариант которого привожу ниже:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;iostream&gt;</span>
<span class="hl kwb">int</span> x<span class="hl opt">;</span>
<span class="hl kwb">struct</span> A <span class="hl opt">{</span>
  <span class="hl kwd">A</span><span class="hl opt">(</span><span class="hl kwb">int</span> a<span class="hl opt">) {</span>
    x <span class="hl opt">=</span> a<span class="hl opt">;</span>
  <span class="hl opt">}</span>
<span class="hl opt">};</span>
<span class="hl kwb">struct</span> B <span class="hl opt">{</span>
  <span class="hl kwd">B</span><span class="hl opt">(</span>A a<span class="hl opt">) {</span>
    A local_a <span class="hl opt">=</span> a<span class="hl opt">;</span>
  <span class="hl opt">}</span>
<span class="hl opt">};</span>
<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
  x <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;Case #0: &quot;</span> <span class="hl opt">&lt;&lt;</span> x <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  B <span class="hl kwd">b1</span><span class="hl opt">(</span><span class="hl kwd">A</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">));</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;Case #1: &quot;</span> <span class="hl opt">&lt;&lt;</span> x <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  <span class="hl kwb">int</span> t<span class="hl opt">;</span>
  t <span class="hl opt">=</span> <span class="hl num">2</span><span class="hl opt">;</span>
  B <span class="hl kwd">b2</span><span class="hl opt">(</span><span class="hl kwd">A</span><span class="hl opt">(</span>t<span class="hl opt">));</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;Case #2: &quot;</span> <span class="hl opt">&lt;&lt;</span> x <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  t <span class="hl opt">=</span> <span class="hl num">3</span><span class="hl opt">;</span>
  B <span class="hl kwd">b3</span><span class="hl opt">((</span><span class="hl kwd">A</span><span class="hl opt">(</span>t<span class="hl opt">)));</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;Case #3: &quot;</span> <span class="hl opt">&lt;&lt;</span> x <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Как вы думаете, что должна вывести эта программа? Числа 0, 1, 2 и 3 последовательно для каждого случая?</p>

<p>А она печатает:</p>

<pre><code>Case #0: 0
Case #1: 1
Case #2: 1
Case #3: 3
</code></pre>

<p>Почему для случая #2 не произошло присваивание? Куда делась двойка?</p>

<p><a href="http://demin.ws/blog/russian/2009/02/09/dark-corners-of-cpp/">Ответ на этот вопрос</a> кроется в наличии рудиментов языка С в грамматике С++.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Поиск подстроки в строке: алгоритм Кнута-Морриса-Пратта]]></title>
    <link href="http://demin.ws/blog/russian/2010/08/03/knuth-morris-pratt/"/>
    <updated>2010-08-03T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/08/03/knuth-morris-pratt/</id>
    <content type="html"><![CDATA[<p>Мне понравилась идея <a href="http://alenacpp.blogspot.com/2010/07/blog-post.html">недели борьбы с велосипедизмом</a>, посему внесу свою лепту.</p>

<p>Один из частых вопросов, которые задают у нас в Блумберге на интервью в плане так называемого coding exercise (это когда надо на бумаге или на доске написать почти реальный кусок кода) - это поиск строки в подстроке. Это абсолютно жизненная задача.</p>

<p>Подавляющее число людей пишут первое, что приходит в голову - это два вложенных цикла, когда искомая строка последовательно &ldquo;прикладывается&rdquo; с каждой позиции исходной строки. Такой подход дает сложность <code>O(M*N)</code>, и, очевидно, что в жизни он нереален, если строки более менее длинные. Хотя все при этом знают, что любой hex-вьювер спокойно ищет в огромных файлах за явно линейное время.</p>

<p>Итак, для эффективного поиска строки в подстроке есть алгоритм <a href="http://ru.wikipedia.org/wiki/%D0%90%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC_%D0%9A%D0%BD%D1%83%D1%82%D0%B0_%E2%80%94_%D0%9C%D0%BE%D1%80%D1%80%D0%B8%D1%81%D0%B0_%E2%80%94_%D0%9F%D1%80%D0%B0%D1%82%D1%82%D0%B0">Кнута-Морриса-Пратта</a>, который решает проблему не за <code>O(N*M)</code>, а за <code>O(N+M)</code>.</p>

<p>Построенный на <a href="http://ru.wikipedia.org/wiki/%D0%9F%D1%80%D0%B5%D1%84%D0%B8%D0%BA%D1%81-%D1%84%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D1%8F">префикс-функции</a>, данный алгоритм является классичесим примером динамического программирования, когда результаты решения задачи малой размерности используются для решения задачи большей размерности.</p>

<p>P.S. Сразу скажу, у нас никто не просит по памяти писать КМП. И если человек после написания простого <code>O(N^2)</code> решения также скажет, что есть метод быстрее, и сможет описать его идею - этого вполне достаточно.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[volatile - это очень сильный модификатор в С++]]></title>
    <link href="http://demin.ws/blog/russian/2010/08/01/volatile-is-very-strong-modifier/"/>
    <updated>2010-08-01T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/08/01/volatile-is-very-strong-modifier/</id>
    <content type="html"><![CDATA[<p>Как-то по многим блогам эта тема недавно пробегала, но надо отдать должное, вопрос почему эта программа, будучи откомпилированной в Студии, печатает &ldquo;1&rdquo; вместо &ldquo;0&rdquo;, озадачивает даже опытных программистов на С++ (или по крайней мере они дают неправильное объяснение причины происходящего).</p>

<pre class="hl">
<span class="hl ppc">#include &lt;iostream&gt;</span>
<span class="hl kwc">volatile</span> <span class="hl kwb">const char</span><span class="hl opt">*</span> p <span class="hl opt">=</span> <span class="hl str">&quot;0&quot;</span><span class="hl opt">;</span>
<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> p <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Для получение схожего эффекта в GCC надо заменить &ldquo;0&rdquo; на &ldquo;false&rdquo;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Блог о Великобритании глазами программиста]]></title>
    <link href="http://demin.ws/blog/russian/2010/07/29/uk-through-eyes-of-programmer/"/>
    <updated>2010-07-29T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/07/29/uk-through-eyes-of-programmer/</id>
    <content type="html"><![CDATA[<p>Завел <a href="http://english-eggs.blogspot.com/">отдельный блог</a> для моих субъективных заметок о Великобритании.</p>

<p>В этом блоге я буду публиковать мои личные субъективные заметки на различные аспекты жизни в Великобритании, начиная от штучек английского языка и заканчивая местными прелестями или маразмами, перемешанными с особенностями национального характера.</p>

<p>Некоторые заметки были сделаны уже давно, но я планирую также публиковать новое по ходу поступления. Источники - люди, работа, газеты, телевизор, и, конечно, жизнь вокруг.</p>

<p>Все будет рассматриваться, естественно, через призму оцифрованного мозга программиста, поэтому часть постов будет определенно про профессию программиста в Великобритании.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[О том, как я «ломал» RSA]]></title>
    <link href="http://demin.ws/blog/russian/2010/07/19/how-i-was-cracking-rsa/"/>
    <updated>2010-07-19T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/07/19/how-i-was-cracking-rsa/</id>
    <content type="html"><![CDATA[<p>Решал я как-то <a href="http://acmp.ru/?main=task&amp;id_task=47">очередную задачу</a>:</p>

<p><em>Будем говорить, что число a лучше числа b, если сумма цифр a больше суммы цифр числа b, а в случае равенства сумм их цифр, если число a меньше числа b. Например, число 124 лучше числа 123, так как у первого из них сумма цифр равна семи, а у второго – шести. Также, число 3 лучше числа 111, так как у них равны суммы цифр, но первое из них меньше.</em></p>

<p><em>Дано число n (1 ≤ n ≤ 10^5). Найдите такой его делитель (само число n и единица считаются делителями числа n), который лучше любого другого делителя числа n.</em></p>

<p>Простая задача: ищем все делители n, у каждого делителя считаем сумму цифр, и среди найденного выделяем все делители с минимальной суммой, и уже среди них находим минимальное по значению. Просто надо аккуратно запрограммировать.</p>

<p>Я все сделал, и решение прошло.</p>

<p>Далее была <a href="http://acmp.ru/?main=task&amp;id_task=48">вторая задача</a>:</p>

<p><em>Будем говорить, что число a лучше числа b, если сумма цифр a больше суммы цифр числа b, а в случае равенства сумм их цифр, если число a меньше числа b. Например, число 124 лучше числа 123, так как у первого из них сумма цифр равна семи, а у второго — шести. Также, число 3 лучше числа 111, так как у них равны суммы цифр, но первое из них меньше.</em></p>

<p><em>Дано число n (1 ≤ n ≤ 10^5000). Найдите такой его делитель d (само число n и единица считаются делителями числа n), что любой другой делитель c числа n лучше, чем d.</em></p>

<p>По сути, такая же задача, что и предыдущая – просто нужно в паре мест поменять «больше» на «меньше» и наоборот. Я поменял, и на небольших тестах решение прошло.</p>

<p>Но тут я замечаю, что в это задаче верхнее ограничение на n какое-то очень большое. Я заменяют тип <code>int</code> на класс «длинной» арифметики (5000 тысяч знаков – пустяк, было и более) и пробую: на малых тестах работает, значит, алгоритм верный.</p>

<p>Посылаю решение, и конечно, получаю ответ «Time limit exceeded». После небольшого раздумья становится ясно, что слишком много надо считать, и подход в целом неправильный.</p>

<p>Пишу письмо <a href="http://www.topcoder.com/tc?module=MemberProfile&amp;cr=19825431">Leonid</a>’у с просьбой прояснить ситуацию.</p>

<p>Приходит ответ типа, что моя попытка, ища все делители громадного числа, взломать RSA брутборсом конечно похвальная, но исполнена жиденько, да и врядли она вообще под силу современным компьютерам. К тому я же ищу все делители, а не только простые, а их будет еще больше.</p>

<p>В итоге выяснилось, что данная задача решается не только без «длинной» арифметики, но даже и без короткой, одним циклом в пару строк. Просто надо понять, что за тип чисел просят найти.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Нулевые ссылки в С++]]></title>
    <link href="http://demin.ws/blog/russian/2010/07/19/null-references-in-cpp/"/>
    <updated>2010-07-19T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/07/19/null-references-in-cpp/</id>
    <content type="html"><![CDATA[<p>Началось с того, что мне предложили взглянуть некий на &ldquo;интересный&rdquo; код. Там было что-то вроде:</p>

<pre class="hl">
<span class="hl opt">...</span>
<span class="hl kwc">class</span> A <span class="hl opt">{</span> <span class="hl kwc">virtual</span> <span class="hl kwb">void</span> <span class="hl kwd">f</span><span class="hl opt">() {} };</span>
<span class="hl kwc">class</span> B <span class="hl opt">{};</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
  A a<span class="hl opt">;</span>
  <span class="hl kwa">try</span> <span class="hl opt">{</span>
    B<span class="hl opt">&amp;</span> b <span class="hl opt">=</span> <span class="hl kwa">dynamic_cast</span><span class="hl opt">&lt;</span>B<span class="hl opt">&amp;&gt;(</span>a<span class="hl opt">);</span>
    <span class="hl kwa">if</span> <span class="hl opt">(&amp;</span>b <span class="hl opt">==</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      <span class="hl slc">// ...</span>
    <span class="hl opt">}</span>
  <span class="hl opt">}</span> <span class="hl kwa">catch</span> <span class="hl opt">(...) {</span>
    std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;Got it!&quot;</span> <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  <span class="hl opt">}</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Я слегка выпал в осадок от уведенного, а в частности, от строки <code>if (&amp;b == 0) {</code>. До сего времени я пребывал в осознании факта, что ссылка в С++ либо существует и указывает на реальный объект, либо ее нет вообще. И если тут приведение типа к <code>B&amp;</code> не срабатывает, то будет исключение, и управление все равно улетит в другое место, и проверять как-либо <code>b</code> бессмысленно.</p>

<p>Но тут мне объяснили, что в данном конкретном случае код может компилироваться, когда у компилятора выключена поддержка исключений. И эта проверка как раз защита от этого.</p>

<p>Ну да ладно. Оставим это на откуп странным компиляторам на AIX и SUN, и людям, использующим исключения, но почему-то компилирующие с принудительным их выключением в компиляторе.</p>

<p>Меня заинтересовал другой вопрос: как вообще ссылка может существовать отдельно от объекта. Оказывается, может:</p>

<pre class="hl">
<span class="hl kwb">int</span><span class="hl opt">&amp;</span> a <span class="hl opt">= *(</span><span class="hl kwb">int</span><span class="hl opt">*)</span><span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">() {</span> a <span class="hl opt">=</span> <span class="hl num">123</span><span class="hl opt">; }</span>
</pre>

<p>Данный код прекрасно компилируется Студией (2010) и компилятором SUN (этот хоть предупреждение выдает), и также прекрасно падается при запуске по понятой причине.</p>

<p>Вы получили ссылку в качестве параметра и думаете, что она лучше чем указатель, так как ее не надо проверять на <code>NULL</code>? Зря!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Лекции из MIT]]></title>
    <link href="http://demin.ws/blog/russian/2010/07/09/mit-lectures/"/>
    <updated>2010-07-09T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/07/09/mit-lectures/</id>
    <content type="html"><![CDATA[<p>На сайте MITа <a href="http://ocw.mit.edu/courses/audio-video-courses">лежит множество лекций из различных разделов науки</a>. Например, раздел <a href="http://ocw.mit.edu/courses/audio-video-courses/#electrical-engineering-and-computer-science">Computer science</a>.</p>

<p>В частности, курс <a href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-046j-introduction-to-algorithms-sma-5503-fall-2005/video-lectures/">Introduction to Algorithms</a>.</p>

<p>Все сделано максимально удобно: в добавок к видео (некоторые идут сразу с субтитрами) еще есть и транскрипт каждой лекции.</p>

<p>Я еще рекомендую заценить <a href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-046j-introduction-to-algorithms-sma-5503-fall-2005/exams/">примеры экзаменационных задач</a>.</p>

<p>Честно говоря, берет зависть, насколько там все удобно сделано для учебы.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Неконстантные ссылки в аргументах функций]]></title>
    <link href="http://demin.ws/blog/russian/2010/07/01/non-const-references-in-arguments/"/>
    <updated>2010-07-01T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/07/01/non-const-references-in-arguments/</id>
    <content type="html"><![CDATA[<p>У меня есть определенная позиция на использование неконстантных ссылок в С++ в аргументах функций – я стараюсь не использовать неконстантные ссылки для передачи аргументов, которые будут изменены внутри вызываемого блока.</p>

<p>Например, вместо:</p>

<pre class="hl">
<span class="hl kwb">void</span> <span class="hl kwd">f</span><span class="hl opt">(</span>T<span class="hl opt">&amp;</span> t<span class="hl opt">) {</span>
  <span class="hl slc">// change ‘t’</span>
<span class="hl opt">}</span>
<span class="hl opt">...</span>
T a<span class="hl opt">;</span>
<span class="hl kwd">f</span><span class="hl opt">(</span>a<span class="hl opt">);</span>
</pre>

<p>я предпочту передачу по указателю:</p>

<pre class="hl">
<span class="hl kwb">void</span> <span class="hl kwd">f</span><span class="hl opt">(</span>T<span class="hl opt">*</span> t<span class="hl opt">) {</span>
  <span class="hl slc">// change ‘*t’</span>
<span class="hl opt">}</span>
<span class="hl opt">...</span>
T a<span class="hl opt">;</span>
<span class="hl kwd">f</span><span class="hl opt">(&amp;</span>a<span class="hl opt">);</span>
</pre>

<p>Мой основной мотив – наглядность в вызывающем коде. Когда я вижу <code>&amp;</code> перед аргументом, я точно знаю, что это возвращаемый параметр, и он может измениться после вызова. И мне не надо постоянно помнить, какие именно агрументы у этой функции ссылки, а какие нет.</p>

<p>Конечно тут есть и минусы: корявость текста в вызываемом коде, так как надо таскать за собой <code>*</code> или <code>-&gt;</code>. Также неплохо бы проверять указатель на ноль.</p>

<p>А у вас есть предпочтения в этом вопросе?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Макросы для определения компилятора, библиотеки, операционной системы или архитектуры]]></title>
    <link href="http://demin.ws/blog/russian/2010/06/26/macros-to-determine-compiler-library-os-architecture/"/>
    <updated>2010-06-26T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/06/26/macros-to-determine-compiler-library-os-architecture/</id>
    <content type="html"><![CDATA[<p>Очень полезный проект - <a href="http://predef.sourceforge.net/">http://predef.sourceforge.net/</a>.</p>

<p>В одном месте собрано большое количество макросов для определения <a href="http://predef.sourceforge.net/precomp.html">компилятора</a>, <a href="http://predef.sourceforge.net/prelib.html">библиотеки</a>, <a href="http://predef.sourceforge.net/preos.html">операционной системы</a>, <a href="http://predef.sourceforge.net/prearch.html">архитектуры</a> и <a href="http://predef.sourceforge.net/prestd.html">стандарта языка</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bloomberg: Вакансии]]></title>
    <link href="http://demin.ws/blog/russian/2010/06/26/roles-at-bloomberg-trading-systems/"/>
    <updated>2010-06-26T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/06/26/roles-at-bloomberg-trading-systems/</id>
    <content type="html"><![CDATA[<p>К слову сказать, компания <a href="http://www.bloomberg.com/">Bloomberg</a>, где я работаю, сейчас имеет приличное количество открытых вакансий для интернов, недавних выпускников и, конечно, матерых профи.</p>

<p>Например, можно зайти в наш <a href="http://careers.bloomberg.com/hire/experiencesearch.html">раздел вакансий</a>, указать в «Job Function» категорию «Research and Development» (R&amp;D) и получить список открытых позиций для программистов во всех наших офисах.</p>

<p>Я работаю в Лондонском офисе, и поэтому многое из этого поста относится к лондонскому R&amp;D, но в целом, все верно и для остальных офисов.</p>

<p>Например, конкретные вакансии в подразделение «Trading Systems», где работаю я: <a href="http://careers.bloomberg.com/hire/jobs/job24951.html">раз</a>, <a href="http://careers.bloomberg.com/hire/jobs/job17778.html">два</a> и <a href="http://careers.bloomberg.com/hire/jobs/job25252.html">три</a>.</p>

<p>Что важно, по многим вакансиям (например, нашим) не требуют специальных знаний из области финансов, трейдинга и т.д. Если они есть – замечательно, но в целом мы просто ищем грамотных инженеров, или по-русски говоря, программистов.</p>

<p>Подавляющее количество позиций – это С++ и UNIX, но, например, в мобильную команду (iPhone/iPad/Android/Blackberry) также <a href="http://careers.bloomberg.com/hire/jobs/job24167.html">приглашают</a> специалистов по Objective-C и Java.</p>

<p>Я координирую процесс найма в нашу группу, поэтому знаю процесс чуть более глубоко, и могу подсказать детали интересующимся.</p>

<p>Как подать резюме? Нет ничего проще – просто послать его через сайт. Многие думают, что такие заявки никто не читает – это неверно. Я сам устроился точно таким же образом. Все читают. Другое дело, часть отсеивается на стадии начального анализа присланных резюме, хотя, я думаю, что на этой стадии отсеивают только полностью неадекватные заявки, когда люди даже не пытаются прочитать требования и хоть как-то отразить это в своем резюме.</p>

<p>Какие шансы пройти? Ничего гарантировать нельзя, но если у вас 4.0 и более баллов на <a href="http://www.brainbench.com/">Brainbench</a> на <a href="http://www.brainbench.com/xml/bb/common/testcenter/taketest.xml?testId=54">тесте по С++</a> (не забудьте дать ссылку на профайл в резюме) и более чем пятилетний постоянный опыт больших проектов на С++ , то шанс добраться до телефонного интервью весьма велик. А если вдобавок у вас есть рейтинг на TopCoder’e, CodeForces или что-то в этом роде (также не забудьте дать ссылку), то шансы и на личном интервью очень даже неплохие.</p>

<p>Теперь самая интересная часть марлезонского балета – а как это все работает для граждан России и бывших соцреспублик, у которых нет европаспорта? Могу сказать, что Блумберг может предоставить визовое спонсорство для понравившегося кандидата.</p>

<p>Не надо бояться. Даже телефонное интервью – это хороший опыт. Те, кто никогда этого не делал на английском, но хочет – однозначно стоит попробовать.</p>

<p>Зарплаты? Блумберг всегда адекватен к текущему уровне зарплат на рынке. Насколько я знаю, сейчас зарплаты программистов в Лондоне могут колебаться от 35K до 75K фунтов в год (50K-100K USD) минус 20% налогов Великобритании. Вообще, для ориентации по заплатам и вакансиям можно посетить <a href="http://www.jobserve.co.uk/">jobserve.co.uk</a> или <a href="http://monster.co.uk">monster.co.uk</a>.</p>

<p>А как вообще работается в Блумберге? Интересно (объемы внутренних технологий объять невозможно), динамично (недельные релизы прямиком в онлайновый продакш), разнообразно (тренинги, возможность не уходить в менеджмент, если не хочется), престижно.</p>

<p>Ну и под занавес, как говорится, чтобы два раза не вставать – у нас в Лондонском офисе 22-го июля будет <a href="http://www.bloomberg.com/promo/Jul/39176079/agenda.pdf">Bloomberg Technology Open Evening</a> – день открытых дверей для разработчиков. Однозначно понимаю, что не все россияне могут так чисто взять и на денек ради этого сюда приехать, на всякий случай – вдруг кому будет-таки полезно, и кто захочет прийти – могу сделать инвайт (пишите на alexander@demin.ws).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Отладчик в Visual Studio 2010]]></title>
    <link href="http://demin.ws/blog/russian/2010/06/21/visual-studio-2010-debugger/"/>
    <updated>2010-06-21T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/06/21/visual-studio-2010-debugger/</id>
    <content type="html"><![CDATA[<p>В отладчике Visual Studio 2010 появилась просто фантастическая штука - отображение трассируемой переменной не где-то в особом окне, а прямо на тексте программы. Это позволяет обращать внимание на переменную, только когда доходишь до ее места в программе.</p>

<p><img src="http://demin.ws/images/blog/vs2010-debugger-variables-view.png" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Живая карта Лондонского метро]]></title>
    <link href="http://demin.ws/blog/russian/2010/06/21/london-tube-live-map/"/>
    <updated>2010-06-21T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/06/21/london-tube-live-map/</id>
    <content type="html"><![CDATA[<p>Не уверен, что это будет кому-либо полезно за пределами Лондона, но тут меня поразил сам факт существования подобного сервиса.</p>

<p>Живая карта Лондонского метро - <a href="http://traintimes.org.uk/map/tube/">http://traintimes.org.uk/map/tube/</a></p>

<p>Тут видно движение отдельных поездов.</p>

<p>И опять-таки, идея нереволюционная. Но! Самое важное, что такой сервис есть благодаря <a href="http://data.london.gov.uk/apibeta">public API</a>, официально поддерживаемый <a href="http://www.tfl.gov.uk/tube/">Лондонским Метро</a>, которая является полугосударственной структурой. Теперь ясно, откуда такое изобилие приложений для айфона и андроида, предоставляющих разнообразную on-line информацию о метро. Я то думал, они просто парсят страницы официального сайт, а тут, оказывает, все дается на тарелочке.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Блог на английском для носителя русского языка?]]></title>
    <link href="http://demin.ws/blog/russian/2010/06/20/blogging-in-english-for-non-native-speaker/"/>
    <updated>2010-06-20T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/06/20/blogging-in-english-for-non-native-speaker/</id>
    <content type="html"><![CDATA[<p>Вы пробовали вести блог на английском?</p>

<p>Я уже долгое время тщетно пытаюсь это делать. Но дело как-то не идет. Каждый пост занимает в разы больше времени, посты приходится укорачивать, упрощать язык (&ldquo;эдак&rdquo; уже не завернешь). А самое, что внутренне неприятно - я четко вижу разницу в качестве языка. Вместо более-менее живого и, надеюсь, интересного, способа выражения мыслей, что я себе могу позволить на русском (хех, все-таки 30 лет практики), на английском получается какое-то сухое школькое сочинение, часто с неочевидными ошибками. И уж точно выглядещее, как НЕклево..</p>

<p>Кстати, а вы знаете интересные блоги на английском (хотя бы технические), которые пишут носители русского? (конечно, если человек вырос в английской среде с 5-6 лет, то это не в счет).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fill_n vs memset]]></title>
    <link href="http://demin.ws/blog/russian/2010/06/20/fill_n-vs-memset/"/>
    <updated>2010-06-20T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/06/20/fill_n-vs-memset/</id>
    <content type="html"><![CDATA[<p>В данный момент на текущей работе я занимаюсь тем, что называется - высокоуровневое серверное программирование на С++. У меня уже есть все необходимые библиотеки низкого уровня и среднего (более того, если я отказываюсь по какой-то причине от готовой библиотеки, меня могут потом попросить это объяснить), и огромное количество библиотек высокого уровня, уровня бизнес-логики. К чему все это?</p>

<p>А вот к чему. Если разобраться, что я могу писать код вообще без С-шных штучек типа массивов, malloc/free, старого способа приведения типов, строчек с нулем на конце и т.д. Получается, что мой диалект С++ можно урезать на тему всего, что я перечислил. Просто убрать, и все.</p>

<p>И от этого будет только польза. Сколько ошибок потенциально я НЕ сделаю в арифметике указателей (ее просто не будет)? Вместо того, чтобы мотивировать человека &ldquo;разумно использовать наследия С в С++&rdquo;, их надо просто выключить. Конечно, сразу сузится и круг решаемых задач, но мой, кстати, не самый узкий круг, можно покрыть таким вот урезанным в сторону &ldquo;правильного&rdquo; С++ диалектом С++.</p>

<p>Например, как мне кажется, функция <code>memset()</code> в мире С++ в целом годится разве что для обнуления. Использование какой-либо иной константы-заполнителя принципиально приближает нас к проблемам с памятью. Хотите, например, &ldquo;эффективно&rdquo; заполнить строку пробелами, и зарядите для этого <code>memset()</code>, а потом вам неожиданно придется работать с многобайтовыми кодировками, и этот пробел, записанный через <code>memset()</code>, может стать источником проблем.</p>

<p>Так что используйте алгоритм <code>fill_n()</code> вместо <code>memset()</code>. Может быть неэффективен? Может, а может и нет. Зато уж точно безопасен с точки зрения типизации.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Сумма цифр числа в Excel'е]]></title>
    <link href="http://demin.ws/blog/russian/2010/06/18/sub-of-all-digits-in-excel/"/>
    <updated>2010-06-18T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/06/18/sub-of-all-digits-in-excel/</id>
    <content type="html"><![CDATA[<p>Разбираясь с задачей из <a href="http://demin.ws/blog/russian/2010/06/18/topcoder-srm-473/">последней SRM&rsquo;ки</a>, решил я посмотреть, как будет выглядеть график у функции <code>Y=D(X)</code>, где <code>X</code> - натуральное число, а <code>D(X)</code> - сумма цифр его десятичной записи. Оказывается, вот такой хитрой формулой:</p>

<pre><code>=SUMPRODUCT(MID(A1,ROW(INDIRECT(&quot;1:&quot; &amp; LEN(A1))),1)) 
</code></pre>

<p>можно в Экселе посчитать этот самый <code>D(X)</code>. Ума не приложу, что это формула значит, но точно работает.</p>

<p>А вот и сам график, кому интересно:</p>

<p><img src="http://demin.ws/images/blog/sum-of-all-digits.png" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google I/O: all videos]]></title>
    <link href="http://demin.ws/blog/russian/2010/06/18/google-io-2010-all-videos/"/>
    <updated>2010-06-18T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/06/18/google-io-2010-all-videos/</id>
    <content type="html"><![CDATA[<p>Тут собраны все видео с Google I/O 2010, по категориям.</p>

<p><a href="http://code.google.com/events/io/2010/sessions.html">http://code.google.com/events/io/2010/sessions.html</a></p>

<p>Мне, например, очень понравилась презентация про новую Java машину с JIT в Android 2.2:</p>

<iframe width="640" height="385" src="https://www.youtube.com/embed/Ls0tM-c4Vfo?color=white&theme=light"></iframe>

<p>И про язык программирования Go:</p>

<iframe width="640" height="385" src="https://www.youtube.com/embed/jgVhBThJdXc?color=white&theme=light"></iframe>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TopCoder SRM 473. Уроки]]></title>
    <link href="http://demin.ws/blog/russian/2010/06/18/topcoder-srm-473/"/>
    <updated>2010-06-18T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/06/18/topcoder-srm-473/</id>
    <content type="html"><![CDATA[<p>Сегодня ночью была очередная SRM’ка. Как водится, я узнал сам про себя много нового. Например, я изобрел совершенно уникальный и доселе невиданный метод решения линейной системы из двух уравнений.
Итак, по порядку. Дивизион 2, 75 минут, 3 задачи + 10 минут после на взлом (challenge) чужих решений.</p>

<p>Задача номер 1.</p>

<p>Есть набор куриц и коров. У каждой курицы две ноги и одна голова. У коровы четыре ноги и одна голова. Даны два числа: количество ног и количество голов (каждое число от 1 до 10^6). Надо ответить на вопрос: возможно ли существования некоторого количества куриц и коров при заданном количестве ног и голов.</p>

<p>Даже после небольшого раздумья ясно, что тут этого просто система двух линейных уравнений, которая решается просто подстановкой одного в другое. Далее надо проверить найденные количество куриц и коров на правильность: неотрицательность, целочисленноть и т.д.</p>

<p>Все просто. Но! В два часа ночи я родил иной подход: перебор! (для системы-то из двух линейных уравнений). Я даже помню ход свох мыслей: так как количество только 10^6, значит можно перебрать все возможные значение количество куриц. Для каждого значения вычислить количество коров, исходя их количество ног и из количество голов. Полученные значения сравнить, и если совпадают, значит найдено возможное решение.</p>

<p>Вот такой вот «мега»-подход. В ходе челленджа я просмотрел решения всех участников в комнате, но такого «оригинального» решения не видел. Представляю круглые глаза тех, что пытался зачеленджить мое решение, когда они видели решение двух линейных уравнений перебором.</p>

<p>Кстати, решение в итоге не прошло системных тестов. И к лучшему.</p>

<p>Задача номер 2.</p>

<p>Дано неограниченное поле, в некоторой точке которого стоит робот. Дана программа для робота – строка, каждый символ которой – команда: «S» - шаг вперед на какую-то константную величину, «L» - поворот налево, «R» - поворот направо. Требуется сказать, будет ли траектория робота, двигающего по этой программе, ограничена конечной окружностью, или робот будет постоянно удалятся от исходной точки. Длина программы для робота до 250 символов.</p>

<p>Как один из вариантов решения: можно прогнать 4 итерации программы, и если хотя б после одной, робот вернется в исходную точку, то траектория робота ограничена.</p>

<p>Решение есть. Теперь его надо запрограммировать. Надо было сделать имитацию выполнения программы, то есть команды робота «вперед», «влево» и «вправо».</p>

<p>Приведу фрагмент программы, которую родил мой воспаленный мозг ночью:</p>

<pre class="hl">
  <span class="hl kwa">if</span> <span class="hl opt">(</span>cmd <span class="hl opt">==</span> <span class="hl str">'S'</span><span class="hl opt">) {</span> 
    x <span class="hl opt">+=</span> dx<span class="hl opt">;</span> 
    y <span class="hl opt">+=</span> dy<span class="hl opt">;</span> 
  <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span> 
    <span class="hl kwa">if</span> <span class="hl opt">(</span>cmd <span class="hl opt">==</span> <span class="hl str">'L'</span> <span class="hl opt">&amp;&amp;</span> dx <span class="hl opt">==</span>  <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> dy <span class="hl opt">==</span>  <span class="hl num">1</span><span class="hl opt">)</span> dx <span class="hl opt">= -</span><span class="hl num">1</span><span class="hl opt">,</span> dy <span class="hl opt">=</span>  <span class="hl num">0</span><span class="hl opt">;</span> 
    <span class="hl kwa">else if</span> <span class="hl opt">(</span>cmd <span class="hl opt">==</span> <span class="hl str">'R'</span> <span class="hl opt">&amp;&amp;</span> dx <span class="hl opt">==</span>  <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> dy <span class="hl opt">==</span>  <span class="hl num">1</span><span class="hl opt">)</span> dx <span class="hl opt">= +</span><span class="hl num">1</span><span class="hl opt">,</span> dy <span class="hl opt">=</span>  <span class="hl num">0</span><span class="hl opt">;</span> 
    <span class="hl kwa">else if</span> <span class="hl opt">(</span>cmd <span class="hl opt">==</span> <span class="hl str">'L'</span> <span class="hl opt">&amp;&amp;</span> dx <span class="hl opt">==</span>  <span class="hl num">1</span> <span class="hl opt">&amp;&amp;</span> dy <span class="hl opt">==</span>  <span class="hl num">0</span><span class="hl opt">)</span> dx <span class="hl opt">=</span>  <span class="hl num">0</span><span class="hl opt">,</span> dy <span class="hl opt">=</span>  <span class="hl num">1</span><span class="hl opt">;</span> 
    <span class="hl kwa">else if</span> <span class="hl opt">(</span>cmd <span class="hl opt">==</span> <span class="hl str">'R'</span> <span class="hl opt">&amp;&amp;</span> dx <span class="hl opt">==</span>  <span class="hl num">1</span> <span class="hl opt">&amp;&amp;</span> dy <span class="hl opt">==</span>  <span class="hl num">0</span><span class="hl opt">)</span> dx <span class="hl opt">=</span>  <span class="hl num">0</span><span class="hl opt">,</span> dy <span class="hl opt">= -</span><span class="hl num">1</span><span class="hl opt">;</span> 
    <span class="hl kwa">else if</span> <span class="hl opt">(</span>cmd <span class="hl opt">==</span> <span class="hl str">'L'</span> <span class="hl opt">&amp;&amp;</span> dx <span class="hl opt">==</span>  <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> dy <span class="hl opt">== -</span><span class="hl num">1</span><span class="hl opt">)</span> dx <span class="hl opt">=</span>  <span class="hl num">1</span><span class="hl opt">,</span> dy <span class="hl opt">=</span>  <span class="hl num">0</span><span class="hl opt">;</span> 
    <span class="hl kwa">else if</span> <span class="hl opt">(</span>cmd <span class="hl opt">==</span> <span class="hl str">'R'</span> <span class="hl opt">&amp;&amp;</span> dx <span class="hl opt">==</span>  <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> dy <span class="hl opt">== -</span><span class="hl num">1</span><span class="hl opt">)</span> dx <span class="hl opt">= -</span><span class="hl num">1</span><span class="hl opt">,</span> dy <span class="hl opt">=</span>  <span class="hl num">0</span><span class="hl opt">;</span> 
    <span class="hl kwa">else if</span> <span class="hl opt">(</span>cmd <span class="hl opt">==</span> <span class="hl str">'L'</span> <span class="hl opt">&amp;&amp;</span> dx <span class="hl opt">== -</span><span class="hl num">1</span> <span class="hl opt">&amp;&amp;</span> dy <span class="hl opt">==</span>  <span class="hl num">0</span><span class="hl opt">)</span> dx <span class="hl opt">=</span>  <span class="hl num">0</span><span class="hl opt">,</span> dy <span class="hl opt">= -</span><span class="hl num">1</span><span class="hl opt">;</span> 
    <span class="hl kwa">else if</span> <span class="hl opt">(</span>cmd <span class="hl opt">==</span> <span class="hl str">'R'</span> <span class="hl opt">&amp;&amp;</span> dx <span class="hl opt">== -</span><span class="hl num">1</span> <span class="hl opt">&amp;&amp;</span> dy <span class="hl opt">==</span>  <span class="hl num">0</span><span class="hl opt">)</span> dx <span class="hl opt">=</span>  <span class="hl num">0</span><span class="hl opt">,</span> dy <span class="hl opt">=</span>  <span class="hl num">1</span><span class="hl opt">;</span> 
<span class="hl opt">...</span>
</pre>

<p>Даже сейчас я не могу смотреть на это без содрогания. Надо то было всего:</p>

<pre class="hl">
<span class="hl opt">...</span>
<span class="hl kwb">int</span> dx<span class="hl opt">[</span><span class="hl num">4</span><span class="hl opt">] = {</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">, -</span><span class="hl num">1</span> <span class="hl opt">};</span>
<span class="hl kwb">int</span> dy<span class="hl opt">[</span><span class="hl num">4</span><span class="hl opt">] = {</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">, -</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">0</span> <span class="hl opt">};</span>
<span class="hl kwb">int</span> d <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">...</span>
<span class="hl kwa">if</span> <span class="hl opt">(</span>cmd <span class="hl opt">==</span> ‘S’<span class="hl opt">) {</span>
  x <span class="hl opt">+=</span> dx<span class="hl opt">[</span>d<span class="hl opt">];</span>
  y <span class="hl opt">+=</span> dy<span class="hl opt">[</span>d<span class="hl opt">];</span>
<span class="hl opt">}</span> <span class="hl kwa">if</span> <span class="hl opt">(</span>cmd <span class="hl opt">==</span> ‘L’<span class="hl opt">)</span>
  d <span class="hl opt">= (</span>d <span class="hl opt">+</span> <span class="hl num">4</span> <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">) %</span> <span class="hl num">4</span><span class="hl opt">;</span>
<span class="hl kwa">else if</span> <span class="hl opt">(</span>cmd <span class="hl opt">==</span> ‘R’<span class="hl opt">)</span>
  d <span class="hl opt">= (</span>d <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">) %</span> <span class="hl num">4</span><span class="hl opt">;</span>
<span class="hl opt">...</span>
</pre>

<p>И все!</p>

<p>Но увы. Когда время ограничено, на ум приходят странные решения.</p>

<p>Хотя мое решение прошло системные тесты, от его вида как-то грустно.</p>

<p>Задача 3.</p>

<p>Дано определение числа <code>Y</code>: <code>Y = X/D(X)</code>. <code>X</code> – натуральное число, <code>D(X)</code> – сумма цифр в десятичной записи числа <code>Х</code>. Если <code>Y</code> получается целым, то читается, то <code>Y</code> есть «предок» числа X. Дан интевал чисел от <code>а</code> до <code>b</code> (каждое от 0 до 10^9), но <code>a-b</code> всегда не более 10000.</p>

<p>Спрашивается, сколько есть на данном интервале есть числе <code>Y</code>, у которых нет предка (то есть нет такого <code>Х</code>, чтобы <code>Y</code> был целым).</p>

<p>Итак, для решение перебираем все значения <code>Y</code> от <code>а</code> до <code>b</code> (их не более 10000). Для каждого <code>Y</code> числа надо проверить, если ли у него «предок». Ясно, что заменатель <code>D(X)</code> принимает только значения от 1 до 81 (число с максимальной суммой цифр – это 999999999, а их сумма 81). Итак, делаем внутренний цикл от 1 до 81, и вычисляем <code>X</code> как <code>X=Y*i</code> (<code>i</code> от 1 до 81). Далее по факту равенста <code>i</code> и <code>D(X)</code> (надо вычислить сумму цифр, составляющих текущее <code>X</code>) можно понять, если ли у текущего <code>Y</code> предок или нет.</p>

<p>Всего итераций будет максимум <code>10^4 * 81 * 9</code> ~= <code>10^6</code> = 1000000, что вполне реально.</p>

<p>Но эту задачу я засабмитить уже не успел, хотя ее решение у меня было в голове.</p>

<p>Итак, выводы.</p>

<p>А вывод простой – работая под жестким временным ограничением, порой самые очевидные вещи вылетают из головы, не говоря уже об «экзотике», типа хитрых алгоритмов. Но так же вывод – так как решения таки были, то значит есть потенциал и закодить из вовремя.</p>

<p>Заснуть под утро я так уже не смог. Все думал.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Перебор всех разбиений множества на два подмножества]]></title>
    <link href="http://demin.ws/blog/russian/2010/06/13/search-all-splits-of-set-to-two-subsets/"/>
    <updated>2010-06-13T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/06/13/search-all-splits-of-set-to-two-subsets/</id>
    <content type="html"><![CDATA[<p>Допустим, есть массив (вектор) <code>v</code>, и надо перебрать все возможные варианты разделения его компонент на два непересекающихся подмножества.</p>

<p>Если элементов множества немного, а именно - их количество умещается в разрядную сетку вашего компьютера, например, не более 32-х или 64-х, то есть элегантный способ организовать перебор следующим образом:</p>

<pre class="hl">
vector<span class="hl opt">&lt;</span><span class="hl kwb">int</span><span class="hl opt">&gt;</span> <span class="hl kwd">v</span><span class="hl opt">(</span><span class="hl num">20</span><span class="hl opt">);</span> <span class="hl slc">// Исходное множество</span>

<span class="hl slc">// Всего вариантов будет: 2^(v.size())-1.</span>
<span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span> i <span class="hl opt">&lt; (</span><span class="hl num">1</span> <span class="hl opt">&lt;&lt;</span> v<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">()); ++</span>i<span class="hl opt">) {</span>
  vector<span class="hl opt">&lt;</span><span class="hl kwb">int</span><span class="hl opt">&gt;</span> left<span class="hl opt">,</span> right<span class="hl opt">;</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> j <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> j <span class="hl opt">&lt;</span> v<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">(); ++</span>j<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">((</span>i <span class="hl opt">&gt;&gt;</span> j<span class="hl opt">) &amp;</span> <span class="hl num">1</span><span class="hl opt">)</span>
      left<span class="hl opt">.</span><span class="hl kwd">push_back</span><span class="hl opt">(</span>v<span class="hl opt">[</span>j<span class="hl opt">]);</span>
    <span class="hl kwa">else</span>
      right<span class="hl opt">.</span><span class="hl kwd">push_back</span><span class="hl opt">(</span>v<span class="hl opt">[</span>j<span class="hl opt">]);</span>
  <span class="hl opt">}</span>

  <span class="hl slc">// Текущий вариант множеств left и right готов для обработки.</span>
  <span class="hl opt">...</span>
<span class="hl opt">}</span>
</pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Разностная машина из Лего, или динамическое программирование в жизни]]></title>
    <link href="http://demin.ws/blog/russian/2010/06/12/difference-engine-in-lego/"/>
    <updated>2010-06-12T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/06/12/difference-engine-in-lego/</id>
    <content type="html"><![CDATA[<p>Динамическое программирование - это очень интересный и очень эффективный прием. Недаром, огромный пласт олимпиадных задач по программированию посвящен этой теме.</p>

<p>А что в жизни? В жизни-то оно применимо? Конечно!</p>

<p>Итак, <a href="http://acarol.woz.org/">разностная машина</a>, построенная из Лего!</p>

<p><img src="http://demin.ws/images/blog/difference-engine-front.jpg" /></p>

<p>Как сказано в описании: &ldquo;Computing the next entry in a table can be significantly easier than computing an arbitrary entry of the table.&rdquo; - классика динамического программирования.</p>

<p>Вот оно - настоящее Железо!</p>

<p>Ссылки по теме:</p>

<ul>
<li><a href="http://ru.wikipedia.org/wiki/%D0%A0%D0%B0%D0%B7%D0%BD%D0%BE%D1%81%D1%82%D0%BD%D0%B0%D1%8F_%D0%BC%D0%B0%D1%88%D0%B8%D0%BD%D0%B0_%D0%A7%D0%B0%D1%80%D0%BB%D1%8C%D0%B7%D0%B0_%D0%91%D1%8D%D0%B1%D0%B1%D0%B8%D0%B4%D0%B6%D0%B0">Разностная машина Чарльза Бэббиджа</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[return со значением для void-функции]]></title>
    <link href="http://demin.ws/blog/russian/2010/06/12/return-void-value/"/>
    <updated>2010-06-12T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/06/12/return-void-value/</id>
    <content type="html"><![CDATA[<p>Я как-то думал, что для void-функций оператор return не может иметь ничего, кроме пробелов, перед завершающей его точкой с запятой. Оказывается, что нет. Visual Studio съела без каких-либо жалоб вот такой код:</p>

<pre class="hl">
<span class="hl kwb">void</span> <span class="hl kwd">v</span><span class="hl opt">() {}</span>
<span class="hl kwb">void</span> <span class="hl kwd">f</span><span class="hl opt">(){</span> 
  <span class="hl kwa">return</span> <span class="hl kwd">v</span><span class="hl opt">();</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
  <span class="hl kwd">f</span><span class="hl opt">();</span>
<span class="hl opt">}</span>
</pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Энциклопедия целочисленных последовательностей]]></title>
    <link href="http://demin.ws/blog/russian/2010/06/11/encyclopedia-of-integer-sequences/"/>
    <updated>2010-06-11T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/06/11/encyclopedia-of-integer-sequences/</id>
    <content type="html"><![CDATA[<p>Многие задачи в спортивном программировании из раздела динамического программирования сводятся к задаче отыскания формулы какой-либо последовательности.</p>

<p>Формула может быть в замкнутом виде, когда ты просто подставляешь аргументы и разом получаешь результат за время <code>O(1)</code>, или в динамической, рекуррентной форме, когда для вычисления i-го члена надо вычислить предыдующие.</p>

<p>Классический пример замкнутой формы - это сумма ряда n положительных чисел:</p>

<pre><code>S(n)=n*(n-1)/2.
</code></pre>

<p>А для динамической, или рекуррентной формы - это, например, формула для i-го члена последовательности чисел Фибонначи:</p>

<pre><code>F(i)=F(i-1)+F(i-2).
</code></pre>

<p>Например, вот такая задача (для школьников!).</p>

<p>Есть N чисел от 1 до N. Требуется разместить эти числа в ряд слева направо. Первым числом всегда идет 1. Каждое последующее может отличаться от предыдущего не больше, чем на 2. Например:</p>

<pre><code>1 2 3 4 5 ...
1 3 2 4 5 ...
1 3 5 4 2 ...
</code></pre>

<p>и т.д. (эта <a href="http://acm.timus.ru/problem.aspx?space=1&amp;num=1260">задача есть на Тимусе</a>).</p>

<p>Требудется найти количество возможных размещений по этому правилу для N чисел. N от 1 до 55.</p>

<p>Просто перебором в лоб не получится, так как вариантов будет <code>55!</code> ~ <code>10^73</code>, а времени дается всего одна секунда.</p>

<p>Судя по ограничению по времени в 1 секунду, тут просто должна быть формула.</p>

<p>А вот теперь подходим к сути поста. Недавно я наткнулся на волшебный сайт - <a href="http://www.research.att.com/~njas/sequences/index.html?language=russian">Онлайн-энциклопедия целочисленных последовательностей</a>. Там ты просто вводишь несколько известных тебе членов последовательности, а сайт по большой базе данных ищет совпадения с какими-либо известными последовательностями, и в случае наличия такого совпадения, дает исчерпывающую информацию - формулы, статистический анализ и т.д.</p>

<p>Итак, я нашел пяток первых значений решения задачи перебором - генерировал все возможные перестановки для i членов, для i от 1 до 8, и проверяя для каждой перестановки правильность выполнения условий размещения, считал количество вариантов.</p>

<p>В итоге, магия произошла. Когда я ввел вычисленные первые элементы последовательности в этот анализатор, мне просто сказали, что формула для i-го члена этой последовательсти: <code>a(n)=a(n-1)+a(n-3)+1</code>. И все! И по данной формуле задача решается пулей одним циклом за <code>O(N)</code>.</p>

<p>Конечно, для реальных соревнований такое метод не годится, так как никто не даст доступа в интернет. Да и цель задачи несколько иная - научиться выводить такие динамические соотношения самому.</p>

<p>А вот в жизни - бывает, что числа уже есть, и надо быстренько как-то их обсчитать на больших размерностях, вот тут и пригодится этот волшебный анализатор, которые даст исчерпывающуй информацию о ваших числах.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Проблемы с полиморфным delete на массивах]]></title>
    <link href="http://demin.ws/blog/russian/2010/06/09/problems-with-polymorohic-delete-on-arrays/"/>
    <updated>2010-06-09T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/06/09/problems-with-polymorohic-delete-on-arrays/</id>
    <content type="html"><![CDATA[<p>Имеем следующий код:</p>

<pre class="hl">
<span class="hl ppc">#define T 2</span>

<span class="hl kwc">class</span> A <span class="hl opt">{</span>
  <span class="hl kwc">public</span><span class="hl opt">:</span>
    <span class="hl kwc">virtual</span> <span class="hl opt">~</span><span class="hl kwd">A</span><span class="hl opt">() {</span> 
      p <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwb">int</span> p<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl kwc">class</span> B<span class="hl opt">:</span> <span class="hl kwc">public</span> A <span class="hl opt">{</span>
  <span class="hl kwb">int</span> a<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
  A<span class="hl opt">*</span> a <span class="hl opt">=</span> <span class="hl kwa">new</span> B<span class="hl opt">[</span>T<span class="hl opt">];</span>
  <span class="hl kwa">delete</span><span class="hl opt">[]</span> a<span class="hl opt">;</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>У меня эта программа однозначно падает с <code>Segmentation fault</code> на строке <code>delete[] a</code>. Проверено на Sun C++ на Солярисе, GCC на Линуксе и на FreeBSD. Вот, например, что происходит на BSD:</p>

<pre><code>Program received signal SIGSEGV, Segmentation fault.
0x08048743 in main () at new_array.cpp:17
17        delete[] a;
</code></pre>

<p>Забавно, что под Windows в VS2008 ничего особенного не происходит.</p>

<p>Как я понимаю, что в этой программе принципиально важно, чтобы она падала: деструктор класса <code>A</code> должен быть виртуальным, дочерний класс <code>B</code> должен быть больше по размеру (тут есть член <code>a</code>), константа <code>Т</code> должна быть 2 или более (то есть мы должны создавать несколько экземпляров класса <code>B</code>), и деструктор класса <code>A</code> должен что-нибудь писать в свои члены (тут есть <code>p = 0;</code>).</p>

<p>Что же тут происходит?</p>

<p><code>new[]</code> создает массив экземплятор класса <code>B</code>. Оператор же <code>delete[]</code> получает на вход указатель типа <code>A*</code> и начинает вызывать деструкторы элементов. Так как деструктор класса <code>А</code> виртуальный, то в ход пускается таблица виртуальных функций. Итак, отработал деструктор для первого элемента <code>a[0]</code>. Далее <code>delete[]</code> хочет получить адрес следующего элемента массиве <code>a</code>. И для этого (внимание!) адрес следующего он вычисляется так: <code>a + sizeof(A)</code> (ему же на вход дали указатель типа <code>A*</code>). Но проблема в том, что <code>sizeof(A) &lt; sizeof(B)</code> (это дает член класса <code>B::a</code>), и <code>a + sizeof(A)</code> будет указывать не на второй элемент в массиве <code>a</code>, а куда-то между первым и вторым элементом, так как реальный адрес второго элемента - <code>a + sizeof(B)</code>. И все бы ничего, но деструктор класс <code>A</code> пишет в член <code>p</code>, тем самым меняя содержимое памяти, а так как для второго элемента адрес вычислен неправильно (его <code>this</code> указывает непонятно куда), то куда реально попадет 0 в присваивании <code>p = 0;</code> уже никто не знает, но явно не туда, куда надо. Вот и <code>Segmentation fault</code>.</p>

<p>Другого объяснения у меня нет.</p>

<p>Если кто знает лучше, поправьте.</p>

<p>P.S. Забавно, что под виндами ничего страшного не происходит.</p>

<p><strong>Update</strong>: В комментариях дали точное объяснение из стандарта: C++ 2003 5.3.5:</p>

<p>&hellip;In the second alternative (delete array), the value of the operand of delete shall be the pointer value which resulted from a previous array new-expression. If not, the behavior is undefined. [Note: this means that the syntax of the delete-expression must match the type of the object allocated by new, not the syntax of the new-expression.]</p>

<p><strong>Update 2</strong>: <a href="http://blogs.msdn.com/b/oldnewthing/archive/2004/02/03/66660.aspx">Объяснение</a>, почему не глючит в Visual Studio.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Опрос: как мы называем свою профессию]]></title>
    <link href="http://demin.ws/blog/russian/2010/06/06/how-we-call-our-profession/"/>
    <updated>2010-06-06T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/06/06/how-we-call-our-profession/</id>
    <content type="html"><![CDATA[<p>Создал небольшой опрос: &ldquo;Как вы говорите про себя, когда вас спрашивают о профессии?&rdquo;.</p>

<p>Так как я не нашел, как сделать голосование прямо в теле поста, поэтому вставил голосовалку в правую колонку блога. Так что если вы читаете блог через RSS и, возможно, не ходите на сайт напрямую, но хотите внести свой голос, то просто зайдите на главную страницу блога. Голосовалка прямо там, вверху справа.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Книги по олимпиадному программированию]]></title>
    <link href="http://demin.ws/blog/russian/2010/06/06/olympiad-programming-books/"/>
    <updated>2010-06-06T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/06/06/olympiad-programming-books/</id>
    <content type="html"><![CDATA[<p>Небольшой перерыв в активности блога вызван чудным мегасобытием - рождением второго ребенка. К дочке прибавился сын!</p>

<p><a href="http://en.wikipedia.org/wiki/Scheduling_(computing)">Scheduling</a> для двоих детей, особенно с небольшой разницей в возрасте, конкретно отличается от одного, и является гораздо более сложной оптимизационной задачей, ибо количество переменных увеличивается на порядок. Но в целом - переходный процесс уже начал стабилизироваться, и снова появляется время позависать на всяких сайтах с алгоритмическими задачками (успел даже поучавствовать в двух SRM&rsquo;ах на TopCoder&rsquo;е).</p>

<p>Например, <a href="http://acmp.ru/">сайт Красноярского Дворца пионеров и школьников</a>. Он позиционируется как место для самоподготовки школьников, интересующихся программированием, для олимпиад. Но хвала тем школьникам, которые могут сходу решать задачи сложности 50% и выше с этого сайта. Не всякий, как пишут в резюме, &ldquo;профессиональный программист с многолетним стажем&rdquo; сможет &ldquo;взять&rdquo; некоторые из них.</p>

<p>Обнаружил просто мега-сайт - <a href="http://e-maxx.ru/algo/">e-maxx.ru/algo</a>. Справочник по алгоритмам и их реализациями на С++. Все на русском языке. Как мне тут сказали, что, в принципе, освоив большинство из них, можно показывать неплохие результаты на программистских соревнованиях.</p>

<p>В разделе книг там также отличная подборка.</p>

<p>Из категории, опять-таки, олимпиадного программирования, могу посоветовать:</p>

<p>С. Окулов, <a href="http://www.ozon.ru/context/detail/id/3506097/?partner=easy-coding">Программирование в алгоритмах</a></p>

<p><img src="http://demin.ws/images/covers/russian/programming-in-algorithms-cover.jpg" /></p>

<p>М. Долинский, <a href="http://www.ozon.ru/context/detail/id/4884026/?partner=easy-coding">Решение сложных и олимпиадных задач по программированию</a></p>

<p><img src="http://demin.ws/images/covers/russian/solving-difficult-olympiad-problems-cover.jpg" /></p>

<p>Мне эти две понравились тем, что тут даются не просто сухие академические описания алгоритмов, как, например, у <a href="http://demin.ws/blog/russian/2009/07/07/fundamental-algorithms/">Седжвика</a>, а примеры их применения и адаптации для реальных задач.</p>

<p>Кстати, заметил интересный факт. Лично я не люблю язык Паскаль. Мое субъективное мнение. Многословный и эстетически некрасивый синтаксис. Но Российская школа программирования уважает Паскаль и Дельфи (спасибо вечному Турбо Паскалю 7.0), и поэтому программы в этих книгах написаны на Паскале, а не на С++. И заставляя себя вчитываться в паскалевские куски кода, еще и изуродованные форматированием для печати в книге, получаешь более полное понимание алгоритма. Как говорят: умение читать код может быть даже важнее для программиста, чем писать его.</p>

<p>Далее. Нашел <a href="http://people.csail.mit.edu/bdean/6.046/dp/">интересную страничну какого-то профессора из MIT</a>, на которой лежат его мини видео лекции с разборами некоторых классических задач <a href="http://ru.wikipedia.org/wiki/%D0%94%D0%B8%D0%BD%D0%B0%D0%BC%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5">динамического программирования</a>. Манера подачи материала очень интересна - видео представляет собой постепенную запись объяснения задачи от руки, сопровожаемую голосом. Например, <a href="http://people.csail.mit.edu/bdean/6.046/dp/dp_2.swf">задача о сдаче</a>, или оба вида <a href="http://ru.wikipedia.org/wiki/%D0%97%D0%B0%D0%B4%D0%B0%D1%87%D0%B0_%D0%BE_%D1%80%D0%B0%D0%BD%D1%86%D0%B5">задачи о ранце</a> - <a href="http://people.csail.mit.edu/bdean/6.046/dp/dp_0.swf">с повторами</a> и <a href="http://people.csail.mit.edu/bdean/6.046/dp/dp_7.swf">без (0-1)</a>.</p>

<p>Алгоритмы - это очень интересно.</p>

<p>Посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2009/07/07/fundamental-algorithms/">Роберт Седжвик, &ldquo;Фундаментальные алгоритмы&rdquo;</a></li>
<li><a href="http://demin.ws/blog/russian/2010/05/17/sudoku-for-programmers-or-olympiad-programming/">Судоку для программистов или олимпиадные задачи</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dropbox]]></title>
    <link href="http://demin.ws/blog/russian/2010/05/24/dropbox/"/>
    <updated>2010-05-24T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/05/24/dropbox/</id>
    <content type="html"><![CDATA[<p>Как-то осознал, что реально подсел на <a href="http://dropbox.com">Dropbox</a>.</p>

<p>Как это реально выглядит: просто у меня есть папка, которая автоматически синхронизируется через интернет на любом компьютере, где я залогинен в Dropbox. Не надо ничего вручную копировать и синхронизировать. Ты просто работаешь с локальными файлами, а все в фоне уходит на сервер и оттуда раздается на другие компьютеры.</p>

<p>Все файлы имеют историю ревизий, и их можно делать выборочно публичными. Почти как Google Docs, только есть автоматическое синхронизирование с локальными файлами.</p>

<p>Недавно вышел официальный клиент Dropbox для Android, так что теперь файлы еще и доступны прямо с телефона. Захотел в метро исходничек глянуть или pdf-ку - пожалуйста.</p>

<p>Конечно, класть в эту папку более менее конфиденциальные данные было бы глупо, хотя Dropbox гарантирует их сохранность, но для рабочих документов и исходников - это самое оно. Они и так у меня почти все лежат на Google Code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Совершенные числа]]></title>
    <link href="http://demin.ws/blog/russian/2010/05/24/perfect-numbers/"/>
    <updated>2010-05-24T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/05/24/perfect-numbers/</id>
    <content type="html"><![CDATA[<p>Решал я тут <a href="http://acmp.ru/index.asp?main=task&amp;id_task=364">одну задачу из раздела теории чисел</a> про нахождение совершенных чисел.</p>

<p>В принципе, тривиальная задача. Элементарное разложение на множители.</p>

<p>Как я ее решал. Прочитав определение совершенных чисел (до этого я не знал про такие числа, и далее будет понятно, что это было моей главной проблемой) и поняв, что мне надо разложить число на множители, я написал что-то вроде:</p>

<pre class="hl">
<span class="hl kwb">bool</span> <span class="hl kwd">is_perfect</span><span class="hl opt">(</span><span class="hl kwb">long long</span> n<span class="hl opt">) {</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>n <span class="hl opt">==</span> <span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">return false</span><span class="hl opt">;</span>
  <span class="hl kwb">long long</span> s <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
  <span class="hl kwb">long long</span> q <span class="hl opt">=</span> <span class="hl kwd">sqrt</span><span class="hl opt">((</span><span class="hl kwb">double</span><span class="hl opt">)</span>n<span class="hl opt">);</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">long long</span> i <span class="hl opt">=</span> <span class="hl num">2</span><span class="hl opt">;</span> i <span class="hl opt">&lt;=</span> q<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">((</span>n <span class="hl opt">%</span> i<span class="hl opt">) ==</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      s <span class="hl opt">+=</span> i<span class="hl opt">;</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>n<span class="hl opt">/</span>i <span class="hl opt">!=</span> i<span class="hl opt">)</span> s <span class="hl opt">+=</span> n<span class="hl opt">/</span>i<span class="hl opt">;</span>
    <span class="hl opt">}</span>
  <span class="hl opt">}</span>
  <span class="hl kwa">return</span> s <span class="hl opt">==</span> n<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl opt">...</span>
  <span class="hl kwb">bool</span> found <span class="hl opt">=</span> <span class="hl kwa">false</span><span class="hl opt">;</span>
  <span class="hl kwa">while</span> <span class="hl opt">(</span>m <span class="hl opt">&lt;=</span> n<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">is_perfect</span><span class="hl opt">(</span>m<span class="hl opt">)) {</span>
      os <span class="hl opt">&lt;&lt;</span> m <span class="hl opt">&lt;&lt;</span> endl<span class="hl opt">;</span>
      found <span class="hl opt">=</span> <span class="hl kwa">true</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
    m <span class="hl opt">+=</span> <span class="hl num">1</span><span class="hl opt">;</span>
  <span class="hl opt">}</span>
  <span class="hl kwa">if</span> <span class="hl opt">(!</span>found<span class="hl opt">)</span> os <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;Absent&quot;</span> <span class="hl opt">&lt;&lt;</span> endl<span class="hl opt">;</span>
<span class="hl opt">...</span>
</pre>

<p>Ничего оригинального. Работает на данных тестовых контрольных примерах. Прогоняю в системе. На одном из тестов мне сообщают, что программа работает более двух секунд, и это превышение данного временного лимита.</p>

<p>И только тут я смотрю на органичения задачи. А именно, что верхняя граница для N - это <code>5*10^18</code>, то есть если при этом дать M=1, то мой цикл должен будет пробежать <code>~10^18</code> значений, что в отведенные на это 2 секунды явно не укладывается.</p>

<p>Почесав репу, я начал гуглить, так как идей по ускорению алгоритма не было.</p>

<p>Первый же поиск раскрыл мне суть проблемы - а сколько вообще есть таких совершенных чисел? Оказывается, что на интервале от 0 до <code>5*10^18</code> их всего-то восемь, и они уже давно вычислены!</p>

<pre><code>6, 28, 496, 8128, 33550336, 8589869056, 137438691328, 2305843008139952128
</code></pre>

<p>Поэтому вместо самостоятельного вычисления этих чисел надо просто найти, какие их этих восьми попадают в данный интервал <code>[M, N]</code>. Как говорится &ldquo;Easy peasy lemon squeezy!&rdquo;.</p>

<p>Естественно, после этого решение успешно засабмитилось.</p>

<p>Мораль (кстати, верная не только для спортивного программирования) - начинать решение алгоритмической задачи следует с выяснения верхних ограничений входных данных, ибо чаще всего они подсказывают путь решения. Как это ни странно, почему-то вместо этого сразу хочется кодить, откладывая на потом осознание факта, что в ограничения-то программа не укладывается.</p>

<p>Мораль 2. Есть случаи, когда надо просто знать, как решать тот или иной тип задач. А знать это можно только хотя был раз их прорешав. Можно, конечно, и самому изобрести новый QuickSort с нуля, но это будет уже другая история.</p>

<p>P.S. Сейчас идет Google Gode Jam 2010.</p>

<p>В квалификации я решил полностью две задачи из трех, что достаточно для этого раунда. В раунде же 1 (я пробовал все его подтуры) я решал только одну задачу, что, увы, маловато.</p>

<p>Еще интересный момент. В подраунде <a href="http://code.google.com/codejam/contest/scoreboard?c=635101">Round 1B</a> участвовал известный своим юным возрастом &ldquo;спортивный&rdquo; программист <a href="http://habrahabr.ru/tag/%D0%93%D0%B5%D0%BD%D0%BD%D0%B0%D0%B4%D0%B8%D0%B9%20%D0%9A%D0%BE%D1%80%D0%BE%D1%82%D0%BA%D0%B5%D0%B2%D0%B8%D1%87/">Геннадий Короткевич</a> (третья позиция сверху таблице результатов). Я всегда очень люблю смотреть решения других людей. Поглядев на его решения, а был реально поражен тем, что они написаны на Дельфи! (а фактически на Паскале) (на Code Jam&rsquo;е по статистике есть решения и на более &ldquo;экзотических&rdquo; языках типа BrainFuck&rsquo;а или PostScript&rsquo;а, но такие программы скорее всего сгенерированы из &ldquo;традиционного&rdquo; языка, и это уже иная тема). И эти решения кратки и понятны, и не используют различные шаблонные заготовки, которые в целом в ходу в спортивном программировании. Это еще одно подтверждение, что даже для алгоритмических задач &ldquo;неудобный&rdquo; язык не является проблемой в написании быстрой и понятной программы.</p>

<p>P.P.S. Один мой друг учавствовал в раунде 1, сидя с ноутом на полу в аэропорту через Wifi. Это не помешало ему получить 127-е место и проход в следующий раунд.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Судоку для программистов или олимпиадные задачи]]></title>
    <link href="http://demin.ws/blog/russian/2010/05/17/sudoku-for-programmers-or-olympiad-programming/"/>
    <updated>2010-05-17T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/05/17/sudoku-for-programmers-or-olympiad-programming/</id>
    <content type="html"><![CDATA[<p>Последнее время радикально подсел на алгоритмические задачки по программированию.</p>

<p>Каким-то чудом и к великому сожалению сейчас вся эта тема олимпиадного программирования сильно меня не зацепила в школе и институте. Хотя там для этого было бы больше времени.</p>

<p>И самое что в этом всем отрезвляющие, что порой ступор наступает на казалось бы «очевидных» и типа «уже когда-то давно изученных» тобой задачах. Например, практически над каждой из серии «задач для обучения и закрепления материала» по <a href="http://acmp.ru/article.asp?id_sec=1&amp;id_text=1331">динамическому программированию</a> я изрядно чесал репу, хотя выглядят конкретно они весьма академично. И практически каждую я засабмитил далеко не с первого раза. Думается, что на том же ТопКодере каждая из них была бы первой задачей (то есть самой простой).</p>

<p>Вообще появляется некоторая зависимость. Зависимость от количества решенных задач. После нескольких успешных сабмитов хочется еще, еще и еще, а задачи становятся сложнее и сложнее. Своеобразное программистское судоку.</p>

<p>В принципе, тут необязательно маньячить на онлайн матчах, когда счет идет еще на время. Тут ты просто решаешь в свое удовольствие. Хотя, может желание соревновательности приходит с появлением опыта.</p>

<p>И все это – абсолютное знание. Твой единственный судья – это программа проверки результата и тестовые наборы данных, которые одинаковы для всех. Говорят, что на том же ТопКодере есть пути нечестного поднятия рейтинга, но очень несильно. Если посмотреть на топ-листы независимых онлайновых контестов, то можно увидеть там одни и те же имена. Неужели все эти люди знают как «читить» на всех сайтах? Конечно нет.</p>

<p>Притягивает тут абсолютность знания. Все что нужно, чтобы выиграть – это просто решить задачи быстрее всех. Казалось бы, что может быть проще. Как сказал мне тут один товарищ, что нейроны необходимо постоянно задр***вать, а иначе они теряют эластичность.</p>

<p>Сайтов для онлайнового решения задач много. Я пока остановился на <a href="http://acmp.ru/">Школа программиста</a>, <a href="http://acm.timus.ru/">Timus Online Judge</a>, <a href="http://uva.onlinejudge.org/">UVa Online Judge</a> (классика жанра), <a href="http://codeforces.ru/">Codeforces</a> и, конечно, <a href="http://topcoder.com/tc">TopCoder</a> (пока только в practice room’ах).</p>

<p>В принципе, нет необходимости лазить по всем сайтам, так как каждый имеет изрядную тысячу и более задач, так что хватит решать не перерешать.</p>

<p>Единственное что важно, особенно сначала, когда можно удобно выбирать задачи по тематике и сложности. Вот тут и стоит покопаться на нескольких системах, ибо каталоги могут быть устроены по-разному.</p>

<p>Погрузившись в тему рекрутинга для нашей группы последнее время я только подкрепился в своей старой мысли, что резюме – это крайне бесполезный документ. Он красиво скажет о полностью неадекватном человеке, и порой ничего не скажет о действительно хорошем кандидате.</p>

<p>Если вместо сотни красивых слов в резюме про где и как человек учился и над чем замечательным работал, будет просто указана ссылка на профайл того же ТопКодера, то это будет в сотни раз полезнее. Там тебе и примеры кода, и тематика решенных задач, время из решения (после этого можно не спрашивать, как «человек работает под стрессом»), и, что очень важно с моей точки зрения – страсть к программированию, увлеченность (а как иначе можно объяснить многолетнее постоянное участие в «пустой трате времени», как спортивное программирование).</p>

<p>Конечно, есть огромное количество иных вопросов, которые следует прояснить на собеседовании, но здоровенный пласт касаемо алгоритмов и банального умения просто писать код, который работает, оказывается уже отработанным.</p>

<p>Например, другой товарищ рассказывал, когда его стандартно попросили у нас на интервью нарисовать функцию для вычисления чисел Фибоначчи разными способами – рекурсивно, рекурсивно с хвостовой рекурсией, а затем просто циклом, он написал матричный вариант через производящую функцию, который работает за логарифмическое время, вместо линейного. У товарища, кстати, неплохой рейтинг на ТопКодере.</p>

<p>Думается мне, что в принципе люди с относительно высоким рейтингом на ТопКодере проблем с трудоустройством не испытывают.</p>

<p>В общем, решайте задачи, тренируйтесь, держите себя в форме.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Плавающая точка уплыла]]></title>
    <link href="http://demin.ws/blog/russian/2010/05/15/tricky-floating-point/"/>
    <updated>2010-05-15T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/05/15/tricky-floating-point/</id>
    <content type="html"><![CDATA[<p>Решал одну задачу на <a href="http://uva.onlinejudge.org/">UVa Online Judge</a>. Долго не мог найти проблему и проверял алгоритм.</p>

<p>Но все было гораздо проще. Как вы думаете, что должна выводить следующая программа?</p>

<pre class="hl">
<span class="hl ppc">#include &lt;iostream&gt;</span>
<span class="hl ppc">#include &lt;cmath&gt;</span>
<span class="hl kwa">using namespace</span> std<span class="hl opt">;</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[]) {</span>
  <span class="hl kwb">double</span> f <span class="hl opt">=</span> <span class="hl num">1.15</span><span class="hl opt">;</span>
  <span class="hl kwb">int</span> a <span class="hl opt">=</span> f <span class="hl opt">*</span> <span class="hl num">100.0</span> <span class="hl opt">+</span> <span class="hl num">0.1E-9</span><span class="hl opt">;</span>
  <span class="hl kwb">int</span> b <span class="hl opt">=</span> f <span class="hl opt">*</span> <span class="hl num">100.0</span><span class="hl opt">;</span>
  cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;a = &quot;</span> <span class="hl opt">&lt;&lt;</span> a <span class="hl opt">&lt;&lt;</span> endl<span class="hl opt">;</span>
  cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;b = &quot;</span> <span class="hl opt">&lt;&lt;</span> b <span class="hl opt">&lt;&lt;</span> endl<span class="hl opt">;</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Я ожидал два числа 115.</p>

<p>Нет, у меня на VS2008 она печатает:</p>

<pre><code>a = 115
b = 114
</code></pre>

<p>Вот такие дела.</p>

<p><strong>Update:</strong></p>

<p>Кстати, если попробовать так:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;iostream&gt;</span>
<span class="hl ppc">#include &lt;cmath&gt;</span>
<span class="hl kwa">using namespace</span> std<span class="hl opt">;</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[]) {</span>
  <span class="hl kwb">double</span> f <span class="hl opt">=</span> <span class="hl num">1.15</span><span class="hl opt">;</span>
  <span class="hl kwb">int</span> a <span class="hl opt">=</span> f <span class="hl opt">*</span> <span class="hl num">100.0</span> <span class="hl opt">+</span> <span class="hl num">0.1E-9</span><span class="hl opt">;</span>
  <span class="hl kwb">int</span> b <span class="hl opt">=</span> f <span class="hl opt">*</span> <span class="hl num">100.0</span><span class="hl opt">;</span>
  cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;a = &quot;</span> <span class="hl opt">&lt;&lt;</span> a <span class="hl opt">&lt;&lt;</span> endl<span class="hl opt">;</span>
  cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;b = &quot;</span> <span class="hl opt">&lt;&lt;</span> b <span class="hl opt">&lt;&lt;</span> endl<span class="hl opt">;</span>
  <span class="hl kwb">double</span> f1 <span class="hl opt">=</span> <span class="hl num">0.15</span><span class="hl opt">;</span>
  <span class="hl kwb">int</span> a1 <span class="hl opt">=</span> f1 <span class="hl opt">*</span> <span class="hl num">100.0</span> <span class="hl opt">+</span> <span class="hl num">0.1E-9</span><span class="hl opt">;</span>
  <span class="hl kwb">int</span> b1 <span class="hl opt">=</span> f1 <span class="hl opt">*</span> <span class="hl num">100.0</span><span class="hl opt">;</span>
  cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;a1 = &quot;</span> <span class="hl opt">&lt;&lt;</span> a1 <span class="hl opt">&lt;&lt;</span> endl<span class="hl opt">;</span>
  cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;b1 = &quot;</span> <span class="hl opt">&lt;&lt;</span> b1 <span class="hl opt">&lt;&lt;</span> endl<span class="hl opt">;</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>то результат будет:</p>

<pre><code>a = 115
b = 114
a1 = 15
b1 = 15
</code></pre>

<p>Как я думаю, это из-за того, что числа, у которых целая часть нулевая имеют немного особое внутреннее представление в IEEE.</p>

<p>На ТопКодере есть отличная статья на эту тему (<a href="http://www.topcoder.com/tc?module=Static&amp;d1=tutorials&amp;d2=integersReals">часть 1</a> и <a href="http://www.topcoder.com/tc?module=Static&amp;d1=tutorials&amp;d2=integersReals2">часть 2</a>). Все кратко и по делу.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Две лекции создателя STL Александра Степанова в Яндексе]]></title>
    <link href="http://demin.ws/blog/russian/2010/04/30/stepanov-talks-at-yandex/"/>
    <updated>2010-04-30T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/04/30/stepanov-talks-at-yandex/</id>
    <content type="html"><![CDATA[<p>Преобразования и их орбиты</p>

<p><object height="360" width="450"><param name="video" value="http://static.video.yandex.ru/lite/ya-events/3twcefs92l.2504/"></param><param name="allowFullScreen" value="true"></param><param name="scale" value="noscale"></param><embed src="http://static.video.yandex.ru/lite/ya-events/3twcefs92l.2504/" type="application/x-shockwave-flash" width="450" height="360" allowFullScreen="true" scale="noscale" ></embed></object></p>

<p><object height="360" width="450"><param name="video" value="http://static.video.yandex.ru/lite/ya-events/7wftbjwn90.2613/"></param><param name="allowFullScreen" value="true"></param><param name="scale" value="noscale"></param><embed src="http://static.video.yandex.ru/lite/ya-events/7wftbjwn90.2613/" type="application/x-shockwave-flash" width="450" height="360" allowFullScreen="true" scale="noscale" ></embed></object></p>

<p>Наибольшая общая мера последние 2500 лет</p>

<p><object height="360" width="450"><param name="video" value="http://static.video.yandex.ru/lite/ya-events/134ggssoep.2510/"></param><param name="allowFullScreen" value="true"></param><param name="scale" value="noscale"></param><embed src="http://static.video.yandex.ru/lite/ya-events/134ggssoep.2510/" type="application/x-shockwave-flash" width="450" height="360" allowFullScreen="true" scale="noscale" ></embed></object></p>

<p><object height="360" width="450"><param name="video" value="http://static.video.yandex.ru/lite/ya-events/fep8fxq5c8.2601/"></param><param name="allowFullScreen" value="true"></param><param name="scale" value="noscale"></param><embed src="http://static.video.yandex.ru/lite/ya-events/fep8fxq5c8.2601/" type="application/x-shockwave-flash" width="450" height="360" allowFullScreen="true" scale="noscale" ></embed></object></p>

<p>Посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2009/07/30/elements-of-programming/">Александр Степанов, &ldquo;Elements of Programming&rdquo;</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming with GUTs]]></title>
    <link href="http://demin.ws/blog/russian/2010/04/28/programming-with-guts/"/>
    <updated>2010-04-28T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/04/28/programming-with-guts/</id>
    <content type="html"><![CDATA[<p>Вчера был на тренинге <a href="http://www.boost.org/users/people/kevlin_henney.html">Kevlin Henny</a> под названием «Programming with GUTs». (Кевлин автор нескольких книг, например «Things Every Programming Should Know»)</p>

<p><a href="http://www.amazon.co.uk/gp/product/0596809484/ref=as_li_tf_il?ie=UTF8&tag=prodiy-21&linkCode=as2&camp=1634&creative=6738&creativeASIN=0596809484"><img border="0" src="http://ws.assoc-amazon.co.uk/widgets/q?_encoding=UTF8&Format=_SL160_&ASIN=0596809484&MarketPlace=GB&ID=AsinImage&WS=1&tag=prodiy-21&ServiceVersion=20070822" ></a><img src="http://www.assoc-amazon.co.uk/e/ir?t=prodiy-21&l=as2&o=2&a=0596809484" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p>«GUT» – это сокращение от Good Unit Tests.</p>

<p>Также я узнал выражения «Programming with BUTs» (Brittle Unit Tests) и «Programming with NUTs» (No Unit Tests).</p>

<p>Итак, «&hellip;with GUTS» - это хорошо, «&hellip;with BUTs» - хуже, «&hellip;with NUTs» - безумие.</p>

<p>Вся эта терминология построена на игре слов guts, butt и nuts в английском языке, которые своим двойным смыслом примерно отражают ситуацию в проекте, когда тестирование находится на указанном уровне (Good, Brittle, No).</p>

<p>Дядька очень интересно ведет беседу, нескучно. Вовремя переходит от приколов к важным выводам, что, например, что ошибки – это не зло, а данность (процесс создания программа сложен, и ошибки – это часть процесса), поэтому очень важно уметь использоваться их для своих целей. Глупо исправлять баг, не написав для него unit- или regression- тест, так как без теста информация, которую несет в себе баг-репорт, будет потеряна по исправления ошибки.</p>

<p>Не могу сказать, что я узнал что-то радикально новое для себя, хотя услышал несколько интересных мыслей и аналогий.</p>

<p>Например, дежурный вопрос менеджера (не очень умного менеджера) проекта: «А если мы будем практиковать TDD в разработке, это замедлит процесс?». И ваш правильный и политический верный ответ будет решительное «ДА!». «А правда, что написание тестов вместе с кодом призвано затормозить работу разработчика?». «ДА!!!».</p>

<p>В короткой перспективе – да, но в долгосрочной – нет, а совсем наоборот.</p>

<p>Есть хорошая аналогия. Можно ли доехать из места А в место Б на машине, у которой нет традиционных тормозов (а например, только ручник)? Теоретически да. Очень очень медленно, правильно используя торможение двигателем и ручником. Задача будет решена, но очень не быстро, и вероятность облажаться очень высока. А вот если машину оборудовать нормальными тормозами (~unit-тестами), цель которых останавливать машину (и увеличивать время достижения цели), то они также позволят активно разгоняться между торможениями, и как результат – приехать быстрее.</p>

<p>Мораль – тесты позволяют взять ваш код под контроль, превратить его из телеги, несущейся с горы на огромной скорости, в гоночный болид, который ездит также быстро, как и останавливается. Тесты радикально затормозят вас, когда это нужно. Но с другой стороны они позволят не дрожать всем телом, когда надо потрогать какой-то очень важный кусок кода (например, библиотеку строчек), а спокойно провести рефакторинг и проверить результаты.</p>

<p>Все эти посылы просто TDD очевидны и однозначно разумны, но я был поражен до глубины души, когда кто-то таки спросил из зала, а если я, мол, просто буду писать много комментариев, чтобы всем было понятно, что код делает. И это был не вопрос-прикол. Кто-то спросил это на полном серьезе.</p>

<p>По поводу комментариев была приведена также интересная аналогия. Комментарии в коде – это золото. Но золото обесценивается, когда его становится слишком много. Комментариев много бывает (особенно бесполезных).</p>

<p>На лабах было интересное задание. Программисту дается задание написать класс и unit-тесты для него. Затем эти тесты уже без кода класса даются другому программисту, и его просят воспроизвести функционал класса, основываясь только на тестах к нему. Результаты порой «радуют» даже продвинутых бойцов TDD.</p>

<p>Вывод как всегда простой: тестируйте как можно раньше, тестируйте чаще, тестируйте автоматизировано. Тестирование – это часть работы программиста в первую очередь, а тестера – во вторую.</p>

<p>P.S. Небольшое задание для интересующихся. Допустим, вы написали собственный алгоритм сортировки. Как его тестировать? Каковы будут критерии проверки, что результат такой, какой вы ожидаете?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Смесь двоичной и десятичной арифметики]]></title>
    <link href="http://demin.ws/blog/russian/2010/04/21/mixing-decimal-and-binary-arithmetic/"/>
    <updated>2010-04-21T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/04/21/mixing-decimal-and-binary-arithmetic/</id>
    <content type="html"><![CDATA[<p>Многие знают, что происходит при выполнении присваивания <code>n &amp;= (n - 1);</code> просто потому, что это весьма распространенный шаблон, и для чего может понадобиться выполнение его в цикле, пока <code>n</code> не станет нулем.</p>

<p>Интересно другое: четкое математическое (и/или алгоритмическое) объяснение, почему это работает именно так, строгое доказательство.</p>

<p><strong>Update</strong></p>

<p>Чтобы разобраться в вопросе надо понять, что является корнем недопонимания.</p>

<p>Для людей, не часто имеющих дело с двоичной системой, обычно не совсем очевидна суть трансформации внутреннего двоичного представления числа при выполнении арифметической операции в десятичной нотации. Кажется, что если вычесть единицу, то расположение битов после операции будет иметь мало общего с тем, что было до вычитания. И дальнейшее выполнение <code>and</code> вообще не имеет смысла.</p>

<p>С точки зрения битового представления любого числа, есть только два случая:</p>

<ol>
<li><p>Если число нечетное, на конце будет единица: <code>xx...xx1</code>. Вычитание из такого числа даст: <code>хх...хх0</code>. Поэтому <code>(xx...xx1) &amp; (xx...xx0)</code> даст <code>(xx...xx0)</code>. Фактически, мы убрали младший бит.</p></li>

<li><p>Если число четное, на конце будет ноль (или несколько нулей): <code>xx...xx100...00</code>. Видно, что вычитание единицы из такого числа однозначно не изменит разряды <code>xx...xx</code>, стоящие слева после первой единицы. Более того, результат вычитания единицы однозначно предсказуем: <code>xx...xx011...11</code>. Теперь точно видно, что будет после операции <code>and</code>: <code>(xx...xx100...00) &amp; (&quot;xx...xx011...11&quot;)</code> даст <code>xx...xx000...00</code>. То есть мы убрали единицу из самого младшего ненулевого разряда.</p></li>
</ol>

<p>Теперь ясно видно, что именно проиходит в присваивании <code>n &amp;= (n - 1);</code>. А именно, обнуление самого младшего ненулевого разряда.</p>

<p>Использование этого трюка в цикле, пока n не равно нулю, позволяет подсчитать количество ненулевых бит. На каждой итерации мы &ldquo;выбиваем&rdquo; ровно один бит, поэтому число итераций будет равно количеству единиц в <code>n</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Презентация про HTML5]]></title>
    <link href="http://demin.ws/blog/russian/2010/04/19/html5-presentation/"/>
    <updated>2010-04-19T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/04/19/html5-presentation/</id>
    <content type="html"><![CDATA[<p>HTML5 презентует сам себя: <a href="http://apirocks.com/html5/html5.html">http://apirocks.com/html5/html5.html</a></p>

<p>На меня это произвело весьма сильное впечатление, особенно, когда многое собрано в одном месте и работает прямо в самой &ldquo;презентации&rdquo;.</p>

<p>У меня под Chrome все работает. Не уверен про IE, но, говорят, что под FireFox тоже все работает.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Test Framework 1.5.0]]></title>
    <link href="http://demin.ws/blog/russian/2010/04/16/google-test-framework-150/"/>
    <updated>2010-04-16T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/04/16/google-test-framework-150/</id>
    <content type="html"><![CDATA[<p>Сегодня вышла новая версия правильной библиотеки для unit-тестирования Google <a href="http://code.google.com/p/googletest/">C++ Testing Framework 1.5.0</a>.</p>

<p>Пока обзор будет краткий (фактически, это просто перевод официального анонса):</p>

<ul>
<li><code>assert</code>&lsquo;ы теперь можно безопасно запускать из разных потоков (работает на платформах, где есть pthreads)</li>
<li>при использовании предикатов в <code>EXPECT_TRUE()</code> теперь можно самому задавать сообщения их ошибках</li>
<li>библиотеку теперь можно собрать как DLL (эту возможность многие ждали)</li>
<li>&ldquo;упакованная&rdquo; версия теперь входит состав дистрибутива, и ее не надо создавать самому через скрипт (&ldquo;упакованная&rdquo; версия - это просто два файла <code>gtest.h</code> и <code>gtest-all.cc</code>, которые можно добавить в проект и не возиться с двоичной библиотекой)</li>
<li>система сборки теперь работает через <code>CMake</code> (это фантастически удобно)</li>
<li>добавлены две новые платформы: Solaris и AIX</li>
<li>убрана поддержка VC++ 7.1 с отключенными исключениями (если исключения включены, то все еще можно компилировать в VC++ 7.1)</li>
</ul>

<p>Для тех, кто слышит про Google Test впервые, ниже предыдущие посты об этой библиотеке и о тестировании в целом (многие на русском языке):</p>

<ul>
<li><a href="http://code.google.com/p/googletest-translations/">Руководство для начинающих по Google Test и Google Mock</a></li>
<li><a href="http://demin.ws/blog/russian/2009/10/03/google-test-framework-140/">Google Test Framework 1.4.0</a></li>
<li><a href="http://demin.ws/blog/russian/2009/03/19/google-test-framework-130/">Google Test Framework 1.3.0</a></li>
<li><a href="http://demin.ws/blog/russian/2009/10/15/introduction-to-googlemock-talk/">Введение в Google Mock (видео)</a></li>
<li><a href="http://demin.ws/blog/russian/2009/10/07/google-test-framework-authors-presentation/">Презентация от авторов Google C++ Testing Framework</a></li>
<li><a href="http://demin.ws/blog/russian/2009/04/03/code-bullseye-coverage/">Анализатор покрытия кода тестами Bullseye Coverage</a></li>
<li><a href="http://demin.ws/blog/russian/2009/02/23/static-code-analysis-coverity-klocwork/">Статический анализ кода - Coverity, Klocwork</a></li>
<li><a href="http://demin.ws/blog/russian/2009/03/01/unit-testing-in-c/">Unit-тестирование в языке С</a></li>
<li><a href="http://demin.ws/blog/russian/2009/05/04/automated-product-build/">Автоматизация сборки продукта</a></li>
<li><a href="http://demin.ws/blog/russian/2009/04/26/continuous-integration-with-hudson/">Система автоматизированной интеграции Hudson</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Задача про поиск середины связного списка]]></title>
    <link href="http://demin.ws/blog/russian/2010/04/16/find-middle-of-linked-list-problem/"/>
    <updated>2010-04-16T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/04/16/find-middle-of-linked-list-problem/</id>
    <content type="html"><![CDATA[<p>Сегодня был озадачен следующим вопросом (у нас его иногда задают на интервью), требующим потенциально ответа в 5-10 минут, желательно с примером кода.</p>

<p><em>Найти середину связного списка за один проход. Длина заранее не известна, а есть только указатель на голову.</em></p>

<p>Кто не догадается, смотрите комментарии. Уверен, там задачу быстро &ldquo;возьмут&rdquo;.</p>

<p>Задача очень жизненная, и реально полезно знать решение.</p>

<p>Как научиться решать задачи подобного рода? алгоритмические программистские задачи? В чем суть обучения?</p>

<p>Есть определенная <a href="http://demin.ws/blog/russian/2010/03/31/productive-programmers-and-their-types/">категория программистов</a>, которым я профессионально завидую. Это бойцы спортивного программирования типа TopCoder&rsquo;а, Google Code Jam&rsquo;а и прочих контестов. Для которых что-то вроде поиска цепочек в <a href="http://ru.wikipedia.org/wiki/%D0%A7%D0%B0%D1%81%D1%82%D0%B8%D1%87%D0%BD%D0%BE_%D1%83%D0%BF%D0%BE%D1%80%D1%8F%D0%B4%D0%BE%D1%87%D0%B5%D0%BD%D0%BD%D0%BE%D0%B5_%D0%BC%D0%BD%D0%BE%D0%B6%D0%B5%D1%81%D1%82%D0%B2%D0%BE">частично упорядоченном множестве</a> как для меня сложить две переменные. Там, где мне надо открыть книгу или хотя бы Википедию, они это пишут сходу из головы.</p>

<p>Из личного опыта, перед некоторыми интервью, я мог на память сходу написать любую базовую сортировку, вставку в красно-черное дерево, послойный обход дерева и многое другое. Но проблема в том, что это ни разу не помогало на интервью! Все что я в итоге решал (или не решал), было связанно с задачами, которые могли быть в разы проще любой сортировки или дерева, но требовали &ldquo;догадаться&rdquo;. И основном спортивное программирование построено на теме &ldquo;догадаться как&rdquo;.</p>

<p>Но как научиться догадываться? Есть ли какая-то методика обучения? Именно методика, а не &ldquo;решай все подряд, и все тебе будет&rdquo;. Второй подход, конечно, работает, но методика могла бы ускорить процесс, сделать его более эффективным.</p>

<p>Например, взять физику или математику. Обычно ты учишь теорию и ее отражение на физический мир вокруг нас, учишь уже выведенные законы, теоремы (возможно их доказательства) и построенные на них базовые формулы. Далее при решении конкретной задачи ты, основываясь на выученных основах, пытаешься понять, что за физическая или математическая модель могла бы иметь место в задаче. Далее пытаешься приложить эту модель и смотришь, что получается (или не получается).</p>

<p>То есть тут есть методика, которая помогает тебе найти связь между теорией и задачей. Конечно, есть задачи, в которых &ldquo;надо догадаться&rdquo;, но это как опция, нежели норма. Тебе дается инструмент, когда зная малое, можно решать многое.</p>

<p>В нашем же программистском мире, как мне кажется, все из серии &ldquo;надо догадаться&rdquo;. Взять, например, эту задачу про поиск середины связного списка в один проход. Я могу изучить всё про такие списки: как их строить, как их сортировать, как их обходить (просто линейно) и т.д. Но все эти знания не подвинут меня ни шаг к решению этой простой задачи. Тут надо &ldquo;просто догадаться&rdquo;. Как научить догадываться? Неужели есть только один путь - решать и решать, пока количество не перейдет в качество, и ты будешь легко решать задачи на &ldquo;догадаться&rdquo; просто потому, что ты это уже так или иначе видел раньше.</p>

<p>Кстати, сравним среднего выпускника MIT и <a href="http://www.mai.ru/">МАИ</a> (я там учился). Наверное, выпускник MIT потенциально &ldquo;сильнее&rdquo; выпускника МАИ (при всей моей любви и уважении к Альма-матер). Почему? Там книги другие? Там профессора хуже? Я не могу пожаловаться, что мой курс программирования, где изучались алгоритмы был недостаточен.</p>

<p>Пока у меня только одно объяснение - скажем так, в объективно престижных ВУЗах просто больше прессуют и фактически заставляют учиться (иначе - это пустая трата денег и большой шанс вылететь).</p>

<p>Выходит, что количество так или иначе переходит в качество. И никакой магии.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Можно ли memset'ить float и double?]]></title>
    <link href="http://demin.ws/blog/russian/2010/04/16/is-it-possible-to-memset-float-and-double/"/>
    <updated>2010-04-16T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/04/16/is-it-possible-to-memset-float-and-double/</id>
    <content type="html"><![CDATA[<p>В финансовой области постоянно приходится иметь дело с ценами, а цены удобно держать как <code>float</code> или <code>double</code>. Также финансовой сфере много старого когда, написанного на С или Фортране.</p>

<p>А в мире языке С практика инициализации структур нулем через memset является весьма распространенной и в целом не самой плохой практикой.</p>

<p>Вопрос: а что, если в структуре есть поля типа <code>double</code> или <code>float</code>. Что будет, если поля этих типов будут тупо забиты нулями, каково будет значение этих полей?</p>

<p>Для начала я проверил у себя на Солярисе и в Visual Studio 9 - все вроде нормально. После <code>memset</code>&lsquo;а нулем и <code>float</code> и <code>double</code> тоже равны нулю.</p>

<p>Хотя в целом правильный ответ такой: если ваш компилятор гарантирует хранение вещественных чисел в форматe <a href="http://en.wikipedia.org/wiki/IEEE_754-2008">IEEE 754</a>, то вы в безопасности. Если нет (стандарт языка не гарантирует, что должен использоваться именно IEEE 754), то могут быть неожиданности.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Какие задачи задавать на интервью]]></title>
    <link href="http://demin.ws/blog/russian/2010/04/08/what-problems-to-ask-at-interviews/"/>
    <updated>2010-04-08T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/04/08/what-problems-to-ask-at-interviews/</id>
    <content type="html"><![CDATA[<p>Лично я считаю, что задавать на интервью программиста около математические задачки или задачи типа «на сообразительность» – это бесполезно (а значит не нужно). Почему? Моя логика крайне проста. Какова цель интервью? Как можно точнее понять, подходит ли вам человек по нужным критериям. А что именно скажет вам о человеке факт того, что он решил или не решил математическо-логическую задачу? Поможет ли это оценить уровень знаний кандидата в матанализе или теории вероятности, алгебре и даже арифметике? Нет. Ибо подобные задачи нельзя классифицировать по сложности, а значит и по ожидаемому уровню знаний, необходимому для их решения.</p>

<p>Например, задача, часто применяемая (не мной) на интервью.</p>

<p><em>Из двух городов навстречу друг другу едет велосипедист и летит муха. Скорость мухи в четыре раза быстрее велосипедиста. Когда велосипедист и муха встречаются где-то по середине, муха разворачивается и летит назад, а велосипедист также едет себе дальше. Когда муха возвращается в исходную точку, она разворачивается и снова летит на встречу велосипедисту. Когда они встречаются, все повторяется снова. Муха курсирует подобным образом от своего города до велосипедиста и назад то тех пор, пока велосипедист не приедет в ее город. Вопрос: каково соотношение расстояний, пройденных мухой и велосипедистом?</em></p>

<p>Задача для средней школы. Хотя лично мне будет без разницы, решит ее человек или нет. Ибо есть гораздо более конкретные вопросы и задачи, чтобы понять, что человек знает, умеет и любит делать. Обычно использование подобных задач призвано потешить самолюбие самого интервьюера типа «ну я то это решил в свое время!», но вот только не уточняется, за какое время.</p>

<p>В плане именно вопросов-задач, куда полезнее попросить написать небольшой код для обхода дерева (например, для поиска медианы в BST), или поиска кратчайшего пути в графе, или придумать на месте хеш-функцию для каких-то данных, или, например, спросить: до N какого порядка реально решать задачи с O(N^2), а O(N^3), а на кластере? и т.д. Подобные вопросы дают реальный выхлоп, который применим в жизни.</p>

<p>А уж если есть желание «проверить сообразительность», то куда полезнее вопросы на общее представления о мире вокруг и взаимосвязях в нем. Я как-то был реально озадачен, когда меня спросили «А сколько весит Боинг-747?». Я хоть и учился в МАИ, но точной цифры ни разу не знал. Но исходя и элементарных понятий и количестве людей в самолете, грузе, соотношении топлива и массы и т.д. – можно дать оценку, или что более важно, показать умение логически и реально мыслить.</p>

<p>Интервью – это не бенефис интервьюера. Это решение конкретной задачи поиска человека, максимально подходящего вашим требованиям (а неужели у кого-то в требованиях написано «должен уметь решать задачи школьной программы»? если да, это наем учителя средних классов, а не программиста).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bernard Girard, "The Google Way"]]></title>
    <link href="http://demin.ws/blog/russian/2010/04/07/google-way/"/>
    <updated>2010-04-07T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/04/07/google-way/</id>
    <content type="html"><![CDATA[<p>Было интересно почитать про историю Google, посему купил вот эту книгу.</p>

<p>Bernard Girard, &ldquo;The Google Way&rdquo;</p>

<p><a href="http://www.amazon.co.uk/gp/product/1593271840/ref=as_li_tf_il?ie=UTF8&tag=prodiy-21&linkCode=as2&camp=1634&creative=6738&creativeASIN=1593271840"><img border="0" src="http://ws.assoc-amazon.co.uk/widgets/q?_encoding=UTF8&Format=_SL160_&ASIN=1593271840&MarketPlace=GB&ID=AsinImage&WS=1&tag=prodiy-21&ServiceVersion=20070822" ></a><img src="http://www.assoc-amazon.co.uk/e/ir?t=prodiy-21&l=as2&o=2&a=1593271840" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p>Не могу сказать, что мне особо понравилось, хоть фактов в книге предостачно: и про самое начало, и про выход на <a href="http://ru.wikipedia.org/wiki/%D0%9F%D0%B5%D1%80%D0%B2%D0%B8%D1%87%D0%BD%D0%BE%D0%B5_%D0%BF%D1%83%D0%B1%D0%BB%D0%B8%D1%87%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%B5%D0%B4%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%B8%D0%B5">IPO</a> (работая сейчас в сфере finance, знаю, как обычно инвестиционные банкиры наживаются на процедуре IPO, но Гугл их сильно в этом плане разочаровал, не дав им кусок своего пирога), и про правило 20%, и про систему peer review, и про наличие технической иерархии и про многое другое.</p>

<p>Разок прочитать можно, но не более того. Книгу продал назад через <a href="http://www.amazon.co.uk/gp/seller/sell-your-stuff.html">Amazon Market Place</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Задача про гномов и шапки]]></title>
    <link href="http://demin.ws/blog/russian/2010/04/07/gnomes-and-hats-problem/"/>
    <updated>2010-04-07T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/04/07/gnomes-and-hats-problem/</id>
    <content type="html"><![CDATA[<p><a href="http://stas-blogspot.blogspot.com/">Товарищ</a> рассказал интересную задачку и был очень удивлен, что я ее не слышал.</p>

<p>Поймал людоед несколько гномов (количество в задаче не задается), и сказал, что завтра он всех выстроит в колонну один за другим и оденет всем на головы либо черную, либо белую шапку. Гномы будут стоять так, что каждый будет видеть шапки только тех, кто впереди (последний видит всех, кроме себя, а первый – никого). Свою собственную шапку гномы не видят. Количество черных и белых шапок произвольное (хоть все белые, хоть все черные). Далее людоед, начиная с последнего, будет каждого спрашивать, какая шапка у него на голове. Гном может ответить только одним из двух слов «черная» или «белая». Если ответ неверный, но гном съедается, иначе переходят к следующему. В процессе поедания все пока еще живые гномы слышат, что проиходит сзади, то есть хоть они и не видят товарищей сзади, но слышат – когда кого съели, а кого нет, и также их ответы.</p>

<p>В общем, за ночь гномы покумекали, и придумали стратегию, как они все останутся живыми кроме одного. Но и тот один будет иметь шанс выжить.</p>

<p>Вопрос: что за стратегию придумали гномы?</p>

<p>Задача имеет очень красивое решение, имеющее прямое отношение к компьютерной науке.</p>

<p>Ответ будет позже, если кто вдруг не догадается.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jason Fried, David Heinemeier Hansson, "Rework"]]></title>
    <link href="http://demin.ws/blog/russian/2010/04/07/rework/"/>
    <updated>2010-04-07T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/04/07/rework/</id>
    <content type="html"><![CDATA[<p>Книга от создателей компании <a href="http://37signals.com/">37 signals</a> и <a href="http://rubyonrails.org/">Ruby on Rails</a> о том, как можно вести малый бизнес в IT, не разрывая зад по 10-12 часов в день, а только с 9 до 5, и при этом достойно и даже очень зарабатывать.</p>

<p>Jason Fried, David Heinemeier Hansson, &ldquo;Rework&rdquo;</p>

<p><a href="http://www.amazon.co.uk/gp/product/0307463745/ref=as_li_tf_il?ie=UTF8&tag=prodiy-21&linkCode=as2&camp=1634&creative=6738&creativeASIN=0307463745"><img border="0" src="http://ws.assoc-amazon.co.uk/widgets/q?_encoding=UTF8&Format=_SL160_&ASIN=0307463745&MarketPlace=GB&ID=AsinImage&WS=1&tag=prodiy-21&ServiceVersion=20070822" ></a><img src="http://www.assoc-amazon.co.uk/e/ir?t=prodiy-21&l=as2&o=2&a=0307463745" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p>Довольно пафосная книга, состоящая из мини глав, похожих на посты в блоге (эта книга и родилась из блога), но многие ее посылы стоит усвоить. С ними легче и приятнее жить, и во многом ранее скучном и нудном может появиться вдруг смысл. Также книга может подтолкнуть в мир самостоятельной работы на самого себя, например, написание shareware.</p>

<p>Но одна глава мне очень понравилась. Про резюме и сопроводительные письма.</p>

<p>Приведу ее целиком как есть и собственный вольный перевод, если кому надо.</p>

<p><em>Resumes are ridiculous</em></p>

<p><em>We all know resumes are a joke. They&rsquo;re exaggerations. They&rsquo;re filled with &ldquo;action verbs&rdquo; that don&rsquo;t mean anything. They list job titles and responsibilities that are vaguely accurate at best. And there&rsquo;s no way to verify most of what&rsquo;s on there. The whole thing is a face.</em></p>

<p><em>Worst of all, they&rsquo;re too easy. Anyone can create a decent-enough resume. That&rsquo;s why half-assed applicants love them so much. They can shotgun out hundreds at a time to potential employers. It&rsquo;s another form of spam. They don&rsquo;t care about landing your job; they just care about landing any job.</em></p>

<p><em>If someone sends out a resume to three hundred companies, that&rsquo;s a huge red flag right there. There&rsquo;s no way that applicant has researched you. There&rsquo;s no way he knows what&rsquo;s different about your company.</em></p>

<p><em>If you hire based on this garbage, you&rsquo;re missing the point of what hiring is about. You want a specific candidate who cares specifically about your company, your products, your customers, and your job.</em></p>

<p><em>So how do you find these candidates? First step: Check the cover letter. In a cover letter, you get actual communication instead of a list of skills, verbs, and years of irrelevance. There&rsquo;s no way an applicant can churn out hundreds of personalized letters. That&rsquo;s why the cover letter is a much better test than a resume. You hear someone&rsquo;s actual voice and are able to recognize if it&rsquo;s in tune with you and your company.</em></p>

<p><em>Trust you gut reaction. If the first paragraph sucks, the second has to work that much harder. If there&rsquo;s no hook in the first three, it&rsquo;s unlikely there&rsquo;s a match there. On the other hand, if your gut is telling you there&rsquo;s a chance at a real match, then move on to the interview stage.</em></p>

<p>Перевод:</p>

<p><em>Всем известно, что резюме – это ерунда. Одни преувеличения. В них полно «правильных» глаголов, которые ничего не значат. В них перечисляются должности и обязанности, которые в лучшем случае сомнительны. И нет никакой возможности проверить, что за всем этим стоит. Сплошной фарс.</em></p>

<p><em>И хуже все то, что их очень просто сделать. Любой может написать приличное резюме. Вот почему недоразвитые кандидаты так их любят. Они могут наплодить их сотни для потенциальных работодателей. Это еще один тип спама. Им не важно получить работу у вас. Им нужна какая-то работа.</em></p>

<p><em>Если кто-то посылает резюме в три сотни компаний, это плохой знак. Такой кандидат не пытался ничего о вас узнать, и чем ваша компания отличается от других.</em></p>

<p><em>Если вы нанимаете, основываясь на такой ерунде, теряется сам смысл найма. Вам нужен конкретный человек, интересующийся именно вашей компанию, вашими продуктами, вашими клиентами и вашей работой.</em></p>

<p><em>Так что делать, чтобы найти таких кандидатов? Во-первых, обратите внимание на сопроводительное письмо. В нем вы найдете настоящее обращение от кандидата, а не список умений, глаголов и кучи всего, не относящегося к делу. Вряд ли кандидат будет писать сотни личных писем. Поэтому сопроводительное письмо – это гораздо лучшая проверка, чем резюме. Вы услышите голос живого человека и сможете понять, подходит ли он вам и вашей компании.</em></p>

<p><em>Доверяйте нутру. Если в первом параграфе все плохо, во втором шансов уже мало. Если первые три вас не зацепили, вряд ли это ваш случай. С другой стороны, если вы чувствуете, что-то тут есть – переходите к интервью.</em></p>

<p>От себя могу добавить. Всегда стоит писать cover letter, причем вдумчивые и персонализированные. В процессе их написания часто приходит понимание - &ldquo;а хочу ли сам я там работать?&rdquo;</p>

<p>Книгу после прочтения я продал назад через Амазон.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Приведение последовательности через обмен соседних элементов (решение)]]></title>
    <link href="http://demin.ws/blog/russian/2010/04/02/sequence-transformation-by-swapping-adjacent-elements/"/>
    <updated>2010-04-02T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/04/02/sequence-transformation-by-swapping-adjacent-elements/</id>
    <content type="html"><![CDATA[<p>Итак, мое решение <a href="http://demin.ws/blog/russian/2010/03/31/sequence-transformation-by-swap-of-adjacent-elements/">вопроса о приведении одной последовательности к другой</a>, когда можно только переставлять два элемента.</p>

<p>Нас просят привести одну последовательность (исходную) к другой (целевой). То есть логично предположить, что одна последовательность в нужном порядке (целевая), а вторая (исходная) - нет. Так надо просто отсортировать исходную последовательность &ldquo;в целевую&rdquo;.</p>

<p>Так как целевая последовательность по условию не обязательно отсортированная, то при сортировке &ldquo;к ней&rdquo; нельзя просто сравнивать элементы исходной последовательности на больше/меньше, так как в этом случае мы получим на выходе сортировку по правилам системы исчисления. В нашем случае надо принять, что целевая последовательность и есть эталонный отсортированный алфавит, и он задает правила сортировки. При сравнении значений из этого алфавита надо понять, в какой позиции алфавита находится значение и использовать его индекс как ключ сортировки (функция <code>less()</code>).</p>

<p>Теперь, а какой алгоритм сортировки использовать, чтобы для перемещения элементов использовать только обмен соседних элементов (функция <code>swap()</code>)? Подходит сортировка вставками, когда на каждом шаге неотсортированный элемент последовательно &ldquo;пропихивается&rdquo; вниз к отсортированным. Тут как раз можно обойтись только обменом соседних элементов. Сама функция <code>insertion_sort()</code> является универальной и не зависит от компаратора <code>is_less()</code>.</p>

<pre class="hl">
<span class="hl ppc">#include &lt;stdlib.h&gt;</span>
<span class="hl ppc">#include &lt;stdio.h&gt;</span>

<span class="hl kwb">void</span> <span class="hl kwd">swap</span><span class="hl opt">(</span><span class="hl kwb">int</span><span class="hl opt">*</span> a<span class="hl opt">,</span> <span class="hl kwb">int</span> i<span class="hl opt">) {</span>
  <span class="hl kwb">int</span> t <span class="hl opt">=</span> a<span class="hl opt">[</span>i<span class="hl opt">];</span>
  a<span class="hl opt">[</span>i<span class="hl opt">] =</span> a<span class="hl opt">[</span>i <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">];</span>
  a<span class="hl opt">[</span>i <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">] =</span> t<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl ppc">#define N 8</span>

<span class="hl kwb">const int</span> etalon<span class="hl opt">[] = {</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">5</span><span class="hl opt">,</span> <span class="hl num">7</span><span class="hl opt">,</span> <span class="hl num">4</span><span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">,</span> <span class="hl num">9</span><span class="hl opt">,</span> <span class="hl num">8</span><span class="hl opt">,</span> <span class="hl num">6</span> <span class="hl opt">};</span>
<span class="hl kwb">int</span> from<span class="hl opt">[</span>N<span class="hl opt">] = {</span> <span class="hl num">8</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">4</span><span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">,</span> <span class="hl num">5</span><span class="hl opt">,</span> <span class="hl num">6</span><span class="hl opt">,</span> <span class="hl num">9</span><span class="hl opt">,</span> <span class="hl num">7</span> <span class="hl opt">};</span>

<span class="hl kwb">void</span> <span class="hl kwd">insertion_sort</span><span class="hl opt">(</span><span class="hl kwb">int</span><span class="hl opt">*</span> a<span class="hl opt">,</span> <span class="hl kwb">int</span> n<span class="hl opt">,</span> <span class="hl kwb">int</span> <span class="hl opt">(*</span>is_less<span class="hl opt">)(</span><span class="hl kwb">int</span><span class="hl opt">,</span> <span class="hl kwb">int</span><span class="hl opt">)) {</span>
  <span class="hl kwb">int</span> i<span class="hl opt">,</span> j<span class="hl opt">;</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> n<span class="hl opt">; ++</span>i<span class="hl opt">)</span> 
    <span class="hl kwa">for</span> <span class="hl opt">(</span>j <span class="hl opt">=</span> i <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span> j <span class="hl opt">&gt;=</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> <span class="hl kwd">is_less</span><span class="hl opt">(</span>a<span class="hl opt">[</span>j <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">],</span> a<span class="hl opt">[</span>j<span class="hl opt">]);</span> j<span class="hl opt">--)</span>
      <span class="hl kwd">swap</span><span class="hl opt">(</span>a<span class="hl opt">,</span> j<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">print_array</span><span class="hl opt">(</span><span class="hl kwb">const char</span><span class="hl opt">*</span> title<span class="hl opt">,</span> <span class="hl kwb">const int</span><span class="hl opt">*</span> a<span class="hl opt">,</span> <span class="hl kwb">int</span> n<span class="hl opt">) {</span>
  <span class="hl kwb">int</span> i<span class="hl opt">;</span>
  <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;%9s: &quot;</span><span class="hl opt">,</span> title<span class="hl opt">);</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> n<span class="hl opt">; ++</span>i<span class="hl opt">)</span>
    <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;%d &quot;</span><span class="hl opt">,</span> a<span class="hl opt">[</span>i<span class="hl opt">]);</span>
  <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">less</span><span class="hl opt">(</span><span class="hl kwb">int</span> a<span class="hl opt">,</span> <span class="hl kwb">int</span> b<span class="hl opt">) {</span>
  <span class="hl kwb">int</span> ia <span class="hl opt">= -</span><span class="hl num">1</span><span class="hl opt">,</span> ib <span class="hl opt">= -</span><span class="hl num">1</span><span class="hl opt">;</span>
  <span class="hl kwb">int</span> i<span class="hl opt">;</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> N<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>etalon<span class="hl opt">[</span>i<span class="hl opt">] ==</span> a<span class="hl opt">)</span> ia <span class="hl opt">=</span> i<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>etalon<span class="hl opt">[</span>i<span class="hl opt">] ==</span> b<span class="hl opt">)</span> ib <span class="hl opt">=</span> i<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>ia <span class="hl opt">&gt;=</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> ib <span class="hl opt">&gt;=</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">break</span><span class="hl opt">;</span>
  <span class="hl opt">}</span>
  <span class="hl kwa">return</span> ia <span class="hl opt">&lt;</span> ib<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
  <span class="hl kwb">int</span> i<span class="hl opt">,</span> j<span class="hl opt">;</span>

  <span class="hl kwd">print_array</span><span class="hl opt">(</span><span class="hl str">&quot;Original&quot;</span><span class="hl opt">,</span> from<span class="hl opt">,</span> N<span class="hl opt">);</span>
  <span class="hl kwd">insertion_sort</span><span class="hl opt">(</span>from<span class="hl opt">,</span> N<span class="hl opt">,</span> less<span class="hl opt">);</span>
  <span class="hl kwd">print_array</span><span class="hl opt">(</span><span class="hl str">&quot;Converted&quot;</span><span class="hl opt">,</span> from<span class="hl opt">,</span> N<span class="hl opt">);</span>
  <span class="hl kwd">print_array</span><span class="hl opt">(</span><span class="hl str">&quot;Etalon&quot;</span><span class="hl opt">,</span> etalon<span class="hl opt">,</span> N<span class="hl opt">);</span>

  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Запускаем:</p>

<pre><code> Original: 8 1 4 2 5 6 9 7 
Converted: 1 5 7 4 2 9 8 6 
   Etalon: 1 5 7 4 2 9 8 6 
</code></pre>

<p>Вроде работает.</p>

<p>Теперь что со сложностью. Принято считать, что сортировка вставками - это <code>O(N^2)</code> для худшего случая. Так как для сравнения элементов нам приходится искать линейно по эталонной последовательности на каждом шаге, то это еще <code>O(N)</code>. В этоге: <code>O(N^3)</code>.</p>

<p>Как вариант ускорения, можно изначально сделать отсортированную по значениям копию эталонной последовательности, и хранить не только значение, но его индекс. В этом случае поиск элемента будет уже занимать не <code>O(N)</code>, а <code>O(log(N))</code>, и общая сложность будет <code>O(log(N)*N^2)</code>.</p>

<p>В целом, все это не обязательно писать или помнить точную программу. Достаточно запомнить два вывода: алгоритм сортировки, использующий только обмен соседних элементов - это сортировка вставками, а ключ сортировки может быть далеко нетривиальной функцией.</p>

<p>Указание на эти два факта лично я счел бы на однозначно достаточный ответ.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[parseInt() в JavaScript]]></title>
    <link href="http://demin.ws/blog/russian/2010/04/02/parseint-in-javascript/"/>
    <updated>2010-04-02T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/04/02/parseint-in-javascript/</id>
    <content type="html"><![CDATA[<p>Напоролся на совершенно замечательное поведение в <code>parseInt()</code>&lsquo;e.</p>

<p>Я думал, что код ниже должен давать мне числа от 0 до 9:</p>

<pre class="hl">
<span class="hl kwa">var</span> n <span class="hl opt">= [</span> <span class="hl str">'00'</span><span class="hl opt">,</span> <span class="hl str">'01'</span><span class="hl opt">,</span> <span class="hl str">'02'</span><span class="hl opt">,</span> <span class="hl str">'03'</span><span class="hl opt">,</span> <span class="hl str">'04'</span><span class="hl opt">,</span> <span class="hl str">'05'</span><span class="hl opt">,</span> <span class="hl str">'06'</span><span class="hl opt">,</span> <span class="hl str">'07'</span><span class="hl opt">,</span> <span class="hl str">'08'</span><span class="hl opt">,</span> <span class="hl str">'09'</span> <span class="hl opt">];</span>
<span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> n<span class="hl opt">.</span>length<span class="hl opt">; ++</span>i<span class="hl opt">)</span>
  document<span class="hl opt">.</span><span class="hl kwd">writeln</span><span class="hl opt">(</span><span class="hl kwd">parseInt</span><span class="hl opt">(</span>n<span class="hl kwc">[i]</span><span class="hl opt">))</span>
</pre>

<p>Но выводится:</p>

<p>0 1 2 3 4 5 6 7 0 0</p>

<p>И это поведение законно, так как лидирующие нули рассматриваются как признак восьмеричного числа, а 8 и 9 не являются восьмеричными знаками.</p>

<p>Правильно надо писать так:</p>

<pre class="hl">
<span class="hl kwa">var</span> n <span class="hl opt">= [</span> <span class="hl str">'00'</span><span class="hl opt">,</span> <span class="hl str">'01'</span><span class="hl opt">,</span> <span class="hl str">'02'</span><span class="hl opt">,</span> <span class="hl str">'03'</span><span class="hl opt">,</span> <span class="hl str">'04'</span><span class="hl opt">,</span> <span class="hl str">'05'</span><span class="hl opt">,</span> <span class="hl str">'06'</span><span class="hl opt">,</span> <span class="hl str">'07'</span><span class="hl opt">,</span> <span class="hl str">'08'</span><span class="hl opt">,</span> <span class="hl str">'09'</span> <span class="hl opt">];</span>
<span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> n<span class="hl opt">.</span>length<span class="hl opt">; ++</span>i<span class="hl opt">)</span>
  document<span class="hl opt">.</span><span class="hl kwd">writeln</span><span class="hl opt">(</span><span class="hl kwd">parseInt</span><span class="hl opt">(</span>n<span class="hl kwc">[i]</span><span class="hl opt">,</span> <span class="hl num">10</span><span class="hl opt">));</span>
</pre>

<p>По хорошему, второй аргумент <code>parseInt()</code>&lsquo;а, задающий систему исчисления, должен быть обязательным, чтобы исключить путаницу.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Общий виртуальный десктоп]]></title>
    <link href="http://demin.ws/blog/russian/2010/04/02/shared-virtual-desktop/"/>
    <updated>2010-04-02T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/04/02/shared-virtual-desktop/</id>
    <content type="html"><![CDATA[<p>В крупных конторах с множеством UNIX-программистов, работающих в основном через telnet/ssh/xterm, разумно сделать общий NFS-раздел, который виден всем, и также монтируется сразу на много машин. Во-первых, все имеют доступ практически ко всему в development пространстве, и во-вторых, содержимое моего <code>home</code> каталога всегда одно и то же на всех машинах (не надо вручную копировать файлы с машины на машину).</p>

<p>Минуту назад я не смог залогиниться xterm&rsquo;ом из-за каких-то временных проблем в сети и попросил коллегу проверить, все ли работает. У него получилось, и он типа сказал в шутку, что жаль не может передать мне его телнетное окно.</p>

<p>Так вот, только родилась мысль &ndash; а что, если все разработчики будут также &ldquo;шарить&rdquo; общий огро-о-о-мный виртуальный десктоп? Захотел что-то передать/показать коллеге &ndash; просто перебросил окно в его &ldquo;зону видимости&rdquo;.</p>

<p>Идея, конечно, утопичная, но красивая.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Продуктивные программисты и их типы]]></title>
    <link href="http://demin.ws/blog/russian/2010/03/31/productive-programmers-and-their-types/"/>
    <updated>2010-03-31T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/03/31/productive-programmers-and-their-types/</id>
    <content type="html"><![CDATA[<p>Не секрет, в сфере программирования работает много особей мужского пола. И также не секрет, что настоящие программисты обожают померяться п… знаниями, а конкретно, в плане чья программа круче! Лично я не являюсь крутанским мега крутаном в плане алгоритмов, и мне далеко до бойцов высшей лиги TopCoder’а, Google Code Jam’а и т.д., но алгоритмы люблю и ими интересуюсь.</p>

<p>Но как мне кажется, алгоритмы – это не единственная сфера интересов нашего брата. Есть еще языковеды, которые будучи разбуженные ночью могут сходу правильно написать любой хитрый шаблон в С++ или связку задорных лямбда функций, вместо унылых циклов и условий в Питоне и т.д., так как досконально знают язык во всех мелочах.</p>

<p>Далее есть спецы по различным API – например, им не надо глядеть в man каждый раз при вызове <code>socket (7)</code>, чтобы вспомнить, как там правильно подавить появление сигнала <code>SIGPIPE</code> и т.д.</p>

<p>Дальше идут знатоки проектирования. Всякие темы типа ООП, например, когда именно лучше применять агрегирование, а когда композицию и т.д.</p>

<p>За ними шагают апологеты тестирования – они во всех изматывающих подробностях знают, как правильно, например, написать конструктор класса, что класс было просто тестировать.</p>

<p>Может, есть и еще категории (если кто знает, прошу делиться).</p>

<p>К чему я все это веду. Грамотно, когда при собеседовании кандидатов (лично или по телефону) задействуют обычных программистов, причем желательно выбранных случайно, и желательно, чтобы проводящий интервью имел минимум личной информации о кандидате, так как его задача оценить только технический уровень, а всякие темы типа мотиваций и причин оставить на отдел кадров. Идеалистичная картина, но к ней хочется стремиться.</p>

<p>У нас контора весьма крупная. Количество программистов более нескольких сотен. Есть из кого выбирать для интервьюирования. Многие не любят учувствовать в этом, но лично я люблю. По нескольким причинам. Во-первых, постоянно есть возможность глядеть на себя со стороны, так как если человек по телефону как орехи разделал все твои вопросы или поставил тебя в тупик встречным вопросом, то может ты как-то уже профессионально «засахарился»? Или если большинство коллег дали совершенно противоположную твоей оценку, может ты спрашиваешь какую-то ерунду и думаешь, что это важно? А во-вторых, есть появляется возможность быть в курсе, что вообще сейчас на рынке труда.</p>

<p>Теперь совсем к теме. Интересно слушать, как люди проводят интервью по телефону. Что они спрашивают, на чем делают акценты. Тут сразу становится видно, кто какой категории принадлежит человек (алгоритмист, языковед, API’ист, теоретик и т.д.)</p>

<p>Конечно, в продуктивном программисте весь должно быть развито. Какой толк от алгоритмиста, который напишет так, что другой никогда не поймет и тем более не протестирует? Или от теоретика, не имеющего представления о вычислительных сложностях базовых алгоритмов?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Добавление элементов в std::vector]]></title>
    <link href="http://demin.ws/blog/russian/2010/03/31/adding-elements-to-vector/"/>
    <updated>2010-03-31T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/03/31/adding-elements-to-vector/</id>
    <content type="html"><![CDATA[<p>На собеседованиях по С++ задают много вопросов про контейнеры STL. И самый безобидный из них, как думал, <code>std::vector</code>. Но вот и по нему попался интересный вопрос.</p>

<p>Представим, что стратегия управления внутренним буфером контейнера <code>std::vector</code> (в реальности, она иная) такова: изначально размер буфера равен нулю, и он будет увеличивается вдвое каждый раз, когда в нем уже нет места под следующий элемент.</p>

<p>Вопрос: оценить вычислительную сложность последвательного добавления в контейнер k элементов (как уже говорилось, начальная длина контейнера нулевая). Элементы добавляются в конец.</p>

<p>Как я полагаю, в среднем ожидается, что отвечать стоит практически сразу.</p>

<p>На всякий случай: мой ответ будет завтра.</p>

<p>А сейчас мини эксперимент с реальным <code>std::vector</code> (компилятор, и сообразно STL — Sun C++ 5.9 SunOS_sparc) для выяснения реальной стратегии роста буфера в векторе:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;vector&gt;</span>
<span class="hl ppc">#include &lt;iostream&gt;</span>
<span class="hl ppc">#include &lt;iomanip&gt;</span>
<span class="hl ppc">#include &lt;cstdlib&gt;</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
  <span class="hl kwb">int</span> last <span class="hl opt">= -</span><span class="hl num">1</span><span class="hl opt">;</span>
  std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span><span class="hl kwb">int</span><span class="hl opt">&gt;</span> a<span class="hl opt">;</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span><span class="hl kwd">setw</span><span class="hl opt">(</span><span class="hl num">12</span><span class="hl opt">) &lt;&lt;</span> <span class="hl str">&quot;Capacity&quot;</span> <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot; &quot;</span> 
            <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span><span class="hl kwd">setw</span><span class="hl opt">(</span><span class="hl num">12</span><span class="hl opt">) &lt;&lt;</span> <span class="hl str">&quot;Size&quot;</span>
            <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span><span class="hl kwd">setw</span><span class="hl opt">(</span><span class="hl num">12</span><span class="hl opt">) &lt;&lt;</span> <span class="hl str">&quot;Ratio&quot;</span> <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl
            <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span><span class="hl kwd">setw</span><span class="hl opt">(</span><span class="hl num">12</span><span class="hl opt">) &lt;&lt;</span> std<span class="hl opt">::</span><span class="hl kwd">setfill</span><span class="hl opt">(</span><span class="hl str">'-'</span><span class="hl opt">) &lt;&lt;</span> <span class="hl str">&quot;-&quot;</span> <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot; &quot;</span> 
            <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span><span class="hl kwd">setw</span><span class="hl opt">(</span><span class="hl num">12</span><span class="hl opt">) &lt;&lt;</span> <span class="hl str">&quot;-&quot;</span> <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot; &quot;</span>
            <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span><span class="hl kwd">setw</span><span class="hl opt">(</span><span class="hl num">12</span><span class="hl opt">) &lt;&lt;</span> <span class="hl str">&quot;-&quot;</span> <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>

  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span><span class="hl kwd">setfill</span><span class="hl opt">(</span><span class="hl str">' '</span><span class="hl opt">) &lt;&lt;</span> std<span class="hl opt">::</span>fixed<span class="hl opt">;</span>
  <span class="hl kwa">while</span> <span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>a<span class="hl opt">.</span><span class="hl kwd">capacity</span><span class="hl opt">() !=</span> last<span class="hl opt">) {</span>
      last <span class="hl opt">=</span> a<span class="hl opt">.</span><span class="hl kwd">capacity</span><span class="hl opt">();</span>
      std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span><span class="hl kwd">setw</span><span class="hl opt">(</span><span class="hl num">12</span><span class="hl opt">) &lt;&lt;</span> a<span class="hl opt">.</span><span class="hl kwd">capacity</span><span class="hl opt">() &lt;&lt;</span> <span class="hl str">&quot; &quot;</span>
                <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span><span class="hl kwd">setw</span><span class="hl opt">(</span><span class="hl num">12</span><span class="hl opt">) &lt;&lt;</span> a<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">() &lt;&lt;</span> <span class="hl str">&quot; &quot;</span>
                <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span><span class="hl kwd">setw</span><span class="hl opt">(</span><span class="hl num">12</span><span class="hl opt">) &lt;&lt;</span> std<span class="hl opt">::</span><span class="hl kwd">setprecision</span><span class="hl opt">(</span><span class="hl num">6</span><span class="hl opt">)</span>
                <span class="hl opt">&lt;&lt; (</span><span class="hl kwb">float</span><span class="hl opt">)</span>a<span class="hl opt">.</span><span class="hl kwd">capacity</span><span class="hl opt">() /</span> a<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">() &lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
    <span class="hl opt">}</span>
    a<span class="hl opt">.</span><span class="hl kwd">push_back</span><span class="hl opt">(</span>std<span class="hl opt">::</span><span class="hl kwd">rand</span><span class="hl opt">());</span>
  <span class="hl opt">}</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>А вот и результат:</p>

<pre><code>    Capacity         Size       Ratio
------------ ------------ ------------
           0            0          NaN
          32            1    32.000000
          64           33     1.939394
         103           65     1.584615
         166          104     1.596154
         268          167     1.604790
         433          269     1.609665
         700          434     1.612903
        1132          701     1.614836
        1831         1133     1.616064
        2962         1832     1.616812
        4792         2963     1.617280
        7753         4793     1.617567
       12544         7754     1.617746
       20296        12545     1.617856
       32838        20297     1.617875
       53131        32839     1.617924
       85965        53132     1.617952
      139091        85966     1.617977
      225049       139092     1.617987
      364129       225050     1.617992
      589160       364130     1.617994
      953260       589161     1.617996
     1542374       953261     1.617998
     2495561      1542375     1.617999
     4037817      2495562     1.617999
     6533187      4037818     1.617999
    10570696      6533188     1.618000
    17103386     10570697     1.618000
    27673278     17103387     1.618000
    44775363     27673279     1.618000
    72446537     44775364     1.618000
   117218496     72446538     1.618000
   189659526    117218497     1.618000
   306869113    189659527     1.618000
</code></pre>

<p>Выходит, что для моей STL - это какой-то магический коэффициент 1.618.</p>

<p><strong>Update</strong>: В комментариях подсказали хорошую ссылку на тему <a href="http://alenacpp.blogspot.com/2005/06/vector_30.html">стратегии управления размером вектора</a>.</p>

<p><strong>Update 2</strong>: Лично мой ответ на тему вычислительной сложности последовательного добавления элементов в вектор, если вектор будет удваивать размер буфера при переполнении.</p>

<p>Так как мы добавляем <code>k</code> элементов, то это как минимум <code>O(k)</code>. А так как по условию вектор удваивает буфер каждый раз, когда нет места, то произойдет <code>log2(k)</code> раз (так как по условию элементы поступают последовательно).</p>

<p>Получаем в этоге: <code>O(k*log2(k))</code>.</p>

<p><strong>Update 3</strong>: В комментариях меня поправили: <code>O(k + log2(k))</code> или просто <code>O(k)</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Приведение последовательности через обмен соседних элементов]]></title>
    <link href="http://demin.ws/blog/russian/2010/03/31/sequence-transformation-by-swap-of-adjacent-elements/"/>
    <updated>2010-03-31T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/03/31/sequence-transformation-by-swap-of-adjacent-elements/</id>
    <content type="html"><![CDATA[<p>Вдогонку к <a href="http://demin.ws/blog/russian/2010/03/31/adding-elements-to-vector/">вопросу о векторе</a> предлагаю еще блиц вопрос (ни разу не претендую на оригинальность, но вопрос родился лично у меня в процессе обдумывания алгоритма формирования таблиц <a href="http://demin.ws/blog/russian/2010/03/04/trading-systems-for-dummies/">market depth</a>): есть некоторая произвольная конечная последовательность (массив, строка и т.д.). Повторения значений возможны. Также задана вторая последовательность такой же длины, состоящая в точности из тех же элементов, что и первая, но расположенных в другом порядке.</p>

<p>Вопрос: как на месте преобразовать первую последовательность во вторую, если в плане перемещения/копирования элементов есть только одна функция - обмен двух соседних элементов. Произвольный доступ к одиночным элементам есть только на чтение. Для перезаписи/изменения элементов надо пользоваться данной функцией обмена.</p>

<p>Конечно, интересно иметь и оценку сложности.</p>

<p>Мой ответ, если кому интересно, будет завтра.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EcoDisc]]></title>
    <link href="http://demin.ws/blog/russian/2010/03/29/ecodisc/"/>
    <updated>2010-03-29T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/03/29/ecodisc/</id>
    <content type="html"><![CDATA[<p>Пришел недавно очередной выпуск <a href="http://www.linuxformat.co.uk">Linux Format</a>. Как всегда в нем был DVD диск. Но в этот раз меня сильно удивил диск как таковой. Поглядите, что можно с ним делать без минимального ему вреда и без каких-либо усилий:</p>

<p><img src="http://demin.ws/images/blog/ecodisc-1.jpg" /></p>

<p><img src="http://demin.ws/images/blog/ecodisc-2.jpg" /></p>

<p><img src="http://demin.ws/images/blog/ecodisc-3.jpg" /></p>

<p>Называется &ldquo;EcoDisc&rdquo;.</p>

<p>Пластина более чем в два раза тоньше обычного DVD и от этого элементарно гнется. Сразу напомнило старые дешевые заменители нормальных виниловых пластинок голубого цвета, которые можно было сворачивать с трубочку. Я с таких в детстве слушал аудиосказки.</p>

<p>Но в целом читаемый, нормально сбалансированный DVD, от которого привод не стремится на взлет.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Модель процессора с одной командой]]></title>
    <link href="http://demin.ws/blog/russian/2010/03/26/one-command-cpu/"/>
    <updated>2010-03-26T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/03/26/one-command-cpu/</id>
    <content type="html"><![CDATA[<p>Предыдущий <a href="http://demin.ws/blog/russian/2010/03/17/exchange-two-variable-by-xor/">пост про обмен переменных через XOR</a> вызвал неожиданный всплеск интереса, и популярность этого мини поста превысила популярность пространных длинных постов про трейдинговые и процессинговые системы. Ну что - программисты любят код. Попробуем продолжить тему битовой арифметики.</p>

<p>В середине 90-x, в эхо-конференции Фидо RU.HACKER, небезысвестный Solar Designer (он же <a href="http://en.wikipedia.org/wiki/Alexander_Peslyak">Alexander Peslyak</a>, автор таких вещей как <a href="http://openwall.com/john/">John The Ripper</a> и <a href="http://openwall.com/">Openwall Linux</a>), опубликовал интересную программу собственного сочинения, и предлагал попробовать ее взломать, угадав пароль, который она запрашивает и проверяет.</p>

<p>В отличие от большинства подобных hackme, в программе не было трюков, затрудняющих работу отладчика. Единственная трудность - это логика самой программы, так весь ее исполняемый код - это менее 100 байт интерпретатора виртуальной машины, которая умеет делать только одну операцию - NOR (или <a href="http://ru.wikipedia.org/wiki/%D0%A1%D1%82%D1%80%D0%B5%D0%BB%D0%BA%D0%B0_%D0%9F%D0%B8%D1%80%D1%81%D0%B0">Стрелку Пирса</a>).</p>

<p>У этой виртуальной машины память линейна и стоит из 16-х битных слов. Данные и исполняемый код могут перемешиваться. Каждая инструкция состоит из трех слов - адресов операндов. Исполнение инструкции - это в чтении из памяти двух слов, адреса которых лежат в первых двух операндах, проведения между ними операции NOR и записи результата по адресу, заданному в третьем операнде. После выполнения инструкции указатель команд увеличивается на 3 (чтобы указывать на следующую инструкцию), и все повторяется сначала.</p>

<p>Трюк тут в том, что указатель на текущую инструкцию находится в адресном пространстве интерпретатора, поэтому для реализации команды перехода надо просто записать значение в ячейку, где этот указатель хранится. Сам интерпретатор очень прост и может быть написан на чем угодно. В оригинальной программе он был ассемблере x86:</p>

<pre class="hl">
<span class="hl kwa">cld</span>
<span class="hl kwc">emCPU:</span>
<span class="hl kwa">mov</span>  <span class="hl kwb">si</span><span class="hl opt">,</span>emIP
<span class="hl kwa">lodsw</span>
<span class="hl kwa">xchg</span> <span class="hl kwb">ax</span><span class="hl opt">,</span><span class="hl kwb">di</span>
<span class="hl kwa">mov</span>  <span class="hl kwb">di</span><span class="hl opt">,[</span><span class="hl kwb">di</span><span class="hl opt">]</span>
<span class="hl kwa">lodsw</span>
<span class="hl kwa">xchg</span> <span class="hl kwb">ax</span><span class="hl opt">,</span><span class="hl kwb">bx</span>
<span class="hl kwa">or</span>   <span class="hl kwb">di</span><span class="hl opt">,[</span><span class="hl kwb">bx</span><span class="hl opt">]</span>
<span class="hl kwa">lodsw</span>
<span class="hl kwa">xchg</span> <span class="hl kwb">ax</span><span class="hl opt">,</span><span class="hl kwb">di</span>
<span class="hl kwa">not</span>  <span class="hl kwb">ax</span>
<span class="hl kwa">mov</span>  emIP<span class="hl opt">,</span><span class="hl kwb">si</span>
<span class="hl kwa">stosw</span>
<span class="hl kwa">jmp  short</span> emCPU
</pre>

<p>Но ни что не мешает перенести его в мир, например, Питона:</p>

<pre class="hl">
<span class="hl kwa">def</span> <span class="hl kwd">nor</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b<span class="hl opt">):</span>
  <span class="hl kwa">return</span> ~<span class="hl opt">(</span>a | b<span class="hl opt">) &amp;</span> <span class="hl num">0xFFFF</span>

<span class="hl kwa">def</span> <span class="hl kwd">norcpu</span><span class="hl opt">():</span>
  <span class="hl kwa">while</span> <span class="hl num">1</span><span class="hl opt">:</span>
    i <span class="hl opt">=</span> mem<span class="hl opt">[</span>IP<span class="hl opt">];</span>
    a <span class="hl opt">=</span> mem<span class="hl opt">[</span>i <span class="hl opt">+</span> <span class="hl num">0</span><span class="hl opt">]</span>
    b <span class="hl opt">=</span> mem<span class="hl opt">[</span>i <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">]</span>
    r <span class="hl opt">=</span> mem<span class="hl opt">[</span>i <span class="hl opt">+</span> <span class="hl num">2</span><span class="hl opt">]</span>
    mem<span class="hl opt">[</span>IP<span class="hl opt">] =</span> i <span class="hl opt">+</span> <span class="hl num">3</span>
    f <span class="hl opt">=</span> <span class="hl kwd">nor</span><span class="hl opt">(</span>mem<span class="hl opt">[</span>a<span class="hl opt">],</span> mem<span class="hl opt">[</span>b<span class="hl opt">])</span>
    mem<span class="hl opt">[</span>r<span class="hl opt">] =</span> f
</pre>

<p>Почему именно NOR? Из теории булевой алгебры известно, что любую из 14-ти логических функций (например, NOT, AND, OR, XOR и т.д., всего их 16) двух одно битовых аргументов можно выразить через функции NOR и NAND. Например:</p>

<pre><code>NOT(a) = NOR(a, a)
AND(a, b) = NOT(OR(NOT(a), NOT(b)))
OR(a, b) = NOT(NOR(a, b))
XOR(a, b) = OR(AND(a, NOT(b)), AND(NOT(a), b)))
</code></pre>

<p>Пересылка данных <code>MOVE(src, dst)</code> может быть сделана через OR:</p>

<pre><code>mem[dst] = OR(mem[src], mem[src])
</code></pre>

<p>Условный переход также реализуется через булеву логику. Если cond равно 0xFFFF (истина), то осуществляется переход на адрес <code>addr</code>, а если <code>cond</code> равно 0x0000, то выполнение продолжается линейно:</p>

<pre><code>mem[IP] = OR(AND(addr, cond), AND(mem[IP], cond))
</code></pre>

<p>или в нотации интерпретатора:</p>

<pre><code>AND addr, cond, @t1
AND IP, cond, @t2
OR @t1, @t2, IP
</code></pre>

<p>где <code>@t1</code> и <code>@t2</code> - некоторые вспомогательные переменные. Команды AND и OR также раскрываются в последовательность элементарных NOR, как было показано ранее.</p>

<p>Что получается: булевы операции есть, пересылка данных есть, команды условного и безусловного переходов есть - для полноты не хватает операций сложения/вычитания и сдвигов. После этого уже можно программно реализовать стек и получить полноценную вычислительную среду.</p>

<p>Вот тут в оригинальной программе Александра был трюк, с помощью которого можно было вызывать native код x86. Так как код самого интерпретатора на ассемблере x86 также находился в адресном пространстве виртуальной машины, то в нужный момент в начало интерпретатора командой <code>MOVE</code> подставлялась двухбайтовая команда перехода x86 (то есть интерпретатор сам себя модифицировал), по адресу перехода которой находился нужный native код x86. После его выполнения восстанавливались оригинальные первые два байты интерпретатора, интерпретация продолжалась в обычном режиме.</p>

<p>Именно так была реализована команда сложения и несколько утилитарных вызовов прерываний DOS для печати на экран и ввода с клавиатуры.</p>

<p>Лично я не представляю, как можно реализовать полноценное суммирование только через булевы функции. Полный сумматор может сложить два бита, но для чтобы учесть бит переноса при сложении следующего разряда его надо туда сдвинуть, а в текущей реализации интерпретатора сдвигов нет.</p>

<p>Кроме того, если писать интерпретатор на произвольном языке, например Питоне, то для выполнения стороннего кода, который не получается реализовать в рамкам интерпретатора, надо как-то перехватывать управление, и идея машины только на одной операции NOR перестает быть &ldquo;чистой&rdquo;.</p>

<p>Лирическое отступление. Я всегда интересовался reverse engineering&rsquo;ом (даже сейчас не прочь покопаться IDA&rsquo;ой в каком-нибудь экзешнике), и в частности различными идеями защиты от отладки. А данная идея интерпретатора одной команды тут подходит как нельзя лучше. Так как все реализовано через одну элементарную функцию, то при анализе и дизассемблировании сложно понять, где границы высокоуровневых команд. Как одну из идей, я переделал свой простейший Форт-интерпретатор с прямым шитым кодом (который сам по себе затруднен для анализа) под использование NOR интерпретатора для реализации всех низкоуровневых Форт-примитивов.</p>

<p>Недавно я вернулся к теме NOR-интерпретатора. Интересно было написать это на Питоне. Также пришла мысль, как можно модифицировать интерпретатор, чтобы на нем можно было бы реализоваться и полноценное сложение.</p>

<p>Я ввел одну дополнительную команду в него — циклический сдвиг результата каждой операции и сохранение значения в специальной ячейке-регистре:</p>

<pre class="hl">
<span class="hl kwa">def</span> <span class="hl kwd">norcpu</span><span class="hl opt">():</span>
  <span class="hl kwa">while</span> <span class="hl num">1</span><span class="hl opt">:</span>
    i <span class="hl opt">=</span> mem<span class="hl opt">[</span>IP<span class="hl opt">];</span>
    a <span class="hl opt">=</span> mem<span class="hl opt">[</span>i <span class="hl opt">+</span> <span class="hl num">0</span><span class="hl opt">]</span>
    b <span class="hl opt">=</span> mem<span class="hl opt">[</span>i <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">]</span>
    r <span class="hl opt">=</span> mem<span class="hl opt">[</span>i <span class="hl opt">+</span> <span class="hl num">2</span><span class="hl opt">]</span>
    mem<span class="hl opt">[</span>IP<span class="hl opt">] =</span> i <span class="hl opt">+</span> <span class="hl num">3</span>
    f <span class="hl opt">=</span> <span class="hl kwd">nor</span><span class="hl opt">(</span>mem<span class="hl opt">[</span>a<span class="hl opt">],</span> mem<span class="hl opt">[</span>b<span class="hl opt">])</span>
    mem<span class="hl opt">[</span>r<span class="hl opt">] =</span> f
    mem<span class="hl opt">[</span>S<span class="hl opt">] = ((</span>f <span class="hl opt">&gt;&gt;</span> <span class="hl num">31</span><span class="hl opt">) &amp;</span> <span class="hl num">1</span><span class="hl opt">)</span> | <span class="hl opt">((</span>f <span class="hl opt">&amp;</span> <span class="hl num">0x7FFF</span><span class="hl opt">) &lt;&lt;</span> <span class="hl num">1</span><span class="hl opt">)</span>
</pre>

<p>То есть теперь есть две особые ячейки: <code>IP</code> (instruction pointer) и <code>S</code> (значение последней операции, циклически сдвинутое влево).</p>

<p>Попробуем реализовать полное суммирование 16-х слов с переносом. Я буду писать на некотором элементарном макро-ассемблере.</p>

<p>Итак, полный однобитный сумматор в нотации булевой алгебры:</p>

<pre><code>sum = (a ^ b) ^ carry
carry = (a &amp; b) | (carry &amp; (a ^ b))
</code></pre>

<p>Теперь на языке NOR-процессора:</p>

<pre><code>; Вход:
;  mask  - битовая маска рабочего бита (0x0001, 0x0002, 0x0004, 0x0008 и т.д.)
;  carry - перенос от предыдущего бита (бит определяется маской mask)
;  a, b  - адреса аргументов
;  r     - адрес результата
; Выход:
;  r     - результат
;  carry - перенос для следующего разряда (по отношению к mask уже сдвинут на 1 бит влево)
;  mask  - маска, сдвинутая слево на 1 бит
;
; Переменные с префиксом '@' - локальные для этого макроса.
;
!macro FADD mask, carry, a, b, r
  AND a, mask, @bit_a        ; Уберем в &quot;a&quot; все биты, кроме нужного.
  AND b, mask, @bit_b        ; Уберем в &quot;b&quot; все биты, кроме нужного.
  AND carry, mask, carry     ; Уберем в переносе все биты, кроме нужного.
  XOR a, b, @t1              ; Формула: sum = (a ^ b) ^ carry.
  XOR @t1, carry, @bit_r     ; 
  AND @bit_r, mask, @bit_r   ; Уберем из @bit_r все биты, кроме текущего 
                             ; по маске.
  OR @bit_r, r, r            ; Наложим текущий сложенный бит на результат: 
                             ; r |= sum
  AND a, b, @t2              ; Формула: carry = (a &amp; b) | (carry &amp; (a ^ b))
  AND carry, @t1, @t1        ;
  OR @t2, @t1, carry         ; Перенос получил новое значение. Регистр S
                             ; равен ему же, но сдвинутому влево на 1 бит. 
  MOVE S, carry              ; Теперь перенос равен себе же, но со сдвигом
                             ; влево на 1 (для суммирования в следующем бите).
  MOVE mask, mask, mask      ; Пустое присваивание mask самой себе, чтобы
                             ; получить сдвинутое значение в S.
  MOVE S, mask               ; Маска сдвинута влево на 1 бит для суммирования
                             ; следующего бита: mask = S = mask &lt;&lt; 1
</code></pre>

<p>И теперь сам макрос полного суммирования:</p>

<pre><code>; Вход:
;  a, b  - аргументы
;  carry - перенос (0 или 1 в младшем разряде)
; Выход:
;  r     - результат
;  carry - перенос (0 или 1 в младшем разряде)
;
; Переменные с префиксом '@' - локальные для этого макроса.
; const_1 - специальная ячейка, в которой содержится 0x0001.
;
!macro ADC a, b, carry, r
  XOR r, r, r                     ; Запишем 0 в r.
  MOVE const_1, @mask             ; Начальное значение маски: 0x0001
  *16 FADD @mask, carry, a, b, r  ; Повторяем FADD 16 раз (просто линейно в
                                  ; памяти, никаких циклов).
  AND carry, const_1, carry       ; Почистим перенос от мусора в старших
                                  ; разрядах.
</code></pre>

<p>Что происходить в <code>ADC</code>? При каждом повторении <code>FADD</code> происходит суммирование текущего бита, маска которого задана в <code>mask</code>. Просуммированный бит добавляется (через OR) в результат. Кроме этого mask автоматически сдвигается влево на 1 бит, чтобы указывать на следующей бит (0x0001 -&gt; 0x0002 -&gt; 0x0004 и т.д.). Также в каждом вызове <code>FADD</code> перенос после суммирования тоже сдвигается влево на 1 бит, чтобы быть готовым для суммирования на следующей итерации. После суммирования последнего 16-го бита перенос уйдет снова в самый младший разряд (так как интерпретатор делает циклический сдвиг), и это значение и будет результирующим переносом после всего суммирования.</p>

<p>Все, сложение у нас есть. Далее дело техники. Реализация стека чисто программная. Команды вызовы подпрограммы и возврата на место вызова реализуются уже через механизм стека и команд перехода.</p>

<p>Итак, что мы имеем в сухом остатке после муторных битовых баталий? Некую битовую виртуальную машину, на которой можно делать любые вычисления.</p>

<p>Машина крайне проста, но из-за этого программный код, состоящий из примитивных NOR&rsquo;ов  может быть большим.</p>

<p>Для чего? Первое и главное: академический интерес. Прикольно же получить полноценную вычислительную среду на базе единственной операции NOR. Второе: изначально все это задумывалось как вариант защиты, например, от копирования. На данной виртуальной машине можно реализовать хитрую крипто-функцию и ей проверять валидность ключа. Таким образом к крипто-защите еще и добавится трудный анализа кода.</p>

<p>Но на дворе время open source, то что повторюсь - академический интерес!</p>

<p>Посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2010/03/17/exchange-two-variable-by-xor/">Обмен двух переменных через XOR</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Обмен двух переменных через XOR]]></title>
    <link href="http://demin.ws/blog/russian/2010/03/17/exchange-two-variable-by-xor/"/>
    <updated>2010-03-17T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/03/17/exchange-two-variable-by-xor/</id>
    <content type="html"><![CDATA[<p>Чтобы поменять местами значения двух целочисленных переменных кроме как через использование дополнительной переменной, можно сделать так:</p>

<pre class="hl">
a <span class="hl opt">+=</span> b<span class="hl opt">;</span>
b <span class="hl opt">=</span> a <span class="hl opt">-</span> b<span class="hl opt">;</span>
a <span class="hl opt">-=</span> b<span class="hl opt">;</span>
</pre>

<p>Интересно разве что с академической точки зрения. Но есть способ интереснее:</p>

<pre class="hl">
a <span class="hl opt">^=</span> b <span class="hl opt">^=</span> a <span class="hl opt">^=</span> b<span class="hl opt">;</span>
</pre>

<p>который также меняет местами значения этих переменных.</p>

<p><strong>Update</strong>: В комментариях подсказали грамотную ссылку (<a href="http://graphics.stanford.edu/~seander/bithacks.html">Bit Twiddling Hacks</a>) по трюкам с битовой арифметикой.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Решето Эратосфена - кто быстрее: Go, C или C++?]]></title>
    <link href="http://demin.ws/blog/russian/2010/03/06/what-is-faster-on-eratosthenes-seive-go-c-cpp/"/>
    <updated>2010-03-06T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/03/06/what-is-faster-on-eratosthenes-seive-go-c-cpp/</id>
    <content type="html"><![CDATA[<p><a href="http://golang.org/">Go</a> очень интересный язык. Компиляция в native-code (никаких виртуальных машин, JIT-компиляций и т.д.), при этом автоматическая сборка мусора и встроенная поддержка многопоточности, объектно-ориентированная модель, и в довершение всего - очень быстрая компиляция.</p>

<p>Лично я обычно на новых для меня языках люблю писать <a href="http://ru.wikipedia.org/wiki/%D0%A0%D0%B5%D1%88%D0%B5%D1%82%D0%BE_%D0%AD%D1%80%D0%B0%D1%82%D0%BE%D1%81%D1%84%D0%B5%D0%BD%D0%B0">Решето Эратосфена</a> в качестве &ldquo;Hello, world!&rdquo;.</p>

<p>Моя версия на Go.</p>

<p>Файл <code>erato-go-bool.go</code>:</p>

<pre class="hl">
<span class="hl kwa">package</span> main

<span class="hl kwa">import</span> <span class="hl str">&quot;fmt&quot;</span>
<span class="hl kwa">import</span> <span class="hl str">&quot;math&quot;</span>
<span class="hl kwa">import</span> <span class="hl str">&quot;flag&quot;</span>

<span class="hl kwa">func</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
    <span class="hl kwa">var</span> N <span class="hl kwb">int</span>
    flag<span class="hl opt">.</span><span class="hl kwd">IntVar</span><span class="hl opt">(&amp;</span>N<span class="hl opt">,</span> <span class="hl str">&quot;N&quot;</span><span class="hl opt">,</span> <span class="hl num">100</span><span class="hl opt">,</span> <span class="hl str">&quot;&quot;</span><span class="hl opt">)</span>
    flag<span class="hl opt">.</span><span class="hl kwd">Parse</span><span class="hl opt">()</span>

    fmt<span class="hl opt">.</span><span class="hl kwd">Printf</span><span class="hl opt">(</span><span class="hl str">&quot;%d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> N<span class="hl opt">)</span>

    seive <span class="hl opt">:=</span> <span class="hl kwb">make</span><span class="hl opt">([]</span><span class="hl kwb">bool</span><span class="hl opt">,</span> N<span class="hl opt">)</span>
   
    limit <span class="hl opt">:=</span> <span class="hl kwb">int</span><span class="hl opt">(</span>math<span class="hl opt">.</span><span class="hl kwd">Sqrt</span><span class="hl opt">(</span><span class="hl kwb">float64</span><span class="hl opt">(</span>N<span class="hl opt">))) +</span> <span class="hl num">1</span>

    <span class="hl kwa">for</span> i <span class="hl opt">:=</span> <span class="hl num">2</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> limit<span class="hl opt">;</span> i<span class="hl opt">++ {</span>
        <span class="hl kwa">if</span> <span class="hl opt">!</span>seive<span class="hl opt">[</span>i<span class="hl opt">] {</span>
            <span class="hl kwa">for</span> j <span class="hl opt">:=</span> i <span class="hl opt">*</span> i<span class="hl opt">;</span> j <span class="hl opt">&lt;</span> N<span class="hl opt">;</span> j <span class="hl opt">+=</span> i  <span class="hl opt">{</span>
                seive<span class="hl opt">[</span>j<span class="hl opt">] =</span> <span class="hl kwb">true</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>

    count <span class="hl opt">:=</span> <span class="hl num">0</span>
    <span class="hl kwa">for</span> i <span class="hl opt">:=</span> <span class="hl num">2</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> N<span class="hl opt">;</span> i<span class="hl opt">++ {</span>
        <span class="hl kwa">if</span> <span class="hl opt">!</span>seive<span class="hl opt">[</span>i<span class="hl opt">] {</span>
            count<span class="hl opt">++</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>
    fmt<span class="hl opt">.</span><span class="hl kwd">Printf</span><span class="hl opt">(</span><span class="hl str">&quot;%d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> count<span class="hl opt">)</span>
<span class="hl opt">}</span>
</pre>

<p>И первый вопрос, который приходит в голову - а насколько это быстро работает?</p>

<p>Некоторое время назад я уже <a href="http://demin.ws/blog/russian/2009/02/01/what-is-faster-vector-int-or-bool/">писал</a>, как использовал решето для тестирования STL&rsquo;евского контейнера <code>std::vector</code> на разных компиляторах.</p>

<p>Сейчас я провел похожее сравнение между Go, C++ и C.</p>

<p>Итак, первый кандитат - версия на Go с использованием типа <code>bool</code> (см. выше). Второй - тоже на Go, но с использованием типа <code>int</code>.</p>

<p>Файл <code>erato-go-int.go</code>:</p>

<pre class="hl">
<span class="hl kwa">package</span> main

<span class="hl kwa">import</span> <span class="hl str">&quot;fmt&quot;</span>
<span class="hl kwa">import</span> <span class="hl str">&quot;math&quot;</span>
<span class="hl kwa">import</span> <span class="hl str">&quot;flag&quot;</span>

<span class="hl kwa">func</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
    <span class="hl kwa">var</span> N <span class="hl kwb">int</span>
    flag<span class="hl opt">.</span><span class="hl kwd">IntVar</span><span class="hl opt">(&amp;</span>N<span class="hl opt">,</span> <span class="hl str">&quot;N&quot;</span><span class="hl opt">,</span> <span class="hl num">100</span><span class="hl opt">,</span> <span class="hl str">&quot;&quot;</span><span class="hl opt">)</span>
    flag<span class="hl opt">.</span><span class="hl kwd">Parse</span><span class="hl opt">()</span>

    fmt<span class="hl opt">.</span><span class="hl kwd">Printf</span><span class="hl opt">(</span><span class="hl str">&quot;%d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> N<span class="hl opt">)</span>

    seive <span class="hl opt">:=</span> <span class="hl kwb">make</span><span class="hl opt">([]</span><span class="hl kwb">int</span><span class="hl opt">,</span> N<span class="hl opt">)</span>
   
    limit <span class="hl opt">:=</span> <span class="hl kwb">int</span><span class="hl opt">(</span>math<span class="hl opt">.</span><span class="hl kwd">Sqrt</span><span class="hl opt">(</span><span class="hl kwb">float64</span><span class="hl opt">(</span>N<span class="hl opt">))) +</span> <span class="hl num">1</span>

    <span class="hl kwa">for</span> i <span class="hl opt">:=</span> <span class="hl num">2</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> limit<span class="hl opt">;</span> i<span class="hl opt">++ {</span>
        <span class="hl kwa">if</span> seive<span class="hl opt">[</span>i<span class="hl opt">] ==</span> <span class="hl num">0</span> <span class="hl opt">{</span>
            <span class="hl kwa">for</span> j <span class="hl opt">:=</span> i <span class="hl opt">*</span> i<span class="hl opt">;</span> j <span class="hl opt">&lt;</span> N<span class="hl opt">;</span> j <span class="hl opt">+=</span> i  <span class="hl opt">{</span>
                seive<span class="hl opt">[</span>j<span class="hl opt">] =</span> <span class="hl num">1</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>

    count <span class="hl opt">:=</span> <span class="hl num">0</span>
    <span class="hl kwa">for</span> i <span class="hl opt">:=</span> <span class="hl num">2</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> N<span class="hl opt">;</span> i<span class="hl opt">++ {</span>
        <span class="hl kwa">if</span> seive<span class="hl opt">[</span>i<span class="hl opt">] ==</span> <span class="hl num">0</span> <span class="hl opt">{</span>
            count<span class="hl opt">++</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>
    fmt<span class="hl opt">.</span><span class="hl kwd">Printf</span><span class="hl opt">(</span><span class="hl str">&quot;%d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> count<span class="hl opt">)</span>
<span class="hl opt">}</span>
</pre>

<p>Файл <code>erato-cxx.cpp</code>:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;iostream&gt;</span>
<span class="hl ppc">#include &lt;vector&gt;</span>
<span class="hl ppc">#include &lt;cstdlib&gt;</span>
<span class="hl ppc">#include &lt;cmath&gt;</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[]) {</span>
  <span class="hl kwb">int</span> n <span class="hl opt">=</span> argc <span class="hl opt">&gt;</span> <span class="hl num">1</span> ? std<span class="hl opt">::</span><span class="hl kwd">atoi</span><span class="hl opt">(</span>argv<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]) :</span> <span class="hl num">100</span><span class="hl opt">;</span>

  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> n <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>

  <span class="hl kwb">int</span> sqrt_n <span class="hl opt">=</span> <span class="hl kwa">static_cast</span><span class="hl opt">&lt;</span><span class="hl kwb">int</span><span class="hl opt">&gt;(</span>std<span class="hl opt">::</span><span class="hl kwd">sqrt</span><span class="hl opt">(</span><span class="hl kwa">static_cast</span><span class="hl opt">&lt;</span><span class="hl kwb">double</span><span class="hl opt">&gt;(</span>n<span class="hl opt">))) +</span> <span class="hl num">1</span><span class="hl opt">;</span>

  std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span>TYPE<span class="hl opt">&gt;</span> <span class="hl kwd">S</span><span class="hl opt">(</span>n<span class="hl opt">,</span> <span class="hl kwa">true</span><span class="hl opt">);</span>

  <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">2</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> sqrt_n<span class="hl opt">; ++</span>i<span class="hl opt">)</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>S<span class="hl opt">[</span>i<span class="hl opt">])</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> j <span class="hl opt">=</span> i<span class="hl opt">*</span>i<span class="hl opt">;</span> j <span class="hl opt">&lt;</span> n<span class="hl opt">;</span> j<span class="hl opt">+=</span>i<span class="hl opt">)</span>
        S<span class="hl opt">[</span>j<span class="hl opt">] =</span> <span class="hl kwa">false</span><span class="hl opt">;</span>

  <span class="hl kwb">int</span> count <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">2</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> n<span class="hl opt">; ++</span>i<span class="hl opt">)</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>S<span class="hl opt">[</span>i<span class="hl opt">])</span>
      count<span class="hl opt">++;</span>

  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> count <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>

  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Ну и для полноты картины версия на С:</p>

<p>Файл <code>erato-c-int.c</code>:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;stdio.h&gt;</span>
<span class="hl ppc">#include &lt;stdlib.h&gt;</span>
<span class="hl ppc">#include &lt;memory.h&gt;</span>
<span class="hl ppc">#include &lt;math.h&gt;</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[]) {</span>
  <span class="hl kwb">int</span> n <span class="hl opt">=</span> argc <span class="hl opt">&gt;</span> <span class="hl num">1</span> ? <span class="hl kwd">atoi</span><span class="hl opt">(</span>argv<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]) :</span> <span class="hl num">100</span><span class="hl opt">;</span>
  <span class="hl kwb">int</span><span class="hl opt">*</span> S<span class="hl opt">;</span>
  <span class="hl kwb">int</span> count<span class="hl opt">;</span>
  <span class="hl kwb">int</span> sz <span class="hl opt">=</span> n <span class="hl opt">*</span> <span class="hl kwa">sizeof</span><span class="hl opt">(*</span>S<span class="hl opt">);</span>
  <span class="hl kwb">int</span> i<span class="hl opt">,</span> j<span class="hl opt">;</span>

  <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;%d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> n<span class="hl opt">);</span>

  <span class="hl kwb">long</span> sqrt_n <span class="hl opt">=</span> <span class="hl kwd">sqrt</span><span class="hl opt">(</span>n<span class="hl opt">) +</span> <span class="hl num">1</span><span class="hl opt">;</span>

  S <span class="hl opt">=</span> <span class="hl kwd">malloc</span><span class="hl opt">(</span>sz<span class="hl opt">);</span>
  <span class="hl kwd">memset</span><span class="hl opt">(</span>S<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> sz<span class="hl opt">);</span>

  <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">2</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> sqrt_n<span class="hl opt">; ++</span>i<span class="hl opt">)</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>S<span class="hl opt">[</span>i<span class="hl opt">] ==</span> <span class="hl num">0</span><span class="hl opt">)</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span>j <span class="hl opt">=</span> i<span class="hl opt">*</span>i<span class="hl opt">;</span> j <span class="hl opt">&lt;</span> n<span class="hl opt">;</span> j<span class="hl opt">+=</span>i<span class="hl opt">)</span>
        S<span class="hl opt">[</span>j<span class="hl opt">] =</span> <span class="hl num">1</span><span class="hl opt">;</span>

  count <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">2</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> n<span class="hl opt">; ++</span>i<span class="hl opt">)</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>S<span class="hl opt">[</span>i<span class="hl opt">] ==</span> <span class="hl num">0</span><span class="hl opt">)</span>
      count<span class="hl opt">++;</span>

  <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;%d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> count<span class="hl opt">);</span>

  <span class="hl kwd">free</span><span class="hl opt">(</span>S<span class="hl opt">);</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Ну и <code>Makefile</code> для удобного запуска:</p>

<pre class="hl">
.SILENT<span class="hl opt">:</span> 

<span class="hl kwa">all</span><span class="hl opt">:</span> 
        <span class="hl opt">$(</span>MAKE<span class="hl opt">)</span> run <span class="hl num">2</span><span class="hl opt">&gt;&amp;</span><span class="hl num">1</span> | tee log
        <span class="hl opt">$(</span>MAKE<span class="hl opt">)</span> parse-log

run<span class="hl opt">:</span> go-bool go-int cxx-int cxx-bool c-int

N ?<span class="hl opt">=</span> <span class="hl num">100000000</span>

go-bool<span class="hl opt">:</span>
        echo <span class="hl opt">$</span>&#64;
        <span class="hl num">6</span>g erato-<span class="hl opt">$</span>&#64;.go
        <span class="hl num">6l</span> <span class="hl opt">-</span>o erato-<span class="hl opt">$</span>&#64; erato-<span class="hl opt">$</span>&#64;<span class="hl num">.6</span>
        time <span class="hl opt">-</span>p <span class="hl opt">-</span>f <span class="hl opt">%</span>e .<span class="hl opt">/</span>erato-<span class="hl opt">$</span>&#64; <span class="hl opt">-</span>N<span class="hl opt">=$(</span>N<span class="hl opt">)</span>

go-int<span class="hl opt">:</span> 
        echo <span class="hl opt">$</span>&#64;
        <span class="hl num">6</span>g erato-<span class="hl opt">$</span>&#64;.go
        <span class="hl num">6l</span> <span class="hl opt">-</span>o erato-<span class="hl opt">$</span>&#64; erato-<span class="hl opt">$</span>&#64;<span class="hl num">.6</span>
        time <span class="hl opt">-</span>p <span class="hl opt">-</span>f <span class="hl opt">%</span>e .<span class="hl opt">/</span>erato-<span class="hl opt">$</span>&#64; <span class="hl opt">-</span>N<span class="hl opt">=$(</span>N<span class="hl opt">)</span>

cxx-bool<span class="hl opt">:</span>
        echo <span class="hl opt">$</span>&#64;
        g<span class="hl opt">++ -</span>o erato-<span class="hl opt">$</span>&#64; \
                <span class="hl opt">-</span>O3 <span class="hl opt">-</span>funroll-all-loops <span class="hl opt">-</span>fomit-frame-pointer \
                <span class="hl opt">-</span>DTYPE<span class="hl opt">=</span>bool erato-cxx.<span class="hl kwa">cpp</span> 
        time <span class="hl opt">-</span>p <span class="hl opt">-</span>f <span class="hl opt">%</span>e .<span class="hl opt">/</span>erato-<span class="hl opt">$</span>&#64; <span class="hl opt">$(</span>N<span class="hl opt">)</span>

cxx-int<span class="hl opt">:</span>
        echo <span class="hl opt">$</span>&#64;
        g<span class="hl opt">++ -</span>o erato-<span class="hl opt">$</span>&#64; \
                <span class="hl opt">-</span>O3 <span class="hl opt">-</span>funroll-all-loops <span class="hl opt">-</span>fomit-frame-pointer \
                <span class="hl opt">-</span>DTYPE<span class="hl opt">=</span>int erato-cxx.<span class="hl kwa">cpp</span> 
        time <span class="hl opt">-</span>p <span class="hl opt">-</span>f <span class="hl opt">%</span>e .<span class="hl opt">/</span>erato-<span class="hl opt">$</span>&#64; <span class="hl opt">$(</span>N<span class="hl opt">)</span>

c-int<span class="hl opt">:</span>
        echo <span class="hl opt">$</span>&#64;
        gcc <span class="hl opt">-</span>o erato-<span class="hl opt">$</span>&#64; <span class="hl opt">-</span>lm \
                 <span class="hl opt">-</span>O3 <span class="hl opt">-</span>funroll-all-loops <span class="hl opt">-</span>fomit-frame-pointer erato-<span class="hl opt">$</span>&#64;.c
        time <span class="hl opt">-</span>p <span class="hl opt">-</span>f <span class="hl opt">%</span>e .<span class="hl opt">/</span>erato-<span class="hl opt">$</span>&#64; <span class="hl opt">$(</span>N<span class="hl opt">)</span>

parse-log<span class="hl opt">:</span>
        printf <span class="hl str">&quot;%10s %10s %8s %5s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl str">&quot;Language&quot;</span> N Count Time <span class="hl opt">;</span> \
        <span class="hl opt">(</span>echo <span class="hl str">&quot;------------------------------------&quot;</span><span class="hl opt">) ;</span> \
        while read type <span class="hl opt">;</span> do \
                read N <span class="hl opt">&amp;&amp;</span> \
                read count <span class="hl opt">&amp;&amp;</span> \
                read time <span class="hl opt">&amp;&amp;</span> \
                printf <span class="hl str">&quot;%10s %10s %8s %5s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl opt">$</span><span class="hl kwd">$type</span> <span class="hl opt">$</span><span class="hl kwd">$N</span> <span class="hl opt">$</span><span class="hl kwd">$count</span> <span class="hl opt">$</span><span class="hl kwd">$time</span> <span class="hl opt">;</span> \
        done <span class="hl opt">&lt;</span> log
</pre>

<p>Запускал я все это под Ubuntu 64-bit. Компилятор C и C++ - gcc 4.4.1. Компилятор Go - последний из <a href="http://golang.org/doc/install.html">официального репозитория</a>.</p>

<p>Запускаем:</p>

<pre><code>make N=100000000
</code></pre>

<p>и получаем следующее:</p>

<pre><code> Language           N    Count  Time
------------------------------------
   go-bool  100000000  5761455  3.96
    go-int  100000000  5761455  6.58
   cxx-int  100000000  5761455  6.76
  cxx-bool  100000000  5761455  2.20
     c-int  100000000  5761455  6.47
</code></pre>

<p>Получается, что сделал всех С++ с использованием <code>std::vector&lt;bool&gt;</code> для хранения массива. Затем идет Go тоже с типом <code>bool</code>. А С, С++ с <code>std::vector&lt;int&gt;</code> и Go с <code>int</code>&lsquo;ом примерно равны.</p>

<p><strong>Update</strong>: После экспериментов в комментариях выходит, что и на С, и на С++ можно добиться равного быстродействия, если использовать битовые поля. Просто в С++ это синтаксически проще, но не более того.</p>

<p>Посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2009/02/01/what-is-faster-vector-int-or-bool/">Кто быстрее: vector&lt;bool&gt; или vector&lt;int&gt;</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Трейдинговые системы для чайников]]></title>
    <link href="http://demin.ws/blog/russian/2010/03/04/trading-systems-for-dummies/"/>
    <updated>2010-03-04T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/03/04/trading-systems-for-dummies/</id>
    <content type="html"><![CDATA[<p>В данной статье я попытаюсь рассказать некоторых идеях, лежащих в основе трейдинговых систем. Изложение будет максимально простым, по возможности без технических и экономических заумностей.</p>

<p>Так как данная сфера деятельности активно развивается в англоязычном мире, то многие термины проще использовать без перевода, чтобы не потерять по дороге смысл.</p>

<p>Рассмотрение будет сфокусировано на техническую сторону вопроса с точки зрения компьютерной автоматизации процесса электронной торговли ценными бумагами. Для прояснения сопутствующих вопросов (в основном из общей экономической теории ценных бумаг) следует обраться к другим источниками.</p>

<p>Итак, для начала несколько простых определений.</p>

<p>Трейдинг - это торговля ценными бумагами. Соответственно, трейдинговая система (платформа) предоставляет автоматизацию этого процесса для различных участников торгов: для тех, кто продает и покупает, и для третьих лиц, предоставляющих различные сервисы и живущие на комиссию.</p>

<p>Надо отметить, что многие принципы электронной торговли повторяют то, как это происходило раньше, когда не было компьютеров. Но даже сейчас, в эру тотальной компьютеризации, в трейдинге весьма много ручной работы, причем несвязанной напрямую с принятием решения о покупке или продаже.</p>

<p>Ценная бумага - это объект торговли (в английском языке это называется &ldquo;security&rdquo;). Типов ценных бумаг очень много (акции, облигации, валюта и т.д.). Я не буду вдаваться в объяснение их сути (для этого следует обраться к литературе по экономике), так как с точки зрения компьютерной системы каждая ценная бумага - это всего лишь идентификатор. Например, &ldquo;GOOG US Equity&rdquo; - это акции Гугла на Нью-Йоркской фондовой бирже, &ldquo;VOD LN Equity&rdquo; - это акции Vodafone на Лондонской бирже, &ldquo;CT2 Govt&rdquo; - это двухлетние государственные облигации правительства США и т.д. Таких идентификаторов тысячи, и в целом большинство электронных систем торговли стараются соблюдать уникальность данных идентификаторов во избежание путаницы при операции между различными платформами.</p>

<p>Каждая система может иметь (и обычно имеет) внутреннюю систему идентификации ценных бумаг для удобства их учета.</p>

<p>Сделка (или trade) - это факт покупки/продажи ценных бумаг. Сделка обычно имеет несколько базовых характеристик: дата/время, идентификатор ценной бумаги, сумма за единицу и количество купленных/проданных единиц ценной бумаги. Данный квант информации обычно называется tick (или feed). Именно поток таких тиков, получаемых в режиме реального времени с различных торговых платформ, и является основным источником различных сводок, диаграмм, графиков, бегущих строк и т.д., описывающих &ldquo;состояние фондового рынка&rdquo;, по которым трейдеры принимают решение о том, что покупать или продавать, когда и почем.</p>

<p>Скорость поступления тиков может быть весьма высока (сотни или даже тысячи в секунду). Это объясняет, почему одним из важнейших показателей для трейдинговой системы является быстродействие. Чем быстрее обрабатываются входные данные, тем быстрее трейдер узнает об изменениях на рынке, и тем быстрее может принять решение. А для алгоритмического трейдинга (мы поговорим об это чуть ниже) - это вообще один из основных показателей. Это быстродействие может складывается из многих факторов: быстрота программного обеспечения, скорость информационных каналов (часто используются выделенные линии, а не публичные сети типа интернета), производительность аппаратного обеспечения и т.д.</p>

<p>Может так случиться, что из-за каких-то проблем в системе, из-за которой она работает очень медленно, может начаться попуск тиков (система не успевает их обрабатывать). В этом случаем требуется периодическая сверка обобщенных показателей, чтобы не отображать неверные данные.</p>

<p><strong>Основные участники рынка ценных бумаг</strong></p>

<p>Sell side (я оставлю этот термин без перевода) - это те, что ориентирован на перепродажу. Трейдеры - это типичные представители sell side. Обычно они не имеют своих активов. У них просто есть немного денег. В начале торгового дня они покупают что-то, а потом в течение дня могут перепродавать, покупать другое и т.д. В конце дня они обычно все стремятся распродать, даже если придется продать в убыток. Sell side обычно зарабатывает на быстрых дневных изменениях курсов, вызванных, например, неожиданными новостями.</p>

<p>Экономическая причина существования sell side - это, как в случае <a href="http://demin.ws/blog/russian/2010/01/26/common-misconceptions-about-bank-cards/">процессинговых систем</a>, вопрос объема. То есть, нельзя просто так взять, и кому угодно подключиться к фондовой бирже, так как это стоит денег (депозиты, оборудование, сертификация, если потребуется и т.д.). Высокий ценовой ценз сделан для отсечения мелких клиентов (бирже не интересно возиться с клиентами, покупающими одну акцию в год). Последние должны будут пользоваться услугами более крупных трейдинговых фирм, и им уже придется платить комиссию.</p>

<p>Buy side - это &ldquo;богатые&rdquo; участники. Обычно это фонды, банки, страховые компании и т.д. По большому счету - это настоящие держатели ценных бумаг. Они их покупают помногу, с долгой перспективой, и обычно зарабатывают при росте цен (или теряют при их падении, такое тоже бывает) на длительном (несколько лет, например) интервале времени.</p>

<p>То есть в течение торгового дня sell side перепродает туда-сюда ценные бумаги от buy side, а к концу дня все снова фактически возвращается к buy side, и sell side имеет свою дневную разницу.</p>

<p>Конечно, такое разделение может быть весьма условным, и многие финансовые институты являются одновременно sell side и buy side. Но понимание этого различия весьма важно.</p>

<p>Рассмотрим некоторые важные части трейдинговой системы.</p>

<p><strong>Мониторинг</strong></p>

<p>Данная подсистема занимается получением различных входных данных о сделках (собственных и от других систем, новостей и т.д.) и предоставлением всего этого вала информации в удобном для анализа виде (таблицы, графики, статистика). Надо сказать, что новости являются очень важной частью, так как рынок, особенно такой подвижный, как фондовый, а особенно такой подвижный из-за его тотальной компьютеризации, реагирует мгновенно. С момента, как на сайте какой-то компании появился пресс релиз, например, о смене руководства, до начала активного движения цен ценных бумаг данной компании на рынке из-за этого пресс релиза проходят секунды. И тот, кто получил новость быстрее, тот и сумел среагировать и как результат - заработать.</p>

<p>Про новостные системы стоит сказать особо. Они состоят из нескольких уровней. После получения того или иного факта, на первом уровне новость ужимается в одно предложение из нескольких слов и тут же публикуется. Это позволяет для новостного провайдера выпустить новость очень быстро (буквально несколько минут), а для потребителя новости (например, трейдера), увидев новую строчку в новостной ленте (а не читать целый абзац) уловить суть и, если надо, начать действовать. Например, &ldquo;ГАЗПРОМ снял генерального директора&rdquo; или &ldquo;Сбербанк объявил о банкротстве&rdquo;. Далее новость передается на следующий уровень, где пишется уже абзац или два с более детальным описанием. Тут уже может пройти час или два. Если изначальная новость была бомбой, то многие будут ждать этого описания, а если нет, то возможно никто ее и не станет читать. Ну а затем уже на третьем уровне много позже могут написать детальную аналитику, и, например, включить мнения экспертов на влияние новости на те или иные рынки, ценные бумаги и т.д.</p>

<p><strong>Системы учета позиций и истории сделок</strong></p>

<p>Этот механизм позволяет трейдеру вести учет своей дневной деятельности. Фактически, это журнал его действий: купил это за столько, продал это тому-то. Кажущаяся на первый взгляд утилитарность и простота данной системы на самом деле ошибочна. Система учета позиций и истории сделок позволяет трейдеру моментально видеть, сколько и на сколько он продал и купил, и каковы его цены по сравнению с другими участниками рынка. Кстати, множество сделок до сих пор совершаются просто по телефону, и такие сделки надо где-то фиксировать. И немаловажно, на этом уровне происходит контроль ограничений самого трейдера. Например, данный трейдер не может торговать в день не более такой-то суммы, или что нельзя уходить в долг на такой-то ценной бумаге более чем на столько, или если трейдер вводит сделку более такой-то суммы, то запрашивается разрешения его начальника и т.д. Система контроля может быть очень и очень изощренной.</p>

<p>Алгоритмический трейдинг может также работать на этом уровне. Специальная программа, а не человек (или может человек, но который не управляет каждой отдельной сделкой, а запускает специальные скрипты, делающие за него эту работу), на основе информации с рынка принимает решения покупать или продавать. Программа может делать это очень быстро, гораздо быстрее человека, и, пользуясь очевидной логикой, когда что-то продают, то оно тут же дешевеет, а когда покупают - тут же дорожает, можно управляемо двигать цены на рынке, и тем самым иметь высоковероятностные предсказания о движении цены, и, как результат, вовремя (= выгодно) продать или купить.</p>

<p><strong>Системы проведения сделок</strong></p>

<p>Обычно, работа трейдера - это договориться о сделке. Электронно или по телефону - неважно. Проведение сделки обычно происходит после закрытия рынков. И этим занимается middle office. На данном этапе могут также проводиться дополнительные проверки активности трейдера.</p>

<p>Различные истории о трейдерах, нелегально что-то там наторговавших, обычно связаны именно с тем, что трейдер смог провести сделку без каких-то проверок, или нашел способ эти проверки обойти.</p>

<p>Автоматизация процесса тут обычно заключается в том, чтобы электронным образом разослать контрагентам информацию о проведенных сделках, получить ответы от них и подготовить данные для финансового отдела, который будет физически проводить расчеты с контрагентами.</p>

<p><strong>Анонимная торговля</strong></p>

<p>Первым способом торговли может быть, когда трейдер напрямую покупает (или продает) у конкретного контрагента (например, у своего постоянного партнера).</p>

<p>Альтернативным способом сведения покупателя и продавца может быть анонимная торговля. В этом случае покупателю (или продавцу) без разницы, кто его контрагент, так как его интересует только цена. Для автоматизации такой анонимной торговли есть специальные механизмы.</p>

<p><em>Устройство электронного рынка для анонимной торговли</em></p>

<p>Электронный рынок обычно устроен по следующей схеме. Есть такое понятие, как &ldquo;Market depth&rdquo;. Мне не очень нравится перевод &ldquo;глубина рынка&rdquo;, поэтому я оставлю термин без перевода. &ldquo;Market depth&rdquo; - это таблица лучшего спроса и предложения на рынке для выбранной ценной бумаги. Выглядит она примерно так:</p>

<pre><code>   Bid       Offer
---------+----------
Ц1 х К1  | Ц5 х К5
---------+----------
Ц2 х К2  | Ц6 х К6
---------+----------
Ц3 х К3  | Ц7 х К7
---------+----------
        ...
---------+----------
Ц4 х К4  | Ц8 х К8
---------+----------
</code></pre>

<p>Колонка Bid - это цены и объемы того, что люди хотят купить (список текущего спроса). Эта колонка отсортирована по убыванию цены:</p>

<pre><code>Ц1 &gt; Ц2 &gt; Ц3 &gt; ... &gt; Ц4
</code></pre>

<p>То есть физический смысл этой колонки - это показать лучшие (= наибольшие) с точки зрения потенциального продавца цены (и возможные объемы) по данной ценной бумаге.</p>

<p>Допустим, ячейки &ldquo;Ц1 х К1&rdquo; пока нет, а на вершине колонки Bid находится &ldquo;Ц2 х К2&rdquo;. Я, как участник рынка, говорю «я хочу купить ценную бумагу N по цене &ldquo;Ц1&rdquo; в количестве &ldquo;К1&rdquo;». Так как моя цена больше цены &ldquo;Ц2&rdquo;, то моя заявка становится на вершину колонки.</p>

<p>Колонка &ldquo;Offer&rdquo; (или иногда ее называют &ldquo;Ask&rdquo;) - это цены и объем того, что люди хотят купить (список текущих предложений). Эта колонка отсортирована по возрастанию цены:</p>

<pre><code>Ц5 &lt; Ц6 &lt; Ц7 &lt; ... &lt; Ц8
</code></pre>

<p>Физический смысл этой колонки - это показать лучшие (= наименьшие) с точки зрения потенциального покупатели цены (и объемы) по данной ценной бумаге.</p>

<p>Далее начинается самое интересное. Как известно, спрос удовлетворяет предложение и наоборот. Так вот данная таблица и является механизмом сопоставления спроса и предложения.</p>

<p>Если я прихожу на рынок и говорю «я хочу купить ценную бумагу N по цене &ldquo;Ц1&rdquo; и количестве &ldquo;К1&rdquo;», система берет таблицу &ldquo;Market depth&rdquo; для ценной бумаги N и просматривает колонку &ldquo;Offer&rdquo;.</p>

<p>Если какая-то цена совпадает с моей (например, &ldquo;Ц6&rdquo;), то система автоматически удовлетворяет мою заявку и продает мне нужное количество ценных бумаг N по цене &ldquo;Ц1&rdquo; (= &ldquo;Ц6&rdquo;) и в количестве &ldquo;К1&rdquo;. И ячейка &ldquo;Ц1 х К1&rdquo; не появляется в колонке спроса &ldquo;Bid&rdquo;, так как мой спрос удовлетворен. Если мое запрошенное количество &ldquo;К1&rdquo; равно &ldquo;К6&rdquo;, то строка &ldquo;Ц6 х К6&rdquo; удаляется из колонки предложений &ldquo;Offer&rdquo;. Если мое количество &ldquo;К1&rdquo; меньше &ldquo;К6&rdquo;, то строка &ldquo;Ц6 х К6&rdquo; остается в колонке, но из &ldquo;К6&rdquo; просто вычитается &ldquo;К1&rdquo;. Ну а если же мое количество &ldquo;К1&rdquo; больше &ldquo;К6&rdquo;, то строка &ldquo;Ц6 х К6&rdquo; удаляется из колонки &ldquo;Offer&rdquo; (это предложение полностью удовлетворено), а в колонке &ldquo;Bid&rdquo; появляется моя строка &ldquo;Ц1 х К1&rdquo;, где &ldquo;K1&rdquo; отображается за вычетом &ldquo;K6&rdquo;, то есть &ldquo;Ц1 х K1-K6&rdquo;.</p>

<p>Аналогично, для продажи. Если я прихожу на рынок и говорю «я хочу продать ценную бумагу N по цене &ldquo;Ц6&rdquo; и количестве &ldquo;К6&rdquo;», система берет таблицу &ldquo;Market depth&rdquo; для ценной бумаги N и просматривает колонку &ldquo;Bid&rdquo;.</p>

<p>Если какая-то цена совпадает с моей (например, &ldquo;Ц2&rdquo;), то система автоматически удовлетворяет мою заявку и покупает у меня нужное количество ценных бумаг N по цене &ldquo;Ц6&rdquo; (= &ldquo;Ц2&rdquo;) и в количестве &ldquo;К6&rdquo;. И ячейка &ldquo;Ц6 х К6&rdquo; не появляется в колонке спроса &ldquo;Offer&rdquo;, так как моё предложение удовлетворено. Если мое запрошенное количество &ldquo;К6&rdquo; равно &ldquo;К2&rdquo;, то строка &ldquo;Ц2 х К2&rdquo; удаляется из колонки предложений &ldquo;Bid&rdquo;. Если мое количество &ldquo;К6&rdquo; меньше &ldquo;К2&rdquo;, то строка &ldquo;Ц2 х К2&rdquo; остается в колонке, но из &ldquo;К2&rdquo; просто вычитается &ldquo;К6&rdquo;. Ну а если же мое количество &ldquo;К6&rdquo; больше &ldquo;К2&rdquo;, то строка &ldquo;Ц2 х К2&rdquo; удаляется из колонки &ldquo;Bid&rdquo; (этот спрос полностью удовлетворен), а в колонке &ldquo;Offer&rdquo; появляется строка &ldquo;Ц6 х К6&rdquo;, где &ldquo;K6&rdquo; отображается за вычетом &ldquo;K2&rdquo;, то есть &ldquo;Ц6 х K6-K2&rdquo;.</p>

<p>По сути, таблица &ldquo;Market Depth&rdquo; отображает список пока еще неудовлетворенных спросов и предложений. Как только находится для спроса парное предложение или наоборот - между ними производится сделка (trade), и эта пара удаляется из таблицы (одна из сторон может после сделки таки остаться в таблице &ldquo;Market Depth&rdquo;, если, как описано выше, не было полного совпадения по количеству).</p>

<p>Обычно &ldquo;Market depth&rdquo; отображает в среднем от 10 до 100 уровней цен по спросу и предложению. Больше нет особого смысла нет.</p>

<p>Кроме того, каждая ячейка данной таблицы может раскрываться списком заявок по цене. Что это значит? Например, ячейка &ldquo;Ц1 х K2&rdquo; может быть агрегированным по цене показателем, то есть количество &ldquo;К1&rdquo; является предложением не единственного покупателя, а многих (несколько покупателей могут хотеть купить по цене &ldquo;Ц1&rdquo;), но так как для продавца неважно, кому именно продавать (цена то все равно одна и та же, и система в целом анонимна), по умолчанию эта детализация может не отображаться.</p>

<p>Механизм сопоставления спроса и предложения по таблице &ldquo;Market Depth&rdquo; лежит в основе анонимного трейдинга, и так называемый алгоритмический трейдинг может быть построен на программировании логики автоматизированной торговли, основанной на анализе данных таблицы &ldquo;Market Depth&rdquo;.</p>

<p>Для алгоритмического трейдинга система предоставляет программный интерфейс (API), который может быть, как вариант, скриптовым языком, например, Lua, с набором функций для просмотра таблиц &ldquo;Market Depth&rdquo; и для помещения в систему заявок на покупку или продажу. Логика же программируется автором скрипта.</p>

<p>Интересно, что порой трейдеры хранят свои скрипты в большой тайне, и даже в случае технических неполадок (например, скрипт работает не как ему положено), отказываются их показать техслубже, хотя решить техническую проблему при этом требуют.</p>

<p>Мы рассмотрели некоторые из основных понятий, терминов и механизмов трейдинговых систем на начальном уровне. Многие из описанных механизмов в реальности сложнее и гибче, но основные принципы от этого не меняются.</p>

<p>Посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2010/01/26/common-misconceptions-about-bank-cards/">Распространенные заблуждения про банковские карточки</a></li>
<li><a href="http://demin.ws/blog/russian/2010/02/12/thirty-seconds-format/">Формат 32nd (thirty seconds)</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Простое понимание, что возвращает sizeof]]></title>
    <link href="http://demin.ws/blog/russian/2010/02/24/meaning-of-sizeof/"/>
    <updated>2010-02-24T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/02/24/meaning-of-sizeof/</id>
    <content type="html"><![CDATA[<p>Чтобы просто и понятно осознать, что возвращает <code>sizeof</code> в С++ для сложных составных типов (структур и классов) и сходу не вдаваться в детали выравнивания &ndash; надо запомнить, что <code>sizeof</code> возвращает число, равное разности адресов двух соседних элементов массива, хранящего экземпляры вашего типа.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Печать контейнера с разделителями]]></title>
    <link href="http://demin.ws/blog/russian/2010/02/24/print-container-with-delimiters/"/>
    <updated>2010-02-24T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/02/24/print-container-with-delimiters/</id>
    <content type="html"><![CDATA[<p>Иногда, при печати содержимого контейнера хочется избежать ненужного хвостового разделителя.</p>

<p>Простейшее решение выглядит так:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;iostream&gt;</span>
<span class="hl ppc">#include &lt;vector&gt;</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[]) {</span>
  <span class="hl kwb">int</span> a<span class="hl opt">[] = {</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">,</span> <span class="hl num">3</span><span class="hl opt">,</span> <span class="hl num">4</span><span class="hl opt">,</span> <span class="hl num">5</span> <span class="hl opt">};</span>
  std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span><span class="hl kwb">int</span><span class="hl opt">&gt;</span> <span class="hl kwd">v</span><span class="hl opt">(</span>a<span class="hl opt">,</span> a <span class="hl opt">+</span> <span class="hl num">5</span><span class="hl opt">);</span>

  <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> v<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">(); ++</span>i<span class="hl opt">) {</span>
    std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> v<span class="hl opt">[</span>i<span class="hl opt">];</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>i <span class="hl opt">&lt;</span> v<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">() -</span> <span class="hl num">1</span><span class="hl opt">)</span>
      std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;, &quot;</span><span class="hl opt">;</span>
  <span class="hl opt">}</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>

  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Условие в теле цикла решает поставленную задачу, но контейнеры лучше обходить через итераторы, поэтому следующая попытка может выглятеть так:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;iostream&gt;</span>
<span class="hl ppc">#include &lt;vector&gt;</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[]) {</span>
  <span class="hl kwb">int</span> a<span class="hl opt">[] = {</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">,</span> <span class="hl num">3</span><span class="hl opt">,</span> <span class="hl num">4</span><span class="hl opt">,</span> <span class="hl num">5</span> <span class="hl opt">};</span>
  std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span><span class="hl kwb">int</span><span class="hl opt">&gt;</span> <span class="hl kwd">v</span><span class="hl opt">(</span>a<span class="hl opt">,</span> a <span class="hl opt">+</span> <span class="hl num">5</span><span class="hl opt">);</span>

  <span class="hl kwa">for</span> <span class="hl opt">(</span>std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span><span class="hl kwb">int</span><span class="hl opt">&gt;::</span>const_iterator i <span class="hl opt">=</span> v<span class="hl opt">.</span><span class="hl kwd">begin</span><span class="hl opt">();</span> i <span class="hl opt">!=</span> v<span class="hl opt">.</span><span class="hl kwd">end</span><span class="hl opt">(); ++</span>i<span class="hl opt">) {</span>
    std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt; *</span>i<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>v<span class="hl opt">.</span><span class="hl kwd">end</span><span class="hl opt">() -</span> i <span class="hl opt">&gt;</span> <span class="hl num">1</span><span class="hl opt">)</span>
      std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;, &quot;</span><span class="hl opt">;</span>
  <span class="hl opt">}</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>

  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Но такой подход не самый верный, ибо итераторы далеко не всех контейнеров поддерживают операцию вычетания. Например, при использовании <code>std::list</code> вместо <code>std::vector</code> будет ошибка компиляции (как, кстати, и для первого примера, но по другой причине). Поэтому правильнее было бы написать:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;iostream&gt;</span>
<span class="hl ppc">#include &lt;vector&gt;</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[]) {</span>
  <span class="hl kwb">int</span> a<span class="hl opt">[] = {</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">,</span> <span class="hl num">3</span><span class="hl opt">,</span> <span class="hl num">4</span><span class="hl opt">,</span> <span class="hl num">5</span> <span class="hl opt">};</span>
  std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span><span class="hl kwb">int</span><span class="hl opt">&gt;</span> <span class="hl kwd">v</span><span class="hl opt">(</span>a<span class="hl opt">,</span> a <span class="hl opt">+</span> <span class="hl num">5</span><span class="hl opt">);</span>

  <span class="hl kwc">typedef</span> std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span><span class="hl kwb">int</span><span class="hl opt">&gt;::</span>const_iterator iterator<span class="hl opt">;</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span>iterator i <span class="hl opt">=</span> v<span class="hl opt">.</span><span class="hl kwd">begin</span><span class="hl opt">();</span> i <span class="hl opt">!=</span> v<span class="hl opt">.</span><span class="hl kwd">end</span><span class="hl opt">(); ++</span>i<span class="hl opt">) {</span>
    std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt; *</span>i<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>std<span class="hl opt">::</span>distance<span class="hl opt">&lt;</span>iterator<span class="hl opt">&gt;(</span>i<span class="hl opt">,</span> v<span class="hl opt">.</span><span class="hl kwd">end</span><span class="hl opt">()) &gt;</span> <span class="hl num">1</span><span class="hl opt">)</span>
      std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;, &quot;</span><span class="hl opt">;</span>
  <span class="hl opt">}</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Шаблонный класс <code>std::distance</code> умеет рассчитывать расстояние между итераторами, и даже для тех, которые не поддерживают операции сложения и вычетания. Для таких итераторов будет делаться пошаговый обход от одного к другому для подсчета расстояния. На первый взгляд получается, что вычислительная сложность такого простого цикла будет уже не линейной, а квадратической. Еше надо таскать за собой описание типа дважды — чтобы создать итератор цикла и экземпляр <code>std::distance</code>. Например, Visual Studio 2008 требует указывать тип итератора для шаблона <code>std::distance</code> и не может &ldquo;угадать&rdquo; его из параметров (другие компиляторы могут вести себя иначе). Получается, на ровном месте навернули какую-то ерунду.</p>

<p>Но есть весьма элегантный способ, который позволяет и использовать итераторы, и сохранить линейную сложность алгоритма для контейнеров, которые не умеют эффективно вычислять расстояние между элементами (например, <code>std::list</code>), и писать красиво и компактно:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;iostream&gt;</span>
<span class="hl ppc">#include &lt;vector&gt;</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[]) {</span>
  <span class="hl kwb">int</span> a<span class="hl opt">[] = {</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">,</span> <span class="hl num">3</span><span class="hl opt">,</span> <span class="hl num">4</span><span class="hl opt">,</span> <span class="hl num">5</span> <span class="hl opt">};</span>
  std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span><span class="hl kwb">int</span><span class="hl opt">&gt;</span> <span class="hl kwd">v</span><span class="hl opt">(</span>a<span class="hl opt">,</span> a <span class="hl opt">+</span> <span class="hl num">5</span><span class="hl opt">);</span>

  <span class="hl kwa">for</span> <span class="hl opt">(</span>std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span><span class="hl kwb">int</span><span class="hl opt">&gt;::</span>const_iterator i <span class="hl opt">=</span> v<span class="hl opt">.</span><span class="hl kwd">begin</span><span class="hl opt">();</span> i <span class="hl opt">!=</span> v<span class="hl opt">.</span><span class="hl kwd">end</span><span class="hl opt">(); ++</span>i<span class="hl opt">) {</span>
    std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt; *</span>i<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>i <span class="hl opt">!= --</span>v<span class="hl opt">.</span><span class="hl kwd">end</span><span class="hl opt">())</span>
      std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;, &quot;</span><span class="hl opt">;</span>
  <span class="hl opt">}</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>

  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Трюк с оператором <code>--</code> позволяет эффективно проверить на последний элемент контейнера.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Проект поддержки библиотеки cmockery]]></title>
    <link href="http://demin.ws/blog/russian/2010/02/13/cmockery-support-project/"/>
    <updated>2010-02-13T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/02/13/cmockery-support-project/</id>
    <content type="html"><![CDATA[<p>Открыл проект для обкатки новых возможностей и &ldquo;горячих&rdquo; багфиксов для <a href="http://cmockery.googlecode.com/">cmockery</a> (замечательной библиотеки unit-тестирования для языка C) — <a href="http://code.google.com/p/cmockery-staging">cmockery staging</a>.</p>

<p>В целом не планируется заменить основной репозиторий, но хочется несколько оживить процесс внесения новых патчей. Для начала я туда заправил свой мини-патч для вывода результатов тестирования похожим на Google Test образом, и несколько багфиксов.</p>

<p>Все-таки распределенные системы контроля версий более удобны, особенно когда много разрозненных разработчиков, которые &ldquo;точат&rdquo; свои куски.</p>

<p>Посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2009/03/01/unit-testing-in-c/">Unit-тестирование в языке С</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Формат 32nd (thirty seconds)]]></title>
    <link href="http://demin.ws/blog/russian/2010/02/12/thirty-seconds-format/"/>
    <updated>2010-02-12T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/02/12/thirty-seconds-format/</id>
    <content type="html"><![CDATA[<p>В работе с трейдинговыми системами наткнулся на необычный формат представления чисел, представляющих котировки ценных бумаг, в частности для государственных облигаций правительства США. Например, цена, представленная как <code>100-31</code> далеко не означает 100 долларов и 31 цент, или <code>100-127</code> вообще имеет мало смысла, так как в одном долларе всего 100 центов, а не 1000, и нет необходимости резервировать под дробную часть три знака после запятой.</p>

<p>Вся хитрость тут в том, что это не привычная десятичная запись. Например, <code>100-31</code> в десятичной форме равно <code>100.97265625</code>, а <code>100-127</code> соответствует <code>100.40234375</code>.</p>

<p>Итак, данный формат записи дробных чисел называется <code>thirty seconds</code> или <code>32nd</code>. Для визуального удобства и явного отличия от десятичной формы вместо точки в качестве разделителя используется маленькая черточка. А само число имеет в общем следующий формат:</p>

<pre><code>AAA.XXY
</code></pre>

<p>где <code>AAA</code> - это целая часть числа, имеющая такой же смысл, как и в десятичной системе. <code>XX</code> - это количество <code>1/32</code>-х долей от дробной части, а <code>Y</code> - это количество восьмушек <code>(1/8)</code> в последней <code>1/32</code> доле. Несмотря на туманное описание, формула перевода числа <code>AAA.XXY</code> в формате <code>32nd</code> в десятичный формат весьма проста:</p>

<pre><code>D = AAA + (XX + Y * 1/8) * 1/32
</code></pre>

<p>или</p>

<pre><code>D = AAA + XX * (1/32) + Y * (1/256)
</code></pre>

<p>то есть для числа <code>100-127</code> <code>ААА=100</code>, <code>XX=12</code>, <code>Y=7</code>, поэтому:</p>

<pre><code>D = 100 + 12/32 + 7/256 = 100.40234375
</code></pre>

<p>Чтобы формула была корректной, <code>XX</code> может принимать значения только от 00 до 31, а <code>Y</code> от 0 до 7. Также при записи <code>Y</code> число 4 может быть заменено на <code>+</code>, а 0 на пробел. То есть <code>100-31</code> в полной форме записи равно <code>100-310</code>, а <code>100-12+</code> эквивалентно <code>100-124</code>.</p>

<p>Видно, что в трех дробных разрядах кодируется не 1000 долей, как в десятичной системе, а только 256 (<code>32 * 8</code>).</p>

<p>Итак, еще раз: если написано <code>100-12+</code>, то это <code>100.39062500</code> в десятичной системе.</p>

<p>Формула обратного перевода из десятичного представления в формат 32nd не многим сложнее. Пусть <code>D</code> десятичное число:</p>

<pre><code>A = TRUNC(D)
XX = TRUNC((D - A) * 32)
Y = ((D - A) * 32 - XX) * 8
</code></pre>

<p><code>TRUNC</code> - это функция взятия целой части.</p>

<p>Если <code>Y</code> равно 0, то можно этот разряд не писать, а если 4, то можно заменить на <code>+</code>.</p>

<p>Компонента <code>Y</code> должна получиться обязательно целочисленной. Иначе, наличие дробной части у <code>Y</code> - это признак, того, что исходное десятичное число <code>D</code> не имеет отображения в формат 32nd (только 256 значений дробной части из всех 1000 возможных могут иметь соответствие в формате 32nd).</p>

<p>Как бы ни причудливо не выглядел подобный способ записи денежных сумм, именно его используют американские трейдеры (не путать с рейдерами), при ведении торгов государственным облигациями. Могу предположить, что это просто наследие времен, когда далеко не все знали дробные десятичные числа, а запись частей целого в виде натуральных дробей гораздо ближе к натуре человека. Разделить кучку на две, три и т.д. части может даже ребенок, необученный десятичным дробям.</p>

<p>Формат странный, но знать его приходится.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Распространенные заблуждения про банковские карточки]]></title>
    <link href="http://demin.ws/blog/russian/2010/01/26/common-misconceptions-about-bank-cards/"/>
    <updated>2010-01-26T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/01/26/common-misconceptions-about-bank-cards/</id>
    <content type="html"><![CDATA[<p>Работая долгое время области банковского ПО, а в частности по всяким электронным платежам, вместе с коллегами я составил мини-ЧАВО на тему банковских пластиковых карт. Многие вопросы очевидны, а некоторые могут быть весьма туманными. В России бизнес пластиковых карт набирает обороты, что приятно, и лучше быть подкованным по &ldquo;матчасти&rdquo;.</p>

<p>Итак, 10 распространенных заблуждений.</p>

<p><strong>1. Количество денег хранится на самой карте.</strong></p>

<p>На обычной кредитной или дебетовой карте (даже если она с чипом) нет никакого счетчика денег. Карточка - это просто идентификатор. Бывают исключения в виде особых дополнительных приложений-кошельков на картах с чипом. Обычно это могут быть скидочные программы, виртуальные деньги (например, литры бензина) и т.д. В общем, что-то несвязанное напрямую с обычным использование карты. Но такие особые приложения принимаются только в торговых точках, участвующих в поддержке этого конкретного типа карт.</p>

<p><strong>2. Каждый, кто хочет принимать платежи через банковские карточки, может подключиться напрямую в Визу, Мастеркард или любую другую международную систему.</strong></p>

<p>Нельзя просто так кому угодно подключиться напрямую в Визу или Мастеркард. Это могут делать только богатые банки или независимые процессинговые центры, так как нужно особое оборудование, немалые страховые счета, сертификация по безопасности и много других &ldquo;мелочей&rdquo; (даже не каждый банк может себе такое позволить). Все остальные желающие принимать карты пользуются их услугами.</p>

<p><strong>3. Банкоматы или терминалы для платежей подключены прямо в Визу или Мастеркард.</strong></p>

<p>Крупные международные платежные системы не держат своих банкоматов или платежных терминалов. Любой банкомат или терминал обязательно принадлежит какому-то банку, который в свою очередь либо сам, либо опосредовано (см. п.2) подключен в платежную систему.</p>

<p><strong>4. У меня &ldquo;на карте&rdquo; $200. Это все, что я могу потратить.</strong></p>

<p>Остаток на счету и сумма, которую можно потратить в день с карты, сильно между собой несвязаны. Конструктивнее говорить о дневном лимите по карте. Дневной лимит зависит от множества факторов, и может быть как меньше остатка на счету, так и больше. Например, даже если на счету миллион, вам врядли дадут снять в банкомате более нескольких тысяч в день (и это не ограничение банкомата как устройства). И наоборот, но если вы VIP-клиент, у которого обычно на счету миллионы, а сейчас вы в казино и все уже продули, то после звонка в банк, в индивидуальном порядке какой-то из высоких менеджеров может дать команду установить лично для вас нужный лимит, чтобы вы смогли-таки расплатиться. В этом случае банк берет на себя ответственность, что вы ему потом все отдадите.</p>

<p><strong>5. При использовании карты ПИН-код проверят сам банкомат или платежный терминал.</strong></p>

<p>В подавляющем количестве случаев любое использование карты подразумевается соединения с банком, выдавшим карту. Если вы суете карту Сбербанка в банкомат в Австралии, то разрешение на выдачу денег все равно будет запрошено напрямую из Сбера прямо на ваших глазах. Все это потому, что ПИН-код может быть проверен только банком, выпустившим карту. Исключением являются карты с чипом. Такие карты могут сами проверить ПИН (так как сама карта-чип - это миникомпьютер, умеющий выполнять крипто-функции). Также, иногда для использования карты для оплаты покупки (а не снятия наличных), торговая точка может не связываться с авторизационным центром для каждой покупки, если сумма меньше какого-то лимита. Это может быть актуально для небольших сумм, когда сумма покупки меньше стоимости сессии обмена по электронному каналу. Так как суммы невелики, и иногда применяются дневные счетчики по картам, авторизованным таким образом, то и риски нарваться на большие потери из-за мошеннических операций тоже невелики.</p>

<p><strong>6. На магнитной полосе записан ПИН, который может &ldquo;украсть&rdquo; любой сотрудник банка, стоит только отвернуться, пока твоя карточка у него в руках.</strong></p>

<p>На самом деле, на магнитной полосе записана крипто-свертка ПИНа и номера карты, полученная при помощи криптографического ключа, который хранится внутри суперохраняемой железяки в банке. То есть с помощью данных с магнитной полосы можно только проверить ПИН, да и то, если знать секретный ключ. Обычно в качестве алгоритма шифрования используется 3DES. «Суперохраняемая железяка» - это аппаратное устройство для хранения ключей и проведения крипто-операции на их основе. То есть после начального ввода ключей (персонализации) в этой устройство они никогда не передаются вне физического корпуса в чистом виде.</p>

<p>Помимо серьезных мер по физической охране этих устройств, сами они имеют защиту от проникновения. Например, если попытаться открыть его корпус для подключения «сниффера», то все ключи буду автоматически стерты.</p>

<p>Интересна методика начального ввода ключей. Например, реален вот такой сценарий. Выбирается N сотрудников безопасности банка, например, 3 (в идеале, они даже знать друг друга не должны лично). Каждый генерирует вариант ключа и никому его, конечно, не показывает. Затем, они по очереди заходят в помещение, где стоит оборудование по хранению ключей, и вводят каждый свой ключ. Затем, когда все ключи введены, устройство делает операцию XOR между ними, и это сохраняет внутри себя в качестве ключа. Получается, что ключ не знает никто вообще. И чтобы его восстановить, надо получить исходные компоненты от каждого из тех N сотрудников безопасности, которые обязаны заботиться о конфедециальном их хранении.</p>

<p>Как я уже <a href="http://demin.ws/blog/russian/2010/01/17/truecrypt-keepass-and-confidential-data/">писал</a>, в безопасности полумер нет, и подобные административные меры нужны, когда кончается сила криптографии, и начинается человеческий фактор.</p>

<p>Важное замечание: никто из сотрудников банка, никогда, ни при каких условиях не будет спрашивать вас ПИН. Но если б вы знали, сколько раз из десяти, клиенты, звонящие в банк, на вопрос оператора об их секретном слове (которое задавалось при открытии счета), говорят ПИН.</p>

<p><strong>7. При совершении покупки деньги сразу попадают напрямую со счета клиента на счет магазина.</strong></p>

<p>Обычно реальный обмен деньгами (пусть и электронными), происходит в конце рабочего дня. А в момент самой покупки производится только блокировка суммы из доступного лимита (см. п.4). Списание же обычно происходит через несколько дней, когда до банка-владельца счета дойдет финансовое представление от банка, через чей терминал был проведен платеж.</p>

<p><strong>8. Сумма, написанная на вашем чеке при оплате картой, в точности будет списана с вашего счета.</strong></p>

<p>На самом деле, сумма, списанная при авторизации, может отличаться существенно от суммы, которая списана по финансовой транзакции. Особенно это проявляется при оплате аренды машин и оплате гостиниц, так как эти торговые точки могут &ldquo;вдогонку&rdquo; списать дополнительные расходы (пример, недостачу бензина, или неоплаченный мини-бар). Но не только этим типам торговых точек также разрешено увеличивать или уменьшать конечную сумму.</p>

<p>Также, сумма, заблокированная при авторизации, может отличаться от суммы, списанной со счета, в случае, если валюта счета отличается от валюты операции, так как реальное списание средств со счета происходит через 1-2 дня, а за это время курс конвертации может измениться.</p>

<p><strong>9. Сумма, заблокированная на счету при оплате картой, так или иначе спишется с моего счета.</strong></p>

<p>Сумма, заблокированная при авторизации, может никогда быть не списана со счета. Через 10 (для банкомата) или 45 (все остальные терминалы) дней без прихода в ваш банк финансового подтверждения операции из платежной системы она будет разблокирована. Это и &ldquo;хорошо&rdquo; и &ldquo;плохо&rdquo;. Это &ldquo;хорошо&rdquo;, когда вы сделали операцию, от которой хотите тут же отказаться. Сразу после операции вы звоните в банк, объясняете оператору причину отказа, и если она разрешенная, то операция &ldquo;отменяется&rdquo;, и блокировка может быть снята. В этом случае если вдруг на операцию придет финансовое подтверждение от торговой точки (через пару дней), то сам банк будет разбираться с ним без вашего участия (и ваших денег). Это &ldquo;плохо&rdquo;, когда вы таки подождали день-два, и финансовое подтверждение уже пришло в банк до вашего звонка, тогда &ldquo;откатить&rdquo; операцию будет уже сложнее. Банк будет вынужден начать официальное разбирательство по этому случаю, которое может длиться эти 45 дней. В течение этого времени сумма покупки может оставаться заблокированной.</p>

<p><strong>10. Владельцы дебетовых (а не кредитных) карт не могут оказаться &ldquo;должны банку&rdquo;.</strong></p>

<p>Как уже говорилось в п.4 — логика авторизации покупки основана не на реальной сумме на счету, а на дневных лимитах, то как и для кредитных карт, так и для дебетовых, можно &ldquo;залезть в минус&rdquo;, если банк ставит дневные лимиты, немного превышающие остаток на счету даже для дебитных карт.</p>

<p>Надеюсь, эта информация поможет вам избежать некоторых неприятных сюрпризов при использовании пластиковых карточек.</p>

<p>Посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2010/01/17/truecrypt-keepass-and-confidential-data/">KeePass, TrueCrypt или как обезопасить свои конфиденциальные данные</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KeePass, TrueCrypt или как обезопасить свои конфиденциальные данные]]></title>
    <link href="http://demin.ws/blog/russian/2010/01/17/truecrypt-keepass-and-confidential-data/"/>
    <updated>2010-01-17T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/01/17/truecrypt-keepass-and-confidential-data/</id>
    <content type="html"><![CDATA[<p>В вопросе конфиденциального хранения данные на компьютере не бывает полумер. Идея типа «никто не догадается» тут не работает. Решение должно быть абсолютным и опирающимся на достижения современной криптографии, и единственным способом раскрытия секретных данных должен быть только подбор пароля <a href="http://ru.wikipedia.org/wiki/%D0%9A%D0%B2%D0%B0%D0%BD%D1%82%D0%BE%D0%B2%D1%8B%D0%B9_%D0%BA%D0%BE%D0%BC%D0%BF%D1%8C%D1%8E%D1%82%D0%B5%D1%80">квантовыми компьютерами будущего</a> в будущем или методом «паяльника в ж…». То есть никаких банальностей типа тут мои файлы никто не найдет, пароль по умолчанию, пустой пароль, один пароль на все случаи жизни или надеяться типа «никто не знает мой метод шифрования». Очевидно, что все основные современные алгоритмы шифрования открыты, и вопрос стоит только в правильном (= безопасном) хранении ключей.</p>

<p>Меня всегда интересовал вопрос — если администратор замечательного сервиса всех времен и народов «Мейл.ру» сможет узнать пароль ящика пользователя (не удивлюсь, если они хранят пароли в чистом виде) – какова вероятность, что у пользователя с аналогичным именем, скажем, на почте Яндекса, будет точно такой же пароль — более 90% или нет? (А сколько у вас «кросс»-паролей? 2, 3 или больше?)</p>

<p>Вообще, проблема использования одинаковых паролей на публичных сервисах очень недооценена, увы. Вспомните, сколько всяких форумов, онлайн-магазинов, социальных сетей и т.д. могут при восстановлении пароля на аккаунт прислать вам пароль по почте? Их много. Это значит, что ваш пароль где-то хранится в чистом виде и может быть сдан на сторону недобросовестным администратором или подсмотрен из письма, адресованного вам с напоминанием текущего пароля.</p>

<p>Конечно, правильно организованная система никогда не хранит пароли в чистом виде. В простом случае хранится свертка (желательно, крипто свертка под секретным ключом, которые живет в аппаратном устройстве, а не на диске). И если же надо хранить таки сами пароли, например, пин-коды в банке, то обычно в базе данных хранятся пароли (пин-коды) в зашифрованном виде, а их проверка и печать пин конвертов делается специальными аппаратными устройствами, в которые уже горе-администратор шаловливыми ручками не залезет. Например, в случае вскрытия своего опломбированного корпуса такое устройство стирает все ключи внутри себя.</p>

<p>Интересно, современные почтовые системы типа Gmail или Яндекс используют подобные устройства?</p>

<p>Факт, что в сейчас мире электронная почта несет все больше и больше конфиденциальной информации (электронные платежи, переписка с банком, с работодателем и т.д.). Конечно, грамотное использование технологий (электронная подпись и шифрование писем) и немного здравого смысла (не высылать полные номера банковских счетов и карт, например) решают большинство проблем. Но всего лишь единственный недобросовестный онлайн сервес, сдавший «налево» ваш пароль от очередной социальной сети «&hellip;ясьники» в случае его совпадения с паролем от вашего основного почтового ящика, может доставить вам множество часов нервотрепки, когда вы будете вспоминать – не было ли у вас там чего-то особо секретного в том онлайновом почтовом ящике, который у вас «увели».</p>

<p>Пример из личного опыта.</p>

<p>Пару лет назад у меня «увели» почтовый ящик на «Мейл.ру» (с тех пор у меня устойчивый рвотный рефлекс при упоминании этого сервиса). Я не «восторженная блондинко»™ с паролем «1234» на все и имею здравый смысл. Пароль там был «сильный», и единственный способ его потери – это сдача «налево» кем-то из «администрации». Цель? Не могу даже представить, для чего можно это сделать (продать однофамильцу красивый адрес? бред). Но месячная переписка с суппортом и менеджментом сервиса не привели к успеху – ни то, что я мог показать им всю почтовую базу за пять лет и переписку с новым «владельцем» ящика, который предлагал мне его продать назад – ни к чему не привели. Ящик мне не вернули. Благо использовался он только для пересылки, и писем в онлайне не было. Но я потратил недели, чтобы вспомнить все места, где я регистрировался по тому ящику, и экстренно заменить украденный адрес и пароль (пока это не сделал новый владелец через восстановление пароля на e-mail). Не думаю, что это была целенаправленная атака на меня именно, но масштаба проблемы это не уменьшило ни на йоту. Забавно, были сервисы, например, «Аромат.ру», в котором имя аккаунта был сам e-mail, поэтому единственный выход был — это удалить аккаунт на Аромате. А были сервисы, где просто нет функции удаления аккаунта (зачем кто-то будет удалять потенциальный товар, который можно продать спаммерам?). В общем, я кое-как все подчистил, но было очень, очень противно. Очень схожее ощущение, когда тебя ограбили. Так что до сих пор от души желаю «Мейл.ру» скорого разорения.</p>

<p>После истории украденным ящиком, я переосмыслил методу создания, хранения и использования паролей.</p>

<p>Главный принцип — никогда не использовать повторяющихся паролей.</p>

<p>Легко сказать — сложно сделать. Вряд ли кому-то комфортно помнить более 5-6 паролей. Придумывать же систему генерации паролей в уме — тоже не выход. Современный средний человек пока в уме едва ли посчитает крипто- или хеш- функцию (а только им можно доверять), а иначе мы приходим к подходу «авось никто на догадается», который может больно ударить в спину.</p>

<p>Единственный выход — электронный хранитель паролей.</p>

<p>Подобных программ великое множество. У меня были основные критерии:</p>

<ul>
<li>open-source</li>
<li>максимальная простота и кондовость использования (в идеале должен быть один exe-шник и portable-режим)</li>
<li>наличие клонов под разные платформы (Windows, Linux, сотовые телефоны, iPhone, а теперь уже и Android.</li>
</ul>

<p>Почему open-source? Факт наличия открытых исходников дает более менее уверенность, что в программе нет «закладок», отсылающих ваши пароли по интернету, «системных» паролей по умолчанию (так как спецслужбы этого могут требовать), и вообще – популярный open-source – это значит, что код отсмотрен сотней другой внимательных глаз.</p>

<p>Кроме того, в хранилище конфиденциальных данных ценность каждого бита информации крайне высока, поэтому надежность хранилища тоже имеет большое значение.</p>

<p>Мой выбор пал на KeePass. Все три критерия великолепно выполнялись, а список платформ, под которые есть реализации, впечатляет.</p>

<p>Почему удобно иметь версии под разные платформы? А чтобы один и тот же секретный файл можно было бы открыть и в Windows, и в Linux или прямо на iPhone или Андроиде, если ты в пути.</p>

<p>Что конкретно делает эта программа, и почему это правильно?</p>

<p>Программа создает файл-хранилище, зашифрованный паролем. Так как используются современные алгоритмы шифрования, то взломать файл его можно разве что методом «грубой силы» полным перебором возможных паролей или по словарю, или методом паяльника. Если пароль «сильный», а не 1234, то в реальности остается только паяльник, но защита от паяльника уже вопрос не компьютерный, а организационный. Поэтому если пароль забыть — с данными можно попрощаться. KeePass имеет приятную дополнительную возможность, когда для открытия хранилища нужен не только пароль, но и секретный файл-ключ (или только он сам без пароля).</p>

<p>Внутри зашифрованного файла можно создавать записи. Каждая запись имеет имя и набор полей — имя, e-mail, url, пароль и поле для произвольных текстовых данных. Записи можно организовывать в группы с помощью простой древовидной структуры. Также есть контекстный поиск по записям.</p>

<p>Поле пароля — особое. По умолчанию оно отображается звездочками. Это удобно, если открытые окно программы случайно увидит кто-то посторонний. KeePass может по команде поместить пароль в буфер обмена на 10 секунд, чтобы вы успели переключиться в окно браузера сделать вставку пароля в форму. По истечении этого времени пароль будет стерт из буфера обмена. Таким образом, паролем можно воспользоваться, даже не видя его.</p>

<p>А теперь ключевая функция программы — генерация паролей. Допустим, вы регистрируетесь на каком-то сайте. Придумали логин, ввели e-mail, и надо вводить пароль. Вы нажимаете в KeePassе кнопку «Сгенерировать пароль» (его длину и алфавит используемых символов можно менять), и получаете новый случайный пароль у себя в окне KeePass’а (напомню, по умолчанию он отображается звездочками). Затем через буфер обмена вы переносите новый пароль в форму регистрации. При такой схеме, вы можете даже сами и не знать, какой там пароль.</p>

<p>Я зарегистрирован на десятках разных форумах, и я не только не помню свой пароль от них, я его даже и не знаю. Если надо, я его перетаскиваю из окна KeePass не глядя.
Конечно, есть ключевые пароли: от вашего основного ящика, мессенджера и т.д., которыми пользуешься часто, и их удобно держать в голове. Но их должно быть два-три. Они также должны абсолютно разными и «сильными», но запоминаемыми. Остальной же регистрационный мусор стоит хранить не в голове, а в программе (например, в KeePass), тем самым не подвергая основные пароли опасности.</p>

<p>Файл с паролями и саму программу для их чтения можно носить на флешке, чтобы на любом компьютере можно было заглянуть в свои пароли, если что. Однозначно, основной пароль на зашифрованное хранилище должен быть «сильным». Тогда можно не бояться, у вас его украдут вместе с флешкой.</p>

<p>Если у вас есть портативное устройство (например, телефон с J2ME, Windows Mobile, iPhone или Android), то доступ к паролям можно получить прямо на ходу, если периодически сбрасывать на устройство последнюю версию зашифрованного файла.</p>

<p>У Андроида есть отличная вещь: разработчик приложения декларирует в манифесте какие ресурсы нужны его приложению (сеть, записная книга, флеш-карта, GPS и т.д.). Все остальные ресурсы приложению будут заблокированы. Этот манифест показывается тебе при установке приложения, и сразу видно, чем ты рискуешь. Было бы странно, если бы при установке KeePass на Google Nexus One мне бы сказали, что приложение будет ходить в интернет. Но KeePass запросил только доступ к флеш-карте для хранения файла с паролями.</p>

<p>KeePass хорош для хранение небольшого объема данных. А если счет идет уже на мегабайты или гигабайты, нужен другой подход.</p>

<p>Кроме KeePass я активно последние несколько лет использую TrueCrypt для создания зашифрованных дисковых томов. Удобно, например, на рабочем компьютере создать место, куда стопроцентно никто, кроме вас не заглянет. Кроме того, такие шифрованные «диски» удобно переносить с места на место и бэкапить. TrueCrypt, конечно, open-source, не требует предварительной установки в систему (можно просто носить на флешке) и существует под Windows и Linux (можно лазить за защищенный контейнер из любой из этих систем).</p>

<p>Не стоит пренебрегать защитой собственных конфиденциальных, которые приходится хранить в электронном виде (работать без паролей или со слабыми паролями, надеяться на принцип «никто не угадает», например, какая у меня тут маска подсети и использовать WEP, взламываемый за минуты, вместо WPA, не блокировать консоль компьютера, когда отходишь и т.д.). Все хорошо до первой засады, цена которой может быть очень высокой.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Nexus One]]></title>
    <link href="http://demin.ws/blog/russian/2010/01/12/google-nexus-one/"/>
    <updated>2010-01-12T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/01/12/google-nexus-one/</id>
    <content type="html"><![CDATA[<p>Вчера мне DHL доставил из Штатов <a href="http://www.google.com/phone">Google Nexus One</a>, заказанный в пятницу на сайте.</p>

<p>Цена вопроса (без контракта): 529$ аппарат, 19$ британская зарядка, 30$ доставка. Итого 578 американских буказоидов.</p>

<p>Я давно являюсь фанатом <a href="http://developer.android.com/">Андроида</a>, и после G1 и G2 я наконец решил купить сам аппарат, а не только играться на эмуляторе. Тем более Nexus — это официальный аппарат именно от Google.</p>

<p>Сразу скажу, что я пока не рассчитываю, что Nexus сразу полностью заменит мне айфон. Очевидно — аппарат новый, новый Андроид 2.1, так что скорее всего будут глюки (и они есть), но в качестве &ldquo;игрушки для взрослых&rdquo; — в самый раз (прошлой игрушкой у меня был <a href="http://mindstorms.lego.com/">Lego NXT</a>), и так как платформа не в пример Эпплу открытая и свободная, обновления, новая информация, и вообще активность разрабочиков не заставит себя ждать (по крайней мере хочется в этого верить).</p>

<p>Вместо подробного отчета с расписыванием размеров, веса и т.д. просто приведу моменты, на которые обратил внимание, как программист (тем более, что есть официальный <a href="http://www.google.com/googlephone/tour/">3D тур по аппарату</a>.</p>

<p>Что дают в комплекте.</p>

<p>Сам аппарат, съемный аккумулятор (не могу поддержать восторгов на эму тему, так как за два года пользования неразборным айфоном ни разу не захотелось его открыть и поменять аккумулятор, хотя он более одного дня не работает), зарядка от сети (американская и опционально плюс за 20$ британская), проводная гарнитура с микрофоном и кнопкой, кабель USB-to-MiniUSB (боже! стандартный разъем mini-USB), приятный чехол с логотипом Андроида, mini-SD карта на 4GB, инструкция в виде небольшой картонки, мини книжка с гарантией и условиями.</p>

<p>Забавно, что при оформлении заказа можно &ldquo;персонализировать&rdquo; аппарат путем нанесения надписи из двух строк на заднюю панель аппарата. Я ввел надпись на русском, и в заказе она выглядела нормально, но вот на в реальности на аппарате каждая русская буква представлена символом <code>?</code> — ну не взял их принтер русский шрифт на грудь. Не беда, это в своем роде тоже уникальная надпись.</p>

<p>Вынул я симку O2 из айфона и заправил в Нексус. В отличии от айфона, разъем симки находится под аккумулятором, и там же находится карточка mini-SD. Аппарат завелся. Грузился чуть дольше, чем айфон.</p>

<p>Первое, что он меня спросил — это гугловский аккаунт. После этого спросил пароль на wifi и затем моментально подхватил все из гугловского аккаунта (почта, календарь, контакты).</p>

<p>Настройки EGDE/GPRS пришлось руками вбивать из айфона, так как аппарат, конечно, был не в курсе о параметрах O2.</p>

<p>Gmail сделан отдельным приложением, заточенным только под него. Работает в фоновом режиме. Для традиционной почты (POP3, IMAP и т.д.) есть приложение Mail. Пользоваться очень удобно.</p>

<p>Google Chat работает также в фоне и показывает входящие сообщения моментально. Как я понял, тут нет никаких проблем, чтобы приложение работала в фоне, и так делают многие приложения.</p>

<p>Я как-то и не ожидал, что в первых версиях прошивки будет русификация. Но русские шрифты и язык для интерфейса таки оказались. Русской же клавиатуры не было. Ну я было уже приуныл и решил, что подожду обновления прошивки, но тут пришла мысль — а не сходить ли мне на Google Market (аналог Apple Store). И первое бесплатное приложение, которое я поставил — это она из русских клавиатур. Теперь я могу писать на русском.</p>

<p>Еще я бесплатно поставил (играясь вчера пару часов): англо-русский словарь (о да!), распознавалку штрих-кодов (фоткаешь штрих-код, и она находит в сети товар), эмулятор игры &ldquo;Ну погоди!&rdquo; (там, где волк яйца ловит с четырых полок — это угар!), клиент твиттера, эмулятор терминала (можно telnet&rsquo;иться на сам Nexus), карту метро и нотификатор состояния его линий (для лондонского метро это актуально). Пока все. Понимаю, набор странный, но это только начало.</p>

<p>Поясню: для Андроида свободы создания приложений гораздо больше, чем для айфона. Можно написать даже свое приложение, которое будет реализовывать телефон как таковой, на замену стандартному.</p>

<p>В качестве аналога iTunes Store предлагается Amazon Store. Работает похоже (можно послушать и купить). Богатство ассортимента я не сравнивал пока (хотя догатываюсь, i-кто победит).</p>

<p>Явные пройгрыши айфону.</p>

<p>Тач-скрин не поддерживает так называемое мульти-нажатие, к которому так привыкаешь в айфоне (очень удобно для zoom&rsquo;а). В Нексусе zoom сделан просто — делаешь двойной клик на экран, и возникают полупрозачные кнопки &ldquo;+&rdquo; и &ldquo;-&rdquo;. Кстати, надо отметить, что браузер в Nexus мне понравился больше, чем в айфоне, несмотря на отстутствие мульти-тача для увеличения/уменьшения. По умолчанию отображается сайт по всей ширине (горизонтальная ориентация, конечно, тоже есть), и при двойном клике на экран браузер каким-то удивительным образом подбирает размер шрифта для комфортного просмотра.</p>

<p>Еще одно явное неудобство — айфон гораздo умнее плане автоматического отображения виртуальной клавиатуры, когда на экране появляются поля ввода. В Нексусе надо практически всегда вызывать ее принудительно, кликая на поле ввода. Может это поведение можно как-то изменить в настройках — пока не нашел.</p>

<p>Также интересная деталь: в айфоне количество настроек в целом (меню Settings, например) разительно мало, по сравнению с Windows Mobile (скажите, кто не употреблял матерных слов, пытаясь настроить GPRS или Dial-up в смартофоне Windows?) — дают настраивать только что, реально надо настраивать. Так вот: в Нексусе настроек еще меньше.</p>

<p>Замеченные реальные глюки.</p>

<p>Пока я нашел только один — самопроизвольное переключение с wifi на EDGE (я уже читал, что это многими замеченный глюк). Лечится выключением и включением wifi (благо есть просто иконка на десктопе). Будем ждать обновления прошивки.</p>

<p>Пока все. На этом закончились мои первые несколько часов наедине c Nexus.</p>

<p>В целом вывод такой: возможности заменить им айфон пока точно нет, но степень интеграции с гугловскими сервисами и открытось платформы для разработки очень подкупают. Так что для не-фанатов гугла — может имеет смысл подождать, но для любителей гаджетов и поклонников Андроида — отличная игрушка, обеспечащая вам достаточный уровень красноты в глазах.</p>

<p>Постараюсь и далее рапортовать моих интересных находках в Google Nexus.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Инструментальное скоростное прохождение игр]]></title>
    <link href="http://demin.ws/blog/russian/2010/01/09/tool-assisted-speedrun/"/>
    <updated>2010-01-09T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/01/09/tool-assisted-speedrun/</id>
    <content type="html"><![CDATA[<p>Когда-то я играл в <a href="http://ru.wikipedia.org/wiki/Doom">Дум</a>, особенно в <a href="http://ru.wikipedia.org/wiki/Doom_II:_Hell_on_Earth">Дум 2</a>. Ночью по модему с постоянными обрывами связи, потом по локальной сети, потом через интернет. Да и сейчас люблю порой оттянуться c друзьями на старых &ldquo;клаcсических&rdquo; картах Дума, например через <a href="http://doomlegacy.sourceforge.net/">Doom Legacy</a>.</p>

<p>Но сейчас не об этом. Дум сразу имел классную особенность — записывать игровые сессии для последующего просмотра. Это порой очень увлекательное зрелище, особенно когда играет мастер или мастера. А самая главная штука — это способ записи. При записи игровой сессии записываются не кадры видеоизображения, а просто последовательность действий игрока — зажатия на клавиатуру и движения мыши или джойстика. Во-первых, такая запись занимает очень мало места, во-вторых — это &ldquo;чистая&rdquo; запись, исключащая видеомонтаж, так как для проигрывания можно использовать свою копию игры, которая заведомо нормальная.</p>

<p>Едем дальше. В любой игре подобного толка есть новички (они же &ldquo;мясо&rdquo;), есть сильные игроки (я!), а есть мега-монстры (в случае с Думом — &ldquo;дум-годы&rdquo;). Очевидно, что сессии игры, записанные такими спецами смотрятся как увлекательное кино. Уровень, который ты проходишь минут за 5 он проходит за 5 секунд. Всю игру, на прохождение всех уровней которой у тебя могут уйти недели, он проходит за 15 минут на максимальной сложности. <a href="http://iddqd.ru/demos.php">Наблюдать</a> за этим просто сказка, особенно когда еще такие спецы рубятся друг против друга.</p>

<p>Но сейчас снова не об этом.</p>

<p>Что я познал недавно?</p>

<p>Оказывается с развитием мощностей компьютеров и, как следствие, эмуляторов старых платформ, появилось такое движение как <a href="http://en.wikipedia.org/wiki/Tool-assisted_speedrun">TAS — Tool assisted-speedrun (инструментальное скоростное прохождение)</a>. В двух словах — это показательное прохождение игры до победного конца за рекордное время.</p>

<p>Как это делается. Берется старая &ldquo;классическая&rdquo; игра. Запускается на эмуляторе. Работа на эмуляторе позволяет делать с игрой все что угодно — замедлять время, дизассемблировать исходный код, делать временные сохранения достигнутых результатов даже если сама игра такого не позволяет, анализировать недостатки и внутренние особенности &ldquo;движка&rdquo; игры, пробовать разные маршруты и т.д. Море всяких <a href="http://tasvideos.org/CommonTricks.html">трюков</a>. Очевидно, что игра живого игрока во многом ориентирована на безопасность, нежели на время прохождения. &ldquo;Автоматизированный&rdquo; же игрок может делать то, что живой никогда делать не будет — может подойти к врагу очень близко, так как заведомо знает, что из-за особенностей движка игры при расстоянии, например, в 2 пикселя, враг тебя никогда не убьет. А живой игрой может даже и 20 пикселей не рискнет, так как ему &ldquo;на глаз&rdquo; так проще. И &ldquo;автоматизированный&rdquo; игрок может уже не бежать за здоровьем, имея только 1% жизни, так как точно известно, что ему этого хватит до конца уровня.</p>

<p>В общем, шаг за шагом, уровень за уровнем создается и записывается в виде действий &ldquo;игрока&rdquo; оптимальный сценарий прохождения игры. После этого найденный оптимальный сценарий подсовывается оригинальной игре (или оригинальной игровой приставке) — либо через механизм проигрывания демо-сессий (если игра поддерживает таковой), либо изготавливается для игры специальный игровой контроллер (клавиатура, мышь или джойстик), который уже управляется не человеком, а компьютером по найденному оптимальному сценарию. И игра проходится, проходится вся и очень быстро. Так например, был пройден классический &ldquo;Супер Марио&rdquo; на Ниндендо чуть ли не за 5 минут.</p>

<p>Например, вот один из так называемых speedrun&rsquo;ов в Дум 2:</p>

<iframe width="425" height="344" src="https://www.youtube.com/embed/qA4RvDdIGxc?color=white&theme=light"></iframe>

<p>и Супер Марио:</p>

<iframe width="425" height="344" src="https://www.youtube.com/embed/iKqevZy5c1A?color=white&theme=light"></iframe>

<p>Понятно, что такая &ldquo;игра&rdquo; далека от получения удовольствия от реальной игры, но это просто другой, но также очень увлекательный жанр.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Больше коммитов, хороших и разных]]></title>
    <link href="http://demin.ws/blog/russian/2010/01/06/more-commits/"/>
    <updated>2010-01-06T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/01/06/more-commits/</id>
    <content type="html"><![CDATA[<p>Как часто у вас бывает, когда после часов работы выясняется, что все беспробудно сломано и уже не поддается никакой отладке. И причем уже непонятно, где новый код, а где старый. И в этом случае надо доставать вчерашний бэкап и как-то выяснять, что вы тут напрограммировали.</p>

<p>А все было бы заметно проще, если бы в процессе любой длинной и сложной работы делались бы промежуточные коммиты в систему контроля версий — своеобразные реперные точки, по которым можно пошагово отследить изменения.</p>

<p>Когда же используется централизованная система контроля версий (SCM) многие люди не коммитят незаконченный код, ибо в подавляющем числе случаев работа ведется в ветке, которой пользуется еще кто-то. Закоммитишь сломанный код — услышишь слова радости в свой адрес из другого конца комнаты.</p>

<p>Создание же ветки (нужно, например, для отслеживания изменений при отладки конкретного бага) в централизованной SCM более менее событие. Многие конторы имеют свои правила и процедуры создания веток (именование, причины создания, порядок их удаления и т.д.). Все это можно понять, так как внесения изменений в любой ресурс общего пользования (коим являтся репозиторий централизованной SCM) должны подчиняться каким-то правилам, а иначе будет хаос, и никто не сможет работать.</p>

<p>Что делать если у вас используется централизованная SCM? Просто начните использовать любую из современных распределенных систем параллельно с основной централизованной. Для начала можно вообще не вдаваться в детали хитрой интеграции локальной распределенной SCM и централизованной для автоматизированного переноса коммитов туда-сюда (например, как <a href="http://demin.ws/blog/russian/2009/05/21/what-version-control-to-choose/">p4-git</a> для Git и Perforce), а делать все просто: просто коммитить процесс работы в вашу собственную локальную распределенную систему для удобства отслеживания микро изменений, а когда все готово — делать большой коммит на сервер.</p>

<p>Мне приходится работать параллельно с разными SCM, и они преимущественно централизованные (SVN, Perforce, ClearCase), и преимущественно правила коммитов и слияний между ветками очень жесткие и детально прописанные. А про создание собственных веток я уж и не говорю. Но это не мешает мне локально использовать git, в котором в дополнение к официальным веткам сидит десяток моих собственных, коммиты и слияние в которых я делаю десятки раз в день.</p>

<p>Я стараюсь коммитить как можно чаще. Например, добавил новый target в Makefile — коммит, добил новый тест (пусть даже он пока не компилируется толком) — коммит, заставил тест компилироваться — точно коммит, ну а заставил тест работать — стопудово коммит. Решил попробовать новый метод линковки проекта и для этого подкорячить Makefile — создал новую ветку, поигрался, слил результаты с основной веткой и удалил временную. Конец рабочего дня и пора лететь на купание дочки — коммит, даже если исходники представляют собой поле боя, так как завтра тебя с утра могут неожиданно перебросить на Умань чинить срочный баг, и потом уже точно не вспомнить, что там к чему.</p>

<p>Также желательно, чтобы коммиты были логически изолированы. Например, в запале ты исправил сетевую подсистему и добавил кнопку в UI — не стоит объединять все это в один коммит, так как может случиться, что вы заходите эту новую кнопку в параллельной версии, и если это отдельный коммит, то перенести его можно будет простым слиянием или <a href="http://www.gitready.com/intermediate/2009/03/04/pick-out-individual-commits.html">cherry-pick</a>&lsquo;ом. Наличие <a href="http://www.gitready.com/beginner/2009/01/18/the-staging-area.html">staging area</a> (индекса) в git позволяет легко коммитить выборочно (причем даже файл по кускам). Для Mercurial я нашел более менее похожую возможность в <a href="http://tortoisehg.bitbucket.org/">TortoiseHG</a>, когда при коммите можно отметить файлы, которые в него включаются.</p>

<p>А так как каждый коммит требует словесного описания, то волей неволей это заставляет тебя оглядывать в целом, что ты тут понаписал. Для экстренных коммитов в конце дня, когда все может быть тотально сломано, а коммитить надо, то я обычно ставлю префикс &ldquo;UNFINISHED:&rdquo; в описание, по которому с утра сразу видно, что в исходниках может быть засада.</p>

<p>Лирическое отступление. С некоторого времени у меня даже всякие самопальные скрипты в UNIXе (а у кого их нет?) и конфигурационные файлы типа <code>.profile</code>, <code>.Xdefaults</code> или <code>.vimrc</code> живут под контролем git&rsquo;а. Другой пример: скачал я новый gdb-7.0. Развернул, скомпилил. При работе он начал иногда падать на определенных машинах с ошибкой. Интернет сказал, что это известный баг и есть патч. Так вот: сначала сразу после разворачивания оригинального архива дерево исходников gdb помещается в git (<code>git init</code> <code>&amp;&amp;</code> <code>git add *</code> <code>&amp;&amp;</code> <code>git commit -m &quot;Original gdb-7.0</code>), а только затем делается патч и тоже коммитится в git. Для чего? Чтобы понимать, что изменено, когда и почему.</p>

<p>Еще одно лирическое отступление. Ни что так помогает понять, насколько &ldquo;нужен&rdquo; тебе некий домашний хлам, как его датирование. Записал DVD с бэкапом — кроме названия диска еще надо надписать дату записи. Собрал документы по сданному проекту в архивую папку — поставил дату. Потом, через N лет, этот стикер с датой однозначно решит судьбу предмета и, возможно, определит его в помойку, освободив место в шкафу. В компьютере все это далается еще проще. Ну а история изменений/версий только приятно автоматизируют процесс.</p>

<p>Культура повсеместного использования контроля версий крайне позитивна. А распределенные системы (типа Git, Mercurial или Bazaar) позволяют приобщиться к прекрасному даже если все вокруг вас не хотят (пока!) принять эту культуру.</p>

<p>Посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2009/05/21/what-version-control-to-choose/">Какую распределенную систему контроля версий выбрать: Git, Bazaar или Mercurial?</a></li>
<li><a href="http://demin.ws/blog/russian/2009/11/14/everyday-git/">git в ежедневной работе</a></li>
<li><a href="http://demin.ws/blog/russian/2009/05/17/pragmatic-version-control-using-git/">Travis Swicegood, &ldquo;Pragmatic Version Control using Git&rdquo;</a></li>
<li><a href="http://demin.ws/blog/russian/2009/06/06/mercurial-architecture-in-googlecode/">Архитектура Mercurial на Google Code</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Виртуальные машины в быту]]></title>
    <link href="http://demin.ws/blog/russian/2010/01/04/virtual-machines-at-home/"/>
    <updated>2010-01-04T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2010/01/04/virtual-machines-at-home/</id>
    <content type="html"><![CDATA[<p>Лично я плохо представляю себе работу современного программиста сейчас без виртуальных машин. Даже на моем домашнем ноутбуке конфигурация выглядит так: &ldquo;dark side&rdquo; в виде Windows 7 в качестве хост-системы и пачка линуксовых виртуальных машин под VMware и VirtualBox.</p>

<p>Windows 7 для iTunes (увы, iPhone иначе толком не синхронизируешь), MS Office (в основном только ради Visio) и Visual Studio разнообразных версий. Все остальное происходит в виртуальных машинах. Благодаря аппаратной виртуализации в современных процессорах производительнось практически такая же (и у кого сейчас меньше двух ядер?). А умелое распределение ресурсов между виртуальными машиными вообще позволяет нивелировать потери.</p>

<p>Большинство современных виртуализаторов умеют очень ловко интегрировать десктоп гостевой системы в основную. Например, у меня окно той же виртуализированной Ubuntu выглядит обычным окном Windows, размер которого можно спокойно менять, при этом виртуальная среда автоматически подстраивает свой десктоп на лету под размер этого окна. Раньше, когда аппаратная поддержка виртуализации не была так распространена, и поэтому виртуальные машины реально тормозили, я долгое время использовал <a href="http://www.colinux.org/">Cooperative Linux</a>, так как он виртуализирует только память, и поэтому работает на полной скорости компьютера. Но coLinux не поддерживает многопроцессорность и требует особого ядра Линукса. С самим ядром уже не поиграешься.</p>

<p>В чем прелесть такого подхода с виртуальными машинами? Для начала — это изолированность сред. Не надо держать на одной системе много конфликтующего хлама, ибо постоянно для разных проектов нужны разные компиляторы, разные библиотеки, может и разные операционные системы. Диски/накопители для виртуальных сред — это просто файлы. Их просто копировать, уменьшать/расширять, сохранять, использовать для разных сред и т.д. И миграция с одного физического компьютера на другой упрощается в разы, так как надо просто слить образы машин.</p>

<p>Захотел подключить новый диск в систему или подменить развернутый Oracle на другую версию — пять минут работы. Захотел вернуть назад — еще две минуты. Да и клиенту дать образ настроенной виртуальной машины проще, чем объяснять, как все настраивать с нуля. А он потом еще все и сломает шаловливыми ручками.</p>

<p>Пока я вижу только один значительный минус при домашнем использовании — дисковое пространство, ибо для каждой системы счет сразу идет на гигабайты, а может и их десятки. 4-5 виртуальных машин, и начинаешь думать, куда бы сбросить временно неиспользуемые.</p>

<p>Но и тут есть выход. Например, у меня юниксовый раздел для домашнего (home) каталога используется в нескольких виртуальных машинах. Раздел с проектами тоже может быть замонтирован в разные машины. Повторюсь — управление дисковыми разделами в виде файлов крайне просто и удобно.</p>

<p>Для серверных решений весьма популярна система виртуальных операционных систем <a href="http://www.vmware.com/products/esxi/">ESXi</a>. Небольшой супервизор грузится в начале, и затем дает возможность управлять виртуализацией гостевых систем (диски, память, процессорное время и т.д.). То есть мой Windows 7 является простецким аналогом такого супервизора.</p>

<p>Подходим к сути. Так сейчас уже стало модно заменять стандартный BIOS на что-нибудь нужное, например Линукс с минимальным набором программ для интернета. Проекты <a href="http://coreboot.org/">coreboot</a> и <a href="http://www.splashtop.com/">Splashtop</a> уже давно существуют. Некоторое время назад лично я был очень впечатлен <a href="http://www.splashtop.com/videos.php">одним их видео</a>:</p>

<iframe width="425" height="344" src="https://www.youtube.com/embed/acDS7DmHC_g?color=white&theme=light"></iframe>

<p>Выходит, что логичным продолжением было бы зашить вместо BIOSа супервизор виртуальных машин.</p>

<p>Включаешь компьютер, мгновенно стартует супервизор, который дает тебе возможность управлять витуальными средами. Вот получится все одном флаконе на одном компьютере: и Windows, и Mac, и Linux и все на свете.</p>

<p>Проблемы конечно будут — надо делать драйвера виртуальных устройств под поддерживаемые операционные системы, но многое уже имеется в тех же VMware и VirtualBox.</p>

<p>В общем, в дополнение к модной &ldquo;облачной&rdquo; модели домашних компьютеров виртуальная модель однозначно имеет будущее. Для тех, кто любит &ldquo;по-горячее&rdquo;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wiki2blog: онлайновый wiki-редактор для Blogspot]]></title>
    <link href="http://demin.ws/blog/russian/2009/12/22/online-wiki-editor-for-blogspot/"/>
    <updated>2009-12-22T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/12/22/online-wiki-editor-for-blogspot/</id>
    <content type="html"><![CDATA[<p>Как я уже <a href="http://demin.ws/blog/russian/2009/07/26/blogging-on-googlecode/">писал</a>, что из-за неудобства онлайнового редактора Blogspot&rsquo;а я перешел на использование Wiki на Google Code для написания и хранения постов. То есть я пишу пост, используя язык разметки Wiki, отлаживанию разметку, заливаю картинки и т.д., а затем просто конвертирую wiki-файл с помощью <a href="http://code.google.com/p/easy-coding/source/browse/tools/wiki2blog.php">скрипта на php</a> в html. Фишка тут в том, что скрипт должен учитывать некоторые &ldquo;особенности&rdquo; Blogspot&rsquo;а — необходимость убирать разделители строки после блочных тэгов типа <code>blockquote</code>, <code>pre</code>, списков и т.д., чтобы не появлялись ненужные отступы. В результате выходной html становится практически нечитаемым.</p>

<p>Удобство же wiki-разметки в том, что исходник поста выглядит красиво и пригоден для последующего редактирования.</p>

<p>Но в таком подходе цикл работы над постом несколько длинноват: редактор, push через Mercurial на Google Code, просмотр как выглядит на Wiki, затем прогон через скрипт, и если все хорошо, то &ldquo;cut-paste&rdquo; в онлайн-редактор Blogspot и финальный отсмотр там. А если обнаруживаются шероховатости, что цикл повторяется сначала. И еще меня раздражал сам скрипт — корявый и непонятный.</p>

<p>Хотелось чего-нибудь легкого и более менее WYSIWYG.</p>

<p>Порыскав в сети на наткнулся на <a href="http://remysharp.com/demo/wiki2html.html">wiki2html</a>. И это оказалось то, что нужно. Я немного подкорячил это под свой формат wiki-разметки и, в итоге получилось это: <a href="http://easy-coding.googlecode.com/hg/tools/js/wiki2html.html">онлайновый редактор с препросмотром для подготовки постов</a> в Blogspot.</p>

<p>Теперь цикл такой: набиваешь пост в этом редакторе, а он автоматически отображает preview по мере набора вместе с html&rsquo;ем. Затем <code>cut-paste</code> html-я в Blogspot, и с большой вероятностью форматирование должно выглядеть как задумано.</p>

<p>Ни разу не претендую на возможные странности моего диалекта Wiki. Желающие могут изменить под себя, ибо форматировщик крайне простой.</p>

<p>Редактор состоит из одного файла <a href="http://easy-coding.googlecode.com/hg/tools/js/wiki2html.html">wiki2html.html</a>. Его можно просто сохранить локально и поиграться.</p>

<p>Под занавес привожу поддерживаемые команды wiki-разметки (таблиц пока нет).</p>

<p><strong>Ссылки и картинки</strong></p>

<pre><code>[http://example.com/test] — ссылка: http://example.com/test
[http://example.com/test ссылка с текстом] — ссылка с текстом
[http://github.com http://github.com/images/icons/public.png] — картинка со ссылкой 
[http://github.com/images/icons/public.png] — картинка 
[http://github.com/images/icons/public.png картинка по ссылке] — картинка по ссылке
</code></pre>

<p><strong>Текст</strong></p>

<pre><code>'''bold''' — bold
''italic'' — italic
@@[http://google.com]@@ — экранирование любой wiki-разметки
моно`ширин`ный текст — моноширинный текст
</code></pre>

<p><strong>Заголовки</strong></p>

<pre><code>= Заголовок1 =
== Заголовок2 ==
=== Заголовок3 ===
==== Заголовок4 ====
===== Заголовок5 =====
</code></pre>

<p><strong>Цитирование</strong></p>

<p>Цитата начинается с двух пробелов.</p>

<p><strong>Разделитель</strong></p>

<pre><code>---
</code></pre>

<p><strong>Ненумерованный список</strong></p>

<p>Код:</p>

<pre><code>* это
** ненумерованный
* список
</code></pre>

<p><strong>Нумерованный список</strong></p>

<p>Код:</p>

<pre><code># это
## нумерованный
# список
</code></pre>

<p><strong>Исходники</strong></p>

<p>Код:</p>

<pre><code>#include &lt;io.h&gt;
int main() {
  int a = 1;
  return a;
}
</code></pre>

<p><strong>Видео</strong></p>

<pre><code>[https://www.youtube.com/watch?v=FrufJFBSoQY]
</code></pre>

<p>Посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2009/07/26/blogging-on-googlecode/">Ведение блога на Google Code</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Steve Dewhurst "C++ Common Knowledge"]]></title>
    <link href="http://demin.ws/blog/russian/2009/12/16/cpp-common-knowledge/"/>
    <updated>2009-12-16T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/12/16/cpp-common-knowledge/</id>
    <content type="html"><![CDATA[<p>Побывал на тренинге <a href="http://semantics.org/instructorbio.html">Steve Dewhurst</a>&lsquo;а &ldquo;<a href="http://semantics.org/courses/Cpp-Common-Knowledge-Training.html">C++ Common Knowledge</a>&rdquo;. У меня уже давно есть его книга:</p>

<p><a href="http://www.amazon.co.uk/gp/product/0321321928/ref=as_li_tf_il?ie=UTF8&tag=prodiy-21&linkCode=as2&camp=1634&creative=6738&creativeASIN=0321321928"><img border="0" src="http://ws.assoc-amazon.co.uk/widgets/q?_encoding=UTF8&Format=_SL160_&ASIN=0321321928&MarketPlace=GB&ID=AsinImage&WS=1&tag=prodiy-21&ServiceVersion=20070822" ></a><img src="http://www.assoc-amazon.co.uk/e/ir?t=prodiy-21&l=as2&o=2&a=0321321928" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p>и в целом конкретно этот тренинг посвящен темам из нее.</p>

<p>Очень прикольный дядька. Нескучно, разбавлено подколами аудитории и шутками типа что ребята из Boost&rsquo;a не иначе как курят шаблоны и т.д. Мне очень понравилось.</p>

<p>Стив сказал, что С++ - это практически все, что делал и делает в жизни. Писал компиляторы, утилиты, разбирался в стандартах, а сейчас вот дает тренинги.</p>

<p>Не могу сказать, что я узнал что-то особенно новое — это было бы странно, так как его книжку (см. выше) читал от корки до корки и периодически к ней возвращаюсь. Хотя, пожалуй, одна мысль меня зацепила: правильное написание конструктора копирования или оператора присваивания для класса, в иерархии которого есть виртуальный базовый класс с данными является весьма запутанной задачей. Тут однозначно нарушается принцип логической независимости уровней иерархии наследования, так как надо точно знать, от каких классов ты унаследован и как их правильно инициализировать при множественном наследовании.</p>

<p>Рекомендация такая: сначала задаешь себе вопрос: а нужно ли мне тут множественное наследование? а нужно ли мне виртуальное множественное наследование?? а нужно ли мне виртуальное множественное наследование с данными в базовом виртуальном классе??? И даже после долгого раздумья лучше сказать &ldquo;нет&rdquo;. Лично я не имею ничего против множественного наследования. Но мне не очень нравится как это сделано в С++. И мне не очень нравится как это сделано в Java. Мне очень нравится, как сделано в Go. А именно: в Go полностью разнесены понятия структур данных и интерфейсов. Структуры данных не могут быть унаследованы. Они могут только реализовывать интерфейсы. А наследовать можно только интерфейсы. Поэтому в принципе нельзя при наследовании подцепить чужие данные, а только методы. А нет данных, не и проблемы их инициализации.</p>

<p>Итак, могу просто собрать общие рекомендации от Стива:</p>

<ul>
<li>стараться использовать виртуальные функции и полиморфизм в целом вместо <code>if</code> и <code>case</code></li>
<li>стараться использовать алгоритмы STL/Boost и функторы вместо циклов</li>
<li>использовать только &ldquo;умные&rdquo; указатели при работе с динамической памятью</li>
<li>не использовать классические массивы, а контейнеры STL (так как, например, <code>std::vector</code> гарантирует линейное размещение элементов, то можно смешивать &ldquo;старый&rdquo; код, работающий с указателями, с использованием контейнеров)</li>
<li>тщательно продумывать операции копирования сложных классов (лучше всего реализовать конструктор копирования и метод swap, а оператор присваивания реализовать через них)</li>
<li>всегда объявлять в коде класса конструктор копирования и оператор присваивания, и даже если они не используются, то просто закомментировать их объявление с пояснением, почему они не нужны</li>
<li>никогда не использовать приведения типов в стиле С, только С++ (<code>static_cast</code>, <code>const_cast</code> и т.д.), так как они длинные, их нудно набивать и они уродуют вид программы - в общем, все, что нужно для минимизации их наличия</li>
<li>помнить, что наследование - это re-use интерфейсов, а не кода как такового</li>
<li>не слишком верить компилятору ;-) (Стив их писал и знает, что они могут и подставить)</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Peter Seibel, "Coders at Work"]]></title>
    <link href="http://demin.ws/blog/russian/2009/12/15/coder-at-work/"/>
    <updated>2009-12-15T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/12/15/coder-at-work/</id>
    <content type="html"><![CDATA[<p>Неспешно дочитал &ldquo;Coders at Work&rdquo;.</p>

<p>Peter Seibel, &ldquo;Coders at Work&rdquo;</p>

<p><a href="http://www.amazon.co.uk/gp/product/1430219483/ref=as_li_tf_il?ie=UTF8&tag=prodiy-21&linkCode=as2&camp=1634&creative=6738&creativeASIN=1430219483"><img border="0" src="http://ws.assoc-amazon.co.uk/widgets/q?_encoding=UTF8&Format=_SL160_&ASIN=1430219483&MarketPlace=GB&ID=AsinImage&WS=1&tag=prodiy-21&ServiceVersion=20070822" ></a><img src="http://www.assoc-amazon.co.uk/e/ir?t=prodiy-21&l=as2&o=2&a=1430219483" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p>Книга состоит из интервью с десятком известных программистов. Тут есть создатели UNIX, Netscape, JavaScript, Smalltalk, Haskell, Erland, Ghostscript, ЖЖ и также есть просто Дональд Кнут. В общем, не самые последние люди.</p>

<p>Автор задает всем похожие вопросы: когда и почему вы начали программировать, как вы обычно работаете, где и над чем вы работали и работаете сейчас, что вы думаете о развитии языков программирования за последние десятилетия, что вы можете посоветовать молодым и т.д. Около мемуарная тема опасна тем, что можно элементарно скатиться в старческое брюзжание типа &ldquo;а вот в наши годы&hellip;&rdquo; или &ldquo;вы в машинных кодах пишите, и будет вам наука&hellip;&rdquo;, но у всех оказался очень взвешенный взгляд на действительность. Конечно, есть радикальное разделение на функциональщиков и императистов, но уже вопрос религии, нежели возраста.</p>

<p>Многие ссылаются на разные книги - я значительно пополнил свой список на &ldquo;прочитать&rdquo;.</p>

<p>Забавно, что почти никто не отозвался однозначно положительно о С++. Либо было однозначное нет типа &ldquo;очень перегружено, сложно и т.д.&rdquo;, либо &ldquo;ну раз уж более ничего пока лучше нет для создания native кода промышленной сложности, то пусть будет&rdquo;.</p>

<p>Лирическое отступление. Я тут покуриваю <a href="http://golang.com/">Go</a>, и чем дальше, тем больше меня прет. Могу сказать, что я почти для всех своих плюсовых привычек нашел альтернативу в Go. Ну а его врожденная мультипотоковость и ультра быстрая компиляция довершают все.</p>

<p>Также интересно мнение на тему обязательно ли для всем уважающим себя программистам прочитать &ldquo;Искусство программирования&rdquo; Кнута или хотя бы иметь в своей библиотеке. Многие признали, что не читали от корки до корки, но как справочник используют.</p>

<p>Как всегда убедился, что я даже и не слышал о некоторых крайне известных вещах. Например, <a href="http://ru.wikipedia.org/wiki/%D0%93%D1%80%D0%B0%D0%BC%D0%BE%D1%82%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5">Literate programming</a> от <a href="http://ru.wikipedia.org/wiki/%D0%94%D0%BE%D0%BD%D0%B0%D0%BB%D1%8C%D0%B4_%D0%9A%D0%BD%D1%83%D1%82">Дональда Кнута</a> или <a href="http://ru.wikipedia.org/wiki/%D0%A4%D0%B8%D0%BB%D1%8C%D1%82%D1%80_%D0%91%D0%BB%D1%83%D0%BC%D0%B0">фильтр Блума</a>.</p>

<p>В общем, я нашел книгу очень интересной. Если вас накрывает тоска типа &ldquo;а можно или всю карьеру программировать?&hellip;&rdquo; или &ldquo;надо таки подаваться в менеджмент или в архитекторы, а то тут молодые наседают&hellip;&rdquo;. Тут дается отличный, но скрытый ответ: любой из этих путей может принести и удовлетворение и, что важно, достаток. В этом прелесть нашей профессии. Просто делай то, от чего хочется работать до ночи, смотри по сторонам, интересуйся, что происходит вокруг, и не переживай, что можешь оказаться ненужным - это не так.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Электронная записная книга TiddlyWiki]]></title>
    <link href="http://demin.ws/blog/russian/2009/11/28/tiddly-wiki/"/>
    <updated>2009-11-28T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/11/28/tiddly-wiki/</id>
    <content type="html"><![CDATA[<p>Лично я очень люблю задавать вопросы, но я не люблю задавать один и тот же вопрос дважды. А иногда случается, что неожиданно сваливается большой поток новой информации (например, начинается проект), и голове все не удержать. Естественно, обычный бумажный блокнот позволяет производить начальную фиксацию информации, но когда объем записей, к которым необходимо часто возвращаться, переваливает за 8-10 исписанных страниц, то начинается каша.</p>

<p>Какой логичный выход? Использовать для записей компьютер.</p>

<p>Долгое время я использовал просто текстовый файл, например в Ворде. Например, начался проект или новая работа — сразу валит поток фактов, которые я в этот файл записываю. Обычно где-то раз в неделю я вбиваю записи из блокнота и тонны бумажек.</p>

<p>Так как информации много, то ее хочется как-то логично организовывать - главы, разделы, подразделы и т.д. Но со временем я заметил, что основной способ навигации впоследствии - это ни разу не оглавление, а просто поиск по словам. Например, мне нужно вспомнить, что мне там объясняли на тему как вбивать расходы или где смотреть отчеты по ночным сборкам. Я просто нажимаю <code>CTRL-F</code> и ввожу слово &ldquo;расходы&rdquo; или &ldquo;ночные&rdquo;. Как говориться, &ldquo;Don&rsquo;t sort. Search!&rdquo;</p>

<p>Наличие всего в одном файле упрощает техническую сторону вопроса - хочешь в Ворде работай, хочешь в Vi. И бэкапить удобно или в контроль версий засунуть.</p>

<p>Кстати, интересное наблюдение. В случае новой работы по первости обычно приходится фиксировать много рутинных вещей, типа как запускать сборку, как организованы исходники, где находится то или это и т.д. Обычно месяца через два-три поток стихает. Но когда приходит новый человек, и я ему выдаю такой файл, который в свое время создавал сам - обычно люди офигевают от того, получают ответы на почти все вопросы новичка, и говорят спасибо.</p>

<p>Итак, простой текстовый файл как всегда на коне. Но некоторое время назад, я перешел на <a href="http://www.tiddlywiki.com/">TiddlyWiki</a>. Я давно знал об этой штуковине, но как-то все не решался полностью на нее перейти. Сомневался в надежности, и способности нормально работать с большим объемом и т.д. Но недавно я перешел на новую работу, все завертелось снова и, я полностью таки начал записи вести в TiddlyWiki.</p>

<p>Что это такое? Поясню кратко, для тех кто не слышал. TiddlyWiki - это Wiki движок, который представляет собой один единственный html-файл. Как это работает: вы просто открываете этот файл в браузере, и движок на JavaScript позволяет создавать записи, редактировать их, ссылать записи друг на друга, удалять и, что важно, искать Но еще этот движок умеет делать самое интересное - сохранять все, что вы ввели в этот же файл. То есть когда вы откроете этот html-файл завтра, в нем будет все, что вы ввели раньше.</p>

<p>Я обычно работаю так: есть закладка в браузере, которая открывает локальный файл с TiddlyWiki. А так как браузера практически всегда открыт - запуск занимает мгновения. Так как этот Wiki, то доступны все удобства <a href="http://tiddlywiki.org/wiki/TiddlyWiki_Markup">Wiki-разметки</a> и взаимных ссылок (кстати, сам сайт <a href="http://www.tiddlywiki.com/">www.tiddlywiki.com</a> построен на TiddlyWiki). Создание новой заметки (tiddler&rsquo;а) происходит мгновенно. Для навигации можно сделать удобное меню слева, но просто пользуюсь поиском. Когда данных много - это единственный способ что-то найти.</p>

<p>Что лично мне нравится TiddlyWiki-подходе в целом:</p>

<p>Нужен только браузер с установленым плагином Java и малюсенький файл <code>Saver.jar</code>, который поставляется вместе с TiddlyWiki, и который надо просто положить в тот же каталог. Поэтому с wiki-файлом можно работать хоть в Windows, хоть в UNIX, хоть на Маке. Я лично проверял в Chrome, Firefox и IE).</p>

<p>Файл можно выложить на web-сервер, например в интранете, и таким образом публиковать записи. Конечно, для просматривающих его через web файл будет только для чтения.</p>

<p>Так как файл по сути своей текстовый (обычный html), то в случае чего, можно выдрать из него данные простым текстовым редактором, хотя у меня такой необходимости еще не было.</p>

<p>Движок TiddlyWiki при каждом самосохранении умеет делать копию текущего состояния. Я эти файлы обычно архивирую раз в неделю, и solid-архивация в один архив позволяет хранить всю историю с минимальным увеличением архива при каждом новом сохранении. И всегда можно вернуться к определенной старой версии.</p>

<p>И главное: удобный <strong>поиск</strong>!</p>

<p>Небольшой трюк для пользователей Хрома. Для нормальной работы TiddlyWiki нужно, чтобы были включены cookie. По умолчанию в Хроме при работе с локальными файлами cookie выключены, поэтому Хром следует запускать с ключом <code>--enable-file-cookies</code>.</p>

<p>Не спрашивайте второй раз одно и то же. Лучше запишите ответ в первый раз, а спросите что-нибудь новое.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Chromium OS теперь open source]]></title>
    <link href="http://demin.ws/blog/russian/2009/11/19/google-chromium-os-open-source/"/>
    <updated>2009-11-19T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/11/19/google-chromium-os-open-source/</id>
    <content type="html"><![CDATA[<p><a href="http://blog.chromium.org/2009/11/hello-open-source-developers-would-you.html">http://blog.chromium.org/<sup>2009</sup>&frasl;<sub>11</sub>/hello-open-source-developers-would-you.html</a></p>

<p>Удивительное дело, что еще остались люди, которые сомневаются, что open source - это единственная модель, с которой можно выживать при современном объеме и сложности софта.</p>

<p>Но вернемся к теме.</p>

<p>Chromium OS - загрузка за 4 секунды до получения браузера. Ну а параллельно можно грузить винды в виртуальную машину.</p>

<iframe width="425" height="344" src="https://www.youtube.com/embed/mTFfl7AjNfI?color=white&theme=light"></iframe>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git в ежедневной работе]]></title>
    <link href="http://demin.ws/blog/russian/2009/11/14/everyday-git/"/>
    <updated>2009-11-14T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/11/14/everyday-git/</id>
    <content type="html"><![CDATA[<p>По долгу работы мне приходится участвовать процедуре следующего толка: есть ветка исходников, стабильность которой имеет чудовищную важность. Там не то, что сломать билд нельзя, там каждый коммит проходит несколько стадий автоматических проверок (компиляция на разных платформах разными компиляторами, прогон разнообразных анализаторов и т.д.) плюс надо получить подтверждение у как минимум четырех/пяти человек, которые должны проверить твой коммит. Процедура мучительная и долгая даже с технической точки зрения. Более того, процедура выстраивалась годами и основана на очень древней системе контроля версий (не будем называть ее всуе), поэтому возможности слияния и разрешения конфликтов в основном ручные. Она умеет нормально делать только check-out и check-in.</p>

<p>Как следствие того, что каждый коммит готовится, отлаживается и проверяется ощутимое время (благо это только bug fix&rsquo;ы, размер которых обычно невелик), и даже формальная сторона вопроса может занять пару дней, и очень часто случается, что когда дело доходит непосредственно до команды &ldquo;commit&rdquo;, все оканчивается конфликтом, так как кто-то уже успел потрогать твой кусок кода и залить это на сервер. И надо ручками сливать обновленную версию со своими изменениями. А если файл не один, то начинается головная боль.</p>

<p>Так как я только недавно в этой теме, то после второго же коммита решил упростить себе жизнь в плане слияния при конфликте.</p>

<p>Расчехлил я <a href="http://git-scm.org/">git</a>, и теперь все выглядит так: каждый мой багфикс живет в отдельном репозитории git (фактически, каталог) с двумя ветками. В одной я независимо работаю над исправлениями, веду git&rsquo;ом историю этой работы, а во вторую ветку периодически синхронизирую состояние исходников из главного репозитория и сливаю с ними свою ветку одной единственной командой &ldquo;git merge&rdquo;.</p>

<p>В плане распределенных SCM я сейчас в основном работаю с mercurial, так как Google Code его поддерживает. Но все таки git - это невероятно мощный инструмент (правда когда в рабочем процессе не фигурирует Windows, ибо виндовая версия git&rsquo;а портирована крайне криво).</p>

<p>По началу многое запутывает. Меня по первости крайне сбивала с толку идея staging area (или его еще называют - index). Эдакое промежуточное звено между локальными изменениями и самим репозиторием. Получается, что <a href="http://www.kernel.org/pub/software/scm/git/docs/git-diff.html">git diff</a> может показывать три разные вещи: разницу между локальными изменениями и индексом (а не репозиторием - это будет по умолчанию, что обычно и вводит новичков в ступор), разницу между индексом и репозиторием и наконец разницу между локальными изменениями и репозиторием. Индекс (или staging area) позволяет при коммите выбирать, что именно из локальных файлов надо закоммитить, а не все подряд. В коммите участвуют только файлы, находящиеся в индексе. Причем самое интересное, что можно включать в индекс куски измененных файлов (например, я добавил в файл два новых класса, но закоммитить могу только выборочно один из них).</p>

<p>Вам уже нравится?</p>

<p>Или например, откат всех локальных изменений (очень частая операция) может быть выполнена как минимум двумя способами (через <a href="http://www.kernel.org/pub/software/scm/git/docs/git-checkout.html">git checkout</a> и через <a href="http://www.kernel.org/pub/software/scm/git/docs/git-reset.html">git reset</a>), или откат уже сделанного коммита можно также провернуть минимум двумя путями (<a href="http://www.kernel.org/pub/software/scm/git/docs/git-reset.html">git reset</a> или <a href="http://www.kernel.org/pub/software/scm/git/docs/git-revert.html">git revert</a>) в зависимости от того, хотите ли вы видеть потом этот откат в истории.</p>

<p>Обилие функций и их некоторая непохожесть на общепринятые стандарты команд SCM немного обескураживают сначала. Но немного въехав в тему начинаешь ощущать всю мощь. Например, наличие staging area и git stash (когда можно временно заморозить текущее состояние, сделать какую-то быструю минутную работу и вернуться к основной теме) - весьма уникальные возможности git&rsquo;a.</p>

<p>В плане GUI - gitk дает все необходимое.</p>

<p>Единственное, что надо выбрать по вкусу самостоятельно - это программу для проведения слияния при разрешении конфликта в графическом режиме. Тут у всех свои предпочтения.</p>

<p>Использование правильных и удобных инструментов сильно ускоряет работу. И время, потраченное в начале на выбор и настройку правильных служебных программ однозначно окупится в будущем.</p>

<p>Надеюсь, мне удалось привлечь в ряды пользователей git еще пару тройку энтузиастов.</p>

<p>Однажды привыкнув с постоянному наличию под рукой контроля версий, хочется, чтобы она была везде. Даже при починке автомобиля.</p>

<p>Посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2009/05/21/what-version-control-to-choose/">Какую распределенную систему контроля версий выбрать: Git, Bazaar или Mercurial?</a></li>
<li><a href="http://demin.ws/blog/russian/2009/05/17/pragmatic-version-control-using-git/">Travis Swicegood, &ldquo;Pragmatic Version Control using Git&rdquo;</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Приглашения в Google Wave]]></title>
    <link href="http://demin.ws/blog/russian/2009/11/12/invitations-to-google-wave/"/>
    <updated>2009-11-12T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/11/12/invitations-to-google-wave/</id>
    <content type="html"><![CDATA[<p>Есть десяток приглашений в <a href="http://wave.google.com/">Google Wave</a>.</p>

<p>Выдам все желающим в порядке поступления запросов. Естественно, имеет смысл только при наличии ящика на GMail&rsquo;е, поэтому просьба указывать гугловский адрес, куда высылать приглашения.</p>

<p>Как показывает практика, реально после высылки приглашение приходит не сразу (может занять пару дней), так что надо потерпеть.</p>

<p>И еще &ndash; делитесь сами приглашениями, если они у вас есть или будут. Wave хорош, когда там есть люди.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code review, Mondrian]]></title>
    <link href="http://demin.ws/blog/russian/2009/11/11/code-review-mondrian/"/>
    <updated>2009-11-11T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/11/11/code-review-mondrian/</id>
    <content type="html"><![CDATA[<p>Code review бесспорно является одним из ключевых моментов правильно организованного процесса разработки и поддержки софта.</p>

<p>Из лично опыта могу сказать, что весьма часто вторая пара незамутненных многочасовым смотрением на данный исходник глаз моментально замечает лажу, и в очередной раз удается избежать ночной fuck up, когда начинают валить письма от системы ночного тестирования, что туча QА тестов сломана из-за глупого недосмотра.</p>

<p><a href="http://perforce.com">Perforce</a> - отличная система для работы с реально большимы объемами репозиториев и кодовой базы в целом, но в ней нет встроенного механизма для code review. Google решили эту проблему сами.</p>

<p>В данном видео небезызвестный Гвидо ван Россум рассказывает о системе Mondrian, построенной на основе Perforce, которая применяется в Google для процесса code review.</p>

<p>Также мельком упоминается идея организации работы с исходниками в Google в общем. Например, что практически каждый инженер работает с огромным общим для все остальных разделом NFS, что позволяет видеть сразу, что происходит в других проектах.</p>

<iframe width="425" height="344" src="https://www.youtube.com/embed/IHHAL1pqsPk?color=white&theme=light"></iframe>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Вести с полей эмулятора Радио-86РК на JavaScript]]></title>
    <link href="http://demin.ws/blog/russian/2009/11/08/radio86rk-emulator-in-javascript-updates/"/>
    <updated>2009-11-08T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/11/08/radio86rk-emulator-in-javascript-updates/</id>
    <content type="html"><![CDATA[<p>Когда есть немного времени, неспешно, с удовольствием, смакуя и присвистывая, развиваю <a href="http://demin.ws/blog/russian/2009/09/25/radio86rk-emulator-in-javascript/">эмулятор на JavaScript&rsquo;е винтажного компьютера Радио-86РК</a>.</p>

<p>Все как в старые добрые времена, только прямо в браузере (нажмите на картину ниже).</p>

<p><a href="http://radio86.googlecode.com/hg/online/radio86.html"><img src="http://demin.ws/images/blog/rk.gif"/></a></p>

<p>Текущая версия 0.6. Уже помимо самой эмуляции и набора игр есть встроенный ассемблер, на котором можно прямо в окне эмулятора писать и компилировать код для Intel 8080, и почти интерактивный дизассемблер, которым можно просматривать не только код, но и данные.</p>

<p>Несколько картинок.</p>

<p>Собственно, эмулятор (игра Volcano):</p>

<p><img src="http://demin.ws/images/blog/radio86-volcano.png" /></p>

<p>Ассемблер:</p>

<p><img src="http://demin.ws/images/blog/radio86-builtin-assembler.png" /></p>

<p>Дизассемблер:</p>

<p><img src="http://demin.ws/images/blog/radio86-disassembler-chess.png" /></p>

<p>Также постепенно дополнется список игр.</p>

<p>В плане браузеров я делаю в основном только под Хром, но говорят, что в Firefox и Safari тоже работает с разной степенью мини-глюков.</p>

<p>Удовольствие от этого проекта очень сложно объяснить. Тут что-то глубинное.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Искусственная типизация однородных параметров в C++]]></title>
    <link href="http://demin.ws/blog/russian/2009/10/29/artificial-classification-of-homogeneous-parameters/"/>
    <updated>2009-10-29T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/10/29/artificial-classification-of-homogeneous-parameters/</id>
    <content type="html"><![CDATA[<p>Допустим есть вот такой класс:</p>

<pre class="hl">
<span class="hl kwc">class</span> Date <span class="hl opt">{</span>
 <span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl kwd">Date</span><span class="hl opt">(</span><span class="hl kwb">int</span> year<span class="hl opt">,</span> <span class="hl kwb">int</span> month<span class="hl opt">,</span> <span class="hl kwb">int</span> day<span class="hl opt">) {</span>
    <span class="hl opt">...</span>
  <span class="hl opt">}</span>
<span class="hl opt">};</span>
</pre>

<p>К сожалению, не весь мир пользуется логичной нотацией Год/Месяц/День или День/Месяц/Год. Иногда люди пишут Месяц/День/Год. Хотя и первые два легко перепутать. Вот к чему я веду: где-то в далеком от описания класса коде кто-то пишет:</p>

<pre class="hl">
Date <span class="hl kwd">d</span><span class="hl opt">(</span><span class="hl num">2009</span><span class="hl opt">,</span> <span class="hl num">4</span><span class="hl opt">,</span> <span class="hl num">5</span><span class="hl opt">);</span>
</pre>

<p>Что он этим хотел сказать? 4-е Мая или 5-е Апреля? Сложно быть уверенным, что пользователь такого класса когда-нибудь не перепутает порядок аргументов.</p>

<p>Можно улучшить дизайн? Да.</p>

<p>Например, так:</p>

<pre class="hl">
<span class="hl kwc">class</span> Year <span class="hl opt">{</span>
 <span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl kwc">explicit</span> <span class="hl kwd">Year</span><span class="hl opt">(</span><span class="hl kwb">int</span> year<span class="hl opt">) :</span> <span class="hl kwd">year_</span><span class="hl opt">(</span>year<span class="hl opt">) {}</span>
  <span class="hl kwc">operator</span> <span class="hl kwb">int</span><span class="hl opt">()</span> <span class="hl kwb">const</span> <span class="hl opt">{</span> <span class="hl kwa">return</span> year_<span class="hl opt">; }</span>
 <span class="hl kwc">private</span><span class="hl opt">:</span>
  <span class="hl kwb">int</span> year_<span class="hl opt">;</span>
<span class="hl opt">};</span>
</pre>

<p>И аналогично:</p>

<pre class="hl">
<span class="hl kwc">class</span> Month <span class="hl opt">{ ... };</span>
<span class="hl kwc">class</span> Day <span class="hl opt">{ ... };</span>
</pre>

<p>Интерфейс самого класса Date может быть таким:</p>

<pre class="hl">
<span class="hl kwc">class</span> Date <span class="hl opt">{</span>
 <span class="hl kwc">public</span><span class="hl opt">:</span>
   <span class="hl kwd">Date</span><span class="hl opt">(</span>Year year<span class="hl opt">,</span> Month month<span class="hl opt">,</span> Day day<span class="hl opt">);</span>
   <span class="hl kwd">Date</span><span class="hl opt">(</span>Month month<span class="hl opt">,</span> Day day<span class="hl opt">,</span> Year year<span class="hl opt">);</span>
   <span class="hl kwd">Date</span><span class="hl opt">(</span>Day day<span class="hl opt">,</span> Month month<span class="hl opt">,</span> Year year<span class="hl opt">);</span>
<span class="hl opt">}</span>
</pre>

<p>И использовать класс надо так:</p>

<pre class="hl">
Date <span class="hl kwd">d</span><span class="hl opt">(</span><span class="hl kwd">Year</span><span class="hl opt">(</span><span class="hl num">2010</span><span class="hl opt">),</span> <span class="hl kwd">Month</span><span class="hl opt">(</span><span class="hl num">4</span><span class="hl opt">),</span> <span class="hl kwd">Day</span><span class="hl opt">(</span><span class="hl num">5</span><span class="hl opt">));</span>
</pre>

<p>или</p>

<pre class="hl">
Date <span class="hl kwd">d</span><span class="hl opt">(</span><span class="hl kwd">Month</span><span class="hl opt">(</span><span class="hl num">4</span><span class="hl opt">),</span> <span class="hl kwd">Day</span><span class="hl opt">(</span><span class="hl num">5</span><span class="hl opt">),</span> <span class="hl kwd">Year</span><span class="hl opt">(</span><span class="hl num">2010</span><span class="hl opt">));</span>
</pre>

<p>Результат будет всегда предсказуем и виден в вызывающем коде. Тут все inline&rsquo;овое, так что эти три &ldquo;лишние&rdquo; класса никакого замедления не дадут.</p>

<p>Согласен, писанины немного больше, но зато полная гарантия от опечаток и, как следствие, глупых, но коварных ошибок.</p>

<p>Возражения есть?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[codepad.org]]></title>
    <link href="http://demin.ws/blog/russian/2009/10/29/codepad/"/>
    <updated>2009-10-29T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/10/29/codepad/</id>
    <content type="html"><![CDATA[<p>Открыл для себя <a href="http://codepad.org">codepad.org</a>, и начал пользоваться с завидной регулярностью, когда надо быстренько что-нибудь попробовать - откомпилировать и запустить, а потом еще и показать кому-нибудь.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Коварный printf()]]></title>
    <link href="http://demin.ws/blog/russian/2009/10/22/cunning-printf/"/>
    <updated>2009-10-22T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/10/22/cunning-printf/</id>
    <content type="html"><![CDATA[<p>Вчера подорвался на ерунде как ребенок.</p>

<p>Сижу, отлаживаю новый онлайновый ассемблер в своем <a href="http://code.google.com/p/radio86">эмуляторе Радио-86РК</a>. Под отладкой понимается ёрзанье с применением html&rsquo;я.</p>

<p>Для сборки финального html-файла из кучи мелких у меня написана примитивная программа. Вот ее фрагмент:</p>

<pre class="hl">
<span class="hl kwa">while</span> <span class="hl opt">(!</span><span class="hl kwd">feof</span><span class="hl opt">(</span>f<span class="hl opt">)) {</span>
  <span class="hl kwb">char</span> line<span class="hl opt">[</span><span class="hl num">1024</span><span class="hl opt">];</span>
  <span class="hl opt">*</span>line <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
  <span class="hl kwd">fgets</span><span class="hl opt">(</span>line<span class="hl opt">,</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span>line<span class="hl opt">),</span> f<span class="hl opt">);</span>
  <span class="hl kwd">printf</span><span class="hl opt">(</span>line<span class="hl opt">);</span>
<span class="hl opt">}</span>
</pre>

<p>Подразумевается, что данный код прострочно копирует данные из файла <code>f</code> на стандарный вывод.</p>

<p>Даже если отставить в сторону использование буфера с константной длиной и прочих &ldquo;штучек&rdquo; языка С, этот код имеет одну проблему, которая стоила мне сомнений в наличии сознания. До каких-то пор все работало отлично, но как только я начал использовать процентные значения для широт и высот в html, начались странности.</p>

<p>Получалось, что вместо, например:</p>

<pre class="hl">
<span class="hl kwa">&lt;table</span> <span class="hl kwb">width</span>=<span class="hl str">&quot;100%&quot;</span><span class="hl kwa">&gt;</span>
</pre>

<p>на выходе было:</p>

<pre class="hl">
<span class="hl kwa">&lt;table</span> <span class="hl kwb">width</span>=<span class="hl str">&quot;100&quot;</span><span class="hl kwa">&gt;</span>
</pre>

<p>Вы, наверное, уже догадались, в чем тут дело. Но, признаюсь, я искал проблему минут тридцать.</p>

<p>Вместо:</p>

<pre class="hl">
<span class="hl kwd">printf</span><span class="hl opt">(</span>line<span class="hl opt">);</span>
</pre>

<p>надо писать:</p>

<pre class="hl">
<span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;%s&quot;</span><span class="hl opt">,</span> line<span class="hl opt">);</span>
</pre>

<p>А иначе все процентные символы будут расцены как указатели форматов, ибо первый параметр <code>printf()</code> - это не просто строка, а формат, и в случае их неэкранирования будут уделены, что и происходило в моем случае.</p>

<p>Вывод (который следует после начального &ldquo;сам дурак&rdquo;): Лучше писать на С++ и использовать потоки для форматного вывода.</p>

<p><strong>Лирическое отступление</strong>. Кстати, онлайновый ассемблер очень огранично вписался в эмулятор. Спасибо <a href="http://sensi.org/~svo/vector06c/">Вячеславу Славинскому</a> за оригинальный код этого ассемблера. Особенно меня радует возможность автоматической фоновой компиляции. Теперь можно, прямо не отходя от эмулятора, переключиться в ассемблер, написать что-нибудь на диалекте Intel 8080 (<a href="http://code.google.com/p/radio86/wiki/KP580BM1">КР580</a>), скомпилировать и загнать прямо в эмулятор.</p>

<p><img src="http://demin.ws/images/blog/radio86-builtin-assembler.png" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Введение в Google Mock (видео)]]></title>
    <link href="http://demin.ws/blog/russian/2009/10/15/introduction-to-googlemock-talk/"/>
    <updated>2009-10-15T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/10/15/introduction-to-googlemock-talk/</id>
    <content type="html"><![CDATA[<p>Данное видео будет хорошим дополнением к <a href="http://demin.ws/blog/russian/2009/10/13/googlemock-for-beginner-in-russian/">предыдущему посту про Google Mock</a> для желающих освоить эту библиотеку.</p>

<iframe width="425" height="344" src="https://www.youtube.com/embed/sYpCyLI47rM?color=white&theme=light"></iframe>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Руководство для начинающих по Google Mock на русском]]></title>
    <link href="http://demin.ws/blog/russian/2009/10/13/googlemock-for-beginner-in-russian/"/>
    <updated>2009-10-13T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/10/13/googlemock-for-beginner-in-russian/</id>
    <content type="html"><![CDATA[<p>В рамках проекта популяризации культуры разработки софта с активным использованием тестирования выложил перевод <a href="http://code.google.com/p/googlemock/wiki/ForDummies">Google C++ Mocking for Dummies</a> на русский язык - <a href="http://code.google.com/p/googletest-translations/wiki/GoogleMockForDummiesRussian">Google C++ Mocking Framework для начинающих</a>.</p>

<p>Использование <a href="http://ru.wikipedia.org/wiki/Mock-%D0%BE%D0%B1%D1%8A%D0%B5%D0%BA%D1%82">Mock-объектов</a> является очень интересной темой. И владение ей позволяет перевести unit-тестирование на принципиально иной уровень.</p>

<p>Как рассказано в статье, языки программирования типа Python или Java благодаря встроенному механизму <a href="http://ru.wikipedia.org/wiki/Reflection">Reflection</a> позволяют строить Mock-объекты почти автоматически. С++ не дает такой роскоши, но гугловцы проделали отличную работу, создав Google Mock. Практически все, что можно как-то упростить или автоматизировать в плане mock-дел в С++, сделано и сделано добротно.</p>

<p>Соглашусь, что поначалу вся эта тема с Mock-объектами выглядит несколько громоздко и сложновато, но тут как с эргономичной клавиатурой - надо сначала привыкнуть, а потом все окупится сполна.</p>

<p>Посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2009/10/07/google-test-framework-authors-presentation/">Презентация от авторов Google C++ Testing Framework</a></li>
<li><a href="http://demin.ws/blog/russian/2009/10/03/google-test-framework-140/">Google Test Framework 1.4.0</a></li>
<li><a href="http://demin.ws/blog/russian/2009/03/19/google-test-framework-130/">Google Test Framework 1.3.0</a></li>
<li><a href="http://demin.ws/blog/russian/2009/07/15/googletest-for-beginners-in-russian/">Руководство для начинающих по Google Test на русском</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Клонирование проектов в Google Code]]></title>
    <link href="http://demin.ws/blog/russian/2009/10/09/clone-projects-in-google-code/"/>
    <updated>2009-10-09T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/10/09/clone-projects-in-google-code/</id>
    <content type="html"><![CDATA[<p>Около суток Mercurial на <a href="http://code.google.com/">Google Code</a> был в read-only режиме. Проводили какую-то профилактику.</p>

<p>Захожу сегодня и что вижу:</p>

<p><img src="http://demin.ws/images/blog/google-code-clone.png" /></p>

<p>Появился новый пункт в закладке Source — Clone (обведено красным). Это то, чего так долго ждали большевики — клонирование проектов.</p>

<p>Если администратор проекта не хочет добавлять вас в контрибуторы, а вы таки хотите показать людям свою лепту в данном проекте, то теперь вы можете сделать клон проекта и продолжить работу над своей веткой независимо. История изменений полностью наследуется от оригинала.</p>

<p>Клон может быть в свою очередь тоже склонирован.</p>

<p>Больше открытых проектов, хороших и разных!</p>

<p>Посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2009/07/26/blogging-on-googlecode/">Ведение блога на Google Code</a></li>
<li><a href="http://demin.ws/blog/russian/2009/06/07/googlecode-hosting-serialcom/">Хостинг на Google Code: SerialCom</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Презентация от авторов Google C++ Testing Framework]]></title>
    <link href="http://demin.ws/blog/russian/2009/10/07/google-test-framework-authors-presentation/"/>
    <updated>2009-10-07T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/10/07/google-test-framework-authors-presentation/</id>
    <content type="html"><![CDATA[<p>В догонку к <a href="http://demin.ws/blog/russian/2009/10/03/google-test-framework-140/">посту про новую версию Google Test</a>, желающие могут заценить небольшую презентацию от ее авторов:</p>

<iframe src="http://docs.google.com/present/embed?id=dfsbxvm5_0f5s4pvf9&amp;size=m" frameborder="0" width="555" height="451"></iframe>

<p>В презентации описывается не только сама библиотека, ее возможности и примеры использования, но и сам подход к разработке через тестирование (test driven development), рассмотрены несколько базовых советов по написанию удобного для тестирования кода и т.д.</p>

<p>В целом, не самые плохие десять минут, чтобы поглядеть и немного поразмыслить.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Закомментированные куски кода и TODO]]></title>
    <link href="http://demin.ws/blog/russian/2009/10/06/commented-code-and-todo/"/>
    <updated>2009-10-06T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/10/06/commented-code-and-todo/</id>
    <content type="html"><![CDATA[<p>Когда я вижу в production коде, в котором мне надо по какой-то причине разобраться, что-то типа:</p>

<pre class="hl">
<span class="hl opt">...</span>
<span class="hl kwb">int</span> x <span class="hl opt">= (</span>i <span class="hl opt">&lt;&lt;</span> <span class="hl num">8</span><span class="hl opt">) | (</span>i <span class="hl opt">&gt;&gt;</span> <span class="hl num">2</span><span class="hl opt">) | ((</span>i <span class="hl opt">&amp;</span> <span class="hl num">0x06</span><span class="hl opt">) ^</span> <span class="hl num">0xAA</span><span class="hl opt">);</span>

<span class="hl slc">// if (x &gt;= 0x12345)</span>
<span class="hl slc">//  x = x &gt;&gt; 3;</span>

<span class="hl kwd">calc_something_complicated</span><span class="hl opt">(</span>x<span class="hl opt">);</span>
<span class="hl opt">...</span>
</pre>

<p>мне хочется рвать и метать. Расчехлить <a href="http://ftp.kernel.org/pub/software/scm/git/docs/git-blame.html">blame</a>, найти автора и заглянуть ему в глаза.</p>

<p>Иначе, что мне остается: только думать, что автор этих строк, видимо, бился с формулой, пытался подогнать результат под что-то (возможно, какой-то тест). Достиг ли он результата? Или может оно так и продолжает глючить&hellip; Кто знает. Единственное, о чем этот код однозначно говорит, что автор не был уверен в том, что пишет. Потому, что если он был уверен, то удалил бы этот фрагмент или раскомментировал бы его навсегда.</p>

<p>На втором месте у меня стоит отладочная печать, навеки оставленная в коде:</p>

<pre class="hl">
<span class="hl opt">...</span>
<span class="hl kwb">int</span> x <span class="hl opt">= (</span>i <span class="hl opt">&lt;&lt;</span> <span class="hl num">8</span><span class="hl opt">) | (</span>i <span class="hl opt">&gt;&gt;</span> <span class="hl num">2</span><span class="hl opt">) | ((</span>i <span class="hl opt">&amp;</span> <span class="hl num">0x06</span><span class="hl opt">) ^</span> <span class="hl num">0xAA</span><span class="hl opt">);</span>

<span class="hl slc">// std::cerr &lt;&lt; &quot;На этот раз x = &quot; &lt;&lt; x &lt;&lt; std::endl;</span>

<span class="hl kwd">calc_something_complicated</span><span class="hl opt">(</span>x<span class="hl opt">);</span>
<span class="hl opt">...</span>
</pre>

<p>Снова получается, что автор сомневался и так и не отладил все до конца.</p>

<p>Конечно, подобные куски могут появляться просто по невнимательности и забывчивости, но как может помочь это оправдание? Никак.</p>

<p>Ну на третьем месте нашего хит-парада - блоки TODO.</p>

<pre class="hl">
<span class="hl opt">...</span>
<span class="hl kwb">int</span> x <span class="hl opt">= (</span>i <span class="hl opt">&lt;&lt;</span> <span class="hl num">8</span><span class="hl opt">) | (</span>i <span class="hl opt">&gt;&gt;</span> <span class="hl num">2</span><span class="hl opt">) | ((</span>i <span class="hl opt">&amp;</span> <span class="hl num">0x06</span><span class="hl opt">) ^</span> <span class="hl num">0xAA</span><span class="hl opt">);</span>

<span class="hl slc">// TODO: Заменить тип int на int64, так как на носу эра 64-разрядных машин.</span>
<span class="hl slc">// Программист Вася, 06.10.2009. Если что, вы знаете где меня искать.</span>

<span class="hl kwd">calc_something_complicated</span><span class="hl opt">(</span>x<span class="hl opt">);</span>
<span class="hl opt">...</span>
</pre>

<p>Тут еще куда ни шло. Куски TODO можно найти автоматическим поиском при подготовке релиза и перед ответственным слиянием. Но каждый TODO должен быть подписан и датирован, а лучше еще и детально объяснен. Ни что так не помогает оценить &ldquo;нужность&rdquo; куска кода, как дата его последней модификации.</p>

<p>Итак, вывод тут только один: в production коде никогда не должно быть закомментированных кусков. А если они есть, то они должны сопровождаться четкими комментариями, поясняющими их суть.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Test Framework 1.4.0]]></title>
    <link href="http://demin.ws/blog/russian/2009/10/03/google-test-framework-140/"/>
    <updated>2009-10-03T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/10/03/google-test-framework-140/</id>
    <content type="html"><![CDATA[<p>Вчера гугловцы анонсировали новую версию моей любимой библиотеки тестирования <a href="http://code.google.com/p/googletest">Google C++ Testing Framework</a> - <a href="http://googletest.googlecode.com/files/gtest-1.4.0.zip">1.4.0</a>.</p>

<p>Одна из главных новых возможностей - это <a href="http://code.google.com/p/googletest/wiki/AdvancedGuide#Extending_Google_Test_by_Handling_Test_Events">event listener API</a>. А попросту говоря, возможность полностью контролировать процесс печати результатов тестирования. Это позволяет формировать отчеты по тестированию в нужном формате без изменения кода библиотеки.</p>

<p>Что новенького?</p>

<p>Например, стандартный вывод при выполнении элементарного теста (файл <code>runner.cpp</code>):</p>

<pre class="hl">
<span class="hl ppc">#include</span> <span class="hl pps">&quot;gtest/gtest.h&quot;</span><span class="hl ppc"></span>

<span class="hl kwd">TEST</span><span class="hl opt">(</span>One<span class="hl opt">,</span> Simple<span class="hl opt">) {</span>
  <span class="hl kwd">EXPECT_EQ</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">**</span> argv<span class="hl opt">) {</span>
  <span class="hl opt">::</span>testing<span class="hl opt">::</span><span class="hl kwd">InitGoogleTest</span><span class="hl opt">(&amp;</span>argc<span class="hl opt">,</span> argv<span class="hl opt">);</span>
  <span class="hl kwa">return</span> <span class="hl kwd">RUN_ALL_TESTS</span><span class="hl opt">();</span>
<span class="hl opt">}</span>
</pre>

<p>будет таким:</p>

<pre><code>[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from One
[ RUN      ] One.Simple
runner.cpp(4): error: Value of: 2
Expected: 1
[  FAILED  ] One.Simple (15 ms)
[----------] 1 test from One (15 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (31 ms total)
[  PASSED  ] 0 tests.
[  FAILED  ] 1 test, listed below:
[  FAILED  ] One.Simple

 1 FAILED TEST

 [==========] Running 1 test from 1 test case.
 [----------] Global test environment set-up.
 [----------] 1 test from One
 [ RUN      ] One.Simple
 runner.cpp(4): error: Value of: 2
 Expected: 1
 [  FAILED  ] One.Simple (15 ms)
 [----------] 1 test from One (15 ms total)

 [----------] Global test environment tear-down
 [==========] 1 test from 1 test case ran. (31 ms total)
 [  PASSED  ] 0 tests.
 [  FAILED  ] 1 test, listed below:
 [  FAILED  ] One.Simple

  1 FAILED TEST
</code></pre>

<p>Для задания иного формата вывода нужно реализовать свой <code>event listener</code> (назовем его сервис печати). Например (файл <code>runner.cpp</code>):</p>

<pre class="hl">
<span class="hl ppc">#include</span> <span class="hl pps">&quot;gtest/gtest.h&quot;</span><span class="hl ppc"></span>

<span class="hl kwa">using namespace</span> <span class="hl opt">::</span>testing<span class="hl opt">;</span>

<span class="hl slc">// Данный класс заменит стандартный сервис печати.</span>
<span class="hl kwc">class</span> LaconicPrinter <span class="hl opt">:</span> <span class="hl kwc">public</span> <span class="hl opt">::</span>testing<span class="hl opt">::</span>EmptyTestEventListener <span class="hl opt">{</span>
  <span class="hl slc">// Вызывается до начала работы теста.</span>
  <span class="hl kwc">virtual</span> <span class="hl kwb">void</span> <span class="hl kwd">OnTestStart</span><span class="hl opt">(</span><span class="hl kwb">const</span> TestInfo<span class="hl opt">&amp;</span> test_info<span class="hl opt">) {</span>
    <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;*** Test %s.%s starting.</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span>
           test_info<span class="hl opt">.</span><span class="hl kwd">test_case_name</span><span class="hl opt">(),</span> test_info<span class="hl opt">.</span><span class="hl kwd">name</span><span class="hl opt">());</span>
  <span class="hl opt">}</span>

  <span class="hl slc">// Вызывается при срабатывании какого-либо утверждения или явного вызова </span>
  <span class="hl slc">// функции SUCCESS().</span>
  <span class="hl kwc">virtual</span> <span class="hl kwb">void</span> <span class="hl kwd">OnTestPartResult</span><span class="hl opt">(</span><span class="hl kwb">const</span> TestPartResult<span class="hl opt">&amp;</span> test_part_result<span class="hl opt">) {</span>
    <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;%s in %s:%d</span><span class="hl esc">\n</span><span class="hl str">%s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span>
           test_part_result<span class="hl opt">.</span><span class="hl kwd">failed</span><span class="hl opt">()</span> ? <span class="hl str">&quot;*** Failure&quot;</span> <span class="hl opt">:</span> <span class="hl str">&quot;Success&quot;</span><span class="hl opt">,</span>
           test_part_result<span class="hl opt">.</span><span class="hl kwd">file_name</span><span class="hl opt">(),</span>
           test_part_result<span class="hl opt">.</span><span class="hl kwd">line_number</span><span class="hl opt">(),</span>
           test_part_result<span class="hl opt">.</span><span class="hl kwd">summary</span><span class="hl opt">());</span>
  <span class="hl opt">}</span>

  <span class="hl slc">// Вызывается после выполнения теста.</span>
  <span class="hl kwc">virtual</span> <span class="hl kwb">void</span> <span class="hl kwd">OnTestEnd</span><span class="hl opt">(</span><span class="hl kwb">const</span> TestInfo<span class="hl opt">&amp;</span> test_info<span class="hl opt">) {</span>
    <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;*** Test %s.%s ending.</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span>
           test_info<span class="hl opt">.</span><span class="hl kwd">test_case_name</span><span class="hl opt">(),</span> test_info<span class="hl opt">.</span><span class="hl kwd">name</span><span class="hl opt">());</span>
  <span class="hl opt">}</span>
<span class="hl opt">};</span>

<span class="hl kwd">TEST</span><span class="hl opt">(</span>One<span class="hl opt">,</span> Simple<span class="hl opt">) {</span>
  <span class="hl kwd">EXPECT_EQ</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">**</span> argv<span class="hl opt">) {</span>
  <span class="hl opt">::</span>testing<span class="hl opt">::</span><span class="hl kwd">InitGoogleTest</span><span class="hl opt">(&amp;</span>argc<span class="hl opt">,</span> argv<span class="hl opt">);</span>

  <span class="hl slc">// Получаем ссылку на список сервисов печати.</span>
  <span class="hl opt">::</span>testing<span class="hl opt">::</span>TestEventListeners<span class="hl opt">&amp;</span> listeners <span class="hl opt">=</span>
      <span class="hl opt">::</span>testing<span class="hl opt">::</span>UnitTest<span class="hl opt">::</span><span class="hl kwd">GetInstance</span><span class="hl opt">()-&gt;</span><span class="hl kwd">listeners</span><span class="hl opt">();</span>

  <span class="hl slc">// Удаляем стандартный сервис печати.</span>
  <span class="hl kwa">delete</span> listeners<span class="hl opt">.</span><span class="hl kwd">Release</span><span class="hl opt">(</span>listeners<span class="hl opt">.</span><span class="hl kwd">default_result_printer</span><span class="hl opt">());</span>
  <span class="hl slc">// Добавляем наш сервис в список. Google Test самостоятельно удалит этот объект.</span>
  listeners<span class="hl opt">.</span><span class="hl kwd">Append</span><span class="hl opt">(</span><span class="hl kwa">new</span> LaconicPrinter<span class="hl opt">);</span>

  <span class="hl kwa">return</span> <span class="hl kwd">RUN_ALL_TESTS</span><span class="hl opt">();</span>
<span class="hl opt">}</span>
</pre>

<p>Теперь отчет по работе тестов будет выглядеть так:</p>

<pre><code>*** Test One.Simple starting.
*** Failure in runner.cpp:31
Value of: 2
Expected: 1
*** Test One.Simple ending.
</code></pre>

<p>Необходимо отметить, что одновременно может быть зарегистрировано несколько сервисов печати. Но в этом случае их выводы могут смешиваться и превращаться в кашу. Для избежания этого мы принудительно удаляем стандартный сервис печати, чтобы его вывод не мешал нашему.</p>

<p>Полностью интерфейс сервиса печати выглядит так:</p>

<pre class="hl">
<span class="hl kwc">class</span> EmptyTestEventListener <span class="hl opt">:</span> <span class="hl kwc">public</span> TestEventListener <span class="hl opt">{</span>
 <span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl slc">// Вызывается при начале прогона всех тестов.</span>
  <span class="hl kwc">virtual</span> <span class="hl kwb">void</span> <span class="hl kwd">OnTestProgramStart</span><span class="hl opt">(</span><span class="hl kwb">const</span> UnitTest<span class="hl opt">&amp;</span> unit_test<span class="hl opt">);</span>
  <span class="hl slc">// Вызывается при начале очередной итерации тестирования. Google Test </span>
  <span class="hl slc">// позволяет управлять количеством итерации при прогоне тестов.</span>
  <span class="hl kwc">virtual</span> <span class="hl kwb">void</span> <span class="hl kwd">OnTestIterationStart</span><span class="hl opt">(</span><span class="hl kwb">const</span> UnitTest<span class="hl opt">&amp;</span> unit_test<span class="hl opt">,</span> <span class="hl kwb">int</span> iteration<span class="hl opt">);</span>
  <span class="hl slc">// Вызывается до функции Environment::SetUp(), устанавливающей необходимое</span>
  <span class="hl slc">// окружение для работы всех тестов.</span>
  <span class="hl kwc">virtual</span> <span class="hl kwb">void</span> <span class="hl kwd">OnEnvironmentsSetUpStart</span><span class="hl opt">(</span><span class="hl kwb">const</span> UnitTest<span class="hl opt">&amp;</span> unit_test<span class="hl opt">);</span>
  <span class="hl slc">// Вызывается после функции Environment::SetUp(), устанавливающей необходимое</span>
  <span class="hl slc">// окружение для работы всех тестов.</span>
  <span class="hl kwc">virtual</span> <span class="hl kwb">void</span> <span class="hl kwd">OnEnvironmentsSetUpEnd</span><span class="hl opt">(</span><span class="hl kwb">const</span> UnitTest<span class="hl opt">&amp;</span> unit_test<span class="hl opt">);</span>
  <span class="hl slc">// Вызывается при начале прогона группы тестов (у которых первый параметр</span>
  <span class="hl slc">// макроса TEST/TEST_F одинаковый).</span>
  <span class="hl kwc">virtual</span> <span class="hl kwb">void</span> <span class="hl kwd">OnTestCaseStart</span><span class="hl opt">(</span><span class="hl kwb">const</span> TestCase<span class="hl opt">&amp;</span> test_case<span class="hl opt">);</span>
  <span class="hl slc">// Вызывается при начале работы теста.</span>
  <span class="hl kwc">virtual</span> <span class="hl kwb">void</span> <span class="hl kwd">OnTestStart</span><span class="hl opt">(</span><span class="hl kwb">const</span> TestInfo<span class="hl opt">&amp;</span> test_info<span class="hl opt">);</span>
  <span class="hl slc">// Вызывается при срабатывании утверждения в тесте или явного вызова </span>
  <span class="hl slc">// функции SUCCESS().</span>
  <span class="hl kwc">virtual</span> <span class="hl kwb">void</span> <span class="hl kwd">OnTestPartResult</span><span class="hl opt">(</span><span class="hl kwb">const</span> TestPartResult<span class="hl opt">&amp;</span> test_part_result<span class="hl opt">);</span>
  <span class="hl slc">// Вызывается после завершения работы теста.</span>
  <span class="hl kwc">virtual</span> <span class="hl kwb">void</span> <span class="hl kwd">OnTestEnd</span><span class="hl opt">(</span><span class="hl kwb">const</span> TestInfo<span class="hl opt">&amp;</span> test_info<span class="hl opt">);</span>
  <span class="hl slc">// Вызывается после прогона группы тестов.</span>
  <span class="hl kwc">virtual</span> <span class="hl kwb">void</span> <span class="hl kwd">OnTestCaseEnd</span><span class="hl opt">(</span><span class="hl kwb">const</span> TestCase<span class="hl opt">&amp;</span> test_case<span class="hl opt">);</span>
  <span class="hl slc">// Вызывается до функции Environment::TearDown(), производящей освобождение</span>
  <span class="hl slc">// ресурсов, занятых Environment::StartUp().</span>
  <span class="hl kwc">virtual</span> <span class="hl kwb">void</span> <span class="hl kwd">OnEnvironmentsTearDownStart</span><span class="hl opt">(</span><span class="hl kwb">const</span> UnitTest<span class="hl opt">&amp;</span> unit_test<span class="hl opt">);</span>
  <span class="hl slc">// Вызывается после функции Environment::TearDown().</span>
  <span class="hl kwc">virtual</span> <span class="hl kwb">void</span> <span class="hl kwd">OnEnvironmentsTearDownEnd</span><span class="hl opt">(</span><span class="hl kwb">const</span> UnitTest<span class="hl opt">&amp;</span> unit_test<span class="hl opt">);</span>
  <span class="hl slc">// Вызывается после очередной итерации тестирования.</span>
  <span class="hl kwc">virtual</span> <span class="hl kwb">void</span> <span class="hl kwd">OnTestIterationEnd</span><span class="hl opt">(</span><span class="hl kwb">const</span> UnitTest<span class="hl opt">&amp;</span> unit_test<span class="hl opt">,</span> <span class="hl kwb">int</span> iteration<span class="hl opt">);</span>
  <span class="hl slc">// Вызывается после прогона всех тестов.</span>
  <span class="hl kwc">virtual</span> <span class="hl kwb">void</span> <span class="hl kwd">OnTestProgramEnd</span><span class="hl opt">(</span><span class="hl kwb">const</span> UnitTest<span class="hl opt">&amp;</span> unit_test<span class="hl opt">);</span>
<span class="hl opt">};</span>
</pre>

<p>Также из значимого можно отметить новый ключ командной строки ~, позволяющий запускать тесты в случайном порядке. Ключом <code>--gtest_random_seed=SEED</code> можно &ldquo;управлять&rdquo; случайностью этого порядка. Если <code>SEED</code> равен 0, то случайность будет действительно случайной, так как случайная последовательность будет определяться текущим временем.</p>

<p>Что приятно, теперь формат XML файлов, генерируемых при использовании ключа <code>--gtest_output</code>, полностью совместим с форматом <a href="http://junit.sourceforge.net/">JUnit</a>. Это значит, что, например, система автоматической сборки, тестирования и интеграции <a href="https://hudson.dev.java.net/">Hudson</a> теперь понимает отчеты Google Test без дополнительный конвертации.</p>

<p>Также теперь при работе в Visual Studio сообщения о сбойных тестах выводятся прямо в окно &ldquo;Output&rdquo;, что позволяет, кликая на них, сразу находить строки, где сбоят тесты. Здорово, что данная фича <a href="http://code.google.com/p/googletest/source/detail?r=283">основана на моем коде</a>.</p>

<p>Еще, теперь время работы тестов печатается всегда, по умолчанию, то есть опция <code>--gtest_print_time</code> будто бы всегда включена.</p>

<p>Есть еще несколько незначительных улучшений:</p>

<ul>
<li>поддержка CodeGear Studio</li>
<li>собственная реализация <code>tuple</code> для независимости от <code>boost</code> при использовании <code>Combine()</code></li>
<li>множество улучшений для совместимости с Solaris, Windows Mobile и некоторыми другими платформами.</li>
</ul>

<p>Радость, одно слово.</p>

<p>Я перестал что-то писать что-либо на C++ без тестов, а Google Test делает этот процесс простым и легким.</p>

<p>Я уже обновился до версии 1.4.0, а вы?</p>

<p>Ссылки по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2009/03/19/google-test-framework-130/">Google Test Framework 1.3.0</a></li>
<li><a href="http://demin.ws/blog/russian/2009/07/15/googletest-for-beginners-in-russian/">Руководство для начинающих по Google Test на русском</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[const T* или T const*]]></title>
    <link href="http://demin.ws/blog/russian/2009/09/30/const-t-or-t-const/"/>
    <updated>2009-09-30T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/09/30/const-t-or-t-const/</id>
    <content type="html"><![CDATA[<p>Не секрет, что выражение <code>const T*</code> при объявления указателя полностью эквивалентно записи <code>T const*</code>, ибо тут важно только, что <code>const</code> стоит до знака <code>*</code>, а порядок его употребления с именем типа <code>Т</code> роли не играет:</p>

<pre class="hl">
<span class="hl kwb">const</span> T<span class="hl opt">*</span> p<span class="hl opt">;</span>
</pre>

<p>и</p>

<pre class="hl">
T <span class="hl kwb">const</span><span class="hl opt">*</span> p<span class="hl opt">;</span>
</pre>

<p>объявляют указатель на константный объект, а не константный указатель, то есть значение самого указателя можно менять:</p>

<pre class="hl">
T <span class="hl kwb">const</span><span class="hl opt">*</span> p<span class="hl opt">;</span>
<span class="hl opt">...</span>
p <span class="hl opt">=</span> NULL<span class="hl opt">;</span>
</pre>

<p>Но менять сам объект нельзя:</p>

<pre class="hl">
T <span class="hl kwb">const</span><span class="hl opt">*</span> p<span class="hl opt">;</span>
<span class="hl opt">...</span>
p<span class="hl opt">-&gt;</span>some_member <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>   <span class="hl slc">// ОШИБКА: error C2166: l-value specifies const object</span>
</pre>

<p>Но все это была вводная, и сейчас не об этом.</p>

<p>Меня больше интересуют читабельность исходников. Я могу ошибаться, но как мне кажется, что с общечеловеческой точки зрения употребление <code>const</code> в начале выражения (например, <code>const T* p;</code>) подразумевает константность всего выражения, и, собственно, не важно, что там на самом деле указатель, и по правилам С++ данный <code>const</code> значит только константность объекта, а не указателя.</p>

<p>Поэтому запись <code>T const* p;</code> может читаться несколько иначе, а именно: &ldquo;тип T, который константный, и на него объявляется указатель&rdquo;. Читабельность немного лучше.</p>

<p>Конечно, все это вопросы стиля во многом, да и всегда следует в первую очередь соблюдать стиль, уже принятый существующем исходнике, но есть вы только учитесь, или начинаете новый проект и что-то еще, когда можно попробовать что-то новое в стиле, как мне кажется, не стоит отказывать себе в этом опыте.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Эмулятор Радио-86РК на JavaScript]]></title>
    <link href="http://demin.ws/blog/russian/2009/09/25/radio86rk-emulator-in-javascript/"/>
    <updated>2009-09-25T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/09/25/radio86rk-emulator-in-javascript/</id>
    <content type="html"><![CDATA[<p>Первым компьютером, на котором я начал программировать, был <a href="http://ru.wikipedia.org/wiki/%D0%A0%D0%B0%D0%B4%D0%B8%D0%BE_86%D0%A0%D0%9A">Радио-86РК</a>. Его собрал мой брат и&hellip; понеслась, и несется до сих пор.</p>

<p>Поэтому я до сих пор питаю слабость к данному раритету. К результат этой слабости я постоянно писал эмуляторы этого компьютера.</p>

<p>Первый был под ДОС. Оригинальный сайт сего творения <a href="http://demin.ws/projects/radio86/emulator/dos/">я храню до сих пор в неизменном виде</a>. Этот эмулятор был весьма неплох: там был и встроенный отладчик, и метода взлома игр и т.д. Но ДОС ушел, поэтому данный эмулятор работает теперь разве что в <a href="http://www.dosbox.com/">DosBox</a>&lsquo;e. Исходники творения <a href="http://demin.ws/projects/radio86/emulator/dos/download.html">можно скачать</a>.</p>

<p>Вторая реинкарнация любимого РК была уже под Windows и работала через <a href="http://www.libsdl.org/">SDL</a>. Тут уже не было встроенного отладчика, да и проект так и остался сырым (хотя и работающим), поэтому на публике лежит только <a href="http://demin.ws/projects/radio86/emulator/windows/radio86-0.0.1.zip">бинарь с комплектом игр</a>.</p>

<p>И вот, пару дней назад я наткнулся вот на <a href="http://matt.west.co.tt/spectrum/jsspeccy/">эмулятор Спектрума на чистом JavaScript&rsquo;е</a>! - ни апплетов, ни activex&rsquo;ов.</p>

<p>Так я от этой темы завелся, что за день-два оживил старого монстра РК на платформе JavaScript. Оказывается правильные браузеры дают весьма недурственную скорость скриптования. 2d графика реализуется через тэг canvas из HTML5.</p>

<p>Получился проект - <a href="http://code.google.com/p/radio86/">Эмулятор Радио-86РК на JavaScript</a>.</p>

<p>Эмулятор и набор игр живут в одном <a href="http://radio86.googlecode.com/hg/online/radio86.html">единственном файле</a>. Можно нажать на ссылку, и эмулятор запустится в браузере. Внизу есть селектор для выбора игры, и возможность поиграться со размерами экрана и скоростью.</p>

<p>Эмуляция происходит на уровне команд процессора Intel 8080.</p>

<p>Скриншот классической игры Volcano, сделанный в этом эмуляторе.</p>

<p><img src="http://demin.ws/images/blog/radio86-volcano.png" /></p>

<p>На текущий момент я проверял только в Google Chrome 4.*. Думаю, я не буду заморачиваться особо на тему совместимости с другими браузерами, хотя посмотрим, как пойдет. В IE точно работать не будет, а вот про FF и Оперу ничего сказать не могу, пока.</p>

<p>Волшебный мир Радио-86РК снова вернулся!</p>

<p>P.S. К слову сказать, лучший эмулятор РК (и множества совместимых моделей), что я видел - это <a href="http://emu80.org/">эмулятор Виктора Пыхонина</a>. Может и он мигрирует на модную платформу со временем.</p>

<p><strong>Update</strong>: Обновил эмулятор до версии 0.2. Изменения незначительные: добавил некоторые системные программы (языки программирования, отладчики, редакторы и т.д.) и немного улучшил селектор выбора игры, который теперь срабатывает при нажатии кнопки &ldquo;Run&rdquo;.</p>

<p><strong>Update</strong>: Обновил эмулятор до версии 0.3. Отрисовка экране теперь работает значительно быстрее и не так грузит процессор.</p>

<p><strong>Update</strong>: В версии 0.4 теперь встроенный ассемблер. Можно писать и ассемблировать прямо в окне эмулятора. После есть возможно загрузить результат в сам эмулятор и запустить командой &ldquo;G&rdquo; в Мониторе.</p>

<p>Скриншот этого ассемблера:</p>

<p><img src="http://demin.ws/images/blog/radio86-builtin-assembler.png" /></p>

<p><strong>Update</strong>: В версии 0.6 теперь есть встроенный дизассемблер. Им можно просматривать не только программый код, но и данные.</p>

<p>Скриншот дизассемблера:</p>

<p><img src="http://demin.ws/images/blog/radio86-disassembler-chess.png" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Двойная точка с запятой в разделе объявления переменных]]></title>
    <link href="http://demin.ws/blog/russian/2009/09/21/doubled-semicolon-in-variables-declaration/"/>
    <updated>2009-09-21T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/09/21/doubled-semicolon-in-variables-declaration/</id>
    <content type="html"><![CDATA[<p>Казалось бы, невинный пример (<code>vs_double_semicolumn.c</code>):</p>

<pre class="hl">
<span class="hl kwb">void</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
  <span class="hl kwb">int</span> a<span class="hl opt">;;</span>
  <span class="hl kwb">int</span> b<span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Компилируем (в режиме языка <code>С</code>, то есть без <code>/TP</code>):</p>

<pre><code>cl vs_double_semicolumn.c
</code></pre>

<p>Результат:</p>

<pre><code>vs_double_semicolumn.c
vs_double_semicolumn.c(3) : error C2143: syntax error : missing ';' before 'type'
</code></pre>

<p>Результат в Codegear/Borland примерно такой же (хотя описание ошибки более ясное):</p>

<pre><code>CodeGear C++ 5.93 for Win32 Copyright (c) 1993, 2007 CodeGear
vs_double_semicolumn.c:
Error E2140 vs_double_semicolumn.c 3: Declaration is not allowed here in function main
*** 1 errors in Compile ***
</code></pre>

<p>Проблемка заключается в случайной опечатке в виде двойного символа <code>;</code>. Кстати, пример абсолютно реальный, из жизни. Случайная опечатка - и сразу много вопросов.</p>

<p>Получается, что второй символ <code>;</code> тут трактуется как пустой оператор, а не пустая декларация переменной. Компилятор решает, что объявления переменных закончены, и начался блок операторов, поэтому резонно ругается на попытку объявить переменную <code>b</code> там, где уже должны быть операторы.</p>

<p>Проверил на <code>gcc</code>, на родных компиляторах AIX, Solaris и HP-UX. Эти все съели пример без проблем.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ошибка в компиляторе Godegear (Borland) C++ при приведении типов указателей]]></title>
    <link href="http://demin.ws/blog/russian/2009/09/12/codegear-borland-compiler-bug-when-casting-pointers/"/>
    <updated>2009-09-12T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/09/12/codegear-borland-compiler-bug-when-casting-pointers/</id>
    <content type="html"><![CDATA[<p>Тривиальный пример (<code>bcc32_5.93_cast_bug.cpp</code>):</p>

<pre class="hl">
<span class="hl kwc">class</span> A <span class="hl opt">{};</span>
<span class="hl kwc">class</span> C <span class="hl opt">{};</span>
A<span class="hl opt">*</span> a<span class="hl opt">;</span>
A<span class="hl opt">*</span> b <span class="hl opt">=</span> <span class="hl kwa">static_cast</span><span class="hl opt">&lt;</span>C<span class="hl opt">*&gt;(</span>a<span class="hl opt">);</span>
</pre>

<p>Компилируем в bcc32.exe (версия 5.93) из Codegear RAD Studion 2007:</p>

<pre><code>bcc32 -c bcc32_5.93_cast_bug.cpp
</code></pre>

<p>Падает c internal compiler error:</p>

<pre><code>CodeGear C++ 5.93 for Win32 Copyright (c) 1993, 2007 CodeGear
bcc32_5.93_cast_bug.cpp:
Fatal F1004 bcc32_5.93_cast_bug.cpp 4: Internal compiler error at 0x44b34e with base 0x400000
Fatal F1004 bcc32_5.93_cast_bug.cpp 4: Internal compiler error
</code></pre>

<p>Люблю собирать падения компиляторов на стадии компиляции. А у вас есть что-нибудь подобное в загашнике?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Виртуальные функции в конструкторе и деструкторе]]></title>
    <link href="http://demin.ws/blog/russian/2009/09/10/virtual-functions-in-constructor-and-destructor/"/>
    <updated>2009-09-10T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/09/10/virtual-functions-in-constructor-and-destructor/</id>
    <content type="html"><![CDATA[<p>Рассмотрим простой пример (<code>virtual_funct_const.cpp</code>):</p>

<pre class="hl">
<span class="hl ppc">#include &lt;iostream&gt;</span>

<span class="hl kwc">class</span> A <span class="hl opt">{</span>
 <span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl kwd">A</span><span class="hl opt">() {</span>
    <span class="hl kwd">construct</span><span class="hl opt">();</span>
  <span class="hl opt">}</span>

  <span class="hl opt">~</span><span class="hl kwd">A</span><span class="hl opt">() {</span>
    <span class="hl kwd">destruct</span><span class="hl opt">();</span>
  <span class="hl opt">}</span>

  <span class="hl kwc">virtual</span> <span class="hl kwb">void</span> <span class="hl kwd">construct</span><span class="hl opt">() {</span>
    std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;A::construct()&quot;</span> <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  <span class="hl opt">}</span>

  <span class="hl kwc">virtual</span> <span class="hl kwb">void</span> <span class="hl kwd">destruct</span><span class="hl opt">() {</span>
    std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;A::destruct()&quot;</span> <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  <span class="hl opt">}</span>
<span class="hl opt">};</span>

<span class="hl kwc">class</span> B<span class="hl opt">:</span> <span class="hl kwc">public</span> A <span class="hl opt">{</span>
 <span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl kwd">B</span><span class="hl opt">() {</span>
    <span class="hl kwd">construct</span><span class="hl opt">();</span>
  <span class="hl opt">}</span>

  <span class="hl opt">~</span><span class="hl kwd">B</span><span class="hl opt">() {</span>
    <span class="hl kwd">destruct</span><span class="hl opt">();</span>
  <span class="hl opt">}</span>

  <span class="hl kwc">virtual</span> <span class="hl kwb">void</span> <span class="hl kwd">construct</span><span class="hl opt">() {</span>
    std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;B::construct()&quot;</span> <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  <span class="hl opt">}</span>

  <span class="hl kwc">virtual</span> <span class="hl kwb">void</span> <span class="hl kwd">destruct</span><span class="hl opt">() {</span>
    std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;B::destruct()&quot;</span> <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  <span class="hl opt">}</span>
<span class="hl opt">};</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
  B b<span class="hl opt">;</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Что напечатает эта программа?</p>

<p>А вот что:</p>

<pre><code>A::construct()
B::construct()
B::destruct()
A::destruct()
</code></pre>

<p>Получается, что конструкторы и деструкторы классов <code>A</code> и <code>B</code> при вызове объявленных виртуальными функций <code>construct()</code> и <code>destruct()</code> реально вызывали функции только своего класса.</p>

<p>В этом нет никакого секрета, а просто есть правило: виртуальная функция не является виртуальной, если вызывается из конструктора или деструктора.</p>

<p>Правило надо заучивать, что неудобно. Проще понять принцип. А принцип тут в краеугольном камне реализации наследования в C++: при создании объекта конструкторы в иерархии вызываются от базового класса к самому последнему унаследованному. Для деструкторов все наоборот.</p>

<p>Что получается: конструктор класса всегда работает в предположении, что его дочерние классы еще не созданы, поэтому он не имеет права вызывать функции, определенные в них. И для виртуальной функций ему ничего не остается, как только вызвать то, что определено в нем самом. Получается, что механизм виртуальных функций тут как-бы не работает. А он тут действительно не работает, так как таблица виртуальных функций дочернего класса еще не перекрыла текущую таблицу.</p>

<p>В деструкторе все наоборот. Деструктор знает, что во время его вызова все дочерние классы уже разрушены и вызывать у них ничего уже нельзя, поэтому он замещает адрес таблицы виртуальных функций на адрес своей собственной таблицы и благополучно вызывает версию виртуальной функции, определенной в нем самом.</p>

<p>Итак, виртуальная функция не является виртуальной, если вызывается из конструктора или деструктора.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Мультипотоковый отладчик TCP/IP соединений]]></title>
    <link href="http://demin.ws/blog/russian/2009/09/04/multi-threaded-tcpip-debugger/"/>
    <updated>2009-09-04T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/09/04/multi-threaded-tcpip-debugger/</id>
    <content type="html"><![CDATA[<p>Трассировка данных, передаваемых по TCP/IP, является весьма частой задачей при разработке сетевых приложений, особенно низкого уровня.</p>

<p>Программ для данной задачи существует превеликое множество. Но лично я очень давно использую для этих целей свой собственный велосипед. Причин тут несколько. Основная - мне нужна одна программа, одинаково работающая на многих платформах, включая даже Windows. Вторая по значимости причина - возможность налету что-то подкручивать, допиливать, вставлять миникуски кода для анализа конкретного протокола и т.д. Получается, что скриптовой язык тут является хорошим подспорьем.</p>

<p>Несколько лет назад первые версии моей утилиты были на PHP, но текущая версия переписана на Питоне.</p>

<p>Исходник небольшой, а, как мне кажется, разглядывание исходников должно радовать большинство программистов, особенно, если есть что покритиковать, поэтому приведу его прямо здесь (см. ниже).</p>

<p>Ни разу не претендую на оптимальность или крутизну использования Питона, поэтому принимаю любую критику.</p>

<p>Основные особенности и возможности:</p>

<ul>
<li>программа &ldquo;слушает&rdquo; на указанном порту и перенаправляет траффик на указанные адрес и порт</li>
<li>умеет сохранять лог в файл</li>
<li>программа является многопотоковой, то есть может принимать сразу несколько входящих содинений</li>
<li>механизм записи лога работает также в отдельном потоке, ускоряет работу</li>
</ul>

<p>Пример использования.</p>

<p>Запускаем сервер:</p>

<pre><code>python pyspy.py -a 10.44.5.138 -p 5467 -l 9999 -L trace.log
</code></pre>

<p>Запускаем клиента:</p>

<pre><code>telnet localhost 9999
</code></pre>

<p>и вводим <code>GET / HTTP/1.0&lt;ENTER&gt;&lt;ENTER&gt;</code>.</p>

<p>В файле лога и в консоли получаем вот такое:</p>

<pre><code>0000: Listen at port 9999, remote host ('10.44.5.138', 5467)
0000: Connection accepted from ('127.0.0.1', 15223), thread 1 launched
0001: Thread started
0001: Connecting to ('10.44.5.138', 5467)...
0001: Remote host: ('127.0.0.1', 15223)
0001: Recevied from ('127.0.0.1', 15223) (1)
0001: ----: 00-01-02-03-04-05-06-07-08-09-0A-0B-0C-0D-0E-0F
0001:       ------------------------------------------------
0001: 0000: 47                                              | G               
0001: Sent to ('10.44.5.138', 5467) (1)
0001: Recevied from ('127.0.0.1', 15223) (13)
0001: ----: 00-01-02-03-04-05-06-07-08-09-0A-0B-0C-0D-0E-0F
0001:       ------------------------------------------------
0001: 0000: 45 54 20 2F 20 48 54 54 50 2F 31 2E 30          | ET / HTTP/1.0   
0001: Sent to ('10.44.5.138', 5467) (13)
0001: Recevied from ('127.0.0.1', 15223) (2)
0001: ----: 00-01-02-03-04-05-06-07-08-09-0A-0B-0C-0D-0E-0F
0001:       ------------------------------------------------
0001: 0000: 0D 0A                                           | ..              
0001: Sent to ('10.44.5.138', 5467) (2)
0001: Recevied from ('127.0.0.1', 15223) (2)
0001: ----: 00-01-02-03-04-05-06-07-08-09-0A-0B-0C-0D-0E-0F
0001:       ------------------------------------------------
0001: 0000: 0D 0A                                           | ..              
0001: Sent to ('10.44.5.138', 5467) (2)
0001: Recevied from ('10.44.5.138', 5467) (379)
0001: ----: 00-01-02-03-04-05-06-07-08-09-0A-0B-0C-0D-0E-0F
0001:       ------------------------------------------------
0001: 0000: 48 54 54 50 2F 31 2E 31 20 33 30 32 20 46 6F 75 | HTTP/1.1 302 Fou
0001: 0010: 6E 64 0D 0A 44 61 74 65 3A 20 46 72 69 2C 20 30 | nd..Date: Fri, 0
0001: 0020: 34 20 53 65 70 20 32 30 30 39 20 30 38 3A 35 33 | 4 Sep 2009 08:53
0001: 0030: 3A 30 33 20 47 4D 54 0D 0A 53 65 72 76 65 72 3A | :03 GMT..Server:
0001: 0040: 20 41 70 61 63 68 65 0D 0A 50 72 61 67 6D 61 3A |  Apache..Pragma:
0001: 0050: 20 6E 6F 2D 63 61 63 68 65 0D 0A 45 78 70 69 72 |  no-cache..Expir
0001: 0060: 65 73 3A 20 46 72 69 2C 20 30 31 20 4A 61 6E 20 | es: Fri, 01 Jan 
0001: 0070: 31 39 39 39 20 30 30 3A 30 30 3A 30 30 20 47 4D | 1999 00:00:00 GM
0001: 0080: 54 0D 0A 43 61 63 68 65 2D 63 6F 6E 74 72 6F 6C | T..Cache-control
0001: 0090: 3A 20 6E 6F 2D 63 61 63 68 65 2C 20 6E 6F 2D 63 | : no-cache, no-c
0001: 00A0: 61 63 68 65 3D 22 53 65 74 2D 43 6F 6F 6B 69 65 | ache=&quot;Set-Cookie
0001: 00B0: 22 2C 20 70 72 69 76 61 74 65 0D 0A 4C 6F 63 61 | &quot;, private..Loca
...
[обрезано]
...
0001: 0100: 76 3D 31 0D 0A 43 6F 6E 6E 65 63 74 69 6F 6E 3A | v=1..Connection:
0001: 0110: 20 63 6C 6F 73 65 0D 0A 43 6F 6E 74 65 6E 74 2D |  close..Content-
0001: 0120: 54 79 70 65 3A 20 74 65 78 74 2F 68 74 6D 6C 0D | Type: text/html.
0001: 0130: 0A 0D 0A 52 65 64 69 72 65 63 74 20 70 61 67 65 | ...Redirect page
0001: 0140: 3C 62 72 3E 3C 62 72 3E 0A 54 68 65 72 65 20 69 | &lt;br&gt;&lt;br&gt;.There i
0001: 0150: 73 20 6E 6F 74 68 69 6E 67 20 74 6F 20 73 65 65 | s nothing to see
0001: 0160: 20 68 65 72 65 2C 20 70 6C 65 61 73 65 20 6D 6F |  here, please mo
0001: 0170: 76 65 20 61 6C 6F 6E 67 2E 2E 2E                | ve along...     
0001: Sent to ('127.0.0.1', 15223) (379)
0001: Connection reset by ('10.44.5.138', 5467)
0001: Connection closed
</code></pre>

<p>Теперь, собственно, исходник:</p>

<pre class="hl">
<span class="hl slc">#!/usr/bin/python</span>

<span class="hl kwa">import</span> socket<span class="hl opt">,</span> string<span class="hl opt">,</span> threading<span class="hl opt">,</span> os<span class="hl opt">,</span> select<span class="hl opt">,</span> sys<span class="hl opt">,</span> time<span class="hl opt">,</span> getopt
<span class="hl kwa">from</span> sys <span class="hl kwa">import</span> argv

<span class="hl kwa">def</span> <span class="hl kwd">usage</span><span class="hl opt">():</span>
   name <span class="hl opt">=</span> os<span class="hl opt">.</span>path<span class="hl opt">.</span><span class="hl kwd">basename</span><span class="hl opt">(</span>argv<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">])</span>
   <span class="hl kwa">print</span> <span class="hl str">&quot;usage:&quot;</span><span class="hl opt">,</span> name<span class="hl opt">,</span> <span class="hl str">&quot;-l listen_port -a host -p port [-L file] [-c] [-h?]&quot;</span>
   <span class="hl kwa">print</span> <span class="hl str">&quot; -a host         - address/host to connect&quot;</span>
   <span class="hl kwa">print</span> <span class="hl str">&quot; -p port         - remote port to connect&quot;</span>
   <span class="hl kwa">print</span> <span class="hl str">&quot; -l listen_port  - local port to listen&quot;</span>
   <span class="hl kwa">print</span> <span class="hl str">&quot; -L file         - log file&quot;</span>
   <span class="hl kwa">print</span> <span class="hl str">&quot; -c              - supress console output&quot;</span>
   <span class="hl kwa">print</span> <span class="hl str">&quot; -h or -?        - this help&quot;</span>
   <span class="hl kwa">print</span> <span class="hl str">&quot; -v              - version&quot;</span>
   sys<span class="hl opt">.</span><span class="hl kwd">exit</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">)</span>

PORT <span class="hl opt">=</span> <span class="hl kwa">False</span>
REMOTE_HOST <span class="hl opt">=</span> REMOTE_PORT <span class="hl opt">=</span> <span class="hl kwa">False</span>

CONSOLE <span class="hl opt">=</span> <span class="hl kwa">True</span>
LOGFILE <span class="hl opt">=</span> <span class="hl kwa">False</span>

<span class="hl kwa">try</span><span class="hl opt">:</span>
   opts<span class="hl opt">,</span> args <span class="hl opt">=</span> getopt<span class="hl opt">.</span><span class="hl kwd">getopt</span><span class="hl opt">(</span>argv<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">:],</span> <span class="hl str">&quot;l:a:p:L:ch?v&quot;</span><span class="hl opt">)</span>

   <span class="hl kwa">for</span> opt <span class="hl kwa">in</span> opts<span class="hl opt">:</span>
      opt<span class="hl opt">,</span> val <span class="hl opt">=</span> opt
      <span class="hl kwa">if</span> opt <span class="hl opt">==</span> <span class="hl str">&quot;-l&quot;</span><span class="hl opt">:</span>
         PORT <span class="hl opt">=</span> <span class="hl kwb">int</span><span class="hl opt">(</span>val<span class="hl opt">)</span>
      <span class="hl kwa">elif</span> opt <span class="hl opt">==</span> <span class="hl str">&quot;-a&quot;</span><span class="hl opt">:</span>
         REMOTE_HOST <span class="hl opt">=</span> val
      <span class="hl kwa">elif</span> opt <span class="hl opt">==</span> <span class="hl str">&quot;-p&quot;</span><span class="hl opt">:</span>
         REMOTE_PORT <span class="hl opt">=</span> <span class="hl kwb">int</span><span class="hl opt">(</span>val<span class="hl opt">)</span>
      <span class="hl kwa">elif</span> opt <span class="hl opt">==</span> <span class="hl str">&quot;-L&quot;</span><span class="hl opt">:</span>
         LOGFILE <span class="hl opt">=</span> val
      <span class="hl kwa">elif</span> opt <span class="hl opt">==</span> <span class="hl str">&quot;-c&quot;</span><span class="hl opt">:</span>
         CONSOLE <span class="hl opt">=</span> <span class="hl kwa">False</span>
      <span class="hl kwa">elif</span> opt <span class="hl opt">==</span> <span class="hl str">&quot;-?&quot;</span> <span class="hl kwa">or</span> opt <span class="hl opt">==</span> <span class="hl str">&quot;-h&quot;</span><span class="hl opt">:</span>
         <span class="hl kwd">usage</span><span class="hl opt">()</span>
      <span class="hl kwa">elif</span> opt <span class="hl opt">==</span> <span class="hl str">&quot;-v&quot;</span><span class="hl opt">:</span>
         <span class="hl kwa">print</span> <span class="hl str">&quot;Python TCP/IP Spy  Version 1.01  Copyright (c) 2009 by Alexander Demin&quot;</span>
         sys<span class="hl opt">.</span><span class="hl kwd">exit</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">)</span>
      <span class="hl kwa">else</span><span class="hl opt">:</span>
         <span class="hl kwd">usage</span><span class="hl opt">()</span>

   <span class="hl kwa">if not</span> PORT<span class="hl opt">:</span>
      <span class="hl kwa">raise</span> <span class="hl kwc">StandardError</span><span class="hl opt">,</span> <span class="hl str">&quot;listen port is not given&quot;</span>

   <span class="hl kwa">if not</span> REMOTE_HOST<span class="hl opt">:</span>
      <span class="hl kwa">raise</span> <span class="hl kwc">StandardError</span><span class="hl opt">,</span> <span class="hl str">&quot;remote host is not given&quot;</span>

   <span class="hl kwa">if not</span> REMOTE_PORT<span class="hl opt">:</span>
      <span class="hl kwa">raise</span> <span class="hl kwc">StandardError</span><span class="hl opt">,</span> <span class="hl str">&quot;remote port is not given&quot;</span>

<span class="hl kwa">except</span> <span class="hl kwc">Exception</span><span class="hl opt">,</span> e<span class="hl opt">:</span>
   <span class="hl kwa">print</span> <span class="hl str">&quot;error:&quot;</span><span class="hl opt">,</span> e<span class="hl opt">,</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>
   <span class="hl kwd">usage</span><span class="hl opt">()</span>

<span class="hl slc"># Remote host</span>
REMOTE <span class="hl opt">= (</span>REMOTE_HOST<span class="hl opt">,</span> REMOTE_PORT<span class="hl opt">)</span>

<span class="hl slc"># Create logging contitional variable</span>
log_cond <span class="hl opt">=</span> threading<span class="hl opt">.</span><span class="hl kwd">Condition</span><span class="hl opt">()</span>

queue <span class="hl opt">= []</span>

<span class="hl kwa">def</span> <span class="hl kwd">logger</span><span class="hl opt">():</span>
   <span class="hl kwa">global</span> queue
   <span class="hl kwa">while</span> <span class="hl num">1</span><span class="hl opt">:</span>
      log_cond<span class="hl opt">.</span><span class="hl kwd">acquire</span><span class="hl opt">()</span>

      <span class="hl kwa">while</span> <span class="hl kwb">len</span><span class="hl opt">(</span>queue<span class="hl opt">) ==</span> <span class="hl num">0</span><span class="hl opt">:</span>
         log_cond<span class="hl opt">.</span><span class="hl kwd">wait</span><span class="hl opt">()</span>

      <span class="hl kwa">if</span> LOGFILE<span class="hl opt">:</span>
         <span class="hl kwa">try</span><span class="hl opt">:</span>
            logfile <span class="hl opt">=</span> <span class="hl kwb">open</span><span class="hl opt">(</span>LOGFILE<span class="hl opt">,</span> <span class="hl str">&quot;a+&quot;</span><span class="hl opt">)</span>
            logfile<span class="hl opt">.</span><span class="hl kwd">writelines</span><span class="hl opt">(</span><span class="hl kwb">map</span><span class="hl opt">(</span><span class="hl kwa">lambda</span> x<span class="hl opt">:</span> x<span class="hl opt">+</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> queue<span class="hl opt">))</span>
            logfile<span class="hl opt">.</span><span class="hl kwd">close</span><span class="hl opt">()</span>
         <span class="hl kwa">except</span><span class="hl opt">:</span> <span class="hl kwa">pass</span>
     
      <span class="hl kwa">if</span> CONSOLE<span class="hl opt">:</span>
         <span class="hl kwa">for</span> line <span class="hl kwa">in</span> queue<span class="hl opt">:</span>
            <span class="hl kwa">print</span> line
      
      queue <span class="hl opt">= []</span>
      log_cond<span class="hl opt">.</span><span class="hl kwd">release</span><span class="hl opt">()</span>

<span class="hl slc"># Thread safe logger</span>
<span class="hl kwa">def</span> <span class="hl kwd">log</span><span class="hl opt">(</span>thread<span class="hl opt">,</span> msg<span class="hl opt">):</span>
   <span class="hl kwa">if</span> CONSOLE <span class="hl kwa">or</span> LOGFILE<span class="hl opt">:</span>
      log_cond<span class="hl opt">.</span><span class="hl kwd">acquire</span><span class="hl opt">()</span>
      queue<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span><span class="hl str">&quot;%04d: %s&quot;</span> <span class="hl opt">% (</span>thread<span class="hl opt">,</span> msg<span class="hl opt">))</span>
      log_cond<span class="hl opt">.</span><span class="hl kwd">notify</span><span class="hl opt">()</span>
      log_cond<span class="hl opt">.</span><span class="hl kwd">release</span><span class="hl opt">()</span>

<span class="hl kwa">def</span> <span class="hl kwd">printable</span><span class="hl opt">(</span>ch<span class="hl opt">):</span>
   <span class="hl kwa">return</span> <span class="hl opt">(</span><span class="hl kwb">int</span><span class="hl opt">(</span>ch <span class="hl opt">&lt;</span> <span class="hl num">32</span><span class="hl opt">)</span> <span class="hl kwa">and</span> <span class="hl str">'.'</span><span class="hl opt">)</span> <span class="hl kwa">or</span> <span class="hl opt">(</span><span class="hl kwb">int</span><span class="hl opt">(</span>ch <span class="hl opt">&gt;=</span> <span class="hl num">32</span><span class="hl opt">)</span> <span class="hl kwa">and</span> <span class="hl kwb">chr</span><span class="hl opt">(</span>ch<span class="hl opt">))</span>

<span class="hl slc"># Pre-build a printable characters map</span>
printable_map <span class="hl opt">= [</span> <span class="hl kwd">printable</span><span class="hl opt">(</span>x<span class="hl opt">)</span> <span class="hl kwa">for</span> x <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl opt">(</span><span class="hl num">256</span><span class="hl opt">) ]</span>

<span class="hl slc"># Thread safe dumper</span>
<span class="hl kwa">def</span> <span class="hl kwd">log_dump</span><span class="hl opt">(</span>thread<span class="hl opt">,</span> msg<span class="hl opt">):</span>

   <span class="hl kwa">if</span> CONSOLE <span class="hl kwa">or</span> LOGFILE<span class="hl opt">:</span>
      log_cond<span class="hl opt">.</span><span class="hl kwd">acquire</span><span class="hl opt">()</span>

      width <span class="hl opt">=</span> <span class="hl num">16</span>

      header <span class="hl opt">=</span> <span class="hl kwb">reduce</span><span class="hl opt">(</span><span class="hl kwa">lambda</span> x<span class="hl opt">,</span> y<span class="hl opt">:</span> x <span class="hl opt">+ (</span><span class="hl str">&quot;%02X-&quot;</span> <span class="hl opt">%</span> y<span class="hl opt">),</span> <span class="hl kwb">range</span><span class="hl opt">(</span>width<span class="hl opt">),</span> <span class="hl str">&quot;&quot;</span><span class="hl opt">)[</span><span class="hl num">0</span><span class="hl opt">:-</span><span class="hl num">1</span><span class="hl opt">]</span>
      queue<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span><span class="hl str">&quot;%04d: ----: %s&quot;</span> <span class="hl opt">% (</span>thread<span class="hl opt">,</span> header<span class="hl opt">))</span>
      queue<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span><span class="hl str">&quot;%04d:       %s&quot;</span> <span class="hl opt">% (</span>thread<span class="hl opt">,</span> <span class="hl str">'-'</span> <span class="hl opt">*</span> width <span class="hl opt">*</span> <span class="hl num">3</span><span class="hl opt">))</span>

      i <span class="hl opt">=</span> <span class="hl num">0</span>
      <span class="hl kwa">while</span> <span class="hl num">1</span><span class="hl opt">:</span>
         line <span class="hl opt">=</span> msg<span class="hl opt">[</span>i<span class="hl opt">:</span>i<span class="hl opt">+</span>width<span class="hl opt">]</span>
         <span class="hl kwa">if</span> <span class="hl kwb">len</span><span class="hl opt">(</span>line<span class="hl opt">) ==</span> <span class="hl num">0</span><span class="hl opt">:</span> <span class="hl kwa">break</span>
         dump <span class="hl opt">=</span> <span class="hl kwb">reduce</span><span class="hl opt">(</span><span class="hl kwa">lambda</span> x<span class="hl opt">,</span> y<span class="hl opt">:</span> x <span class="hl opt">+ (</span><span class="hl str">&quot;%02X &quot;</span> <span class="hl opt">%</span> <span class="hl kwb">ord</span><span class="hl opt">(</span>y<span class="hl opt">)),</span> line<span class="hl opt">,</span> <span class="hl str">&quot;&quot;</span><span class="hl opt">)</span>
         char <span class="hl opt">=</span> <span class="hl kwb">reduce</span><span class="hl opt">(</span><span class="hl kwa">lambda</span> x<span class="hl opt">,</span> y<span class="hl opt">:</span> x <span class="hl opt">+</span> printable_map<span class="hl opt">[</span><span class="hl kwb">ord</span><span class="hl opt">(</span>y<span class="hl opt">)],</span> line<span class="hl opt">,</span> <span class="hl str">&quot;&quot;</span><span class="hl opt">)</span>
         queue<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span><span class="hl str">&quot;%04X: %04X: %-*s| %-*s&quot;</span> <span class="hl opt">% (</span>thread<span class="hl opt">,</span> i<span class="hl opt">,</span> width<span class="hl opt">*</span><span class="hl num">3</span><span class="hl opt">,</span> dump<span class="hl opt">,</span> width<span class="hl opt">,</span> char<span class="hl opt">))</span>
         i <span class="hl opt">=</span> i <span class="hl opt">+</span> width

      log_cond<span class="hl opt">.</span><span class="hl kwd">notify</span><span class="hl opt">()</span>
      log_cond<span class="hl opt">.</span><span class="hl kwd">release</span><span class="hl opt">()</span>

<span class="hl slc"># Spy thread</span>
<span class="hl kwa">def</span> <span class="hl kwd">spy_thread</span><span class="hl opt">(</span>local<span class="hl opt">,</span> addr<span class="hl opt">,</span> thread_id<span class="hl opt">):</span>
   <span class="hl kwd">log</span><span class="hl opt">(</span>thread_id<span class="hl opt">,</span> <span class="hl str">&quot;Thread started&quot;</span><span class="hl opt">)</span>

   <span class="hl kwa">try</span><span class="hl opt">:</span>
      <span class="hl kwd">log</span><span class="hl opt">(</span>thread_id<span class="hl opt">,</span> <span class="hl str">&quot;Connecting to %s...&quot;</span> <span class="hl opt">%</span> <span class="hl kwb">str</span><span class="hl opt">(</span>REMOTE<span class="hl opt">))</span>
      remote <span class="hl opt">=</span> socket<span class="hl opt">.</span><span class="hl kwd">socket</span><span class="hl opt">(</span>socket<span class="hl opt">.</span>AF_INET<span class="hl opt">,</span> socket<span class="hl opt">.</span>SOCK_STREAM<span class="hl opt">)</span>
      remote<span class="hl opt">.</span><span class="hl kwd">connect</span><span class="hl opt">(</span>REMOTE<span class="hl opt">)</span>
   <span class="hl kwa">except</span> <span class="hl kwc">Exception</span><span class="hl opt">,</span> e<span class="hl opt">:</span>
      <span class="hl kwd">log</span><span class="hl opt">(</span>thread_id<span class="hl opt">,</span> <span class="hl str">&quot;Unable connect to %s -&gt; %s&quot;</span> <span class="hl opt">% (</span>REMOTE<span class="hl opt">,</span> e<span class="hl opt">))</span>
      local<span class="hl opt">.</span><span class="hl kwd">close</span><span class="hl opt">()</span>
      <span class="hl kwa">return</span>

   LOCAL <span class="hl opt">=</span> <span class="hl kwb">str</span><span class="hl opt">(</span>addr<span class="hl opt">)</span>

   <span class="hl kwd">log</span><span class="hl opt">(</span>thread_id<span class="hl opt">,</span> <span class="hl str">&quot;Remote host: &quot;</span> <span class="hl opt">+</span> LOCAL<span class="hl opt">)</span>

   <span class="hl kwa">try</span><span class="hl opt">:</span>
      running <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
      <span class="hl kwa">while</span> running <span class="hl opt">==</span> <span class="hl num">1</span><span class="hl opt">:</span> 

         rd<span class="hl opt">,</span> wr<span class="hl opt">,</span> er <span class="hl opt">=</span> select<span class="hl opt">.</span><span class="hl kwd">select</span><span class="hl opt">([</span>local<span class="hl opt">,</span> remote<span class="hl opt">], [], [</span>local<span class="hl opt">,</span> remote<span class="hl opt">],</span> <span class="hl num">3600</span><span class="hl opt">)</span>

         <span class="hl kwa">for</span> sock <span class="hl kwa">in</span> er<span class="hl opt">:</span>
            <span class="hl kwa">if</span> sock <span class="hl opt">==</span> local<span class="hl opt">:</span>
               <span class="hl kwd">log</span><span class="hl opt">(</span>thread_id<span class="hl opt">,</span> <span class="hl str">&quot;Connection error from &quot;</span> <span class="hl opt">+</span> LOCAL<span class="hl opt">)</span>
               running <span class="hl opt">=</span> <span class="hl num">0</span>
            <span class="hl kwa">if</span> sock <span class="hl opt">==</span> remote<span class="hl opt">:</span>
               <span class="hl kwd">log</span><span class="hl opt">(</span>thread_id<span class="hl opt">,</span> <span class="hl str">&quot;Connection error from &quot;</span> <span class="hl opt">+</span> REMOTE<span class="hl opt">)</span>
               running <span class="hl opt">=</span> <span class="hl num">0</span>

         <span class="hl kwa">for</span> sock <span class="hl kwa">in</span> rd<span class="hl opt">:</span>
            <span class="hl kwa">if</span> sock <span class="hl opt">==</span> local<span class="hl opt">:</span>
               val <span class="hl opt">=</span> local<span class="hl opt">.</span><span class="hl kwd">recv</span><span class="hl opt">(</span><span class="hl num">1024</span><span class="hl opt">)</span>
               <span class="hl kwa">if</span> val<span class="hl opt">:</span> 
                  <span class="hl kwd">log</span><span class="hl opt">(</span>thread_id<span class="hl opt">,</span> <span class="hl str">&quot;Recevied from %s (%d)&quot;</span> <span class="hl opt">% (</span>LOCAL<span class="hl opt">,</span> <span class="hl kwb">len</span><span class="hl opt">(</span>val<span class="hl opt">)))</span>
                  <span class="hl kwd">log_dump</span><span class="hl opt">(</span>thread_id<span class="hl opt">,</span> val<span class="hl opt">)</span>
                  remote<span class="hl opt">.</span><span class="hl kwd">send</span><span class="hl opt">(</span>val<span class="hl opt">)</span>
                  <span class="hl kwd">log</span><span class="hl opt">(</span>thread_id<span class="hl opt">,</span> <span class="hl str">&quot;Sent to %s (%d)&quot;</span> <span class="hl opt">% (</span>REMOTE<span class="hl opt">,</span> <span class="hl kwb">len</span><span class="hl opt">(</span>val<span class="hl opt">)))</span>
               <span class="hl kwa">else</span><span class="hl opt">:</span>
                  <span class="hl kwd">log</span><span class="hl opt">(</span>thread_id<span class="hl opt">,</span> <span class="hl str">&quot;Connection reset by %s&quot;</span> <span class="hl opt">%</span> LOCAL<span class="hl opt">)</span>
                  running <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>

            <span class="hl kwa">if</span> sock <span class="hl opt">==</span> remote<span class="hl opt">:</span>
               val <span class="hl opt">=</span> remote<span class="hl opt">.</span><span class="hl kwd">recv</span><span class="hl opt">(</span><span class="hl num">1024</span><span class="hl opt">)</span>
               <span class="hl kwa">if</span> val<span class="hl opt">:</span> 
                  <span class="hl kwd">log</span><span class="hl opt">(</span>thread_id<span class="hl opt">,</span> <span class="hl str">&quot;Recevied from %s (%d)&quot;</span> <span class="hl opt">% (</span>REMOTE<span class="hl opt">,</span> <span class="hl kwb">len</span><span class="hl opt">(</span>val<span class="hl opt">)))</span>
                  <span class="hl kwd">log_dump</span><span class="hl opt">(</span>thread_id<span class="hl opt">,</span> val<span class="hl opt">)</span>
                  local<span class="hl opt">.</span><span class="hl kwd">send</span><span class="hl opt">(</span>val<span class="hl opt">)</span>
                  <span class="hl kwd">log</span><span class="hl opt">(</span>thread_id<span class="hl opt">,</span> <span class="hl str">&quot;Sent to %s (%d)&quot;</span> <span class="hl opt">% (</span>LOCAL<span class="hl opt">,</span> <span class="hl kwb">len</span><span class="hl opt">(</span>val<span class="hl opt">)))</span>
               <span class="hl kwa">else</span><span class="hl opt">:</span>
                  <span class="hl kwd">log</span><span class="hl opt">(</span>thread_id<span class="hl opt">,</span> <span class="hl str">&quot;Connection reset by %s&quot;</span> <span class="hl opt">%</span> <span class="hl kwb">str</span><span class="hl opt">(</span>REMOTE<span class="hl opt">))</span>
                  running <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>

   <span class="hl kwa">except</span> <span class="hl kwc">Exception</span><span class="hl opt">,</span> e<span class="hl opt">:</span>
      <span class="hl kwd">log</span><span class="hl opt">(</span>thread_id<span class="hl opt">, (</span><span class="hl str">&quot;Connection terminated: &quot;</span> <span class="hl opt">+</span> <span class="hl kwb">str</span><span class="hl opt">(</span>e<span class="hl opt">)))</span>

   remote<span class="hl opt">.</span><span class="hl kwd">close</span><span class="hl opt">()</span>
   local<span class="hl opt">.</span><span class="hl kwd">close</span><span class="hl opt">()</span>

   <span class="hl kwd">log</span><span class="hl opt">(</span>thread_id<span class="hl opt">,</span> <span class="hl str">&quot;Connection closed&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">try</span><span class="hl opt">:</span>
   <span class="hl slc"># Server socket</span>
   srv <span class="hl opt">=</span> socket<span class="hl opt">.</span><span class="hl kwd">socket</span><span class="hl opt">(</span>socket<span class="hl opt">.</span>AF_INET<span class="hl opt">,</span> socket<span class="hl opt">.</span>SOCK_STREAM<span class="hl opt">)</span> 
   srv<span class="hl opt">.</span><span class="hl kwd">bind</span><span class="hl opt">((</span><span class="hl str">&quot;&quot;</span><span class="hl opt">,</span> PORT<span class="hl opt">))</span> 
<span class="hl kwa">except</span> <span class="hl kwc">Exception</span><span class="hl opt">,</span> e<span class="hl opt">:</span>
   <span class="hl kwa">print</span> <span class="hl str">&quot;error&quot;</span><span class="hl opt">,</span> e
   sys<span class="hl opt">.</span><span class="hl kwd">exit</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">)</span>

counter <span class="hl opt">=</span> <span class="hl num">1</span>

threading<span class="hl opt">.</span><span class="hl kwd">Thread</span><span class="hl opt">(</span>target<span class="hl opt">=</span>logger<span class="hl opt">,</span> args<span class="hl opt">=[]).</span><span class="hl kwd">start</span><span class="hl opt">()</span>

<span class="hl kwd">log</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl str">&quot;Listen at port %d, remote host %s&quot;</span> <span class="hl opt">% (</span>PORT<span class="hl opt">,</span> REMOTE<span class="hl opt">))</span>
 
<span class="hl kwa">while</span> <span class="hl num">1</span><span class="hl opt">:</span> 
   srv<span class="hl opt">.</span><span class="hl kwd">listen</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">)</span>              
   local<span class="hl opt">,</span> addr <span class="hl opt">=</span> srv<span class="hl opt">.</span><span class="hl kwd">accept</span><span class="hl opt">()</span>
   <span class="hl kwd">log</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl str">&quot;Connection accepted from %s, thread %d launched&quot;</span> <span class="hl opt">% (</span>addr<span class="hl opt">,</span> counter<span class="hl opt">))</span>
   threading<span class="hl opt">.</span><span class="hl kwd">Thread</span><span class="hl opt">(</span>target<span class="hl opt">=</span>spy_thread<span class="hl opt">,</span> args<span class="hl opt">=[</span>local<span class="hl opt">,</span> addr<span class="hl opt">,</span> counter<span class="hl opt">]).</span><span class="hl kwd">start</span><span class="hl opt">()</span>
   counter <span class="hl opt">=</span> counter <span class="hl opt">+</span> <span class="hl num">1</span>
</pre>

<p>Лично я постоянно использую этот скрипт на Windows, Linux и Solaris.</p>

<p>Следующий шаг - это переписать все на чистом С в виде одного единственного файла, который можно было бы в течение минуты забросить на любой UNIX или Windows, скомпилить и получить готовую программу. Питон - это конечно здорово, но, например, для AIX или HP-UX Питон является небольшой загвоздкой, которую в пять секунд не решить.</p>

<p>А что стоит у вас на вооружении по этому вопросу?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Code Jam Qualification Round 2009]]></title>
    <link href="http://demin.ws/blog/russian/2009/09/03/google-code-jam-qualification-round-2009/"/>
    <updated>2009-09-03T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/09/03/google-code-jam-qualification-round-2009/</id>
    <content type="html"><![CDATA[<p>Остается еще часов двенадцать до окончания квалификационного раунда <a href="http://code.google.com/codejam/">Google Code Jam 2009</a>.</p>

<p>Выполнив задачи A (Alien Language), B (Watersheds) и малую размерность задачи C (Welcome to Code Jam) я успешно сел в лужу на большой размерности задачи С. У меня там и не пахло отведенными 8 минутами на прогон данных. Сейчас ищу проблему, но поезд ушел &ndash; на решение большой размерности дается только одна попытка.</p>

<p>Традиционный вывод: Good algorithms are better than supercomputers.</p>

<p>В итоге, пока я на почетном пенсионерском 1784-ом месте с 76-ю баллами (под именем begoon) из около 5700 всех участников.</p>

<p>Радует, что в топовой двадцатке три российских флага.</p>

<p>Хотя пишут, что для прохода в первый раунд надо только 33 балла, то есть фактически только одна полностью решенная задача, решения больших размерностей не проверяются в онлайне, и окончательная оценка будет только после окончания квалификации.</p>

<p>Забавно, через 3-4 часа после начала забега у них там что-то упало, и нельзя было скачать задания. Быстро все починили, но продлили время для участников на пару часов.</p>

<p>Кто-нибудь учавствует?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Хорошо ли использовать std::string?]]></title>
    <link href="http://demin.ws/blog/russian/2009/08/04/is-it-good-to-use-std-string/"/>
    <updated>2009-08-04T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/08/04/is-it-good-to-use-std-string/</id>
    <content type="html"><![CDATA[<p>Я регулярно имею споры с коллегами на тему стоит ли повсеместно использовать <code>std::string</code>, или таки надо реализовывать свой класс для строчек.</p>

<p>Один из вопросов - это вопрос качества самой реализации <code>std::string</code>. Забавно, что большинство людей, которых я просил набросать прототип класса для строчек, более менее эффективного с точки зрения работы с памятью, писали примерно следующее:</p>

<pre class="hl">
<span class="hl kwc">class</span> String <span class="hl opt">{</span>
 <span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl kwc">explicit</span> <span class="hl kwd">String</span><span class="hl opt">(</span><span class="hl kwb">const</span> std<span class="hl opt">::</span>string<span class="hl opt">&amp;</span> value<span class="hl opt">) {</span> 
    <span class="hl kwd">init</span><span class="hl opt">(</span>value<span class="hl opt">.</span><span class="hl kwd">c_str</span><span class="hl opt">(),</span> value<span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">());</span> 
  <span class="hl opt">}</span>
  <span class="hl kwd">String</span><span class="hl opt">(</span><span class="hl kwb">const</span> String<span class="hl opt">&amp;</span> value<span class="hl opt">) {</span> <span class="hl kwd">init</span><span class="hl opt">(</span>value<span class="hl opt">.</span>data_<span class="hl opt">,</span> value<span class="hl opt">.</span>sz_<span class="hl opt">); }</span>
  <span class="hl opt">~</span><span class="hl kwd">String</span><span class="hl opt">() {</span> <span class="hl kwd">free</span><span class="hl opt">(</span>data_<span class="hl opt">); }</span>

  String<span class="hl opt">&amp;</span> <span class="hl kwc">operator</span><span class="hl opt">=(</span><span class="hl kwb">const</span> String<span class="hl opt">&amp;</span> value<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span> <span class="hl opt">!= &amp;</span>value<span class="hl opt">) {</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>value<span class="hl opt">.</span>sz_ <span class="hl opt">&gt;</span> sz_<span class="hl opt">)</span> data_ <span class="hl opt">= (</span><span class="hl kwb">char</span><span class="hl opt">*)</span>std<span class="hl opt">::</span><span class="hl kwd">realloc</span><span class="hl opt">(</span>data_<span class="hl opt">,</span> value<span class="hl opt">.</span>sz_<span class="hl opt">);</span>
      sz_ <span class="hl opt">=</span> value<span class="hl opt">.</span>sz_<span class="hl opt">;</span>
      std<span class="hl opt">::</span><span class="hl kwd">memcpy</span><span class="hl opt">(</span>data_<span class="hl opt">,</span> value<span class="hl opt">.</span>data_<span class="hl opt">,</span> sz_<span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return</span> <span class="hl opt">*</span><span class="hl kwa">this</span><span class="hl opt">;</span>
  <span class="hl opt">}</span>

 <span class="hl kwc">private</span><span class="hl opt">:</span>
  <span class="hl kwb">void</span> <span class="hl kwd">init</span><span class="hl opt">(</span><span class="hl kwb">const char</span><span class="hl opt">*</span> data<span class="hl opt">,</span> <span class="hl kwb">size_t</span> sz<span class="hl opt">) {</span>
    sz_ <span class="hl opt">=</span> sz<span class="hl opt">;</span>
    data_ <span class="hl opt">= (</span><span class="hl kwb">char</span><span class="hl opt">*)</span><span class="hl kwd">malloc</span><span class="hl opt">(</span>sz_<span class="hl opt">);</span>
    std<span class="hl opt">::</span><span class="hl kwd">memcpy</span><span class="hl opt">(</span>data_<span class="hl opt">,</span> data<span class="hl opt">,</span> sz_<span class="hl opt">);</span>
  <span class="hl opt">}</span>
  <span class="hl kwb">char</span><span class="hl opt">*</span> data_<span class="hl opt">;</span>
  <span class="hl kwb">size_t</span> sz_<span class="hl opt">;</span>
<span class="hl opt">};</span>
</pre>

<p>Ясно, что при такой реализации оператора присваивания строка в плане занимаемой памяти будет только расти. Это сделано специально.</p>

<p>Практически никто сразу не думал о необходимости наличия операции перемещения, например <code>swap</code>. Почему-то наличие конструктора копирования и оператора присваивания считается достаточным.</p>

<p>Что ответить на этот вопрос раз и навсегда для себя самого, я написал тестовую программу. Это программа сортирует массив из длинных строк. Строки представлены четырьмя способами: объект <code>std::string</code>, указатель на <code>std::string</code>, объект самопального класса <code>String</code> (см. выше) и указатель на <code>String</code>.</p>

<p>По предварительным очевидным оценкам работа через указатель должна быть максимально эффективная, так как в данном случае при перемещении объектов физически <code>std::sort()</code> переставляет только указатели, а не сами объекты.</p>

<p>А вот при работе непосредственно с объектами будет интересно сравнить, насколько банальная реализации строки будет уступать <code>std::string</code>.</p>

<p>Итак, <code>std_string.cpp</code>:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;iostream&gt;</span>
<span class="hl ppc">#include &lt;sstream&gt;</span>
<span class="hl ppc">#include &lt;string&gt;</span>
<span class="hl ppc">#include &lt;vector&gt;</span>
<span class="hl ppc">#include &lt;algorithm&gt;</span>
<span class="hl ppc">#include &lt;cstdlib&gt;</span>
<span class="hl ppc">#include &lt;cstring&gt;</span>
<span class="hl ppc">#include &lt;cassert&gt;</span>

<span class="hl ppc">#include</span> <span class="hl pps">&quot;gtest/gtest.h&quot;</span><span class="hl ppc"></span>

<span class="hl kwb">static const int</span> N <span class="hl opt">=</span> <span class="hl num">100</span><span class="hl opt">;</span>

<span class="hl slc">// Самопальный класс, реализующий хранение строки более менее</span>
<span class="hl slc">// эффективным образом с точки зрения копирования.</span>
<span class="hl kwc">class</span> String <span class="hl opt">{</span>
 <span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl slc">// &quot;explicit&quot; запрещает неявное приведение аргумента, что мы</span>
  <span class="hl slc">// могли точно знать, какие конструктор каких классов вызываются.</span>
  <span class="hl kwc">explicit</span> <span class="hl kwd">String</span><span class="hl opt">(</span><span class="hl kwb">const</span> std<span class="hl opt">::</span>string<span class="hl opt">&amp;</span> value<span class="hl opt">) {</span> 
    <span class="hl kwd">init</span><span class="hl opt">(</span>value<span class="hl opt">.</span><span class="hl kwd">c_str</span><span class="hl opt">(),</span> value<span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">());</span> 
  <span class="hl opt">}</span>
  <span class="hl kwd">String</span><span class="hl opt">(</span><span class="hl kwb">const</span> String<span class="hl opt">&amp;</span> value<span class="hl opt">) {</span> <span class="hl kwd">init</span><span class="hl opt">(</span>value<span class="hl opt">.</span>data_<span class="hl opt">,</span> value<span class="hl opt">.</span>sz_<span class="hl opt">); }</span>
  <span class="hl opt">~</span><span class="hl kwd">String</span><span class="hl opt">() {</span> <span class="hl kwd">free</span><span class="hl opt">(</span>data_<span class="hl opt">); }</span>

  <span class="hl slc">// Данный оператор - это, пожалуй, единственная попытка сделать</span>
  <span class="hl slc">// работу с памятью эффективной.</span>
  String<span class="hl opt">&amp;</span> <span class="hl kwc">operator</span><span class="hl opt">=(</span><span class="hl kwb">const</span> String<span class="hl opt">&amp;</span> value<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span> <span class="hl opt">!= &amp;</span>value<span class="hl opt">) {</span>
      <span class="hl slc">// Память перераспределяется только если оригинал длинее текущей</span>
      <span class="hl slc">// строки. Ясно, что при такой реализации строка может только</span>
      <span class="hl slc">// расти в плане занимаемой памяти.</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>value<span class="hl opt">.</span>sz_ <span class="hl opt">&gt;</span> sz_<span class="hl opt">)</span> data_ <span class="hl opt">= (</span><span class="hl kwb">char</span><span class="hl opt">*)</span>std<span class="hl opt">::</span><span class="hl kwd">realloc</span><span class="hl opt">(</span>data_<span class="hl opt">,</span> value<span class="hl opt">.</span>sz_<span class="hl opt">);</span>
      sz_ <span class="hl opt">=</span> value<span class="hl opt">.</span>sz_<span class="hl opt">;</span>
      std<span class="hl opt">::</span><span class="hl kwd">memcpy</span><span class="hl opt">(</span>data_<span class="hl opt">,</span> value<span class="hl opt">.</span>data_<span class="hl opt">,</span> sz_<span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return</span> <span class="hl opt">*</span><span class="hl kwa">this</span><span class="hl opt">;</span>
  <span class="hl opt">}</span>

  <span class="hl kwc">friend class</span> StringCmp<span class="hl opt">;</span>
  <span class="hl kwc">friend class</span> StringPointerCmp<span class="hl opt">;</span>

 <span class="hl kwc">private</span><span class="hl opt">:</span>
  <span class="hl kwb">void</span> <span class="hl kwd">init</span><span class="hl opt">(</span><span class="hl kwb">const char</span><span class="hl opt">*</span> data<span class="hl opt">,</span> <span class="hl kwb">size_t</span> sz<span class="hl opt">) {</span>
    sz_ <span class="hl opt">=</span> sz<span class="hl opt">;</span>
    data_ <span class="hl opt">= (</span><span class="hl kwb">char</span><span class="hl opt">*)</span><span class="hl kwd">malloc</span><span class="hl opt">(</span>sz_<span class="hl opt">);</span>
    std<span class="hl opt">::</span><span class="hl kwd">memcpy</span><span class="hl opt">(</span>data_<span class="hl opt">,</span> data<span class="hl opt">,</span> sz_<span class="hl opt">);</span>
  <span class="hl opt">}</span>
  <span class="hl kwb">char</span><span class="hl opt">*</span> data_<span class="hl opt">;</span>
  <span class="hl kwb">size_t</span> sz_<span class="hl opt">;</span>
<span class="hl opt">};</span>

std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span>std<span class="hl opt">::</span>string<span class="hl opt">&gt;</span> std_strings<span class="hl opt">;</span>
std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span>std<span class="hl opt">::</span>string<span class="hl opt">*&gt;</span> std_strings_p<span class="hl opt">;</span>
std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span>String<span class="hl opt">&gt;</span> strings<span class="hl opt">;</span>
std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span>String<span class="hl opt">*&gt;</span> strings_p<span class="hl opt">;</span>

<span class="hl slc">// Объект для сравнения двух std::string.</span>
<span class="hl kwc">class</span> StlStringCmp <span class="hl opt">{</span>
 <span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl kwb">bool</span> <span class="hl kwc">operator</span><span class="hl opt">()(</span><span class="hl kwb">const</span> std<span class="hl opt">::</span>string<span class="hl opt">&amp;</span> a<span class="hl opt">,</span> <span class="hl kwb">const</span> std<span class="hl opt">::</span>string<span class="hl opt">&amp;</span> b<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> a <span class="hl opt">&lt;</span> b<span class="hl opt">;</span>
  <span class="hl opt">}</span>
<span class="hl opt">};</span>

<span class="hl kwd">TEST</span><span class="hl opt">(</span>SortingStlString<span class="hl opt">,</span> StlString<span class="hl opt">) {</span>
  std<span class="hl opt">::</span><span class="hl kwd">sort</span><span class="hl opt">(</span>std_strings<span class="hl opt">.</span><span class="hl kwd">begin</span><span class="hl opt">(),</span> std_strings<span class="hl opt">.</span><span class="hl kwd">end</span><span class="hl opt">(),</span> <span class="hl kwd">StlStringCmp</span><span class="hl opt">());</span>
<span class="hl opt">}</span>

<span class="hl slc">// Объект для сравнения двух std::string*.</span>
<span class="hl kwc">class</span> StlStringPointerCmp <span class="hl opt">{</span>
 <span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl kwb">bool</span> <span class="hl kwc">operator</span><span class="hl opt">()(</span><span class="hl kwb">const</span> std<span class="hl opt">::</span>string<span class="hl opt">*</span> a<span class="hl opt">,</span> <span class="hl kwb">const</span> std<span class="hl opt">::</span>string<span class="hl opt">*</span> b<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> <span class="hl opt">*</span>a <span class="hl opt">&lt; *</span>b<span class="hl opt">;</span>
  <span class="hl opt">}</span>
<span class="hl opt">};</span>

<span class="hl kwd">TEST</span><span class="hl opt">(</span>SortingStlString<span class="hl opt">,</span> StlStringPointer<span class="hl opt">) {</span>
  std<span class="hl opt">::</span><span class="hl kwd">sort</span><span class="hl opt">(</span>std_strings_p<span class="hl opt">.</span><span class="hl kwd">begin</span><span class="hl opt">(),</span> std_strings_p<span class="hl opt">.</span><span class="hl kwd">end</span><span class="hl opt">(),</span> <span class="hl kwd">StlStringPointerCmp</span><span class="hl opt">());</span>
<span class="hl opt">}</span>

<span class="hl slc">// Объект для сравнения двух String.</span>
<span class="hl kwc">class</span> StringCmp <span class="hl opt">{</span>
 <span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl kwb">bool</span> <span class="hl kwc">operator</span><span class="hl opt">()(</span><span class="hl kwb">const</span> String<span class="hl opt">&amp;</span> a<span class="hl opt">,</span> <span class="hl kwb">const</span> String<span class="hl opt">&amp;</span> b<span class="hl opt">) {</span>
    <span class="hl kwa">assert</span><span class="hl opt">(</span>a<span class="hl opt">.</span>sz_ <span class="hl opt">==</span> b<span class="hl opt">.</span>sz_<span class="hl opt">);</span>
    <span class="hl kwa">return</span> std<span class="hl opt">::</span><span class="hl kwd">memcmp</span><span class="hl opt">(</span>a<span class="hl opt">.</span>data_<span class="hl opt">,</span> b<span class="hl opt">.</span>data_<span class="hl opt">,</span> a<span class="hl opt">.</span>sz_<span class="hl opt">);</span>
  <span class="hl opt">}</span>
<span class="hl opt">};</span>

<span class="hl kwd">TEST</span><span class="hl opt">(</span>SortingStlString<span class="hl opt">,</span> String<span class="hl opt">) {</span>
  std<span class="hl opt">::</span><span class="hl kwd">sort</span><span class="hl opt">(</span>strings<span class="hl opt">.</span><span class="hl kwd">begin</span><span class="hl opt">(),</span> strings<span class="hl opt">.</span><span class="hl kwd">end</span><span class="hl opt">(),</span> <span class="hl kwd">StringCmp</span><span class="hl opt">());</span>
<span class="hl opt">}</span>

<span class="hl slc">// Объект для сравнения двух String*.</span>
<span class="hl kwc">class</span> StringPointerCmp <span class="hl opt">{</span>
 <span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl kwb">bool</span> <span class="hl kwc">operator</span><span class="hl opt">()(</span><span class="hl kwb">const</span> String<span class="hl opt">*</span> a<span class="hl opt">,</span> <span class="hl kwb">const</span> String<span class="hl opt">*</span> b<span class="hl opt">) {</span>
    <span class="hl kwa">assert</span><span class="hl opt">(</span>a<span class="hl opt">-&gt;</span>sz_ <span class="hl opt">==</span> b<span class="hl opt">-&gt;</span>sz_<span class="hl opt">);</span>
    <span class="hl kwa">return</span> std<span class="hl opt">::</span><span class="hl kwd">memcmp</span><span class="hl opt">(</span>a<span class="hl opt">-&gt;</span>data_<span class="hl opt">,</span> b<span class="hl opt">-&gt;</span>data_<span class="hl opt">,</span> a<span class="hl opt">-&gt;</span>sz_<span class="hl opt">);</span>
  <span class="hl opt">}</span>
<span class="hl opt">};</span>

<span class="hl kwd">TEST</span><span class="hl opt">(</span>SortingStlString<span class="hl opt">,</span> StringPointer<span class="hl opt">) {</span>
  std<span class="hl opt">::</span><span class="hl kwd">sort</span><span class="hl opt">(</span>strings_p<span class="hl opt">.</span><span class="hl kwd">begin</span><span class="hl opt">(),</span> strings_p<span class="hl opt">.</span><span class="hl kwd">end</span><span class="hl opt">(),</span> <span class="hl kwd">StringPointerCmp</span><span class="hl opt">());</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[]) {</span>
  <span class="hl slc">// Это наполнитель, чтобы строки были длинные, и копирование было</span>
  <span class="hl slc">// ощутимо дорого.</span>
  std<span class="hl opt">::</span>string <span class="hl kwd">big</span><span class="hl opt">(</span><span class="hl num">1024</span> <span class="hl opt">*</span> <span class="hl num">1024</span><span class="hl opt">,</span> <span class="hl str">'?'</span><span class="hl opt">);</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> N<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
    <span class="hl slc">// Все строки будут одинаковой длины. Функции сравнения рассчитывают</span>
    <span class="hl slc">// на это.</span>
    std<span class="hl opt">::</span>stringstream fmt<span class="hl opt">;</span>
    fmt <span class="hl opt">&lt;&lt;</span> N <span class="hl opt">*</span> <span class="hl num">2</span> <span class="hl opt">-</span> i <span class="hl opt">&lt;&lt;</span> big<span class="hl opt">;</span>
    <span class="hl slc">// std::string строка-объект.</span>
    std_strings<span class="hl opt">.</span><span class="hl kwd">push_back</span><span class="hl opt">(</span>fmt<span class="hl opt">.</span><span class="hl kwd">str</span><span class="hl opt">());</span>
    <span class="hl slc">// std::string строка-указатель.</span>
    std_strings_p<span class="hl opt">.</span><span class="hl kwd">push_back</span><span class="hl opt">(</span><span class="hl kwa">new</span> std<span class="hl opt">::</span><span class="hl kwd">string</span><span class="hl opt">(</span>fmt<span class="hl opt">.</span><span class="hl kwd">str</span><span class="hl opt">()));</span>
    <span class="hl slc">// Моя строка-объект.</span>
    strings<span class="hl opt">.</span><span class="hl kwd">push_back</span><span class="hl opt">(</span><span class="hl kwd">String</span><span class="hl opt">(</span>fmt<span class="hl opt">.</span><span class="hl kwd">str</span><span class="hl opt">()));</span>
    <span class="hl slc">// Моя строка-указатель.</span>
    strings_p<span class="hl opt">.</span><span class="hl kwd">push_back</span><span class="hl opt">(</span><span class="hl kwa">new</span> <span class="hl kwd">String</span><span class="hl opt">(</span>fmt<span class="hl opt">.</span><span class="hl kwd">str</span><span class="hl opt">()));</span>
  <span class="hl opt">}</span>

  testing<span class="hl opt">::</span><span class="hl kwd">InitGoogleTest</span><span class="hl opt">(&amp;</span>argc<span class="hl opt">,</span> argv<span class="hl opt">);</span>
  <span class="hl slc">// Принудительно печатаем время работы тестов.</span>
  testing<span class="hl opt">::</span><span class="hl kwd">GTEST_FLAG</span><span class="hl opt">(</span>print_time<span class="hl opt">) =</span> <span class="hl kwa">true</span><span class="hl opt">;</span>
  <span class="hl kwa">return</span> <span class="hl kwd">RUN_ALL_TESTS</span><span class="hl opt">();</span>
<span class="hl opt">}</span>
</pre>

<p>Компилируем:</p>

<pre><code>cl /O2 /EHsc /I. std_string.cpp gtest-all.cc
</code></pre>

<p>Запускаем:</p>

<pre><code>[==========] Running 4 tests from 1 test case.
[----------] Global test environment set-up.
[----------] 4 tests from SortingStlString
[ RUN      ] SortingStlString.StlString
[       OK ] SortingStlString.StlString (203 ms)
[ RUN      ] SortingStlString.StlStringPointer
[       OK ] SortingStlString.StlStringPointer (0 ms)
[ RUN      ] SortingStlString.String
[       OK ] SortingStlString.String (891 ms)
[ RUN      ] SortingStlString.StringPointer
[       OK ] SortingStlString.StringPointer (0 ms)
[----------] 4 tests from SortingStlString (1125 ms total)

[----------] Global test environment tear-down
[==========] 4 tests from 1 test case ran. (1125 ms total)
[  PASSED  ] 4 tests.
</code></pre>

<p>Видно, что версии с указателями отработали примерно одинаково быстро, а вот при работе с объектами <code>std::string</code> обогнал самопальную реализацию в 4 раза - 203 мс против 891 мс.</p>

<p>Несложно понять, почему это так. <code>std::sort()</code> для перестановки элементов использует шаблонную функцию <code>std::swap()</code>, которая для <code>std::string</code> реализована так, чтобы делать перестановку без физического копирования данных. А для <code>String</code> все происходит банально через конструктор копирования и оператор присваивания.</p>

<p>В общем, для себя я вынес, что не надо городить свой огород, так как в большинстве случаев <code>std::string</code> решает все проблемы. Но возникает вопрос - как добавлять в <code>std::string</code> свою функциональность? Например, поиск слов.</p>

<p>Проблема в том, что у <code>std::string</code> деструктор объявлен как невиртуальный (может это сделано по соображениям эффективности), а наследование от класса с невиртуальным деструктором в C++ является не самой правильной затеей.</p>

<p>Автор STL <a href="http://ru.wikipedia.org/wiki/%D0%A1%D1%82%D0%B5%D0%BF%D0%B0%D0%BD%D0%BE%D0%B2,_%D0%90%D0%BB%D0%B5%D0%BA%D1%81%D0%B0%D0%BD%D0%B4%D1%80_%D0%90%D0%BB%D0%B5%D0%BA%D1%81%D0%B0%D0%BD%D0%B4%D1%80%D0%BE%D0%B2%D0%B8%D1%87">Александр Степанов</a> в своем труде <a href="http://www.stepanovpapers.com/notes.pdf">Notes for the Programming course at Adobe</a> советует реализовать дополнительную функциональность для стандартных контейнеров STL через шаблонные алгоритмы. Плюсов тут много, например, реализовав какой-то разбор строки через итераторы в виде шаблонной функции-алгоритма, можно автоматически получить её же для все остальных контейнеров, у которых есть такие же итераторы.</p>

<p>Интересно, что пишет Степанов про свой взляд на то, как надо реализовывать функцию <code>length()</code> для контейнеров (в документе, ссылка на который дана выше, Степанов показывает шаг за шагом процесс создания эффективного контейнера):</p>

<p><em>While we could make a member function to return length, it is better to make it a global friend function. If we do that, we will be able eventually to define the same function to work on built-in arrays and achieve greater uniformity of design. I made size into a member function in STL in an attempt to please the standard committee. I knew that begin, end and size should be global functions but was not willing to risk another fight with the committee.</em></p>

<p>Он считает, что глобальная шаблонная функция <code>length()</code> - это правильнее, чем <code>length()</code> как член класса. Если б не комитет стандартизации - так оно и было бы в STL.</p>

<p>Итак, подытоживая сказанное, не стоит не доверять <code>std::string</code>. Для большинства задач этот класс решает все проблемы. Если надо добавить функциональность - это надо делать через реализацию шаблонного алгоритма.</p>

<p>Есть замечания или протесты? Прилагайте.</p>

<p>Посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2009/07/30/elements-of-programming/">Александр Степанов, &ldquo;Elements of Programming&rdquo;</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Александр Степанов, "Elements of Programming"]]></title>
    <link href="http://demin.ws/blog/russian/2009/07/30/elements-of-programming/"/>
    <updated>2009-07-30T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/07/30/elements-of-programming/</id>
    <content type="html"><![CDATA[<p><a href="http://ru.wikipedia.org/wiki/%D0%A1%D1%82%D0%B5%D0%BF%D0%B0%D0%BD%D0%BE%D0%B2,_%D0%90%D0%BB%D0%B5%D0%BA%D1%81%D0%B0%D0%BD%D0%B4%D1%80_%D0%90%D0%BB%D0%B5%D0%BA%D1%81%D0%B0%D0%BD%D0%B4%D1%80%D0%BE%D0%B2%D0%B8%D1%87">Александр Степанов</a> - это создатель STL. Ни добавить, ни отнять. Последние годы он занимается в основном преподаванием и написанием книг.</p>

<p>Недавно я купил его последнюю книгу &ldquo;Elements of Programming&rdquo;.</p>

<p><a href="http://www.amazon.co.uk/gp/product/032163537X/ref=as_li_tf_il?ie=UTF8&tag=prodiy-21&linkCode=as2&camp=1634&creative=6738&creativeASIN=032163537X"><img border="0" src="http://ws.assoc-amazon.co.uk/widgets/q?_encoding=UTF8&Format=_SL160_&ASIN=032163537X&MarketPlace=GB&ID=AsinImage&WS=1&tag=prodiy-21&ServiceVersion=20070822" ></a><img src="http://www.assoc-amazon.co.uk/e/ir?t=prodiy-21&l=as2&o=2&a=032163537X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p>Довольно своеобразная книга. Много математики, приводимой как обоснование тех или иных приемов в программировании (язык, конечно, С++), из-за чего читается немного тяжело. Забавно, я читал многие его публикации до этого, и как-то заметил, что чем дальше, тем больше он использует формальную математику для описания программирования.</p>

<p>Еще интересный факт: в данной книге везде при использовании шаблонов используются <a href="http://en.wikipedia.org/wiki/Concepts_(C%2B%2B0x)">концепты</a>, хотя недавно было принято решение, что в <a href="http://ru.wikipedia.org/wiki/C%2B%2B0x">C++0x</a> их <a href="http://www.informit.com/guides/content.aspx?g=cplusplus&amp;seqNum=441">не будет</a> из-за общей пока недоработанности идеи.</p>

<p>Но вернемся к другим публикациям Степанова.</p>

<p>Одни из мои любимых - <a href="http://www.stepanovpapers.com/notes.pdf">Notes for the Programming course at Adobe</a> и <a href="http://www.stepanovpapers.com/Stepanov-Science_of_C++_Programming-1993.pdf">Science of C++ Programming</a>.</p>

<p>Например, ставший классикой, его пример на тему итераторов:</p>

<pre class="hl">
<span class="hl kwa">if</span> <span class="hl opt">(!</span>v<span class="hl opt">.</span><span class="hl kwd">empty</span><span class="hl opt">()) {</span>
  <span class="hl kwd">sort</span><span class="hl opt">(&amp;*</span><span class="hl kwd">begin</span><span class="hl opt">(), &amp;*</span>v<span class="hl opt">.</span><span class="hl kwd">begin</span><span class="hl opt">() +</span> v<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">());</span>
<span class="hl opt">}</span>
</pre>

<p>когда спрашивается, почему в данном вполне рабочем примере обязательно нужна проверка <code>v.empty()</code> и почему нельзя второй аргумент нельзя записать как <code>&amp;*v.end()</code>?</p>

<p>Но вот что лично мне понравилось, это способ реализации оператора присваивания для класса. Обычно, когда в классе есть конструктор копирования и оператор присваивания, стандартный прием - это сделать закрытую функцию типа <code>clone()</code> или <code>copy()</code>, которая умеет правильно копировать класс, если внутренняя его структура нетривиальна, и вызывать эту функцию из конструктора копирования и оператора присваивания, тем самым избегая дублирования кода.</p>

<p>Но Степанов говорит следующее: &ldquo;&hellip;присваивание должно осуществляться вызовом деструктора и последующим конструктором&rdquo;. То есть надо просто сделать полноценный конструктор копирования, а оператор присваивание реализовать так:</p>

<pre class="hl">
T<span class="hl opt">&amp;</span> T<span class="hl opt">::</span><span class="hl kwc">operator</span><span class="hl opt">=(</span><span class="hl kwb">const</span> T<span class="hl opt">&amp;</span> x<span class="hl opt">) {</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">this</span> <span class="hl opt">!= &amp;</span>x<span class="hl opt">) {</span>
    <span class="hl kwa">this</span><span class="hl opt">-&gt;</span>T<span class="hl opt">::~</span><span class="hl kwd">T</span><span class="hl opt">();</span>
    <span class="hl kwa">new</span> <span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">)</span> <span class="hl kwd">T</span><span class="hl opt">(</span>x<span class="hl opt">);</span>
  <span class="hl opt">}</span>
  <span class="hl kwa">return</span> <span class="hl opt">*</span><span class="hl kwa">this</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Получается, что старый объект сам себя разрушает, вызвав деструктор (но память под ним не освобождается), а затем оператором <code>new</code> с явным размещением (память под объект тут уже повторно не распределяется) объект создается снова через конструктор копирования.</p>

<p>В общем, данные pdf-ки - очень интересное чтиво. Причем, Степанов никогда не забывает об эффективности (ибо неграмотное использования возможностей шаблонов элементарно делает программу очень медленной и жадной до ресурсов), и, например, главы про техники перемещения, а не копирования объектов очень познавательны.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Параметры по умолчанию в С++ - это опасно]]></title>
    <link href="http://demin.ws/blog/russian/2009/07/29/arguments-by-default-are-dangerous/"/>
    <updated>2009-07-29T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/07/29/arguments-by-default-are-dangerous/</id>
    <content type="html"><![CDATA[<p>Значения формальных параметров по умолчанию в С++ - удобная штука. Удобная и опасная.</p>

<p>Вот книжный пример (<code>default_values.cpp</code>):</p>

<pre class="hl">
<span class="hl ppc">#include &lt;iostream&gt;</span>

<span class="hl kwc">class</span> X <span class="hl opt">{</span>
 <span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl kwc">virtual</span> <span class="hl kwb">void</span> <span class="hl kwd">f</span><span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">) {</span>
    std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;X::f(): &quot;</span> <span class="hl opt">&lt;&lt;</span> i <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  <span class="hl opt">}</span>
<span class="hl opt">};</span>

<span class="hl kwc">class</span> Y<span class="hl opt">:</span> <span class="hl kwc">public</span> X <span class="hl opt">{</span>
 <span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl kwb">void</span> <span class="hl kwd">f</span><span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">) {</span>
    std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;Y::f(): &quot;</span> <span class="hl opt">&lt;&lt;</span> i <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  <span class="hl opt">}</span>
<span class="hl opt">};</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
  X<span class="hl opt">*</span> a <span class="hl opt">=</span> <span class="hl kwa">new</span> Y<span class="hl opt">;</span>
  a<span class="hl opt">-&gt;</span><span class="hl kwd">f</span><span class="hl opt">();</span>

  Y<span class="hl opt">*</span> b <span class="hl opt">=</span> <span class="hl kwa">new</span> Y<span class="hl opt">;</span>
  b<span class="hl opt">-&gt;</span><span class="hl kwd">f</span><span class="hl opt">();</span>

  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Что распечатает эта программа? Вот что:</p>

<pre><code>Y::f(): 0
Y::f(): 1
</code></pre>

<p>В обоих случаях была вызвана функция <code>Y::f()</code>, но значение аргумента было разное.</p>

<p>Конечно, для понимающих механизм виртуальных функций тут нет никаких чудес и очевидно, что при перегрузке метода дочерний класс изменит только адрес в таблице виртуальных функций. Информации о значениях параметров по умолчанию взяться просто не откуда. Поэтому компилятор честно берет эту информацию из типа указателя.</p>

<p>Я намеренно опустил модификатор <code>virtual</code> в описании функции <code>f()</code> в классе <code>Y</code>. Но от этого она невиртуальной не стала. При сложной иерархии классов очень несложно не заметить, что изначально функция была виртуальной, и для собственного удобства подправить ей значение параметра по умолчанию для какого-то конкретного случая, тем самым привнеся очень неприятную ошибку (и тут уже надежда на зоркий глаз коллеги при code view или на <a href="http://demin.ws/blog/russian/2009/02/23/static-code-analysis-coverity-klocwork/">статические анализаторы</a>).</p>

<p>При возрастающей сложности проекта гораздо важнее иметь надежные исходники, чем минутное локальное удобство.</p>

<p>Посты и ссылки по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2009/02/23/static-code-analysis-coverity-klocwork/">Статический анализ кода - Coverity, Klocwork</a></li>
<li><a href="http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml?showone=Default_Arguments#Default_Arguments">Google запрещает параметры по умолчанию для своих разработчиков</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ведение блога на Google Code]]></title>
    <link href="http://demin.ws/blog/russian/2009/07/26/blogging-on-googlecode/"/>
    <updated>2009-07-26T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/07/26/blogging-on-googlecode/</id>
    <content type="html"><![CDATA[<p>Лично я пока не дозрел до ведения блога на собственном сайте. Конечно, собственный сайт - это удобно. Все можно поменять и сделать как хочется. Но это и обязанность - настраивать, обновлять версии, присматривать и т.д. Все это реально, но пока не для меня. Я как-то больше радею за контент, нежели за оформление.</p>

<p>Теперь ближе к делу. <a href="http://blogspot.com/">Blogspot</a> как механизм для ведения блога меня вполне устраивает. Единственное, чего не хватает - это возможности форматирования постов не в HTML или WYSIWYG редакторе, а на каком-нибудь диалекте Wiki. Мне много-то не надо, хотя бы базовые элементы.</p>

<p>Последнее время я как-то уж сблизился с <a href="http://code.google.com/">Google Code</a>. А там как раз есть Wiki для ведения документации. Вот и возникала мысль скрестить Blogspot и Google Code для ведения блога.</p>

<p>Мой блог о программировании, поэтому задача удобного внедрения программного кода в посты стоит на первом месте. К тому же я люблю всегда давать по возможности полные компилируемые исходники, поэтому хостинг для исходников тоже нужен.</p>

<p>Я пришел вот к такой схеме. Для начала я завел одноименный проект на Google Code - <a href="http://code.google.com/p/easy-coding/">Easy Coding</a>.</p>

<p>Каждый пост пишется на Google Code в виде отдельной странички Wiki (лишний повод не писать двух-строчных одноразовых постов). Отлаживается верстка и общий внешний вид. Можно писать прямо в онлайне на страничке, но лично я изначально набиваю все в <code>notepad++</code> и <code>aspell</code>. Благо разметка Wiki не требует ежеминутного закольцованного ерзанья типа исправил-посмотрел-как-выглядит, как в HTML.</p>

<p>Если надо повесить картинку, то она выкладывается в раздел <a href="http://code.google.com/p/easy-coding/downloads/list">Downloads</a>, и ссылка на картинку ведет туда. Исходники тоже можно было бы заливать в этот раздел, есть есть способ лучше. Исходники удобнее держать в разделе <a href="http://code.google.com/p/easy-coding/source/browse/">Source</a>. Там их можно удобно просматривать, скачивать, комментировать и т.д. И тут уже можно насладиться контролем версий для них (еще раз уточню - когда выкладываешь работающие исходники, это становится важно) - Subversion или Mercurial, кому что больше нравится. Кстати, раздел Wiki тоже под контролем версий.</p>

<p>Я использую Mercurial, так как распределенная модель позволяет работать долго локально, а потом одним махом отправить изменения на сервер. Получается, что Mercurial в данном случае - это как файловый клиент для обмена файлами с Google Code.</p>

<p>Итак, пост закончен и отлажен. Теперь его надо выложить на Blogspot.</p>

<p>Для этого я написал элементарный <a href="http://code.google.com/p/easy-coding/source/browse/tools/wiki2blog.php">скрипт на php</a>. Данный скрипт преобразует пост из формата .wiki в .html с ориентацией на особенности шаблонов и стилей конкретно Blogspot&rsquo;а. Он, конечно, не идеален, но я решил так - я не буду делать универсального монстра, а буду править его по мере возникновения проблем или требования новых возможностей.</p>

<p>Так так теперь у меня всегда локально лежат посты в виде <code>.wiki</code> файлов, то если мне надо исправить пост - сначала я вношу изменения в <code>.wiki</code>, затем конвертирую <code>.wiki</code> снова в <code>.html</code> и выкладываю через онлайновый редактор Blogspot&rsquo;а. Это позволяет всегда иметь посты в нормальной <code>.wiki</code> разметке и не думать, как их корежит онлайновый редактор Blogspot&rsquo;а.</p>

<p>Соглашусь, многое из сказанного странно для владельцев собственных автономных блогов, но вот для клиентов Blogspot&rsquo;а подобная методика весьма жизненна.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Парадокс Монти-Холла]]></title>
    <link href="http://demin.ws/blog/russian/2009/07/26/montihall-paradox/"/>
    <updated>2009-07-26T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/07/26/montihall-paradox/</id>
    <content type="html"><![CDATA[<p>Есть такая интересная задача - парадокс Монти-Холла.</p>

<p>Суть ее в следующем. Представьте, вы играете в следующую игру: перед вами три ящика, и в одном из них приз. Два остальных пустые. Вам надо угадать ящик с призом. Вы делаете первую попытку и наугад выбираете один ящик из трех, но ящик пока не открывают. Вместо этого ведущий игры берет и открывает один из двух оставшихся ящиков, и тот оказывается пустым. После этого ведущий вам предлагает возможность изменить первоначальный выбор в свете новой информации о пустом ящике.</p>

<p>Естественно, ведущий точно заранее знает где приз и заведомо открывает пустой ящик. Итак, вы изначально выбрали ящик, но потом ведущий открыл один из оставшихся и выяснилось, что он пустой. Перед вами выбор: оставить свой изначальный выбор неизменным или изменить его, выбрав третий ящик (тот, что остался после вашего первого выбора и после открытия ведущим пустого ящика). При какой стратегии вероятность выигрыша выше?</p>

<p>Самое прямолинейное решение, приходящее в голову: смена ящика ничего особенно не даст. Вы выбрали один ящик из трех - вероятность выиграть <sup>1</sup>&frasl;<sub>3</sub>. После открытия одного ящика ведущим их осталось два, поэтому вероятность угадать где приз <sup>50</sup>&frasl;<sub>50</sub>. Выбор вы уже сделали, и он и так является одним из текущих вариантов. Выходит, что нет особого смысла менять выбор.</p>

<p>Но эта задачка тем и интересна, что при столь тривиальной постановке ее правильное решение не совсем очевидно, хотя с точки зрения теории вероятности тут все прозрачно - <a href="http://ru.wikipedia.org/wiki/%D0%A2%D0%B5%D0%BE%D1%80%D0%B5%D0%BC%D0%B0_%D0%91%D0%B0%D0%B9%D0%B5%D1%81%D0%B0">теорему Байеса</a> еще никто не отменял.</p>

<p>Правильный ответ - <strong>да</strong>, надо менять выбор, так как в этом случае вероятность угадать повышается с <code>1/3</code> до <code>2/3</code> (и даже не <code>1/2</code>).</p>

<p>В Википедии приведено <a href="http://ru.wikipedia.org/wiki/%D0%9F%D0%B0%D1%80%D0%B0%D0%B4%D0%BE%D0%BA%D1%81_%D0%9C%D0%BE%D0%BD%D1%82%D0%B8_%D0%A5%D0%BE%D0%BB%D0%BB%D0%B0">исчерпывающее объяснение</a>.</p>

<p>Ну а чтобы уж окончательно развеять все сомнения, пришлось провести эксперимент.</p>

<p><code>montihall.cpp</code>:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;iostream&gt;</span>
<span class="hl ppc">#include &lt;set&gt;</span>
<span class="hl ppc">#include &lt;cstdlib&gt;</span>
<span class="hl ppc">#include &lt;cassert&gt;</span>
<span class="hl ppc">#include &lt;ctime&gt;</span>

<span class="hl kwb">int</span> all_doors<span class="hl opt">[] = {</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">,</span> <span class="hl num">3</span> <span class="hl opt">};</span>

<span class="hl kwb">bool</span> <span class="hl kwd">no_change_strategy</span><span class="hl opt">() {</span>
  <span class="hl slc">// doors - это множество доступных дверей (1, 2, 3) для выбора игроком.</span>
  std<span class="hl opt">::</span>set<span class="hl opt">&lt;</span><span class="hl kwb">int</span><span class="hl opt">&gt;</span> <span class="hl kwd">doors</span><span class="hl opt">(</span>all_doors<span class="hl opt">,</span> all_doors <span class="hl opt">+</span> <span class="hl num">3</span><span class="hl opt">);</span>

  <span class="hl slc">// Выбираем истинную дверь (от 1 до 3).</span>
  <span class="hl kwb">int</span> real_door <span class="hl opt">= (</span>std<span class="hl opt">::</span><span class="hl kwd">rand</span><span class="hl opt">() %</span> <span class="hl num">3</span><span class="hl opt">) +</span> <span class="hl num">1</span><span class="hl opt">;</span>

  <span class="hl slc">// Выбираем первый и окончательный выбор игрока (от 1 до 3).</span>
  <span class="hl kwb">int</span> primary_choice_door <span class="hl opt">= (</span>std<span class="hl opt">::</span><span class="hl kwd">rand</span><span class="hl opt">() %</span> <span class="hl num">3</span><span class="hl opt">) +</span> <span class="hl num">1</span><span class="hl opt">;</span>

  <span class="hl kwa">return</span> real_door <span class="hl opt">==</span> primary_choice_door<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwb">bool</span> <span class="hl kwd">change_strategy</span><span class="hl opt">() {</span>
  <span class="hl slc">// doors - это множество доступных дверей (1, 2, 3) для выбора двери,</span>
  <span class="hl slc">// открываемой ведущим после первого выбора игрока.</span>
  std<span class="hl opt">::</span>set<span class="hl opt">&lt;</span><span class="hl kwb">int</span><span class="hl opt">&gt;</span> <span class="hl kwd">doors</span><span class="hl opt">(</span>all_doors<span class="hl opt">,</span> all_doors <span class="hl opt">+</span> <span class="hl num">3</span><span class="hl opt">);</span>

  <span class="hl slc">// Выбираем истинную дверь (от 1 до 3).</span>
  <span class="hl kwb">int</span> real_door <span class="hl opt">= (</span>std<span class="hl opt">::</span><span class="hl kwd">rand</span><span class="hl opt">() %</span> <span class="hl num">3</span><span class="hl opt">) +</span> <span class="hl num">1</span><span class="hl opt">;</span>

  <span class="hl slc">// Выбираем первый выбор игрока (от 1 до 3)</span>
  <span class="hl kwb">int</span> primary_choice_door <span class="hl opt">= (</span>std<span class="hl opt">::</span><span class="hl kwd">rand</span><span class="hl opt">() %</span> <span class="hl num">3</span><span class="hl opt">) +</span> <span class="hl num">1</span><span class="hl opt">;</span>

  <span class="hl slc">// Исключаем из множества дверей истинную дверь и выбор игрока.</span>
  doors<span class="hl opt">.</span><span class="hl kwd">erase</span><span class="hl opt">(</span>real_door<span class="hl opt">);</span>
  doors<span class="hl opt">.</span><span class="hl kwd">erase</span><span class="hl opt">(</span>primary_choice_door<span class="hl opt">);</span>
  <span class="hl slc">// На всякий пожарный проверим целостность данных.</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>doors<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">() ==</span> <span class="hl num">1</span> <span class="hl opt">||</span> doors<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">() ==</span> <span class="hl num">2</span><span class="hl opt">);</span>

  <span class="hl slc">// Из оставшихся элементов (их может быть 1 или 2 штуки) выбираем дверь,</span>
  <span class="hl slc">// которую откроет ведущий. reveal_door равно либо 1, либо 2.</span>
  <span class="hl kwb">int</span> reveal_door <span class="hl opt">= (</span>std<span class="hl opt">::</span><span class="hl kwd">rand</span><span class="hl opt">() %</span> doors<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">()) +</span> <span class="hl num">1</span><span class="hl opt">;</span>

  <span class="hl slc">// i указывает на первый элемент в множестве (всего в нем 1 или 2 элемента).</span>
  std<span class="hl opt">::</span>set<span class="hl opt">&lt;</span><span class="hl kwb">int</span><span class="hl opt">&gt;::</span>const_iterator i <span class="hl opt">=</span> doors<span class="hl opt">.</span><span class="hl kwd">begin</span><span class="hl opt">();</span>
  <span class="hl slc">// Сдвигаем итератор на элемент, номер которого равен reveal_door.</span>
  <span class="hl slc">// Можно было бы написать &quot;if (reveal_door == 2) ++i;&quot;, но цикл как-то</span>
  <span class="hl slc">// универсальнее.</span>
  <span class="hl kwa">while</span> <span class="hl opt">(--</span>reveal_door<span class="hl opt">) ++</span>i<span class="hl opt">;</span>
  reveal_door <span class="hl opt">= *</span>i<span class="hl opt">;</span>

  <span class="hl slc">// 'doors2' - это множество доступных дверей (1, 2, 3) для игрока,</span>
  <span class="hl slc">// меняющего свой первоначальный выбор.</span>
  std<span class="hl opt">::</span>set<span class="hl opt">&lt;</span><span class="hl kwb">int</span><span class="hl opt">&gt;</span> <span class="hl kwd">doors2</span><span class="hl opt">(</span>all_doors<span class="hl opt">,</span> all_doors <span class="hl opt">+</span> <span class="hl num">3</span><span class="hl opt">);</span>

  <span class="hl slc">// Исключаем из множества дверей первый выбор игрока и</span>
  <span class="hl slc">// и дверь, открытую ведущим.</span>
  doors2<span class="hl opt">.</span><span class="hl kwd">erase</span><span class="hl opt">(</span>primary_choice_door<span class="hl opt">);</span>
  doors2<span class="hl opt">.</span><span class="hl kwd">erase</span><span class="hl opt">(</span>reveal_door<span class="hl opt">);</span>
  <span class="hl slc">// На всякий пожарный проверим целостность данных.</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>doors2<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">() ==</span> <span class="hl num">1</span><span class="hl opt">);</span>

  <span class="hl slc">// В множестве оставшихся дверей будет только одна дверь, так как истинная </span>
  <span class="hl slc">// дверь точно не равна двери, открытой ведущим, во второй выбор игрока</span>
  <span class="hl slc">// точно отличается от первоначального. Поэтому просто берем из этого </span>
  <span class="hl slc">// множества первый элемент.</span>
  <span class="hl kwb">int</span> second_choice <span class="hl opt">= *</span>doors2<span class="hl opt">.</span><span class="hl kwd">begin</span><span class="hl opt">();</span>

  <span class="hl kwa">return</span> real_door <span class="hl opt">==</span> second_choice<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
  std<span class="hl opt">::</span><span class="hl kwd">srand</span><span class="hl opt">(</span>std<span class="hl opt">::</span><span class="hl kwd">time</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">));</span>
  <span class="hl kwb">int</span> guess_on_change <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
  <span class="hl kwb">int</span> guess_on_not_change <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
  <span class="hl kwb">int</span> N <span class="hl opt">=</span> <span class="hl num">100000</span><span class="hl opt">;</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> N<span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">change_strategy</span><span class="hl opt">())</span>
      guess_on_change <span class="hl opt">=</span> guess_on_change <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">no_change_strategy</span><span class="hl opt">())</span>
      guess_on_not_change <span class="hl opt">=</span> guess_on_not_change <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
  <span class="hl opt">}</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;Вероятность выиграть при смене изначального выбора: &quot;</span>
    <span class="hl opt">&lt;&lt;</span> guess_on_change <span class="hl opt">*</span> <span class="hl num">1.0</span> <span class="hl opt">/</span> N <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;Вероятность выиграть не меняя изначального выбора: &quot;</span>
    <span class="hl opt">&lt;&lt;</span> guess_on_not_change <span class="hl opt">*</span> <span class="hl num">1.0</span> <span class="hl opt">/</span> N <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Компилируем и запускаем:</p>

<pre><code>cl /EHsc /D_NDEBUG montihall.cpp &amp;&amp; montihall
</code></pre>

<p>Результат подтверждает теорию:</p>

<pre><code>Вероятность выиграть при смене изначального выбора: 0.67005
Вероятность выиграть не меняя изначального выбора: 0.33347
</code></pre>

<p>Лично я провел замечательные несколько часов, вспоминая всю эту тему условных вероятностей. А вы?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Кто быстрее: функтор или указатель на функцию]]></title>
    <link href="http://demin.ws/blog/russian/2009/07/25/what-is-faster-functor-or-function-pointer/"/>
    <updated>2009-07-25T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/07/25/what-is-faster-functor-or-function-pointer/</id>
    <content type="html"><![CDATA[<p>Возьмем небольшую программу, которая сортирует большой массив, используя разные методы сравнения элементов: по умолчанию (предоставляемый компилятором для базовых типов), через указатель на функцию и через функтор.</p>

<p><code>functor.cpp</code>:</p>

<pre class="hl">
<span class="hl ppc">#include</span> <span class="hl pps">&quot;gtest/gtest.h&quot;</span><span class="hl ppc"></span>

<span class="hl ppc">#include &lt;algorithm&gt;</span>

<span class="hl kwc">typedef</span> <span class="hl kwb">double</span> Type<span class="hl opt">;</span>

Type<span class="hl opt">*</span> array<span class="hl opt">;</span>
<span class="hl kwb">const int</span> N <span class="hl opt">=</span> <span class="hl num">100000000</span><span class="hl opt">;</span>

<span class="hl kwc">inline</span> <span class="hl kwb">bool</span> <span class="hl kwd">less</span><span class="hl opt">(</span>Type a1<span class="hl opt">,</span> Type a2<span class="hl opt">) {</span>
  <span class="hl kwa">return</span> a1 <span class="hl opt">&lt;</span> a2<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwc">class</span> Less <span class="hl opt">{</span>
 <span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl kwc">inline</span> <span class="hl kwb">bool</span> <span class="hl kwc">operator</span><span class="hl opt">()(</span>Type a1<span class="hl opt">,</span> Type a2<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> a1 <span class="hl opt">&lt;</span> a2<span class="hl opt">;</span>
  <span class="hl opt">}</span>
<span class="hl opt">};</span>

<span class="hl slc">// Использование встроенной функции сравнения.</span>
<span class="hl kwd">TEST</span><span class="hl opt">(</span>Callback<span class="hl opt">,</span> BuiltIn<span class="hl opt">) {</span>
  std<span class="hl opt">::</span><span class="hl kwd">sort</span><span class="hl opt">(</span>array<span class="hl opt">,</span> array <span class="hl opt">+</span> N<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl slc">// Использование свободной функции сравнения по указателю.</span>
<span class="hl kwd">TEST</span><span class="hl opt">(</span>Callback<span class="hl opt">,</span> Function<span class="hl opt">) {</span>
  std<span class="hl opt">::</span><span class="hl kwd">sort</span><span class="hl opt">(</span>array<span class="hl opt">,</span> array <span class="hl opt">+</span> N<span class="hl opt">,</span> less<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl slc">// Использование функтора.</span>
<span class="hl kwd">TEST</span><span class="hl opt">(</span>Callback<span class="hl opt">,</span> Functor<span class="hl opt">) {</span>
  std<span class="hl opt">::</span><span class="hl kwd">sort</span><span class="hl opt">(</span>array<span class="hl opt">,</span> array <span class="hl opt">+</span> N<span class="hl opt">,</span> <span class="hl kwd">Less</span><span class="hl opt">());</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[]) {</span>
  <span class="hl slc">// Создаем отсортированный массив.</span>
  array <span class="hl opt">=</span> <span class="hl kwa">new</span> Type<span class="hl opt">[</span>N<span class="hl opt">];</span>
  Type<span class="hl opt">*</span> p <span class="hl opt">=</span> array<span class="hl opt">;</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> N<span class="hl opt">; ++</span>i<span class="hl opt">) *</span>p<span class="hl opt">++ =</span> i<span class="hl opt">;</span>

  testing<span class="hl opt">::</span><span class="hl kwd">InitGoogleTest</span><span class="hl opt">(&amp;</span>argc<span class="hl opt">,</span> argv<span class="hl opt">);</span>
  <span class="hl slc">// Принудительно печатаем время работы тестов.</span>
  testing<span class="hl opt">::</span><span class="hl kwd">GTEST_FLAG</span><span class="hl opt">(</span>print_time<span class="hl opt">) =</span> <span class="hl kwa">true</span><span class="hl opt">;</span>
  <span class="hl kwa">return</span> <span class="hl kwd">RUN_ALL_TESTS</span><span class="hl opt">();</span>
<span class="hl opt">}</span>
</pre>

<p>Компилируем и запускаем (Visual Studio 2008):</p>

<pre><code>cl /O2 /arch:SSE2 /EHsc /I. functor.cpp gtest\gtest-all.cc &amp;&amp; functor
</code></pre>

<p>Результат:</p>

<pre><code>[==========] Running 3 tests from 1 test case.
[----------] Global test environment set-up.
[----------] 3 tests from Callback
[ RUN      ] Callback.BuiltIn
[       OK ] Callback.BuiltIn (9547 ms)
[ RUN      ] Callback.Function
[       OK ] Callback.Function (24391 ms)
[ RUN      ] Callback.Functor
[       OK ] Callback.Functor (9578 ms)
[----------] 3 tests from Callback (43547 ms total)

[----------] Global test environment tear-down
[==========] 3 tests from 1 test case ran. (43547 ms total)
[  PASSED  ] 3 tests.
</code></pre>

<p>Видно, что скорость функтора (9578 мс) практически равна встроенной функции (9547 мс) сравнения. А вот вызов свободной функции конкретно отстает (24391 мс), приблизительно в 2.5 раза.</p>

<p>Такое поведение можно объяснить тем, что в данном случае при вызове обычной функции компилятор не может оптимизировать такой вызов встраиванием (inlining). Вне зависимости от того, что функция объявлена выстраиваемой, так как ее вызов производится по указателю, компилятор не может сделать предположений о значении этого указателя на стадии исполнения, а значит провести оптимизацию.</p>

<p>При использовании же функтора компилятору доступна информация о семантике вызываемого кода, поэтому все типы оптимизации возможны. Отсюда и скорость, близкая к встроенной функции сравнения.</p>

<p>Как вариант, при замене типа с <code>double</code> на <code>int</code> и при условии, что опция <code>/arch:SSE2</code> включена, тест с функтором работал даже быстрее встроенной функции.</p>

<p><strong>Вывод</strong></p>

<p>Использование функторов предпочтительнее, чем свободных функций. С точки зрения проектирования и так все понятно (функтор, или функциональный объект, можно удобно тестировать, наследовать и т.д), но, как видно, и в плане производительности функтор тоже впереди.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Courgette: Дизассемблер как метод уменьшения размера обновлений]]></title>
    <link href="http://demin.ws/blog/russian/2009/07/17/disassembler-compacting-updates/"/>
    <updated>2009-07-17T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/07/17/disassembler-compacting-updates/</id>
    <content type="html"><![CDATA[<p>Интересующихся попытками сделать жизнь лучше, рекомендую к прочтению <a href="http://dev.chromium.org/developers/design-documents/software-updates-courgette">интересный документ от инженеров Google</a> на тему минимизации размеров обновлений для браузера Chrome.</p>

<p>Google очень радеет за безопасность своих продуктов. Например, для браузера Chrome - это значит регулярные обновления. А кому охота каждый день качать по десять мегов, даже если там весьма критическое обновление. Поэтому разработчики Chrome делают все, чтобы сократить размер пересылаемых по сети данных.</p>

<p>Применение <a href="http://www.daemonology.net/bsdiff/">bsdiff</a> частичное решает проблему, и уже не надо тупо слать архив целиком.</p>

<p>Но теперь к самому интересному. Что происходит, когда найден досадный баг и сделано исправление, например:</p>

<p>Было:</p>

<pre class="hl">
<span class="hl opt">...</span>
<span class="hl kwa">if</span> <span class="hl opt">(</span>packet_size <span class="hl opt">&lt;</span> <span class="hl num">1024</span><span class="hl opt">) ...</span>
<span class="hl opt">...</span>
</pre>

<p>а стало:</p>

<pre class="hl">
<span class="hl opt">...</span>
<span class="hl kwa">if</span> <span class="hl opt">(</span>packet_size <span class="hl opt">&gt;</span> <span class="hl num">10</span> <span class="hl opt">&amp;&amp;</span> packet_size <span class="hl opt">&lt;</span> <span class="hl num">1024</span><span class="hl opt">) ...</span>
<span class="hl opt">...</span>
</pre>

<p>Исправили всего одну строчку. Но после компиляции и линковки результирующий файл будет радикально другой: съедет таблица символов, где-то изменится выравнивание, возможно линкер из-за этого изменит размещение сегментов и т.д. Море факторов, из-за которых самое минимальное изменение исходного текста приведет к глобальному изменению результирующего исполняемого файла.</p>

<p>Что делать? А что, если в обновлении посылать модуль не в двоичном виде, а в виде исходного текста? Тогда изменение (diff) будет совсем небольшое.</p>

<p>Конечно, посылать нормальный исходный текст и компилировать его на стороне клиента пока несколько затруднительно. Не у всех установлена Visual Studio.</p>

<p>Инженеры Google придумали технологию <a href="http://dev.chromium.org/developers/design-documents/software-updates-courgette">Courgette</a>. Суть ее в том, что посылаются изменения на уровне не оригинального исходного текста, а на уровне ассемблера. Для формирования обновления скомпилированный исполняемый файл дизассемблируется. Тоже самое делается для предыдущей версии файла. Затем производится поиск изменений в текстовом виде (например, тем же стандартным <code>diff</code>&lsquo;ом). И этот текстовый файл и является, собственно, обновлением. Затем он пересылается пользователю. На стороне пользователя текущий исполняемый файл тоже дизассемблируется, изменяется на основе принятого файла изменений (<code>diff</code>&lsquo;а) и снова ассемблируется.</p>

<p>Старая схема с <code>bsdiff</code>&lsquo;ом работала так:</p>

<pre><code>сервер:
  изменения = bsdiff(оригинал, обновление)
  передать изменения

клиент:
  принять изменения
  обновление = bspatch(оригинал, изменения)

 сервер:
    ассемблер_оригинал = дизассемблировать(оригинал)
    ассемблер_обновление = дизассемблировать(обновление)
    ассемблер_обновление_кор = коррекция(ассемблер_обновление, ассемблер_оригинал)
    ассемблер_изменения = bsdiff(ассемблер_оригинал, ассемблер_обновление_кор)
    передать ассемблер_изменения

  клиент:
    принять ассемблер_изменения
    ассемблер_оригинал = дизассемблировать(оригинал)
    ассемблер_обновление_кор = bspatch(ассемблер_оригинал, ассемблер_изменения)
    обновление = ассемблировать(ассемблер_обновление_кор)
</code></pre>

<p>Для успешной реализации дизассемблер должен располагать таблицей символов со стадии нормальной линковки исполняемого файла. Также на специальном шаге <strong>коррекция</strong> производится оптимизация ассемблерного кода для минимизации последующих различий с предыдущей версией путем группировки неизмененных частей.</p>

<p>А вот и результаты на примере единичного обновления Chrome&rsquo;а:</p>

<pre><code>Метод                  Размер обновления
----------------------------------------
Полное обновление      10,385,920
Обновление bsdiff'ом   704,512
Courgette метод        78,848
</code></pre>

<p>Неплохо, да?</p>

<p>Вот такой вот хитрый план у разработчиков Chrome. Обещают рассказать особенности реализации, как только все будет готово.</p>

<p>Данный пост является вольным переводом статьи, ссылка на которую дана в начале. Уж больно меня зацепила эта тема.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Руководство для начинающих по Google Test на русском]]></title>
    <link href="http://demin.ws/blog/russian/2009/07/15/googletest-for-beginners-in-russian/"/>
    <updated>2009-07-15T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/07/15/googletest-for-beginners-in-russian/</id>
    <content type="html"><![CDATA[<p><a href="http://code.google.com/p/googletest-translations/">Выложил на Google Code</a> свой перевод <a href="http://code.google.com/p/googletest-translations/wiki/GoogleTestPrimerRussian">руководства для начинающих</a> по Google Test.</p>

<p>Как всегда буду благодарен за замечания об ошибках, опечатках, и да вообще по стилистике в целом. Порой перевод технических терминов становится проблемой, так как с одной стороны для многих понятнее, когда используется просто английский термин (например, fixture), но с другой стороны хочется сделать жизнь как-то красивее и попытаться на своем родном писать без тотального засилия английских слов (их и так порядочно).</p>

<p>На отдельной странице будет общий список ресурсов о Google Test на русском языке. Очень пришелся кстати мой <a href="http://demin.ws/blog/russian/2009/03/19/google-test-framework-130/">недавний пост о новшествах версии 1.3.0</a>.</p>

<p>В планах перевод остальных документов.</p>

<p>В процессе работы над текстом перевода, у меня родилось вот такое небольшое лирическое отступление.</p>

<p>Я последнее время увлекся различными механизмами верстки при помощитекстовых языков разметки. И я не про HTML. Я говорю о таких вещах, как простые Wiki-диалекты, и заканчивая целым миром верстки под названием <a href="http://ru.wikipedia.org/wiki/TeX/">TeX</a>. Периодически покуриваю на ночь <a href="http://www.ccas.ru/voron/latex.html">документацию с по LaTeX</a>. Начал я с совершенно дивного коротенького справочника, где сухо и сжато перечислены базовые элементы языка верстки LaTeX c примерами.</p>

<p>Например, моя любимая задача линейного программирования:</p>

<p><img src="http://demin.ws/images/blog/linear-programming-problem-in-latex.png" /></p>

<p>будет записываться так:</p>

<pre><code>\[
\max_{n\in R}\sum_{j=1}^n
c_jx_j
;\; 
\sum_{j=1}^n a_{ij}x_j\leqslant b_i, (i=1,\;2,\;\ldots,\;m)
\]
</code></pre>

<p>Если вы хотите в онлайне проиграться с набором формул в LaTeX, то рекомендую заглянуть <a href="http://www.numberempire.com/texequationeditor/equationeditor.php">сюда</a>. Там, правда, не поддерживаются русские буквы в теле LaTeX команд, но для экспериментов это не проблема.</p>

<p>Когда я несколько лет назад верстал свою диссертацию в Ворде, я постоянно утыкался в корявости <a href="http://ru.wikipedia.org/wiki/WYSIWYG">WYSIWYG</a> подхода. Когда документ разрастается - сложная структура глав, много формул, картинок, внутренние и внешние ссылки, то уже крайне важной становится независимость содержания от, собственно, разметки. В WYSIWYG подходе на все случаи жизни уже не напасешься менюшек и кнопочек. Возникают корявости.</p>

<p>Безусловно, Ворд развивается семимильными шагами от версии к версии, оттачивая механизм стилей, без которого верстать что-то длинее десяти страниц вообще неудобно, но как же ему далеко от гибкости, которую придумали и реализовали в TeX десятки лет назад. К тому же чисто текстовое представление документа позволяет хранить его под контролем версий и удобно отслеживать изменения.</p>

<p>А объем и общая сложность документа моей диссертации была на порядки меньше любой технической книги даже среднего размера, особенно где много формул.</p>

<p>В общем, набивая перевод документации по Google Test, я просто отдыхал душой и попискивал от удовольствия, так как все происходило в Wiki-разметке в разделе документации проекта на Google Code.</p>

<p>Мечта - очень хотелось бы, чтобы когда-нидудь Blogspot реализовал бы альтернативный ввод постов с использованием Wiki-разметки, а не HTML. Хотя бы также, как это работает на Google Code. Ну а если еще и контроль версий будет, тогда вообще бесконечное счастье наступит.</p>

<p>Так если разобраться, единственная причина, почему нельзя вести блог прямо на Google Code в разделе Wiki - там нет трансляции постов в виде временной ленты. Если бы можно было в теле постов Блогспота на лету импортировать тест из документов Wiki c Google Code, то можно было бы удобно писать посты с применением Wiki-разметки и контролем версий, а отображать их в блоге.</p>

<p>Я, например, редко пишу в блог посты на 2-3 строчки. Обычно это крополивая работа по набивке, верстке, подгонке картинок, общего вида и т.д. И каждый пост это по сути законченный документ, к которому иногда возвращаешься, что-то исправляешь, добавляешь и т.д. И тут все прелести удобной итеративной работы с текстом выходят на первый план.</p>

<p>Посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2009/03/19/google-test-framework-130/">Google Test Framework 1.3.0</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Chrome OS]]></title>
    <link href="http://demin.ws/blog/russian/2009/07/08/google-chrome-os/"/>
    <updated>2009-07-08T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/07/08/google-chrome-os/</id>
    <content type="html"><![CDATA[<p>Удивительное дело, как Google умудряется без предварительного шапкозакидательства в стиле Microsoft делать удивительно грандиозные вещи: Chrome, Android, <a href="http://code.google.com/p/nativeclient/">Native Client</a>, а теперь еще и <a href="http://googleblog.blogspot.com/2009/07/introducing-google-chrome-os.html">Google Chrome OS</a>.</p>

<p>Обычно я не комментирую новости, но тут не мог стерпеть.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google C++ coding standard прямо в Visual Studio]]></title>
    <link href="http://demin.ws/blog/russian/2009/07/08/google-coding-standard-in-visual-studio/"/>
    <updated>2009-07-08T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/07/08/google-coding-standard-in-visual-studio/</id>
    <content type="html"><![CDATA[<p>Многие читали <a href="http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml">стандарт кодирования на С++ от Google</a>.</p>

<p>Для себя я его давно использую, а на работе удалось продавить его фрагменты в наш внутренний стандарт.</p>

<p>В качестве приятного бонуса Google раздает задорную утилитку <a href="http://google-styleguide.googlecode.com/svn/trunk/cpplint/cpplint.py">cpplint</a>, для быстрой проверки исходника на С++ на соответствие правилам и для генерации отчета, понимаемого средой разработки (например, Visual Studio). Написана она на Питоне, так что для ее использования его надо установить.</p>

<p>Я прикрутил <code>cpplint</code> себе в Студию, чтобы можно было проверять исходники прямо в редакторе.</p>

<p><code>cpplint</code> имеет несколько десятков checker&rsquo;ов, их можно опционально отключать. Я отключил только три:</p>

<ul>
<li>Проверку на использование <code>#include</code> без указания относительного пути, например <code>#include &quot;one.h&quot;</code> вместо <code>#include &quot;path/to/lib/one.h&quot;</code>. Правило очень разумное, так как исключает перехлест заголовочных файлов с одинаковыми именами в разных подсистемах, но у меня уж больно много, где надо менять.</li>
<li>Проверку на формирование имени защитного <code>#define</code>&lsquo;а в начале заголовочного файла. У меня свое правило именования, и оно меня устраивает.</li>
<li>Проверку на неиспользование потоков в STL. Я потоки использую, поэтому отключил.</li>
</ul>

<p>Итак, получился скрипт <code>cpplint.cmd</code>:</p>

<pre><code>C:\Python25\python.exe %~d0%~p0cpplint.py ^
  --filter=-build/include,-build/header_guard,-readability/streams ^
  --output=vs7 %1 %2 %3 %4 %5 %6 %7 %8 %9
</code></pre>

<p>Можно его из командной строки вызывать, но из Студии интереснее.</p>

<p>Итак, <code>Menu-&gt;Tools-&gt;External Tool...</code>, жмем <code>Add</code> и далее как на картинке (пути подправить по вкусу):</p>

<p><img src="http://demin.ws/images/blog/cpplint-visual-studio.png" /></p>

<p>Теперь, прямо в редакторе жмем <code>ALT-T,C,ENTER</code> и снизу окне результатов получаем отчет. Кликая на его строки можно скакать по исходнику.</p>

<p>Лично я считаю, что порядок в исходниках напрямую связан с порядком в голове его автора.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Роберт Седжвик, "Фундаментальные алгоритмы"]]></title>
    <link href="http://demin.ws/blog/russian/2009/07/07/fundamental-algorithms/"/>
    <updated>2009-07-07T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/07/07/fundamental-algorithms/</id>
    <content type="html"><![CDATA[<p>После того, как я <a href="http://demin.ws/blog/russian/2009/06/18/sort-implementation-in-stl/">жестко облажался с самопальной сортировкой</a>, причем облажался дважды: первый раз, когда думал, что порву по скорости STL&rsquo;ный <a href="http://www.cplusplus.com/reference/algorithm/sort/">std::sort()</a>, а второй - когда не понял, что все эти &ldquo;ухищрения&rdquo;, как я думал, по ускорению <a href="http://en.wikipedia.org/wiki/Quicksort">QuickSort</a>&lsquo;а, реализованные в STL&rsquo;е Visual Studio, есть ни что иное, как просто давно придуманный <a href="http://en.wikipedia.org/wiki/Introsort">IntroSort</a>.</p>

<p>В общем, я взял в руки:</p>

<p>Роберт Седжвик</p>

<p><a href="http://www.ozon.ru/context/detail/id/128304/?partner=easy-coding">Фундаментальные алгоритмы на C++. Части 1-4. Анализ. Структуры данных. Сортировка.</a></p>

<p><img src="http://demin.ws/images/covers/russian/fundamental-algorithms-1-4-cover.jpg" /></p>

<p>и начал освежать (а местами просто узнавать с нуля) когда-то читанное в студенчестве.</p>

<p>Втянулся.</p>

<p>Заказал вторую книгу:</p>

<p>Роберт Седжвик</p>

<p><a href="http://www.ozon.ru/context/detail/id/1317133/?partner=easy-coding">Фундаментальные алгоритмы на C++. Часть 5. Алгоритмы на графах.</a></p>

<p><img src="http://demin.ws/images/covers/russian/fundamental-algorithms-5-cover.jpg" /></p>

<p>Последние несколько лет я всегда делал основной упор на новые языки, операционные системы, организацию процесса разработки, работу над качеством и т.д. Получилось, что база как-то слегка подкосилась.</p>

<p>В общем, если вы все еще можете не думая сказать, например, чем лучше хеш-таблица по сравнению со сбалансированным (например, красно-черным) деревом, почему именно Splay-дерево удобно для реализации кеша, написать по памяти пирамидальную сортировку или привести пример NP-задачи, которая не является полной, то может фундамент все еще крепок.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Static assert]]></title>
    <link href="http://demin.ws/blog/russian/2009/07/07/static-assert/"/>
    <updated>2009-07-07T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/07/07/static-assert/</id>
    <content type="html"><![CDATA[<p>А какой у вас используется <code>assert</code> времени компиляции, если не использовать <code>boost/static_assert.hpp</code>?</p>

<p>У меня вот такой:</p>

<pre class="hl">
<span class="hl kwc">template</span> <span class="hl opt">&lt;</span><span class="hl kwb">bool</span><span class="hl opt">&gt;</span> <span class="hl kwb">struct</span> STATIC_ASSERTION_FAILURE<span class="hl opt">;</span>
<span class="hl kwc">template</span> <span class="hl opt">&lt;&gt;</span> <span class="hl kwb">struct</span> STATIC_ASSERTION_FAILURE<span class="hl opt">&lt;</span><span class="hl kwa">true</span><span class="hl opt">&gt; {};</span>
<span class="hl ppc">#define STATIC_CHECK(x) sizeof(STATIC_ASSERTION_FAILURE&lt; (bool)(x) &gt;)</span>
</pre>

<p>Работает приемлемо сносно:</p>

<pre class="hl">
<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
  <span class="hl kwd">STATIC_CHECK</span><span class="hl opt">(</span><span class="hl kwa">sizeof</span><span class="hl opt">(</span><span class="hl kwb">int</span><span class="hl opt">) &lt;</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span><span class="hl kwb">char</span><span class="hl opt">));</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Скрипты для архивации проектов под Windows]]></title>
    <link href="http://demin.ws/blog/russian/2009/07/06/project-backup-scripts-for-windows/"/>
    <updated>2009-07-06T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/07/06/project-backup-scripts-for-windows/</id>
    <content type="html"><![CDATA[<p>Архивировать папку с проектом очень удобно и полезно. Для себя я давно выбрал следующий формат имен архивов: имя проекта + дата и время с точностью до секунды, например:</p>

<pre><code>easy-coding-2009.07.06-10.27.12.rar
</code></pre>

<p>Долгое время я использовал вот такой скрипт <code>backup.cmd</code>:</p>

<pre class="hl">
<span class="hl slc">rem Берем имя родительского каталога без полного пути.</span>
<span class="hl kwa">for</span> <span class="hl kwc">%%I</span> in <span class="hl opt">(</span>.<span class="hl opt">)</span> <span class="hl kwa">do</span> <span class="hl kwb">set</span> CWD<span class="hl opt">=</span><span class="hl kwc">%%~nI</span>
<span class="hl slc">rem Архивируем.</span>
winrar a <span class="hl opt">-</span>v <span class="hl opt">-</span>r <span class="hl opt">-</span>s <span class="hl opt">-</span>ag<span class="hl opt">-</span>YYYY.MM.DD<span class="hl opt">-</span>HH.MM.SS <span class="hl opt">-</span>x<span class="hl opt">*</span>.rar <span class="hl opt">-</span>x<span class="hl opt">*</span><span class="hl num">.7</span>z <span class="hl kwc">%CWD%</span>
</pre>

<p>Просто бросаешь какой скрипт в каталог любого проекта (имя каталога должно быть сообразно проекту) и все, можно архивировать. Скрипт берет имя каталога как базу и добавляет к ней дату и время с помощью удобной опции архиватора RAR.</p>

<p>Последнее время я все чаще использую 7z как основной архиватор, но у него я не нашел схожего ключа на добавление в имя архива даты и времени. Пришлось слегка извратиться.</p>

<p>В этоге родился скрипт <code>backup-7z.cmd</code>:</p>

<pre class="hl">
&#64;<span class="hl kwb">echo</span> off
<span class="hl kwb">setlocal</span>
<span class="hl kwb">set</span> line<span class="hl opt">=</span><span class="hl kwc">%DATE%</span>
<span class="hl slc">rem Проходимся по строке вида DD/MM/YYYY и</span>
<span class="hl slc">rem превращаем ее в YYYY.MM.DD.</span>
<span class="hl opt">:</span>parse_date
<span class="hl kwa">for</span> <span class="hl opt">/</span>F <span class="hl str">&quot;delims=/ tokens=1,*&quot;</span> <span class="hl kwc">%%a</span> in <span class="hl opt">(</span><span class="hl str">&quot;%line%&quot;) do (</span>
<span class="hl str">  set line=%%b</span>
<span class="hl str">  set now=%%a.%now%</span>
<span class="hl str">)</span>
<span class="hl str">if &quot;</span><span class="hl kwc">%line%&quot;</span> neq <span class="hl str">&quot;&quot;</span> <span class="hl kwa">goto</span> parse_date
<span class="hl slc">rem Отрезаем хвостовую точку от даты.</span>
<span class="hl kwb">set</span> now<span class="hl opt">=</span><span class="hl kwc">%now:~0,10%</span>
<span class="hl slc">rem Добавляем время. Оно уже в формате HH:MM:SS.ms. Отрезаем доли секунды.</span>
<span class="hl kwb">set</span> now<span class="hl opt">=</span><span class="hl kwc">%now%-%TIME:~0,8%</span>
<span class="hl slc">rem Заменяем двоеточие на точку</span>
<span class="hl kwb">set</span> now<span class="hl opt">=</span><span class="hl kwc">%now::=.%</span>
<span class="hl slc">rem Берем имя родительского каталога без полного пути.</span>
<span class="hl kwa">for</span> <span class="hl kwc">%%I</span> in <span class="hl opt">(</span>.<span class="hl opt">)</span> <span class="hl kwa">do</span> <span class="hl kwb">set</span> CWD<span class="hl opt">=</span><span class="hl kwc">%%~nI</span>
<span class="hl slc">rem Архивируем.</span>
<span class="hl num">7</span>z a <span class="hl opt">-</span>mx9 <span class="hl opt">-</span>r <span class="hl opt">-</span>x<span class="hl opt">!*</span>.rar <span class="hl opt">-</span>x<span class="hl opt">!*</span><span class="hl num">.7</span>z <span class="hl kwc">%CWD%-%now%.7z</span>
<span class="hl kwb">endlocal</span>
</pre>

<p>Это скрипт делает все как и раньше, но только для 7z.</p>

<p>Конечно, под UNIX&rsquo;ом есть море путей сделать подобное, да и в Windows можно Cygwin использовать, но я всегда сначала пытаюсь сделать native решение, если это возможно.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Обертка генератора парсеров грамматик Lemon для C++]]></title>
    <link href="http://demin.ws/blog/russian/2009/07/06/wrapper-for-lemon/"/>
    <updated>2009-07-06T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/07/06/wrapper-for-lemon/</id>
    <content type="html"><![CDATA[<p>Выложил на Google Code прототип библиотеки для удобного использования генератора <a href="http://en.wikipedia.org/wiki/LALR_parser">LALR</a> парсеров грамматик <a href="http://www.hwaci.com/sw/lemon/">Lemon</a> на С++.</p>

<p>Проект называется <a href="http://code.google.com/p/lemonbind/">lemonbind</a>.</p>

<p>Lemon - это создающий исходник на C/C++ генератор, похожий на <a href="http://en.wikipedia.org/wiki/Yacc">yacc</a> или <a href="http://en.wikipedia.org/wiki/GNU_bison">bison</a>, для реализации заданой грамматики. Lemon был создан автором <a href="http://www.sqlite.org/">SQLite</a> для разбора SQL&rsquo;я.</p>

<p>Есть у Lemon несколько радикальных отличий от собратьев. В отличие от yacc/bison Lemon не использует обратные вызовы, то есть не парсер вызывает нас, когда готов принять очередной токен, а мы вызываем парсер, когда готовы скормить ему очередной токен. Также Lemon безопасен в потоковом плане и реентабелен. Именно эти отличия позволяют неплохо завернуть его в обертку C++ со всеми вытекающими радостями. Также Lemon использует более простую нотацию по именованию параметров в продукциях грамматики, значительно снижающую вероятность опечататься.</p>

<p>Lemon представляет собой всего для файла: <a href="http://code.google.com/p/lemonbind/source/browse/tools/lemon.c">lemon.c</a> и <a href="http://code.google.com/p/lemonbind/source/browse/tools/lempar.c">lempar.c</a>. Первый - это, собственно, генератор грамматик. Компилируется практически любым компилятором C/C++. Второй - шаблон, который использует генератор для создания целевого файла-парсера на языке С. Сгенерированный парсер также прекрасно компилируется любым компилятором C/C++.</p>

<p>Конечно, Lemon&rsquo;у нужен лексический анализатор. Я использовал <a href="http://en.wikipedia.org/wiki/Flex_lexical_analyser">flex</a>. Его тоже пришлось обернуть в С++.</p>

<p>Возникает вопрос - а для чего этот велосипед, когда есть <a href="http://www.antlr.org/">ANTLR</a>, <a href="http://spirit.sourceforge.net/">Boost Spirit</a> и прочие навороченные инструменты. Ответ как всегда прост - простота и скорость. Парадоксальная ситуация - подход с генерацией исходника, реализующего требуемую грамматику, был придуман много лет назад и воплощен в виде старичков типа lex/yacc/bison, а до сих пор используется за неимением простых и быстрых альтернатив, работающих на сложных грамматиках и на больших объемах анализируемого текста.</p>

<p>Собственно, моя мини библиотека на данный момент имеет три основных класса: <a href="http://code.google.com/p/lemonbind/source/browse/token.h">Token</a>, <a href="http://code.google.com/p/lemonbind/source/browse/tokenizer.h">Tokenizer</a> (обертка flex) и <a href="http://code.google.com/p/lemonbind/source/browse/parser.cpp">Parser</a> (обертка Lemon). Набор тестов демонстрирует, как работать с этими классами. Тест <a href="http://code.google.com/p/lemonbind/source/browse/parser_unittest.cpp">Parser.NestedSelect</a> разбирает вложенный SELECT тривиального диалекта SQL и строит дерево разбора.</p>

<p>Все находится в начальной стадии, но основной функционал уже присутствует. Пока не до конца продуман универсальный интерфейс для генерации дерева разбора (пока его генерация жестко привязана к конкретной грамматике), но сам парсер уже закончен.</p>

<p>P.S. Нашел <a href="http://code.google.com/p/lemon-parser-generator/">дружественный проект</a> по адаптированию Lemon&rsquo;а для генерации парсеров не только на C и C++, но и на D.</p>

<p>P.P.S. Настоятельно рекомендую по теме вот эту книгу в заслуженной форме большего кирпича.</p>

<p>Альфред В. Ахо, Моника С. Лам, Рави Сети, Джеффри Д. Ульман</p>

<p><a href="http://www.ozon.ru/context/detail/id/3829076/?partner=easy-coding">Компиляторы. Принципы, технологии и инструментарий</a></p>

<p><img src="http://demin.ws/images/covers/russian/compilers-cover.jpg" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Управление Lego NXT через bluetooth]]></title>
    <link href="http://demin.ws/blog/russian/2009/06/24/lego-nxt-remote-control-via-bluetooth/"/>
    <updated>2009-06-24T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/06/24/lego-nxt-remote-control-via-bluetooth/</id>
    <content type="html"><![CDATA[<p>Продолжаю постепенно выкладывать на Google Code свои проекты.</p>

<p>На этот раз это эксперимент годовалой давности — удаленное управление для <a href="http://www.mindstorms.ru/">Lego NXT</a> через апплет, работающий на сотовом телефоне.</p>

<p>Назвал незамысловато — <a href="http://code.google.com/p/nxtbtrc">nxtbtrc</a>.</p>

<p>Все просто — запускается на телефоне апплет, он спаривается с NXT и потом может посылать на него команды. В целом ничего сложного, просто было интересно разобраться как работать с синим зубом в апплетах.</p>

<p>Врядли я там чего еще буду модифицировать, но может кому и пригодится.</p>

<p>Даже книжку, помню, для этого специально купил. Хорошая, кстати, книжка. Все доступно и понятно о bluetooth с точки зрения программиста. Рассмотрены несколько стеков разных производителей, их сравнение и использование на разных языках и платформах.</p>

<p>Albert Huang, Larry Rudolph, &ldquo;Bluetooth Essentials for Programmers&rdquo;</p>

<p><a href="http://www.amazon.co.uk/gp/product/0521703751/ref=as_li_tf_il?ie=UTF8&tag=prodiy-21&linkCode=as2&camp=1634&creative=6738&creativeASIN=0521703751"><img border="0" src="http://ws.assoc-amazon.co.uk/widgets/q?_encoding=UTF8&Format=_SL160_&ASIN=0521703751&MarketPlace=GB&ID=AsinImage&WS=1&tag=prodiy-21&ServiceVersion=20070822" ></a><img src="http://www.assoc-amazon.co.uk/e/ir?t=prodiy-21&l=as2&o=2&a=0521703751" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p><strong>Обновление</strong>: Небольшое видео, демонстрирующее все в работе:</p>

<iframe width="560" height="420" src="https://www.youtube.com/embed/F0HW3Mth0Pw?color=white&theme=light"></iframe>

<p>Посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2009/06/07/googlecode-hosting-serialcom/">Хостинг на Google Code: SerialCom</a></li>
<li><a href="http://demin.ws/blog/russian/2009/06/12/lua-scripts-in-cpp/">Скрипты на Lua в С++</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Myth of the Genius Programmer]]></title>
    <link href="http://demin.ws/blog/russian/2009/06/23/myth-of-the-genius-programmer/"/>
    <updated>2009-06-23T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/06/23/myth-of-the-genius-programmer/</id>
    <content type="html"><![CDATA[<p>Лично разделяю каждое слово в данном видео. Удивительно как то, что пытаешься донести до людей сам каждый день, собрано в одном видео.</p>

<iframe width="560" height="420" src="https://www.youtube.com/embed/0SARbwvhupQ?color=white&theme=light"></iframe>

<p>Кстати, вопросы в конце тоже весьма и весьма полезны для обдумывания.</p>

<p>Лично для себя вынес, что code review в большинстве случаев гораздо эффективнее парного программирования.</p>

<p>Есть у меня мысль заправить это видео на наш очередной пятничный образовательный просмотр.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Как реализована сортировка в STL]]></title>
    <link href="http://demin.ws/blog/russian/2009/06/18/sort-implementation-in-stl/"/>
    <updated>2009-06-18T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/06/18/sort-implementation-in-stl/</id>
    <content type="html"><![CDATA[<p>Все началось с того, что я почему-то написал свою реализацию классического алгоритма <a href="http://ru.wikipedia.org/wiki/%D0%91%D1%8B%D1%81%D1%82%D1%80%D0%B0%D1%8F_%D1%81%D0%BE%D1%80%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%BA%D0%B0">быстрой сортировки QuickSort</a>. И все бы хорошо, но я, конечно, решил померяться достоинством с STL&rsquo;ой реализацией. Результат был очевиден, и я даже не хочу приводить цифры.</p>

<p>В общем, я открыл файл <code>algorithm</code> из STL&rsquo;я в Visual Studio 2008 и часок покопался в нем. Вот результаты моих &ldquo;исследований&rdquo;.</p>

<p>Начнем с нестабильной сортировки <a href="http://www.cplusplus.com/reference/algorithm/sort/">std::sort()</a>.</p>

<ul>
<li>основа: алгоритм быстрой сортировки <code>QuickSort</code> (почти как у меня)</li>
<li>выбор опорного элемента — центральный по индексу элемент в сортируемом фрагменте</li>
<li>после каждого выбора опорного элемента:

<ul>
<li>начальный, опорный и последний элементы сортируются между собой (их всего три, так что тут это делается тремя последовательными <code>if</code>&lsquo;ами)</li>
<li>если длина сортируемого фрагмента менее более 40, то отрезок делится 8 частeй (длина каждой части <code>S = 1/8*N</code>) и для троиц элементов <code>(1, S, 2*S)</code>, <code>(N/2 - S, N/2, N/2 + S)</code> и <code>(N - 2*S, N - S, N)</code> делается такая же минисортировка, как и на предыдущем шаге (где число элементов было меньше 40)</li>
<li>далее происходит обычная для <code>QuickSort</code> процедура деления фрагмента на две части с использованием опорного элемента (цикл по перебрасыванию элементов, меньших опорного направо, а больших — налево)</li>
</ul></li>
<li>затем вся процедура рекурсивно повторяется для левой и правой частей</li>
</ul>

<p>Количество рекурсивных операций не идет до победного конца, как в чистом <code>QuickSort</code>. Если количество итераций (процедур разделения массива) превысило <code>1.5*log2(N)</code>, где N длина всего массива, то рекурсивные операции прекращаются. Если количество оставшихся недосортированных элементов меньше 32-х, то фрагмент досортируется <a href="http://ru.wikipedia.org/wiki/%D0%A1%D0%BE%D1%80%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%BA%D0%B0_%D0%B2%D1%81%D1%82%D0%B0%D0%B2%D0%BA%D0%B0%D0%BC%D0%B8">методом вставки</a> <code>InsertionSort</code> (этот метод имеет общую сложность <code>O(N2)</code> и для больших массивов не используется, но на малых длинах он быстрее всех из-за простоты). Если же остается более 32-х элементов, то досортировка происходит <a href="http://ru.wikipedia.org/wiki/%D0%9F%D0%B8%D1%80%D0%B0%D0%BC%D0%B8%D0%B4%D0%B0%D0%BB%D1%8C%D0%BD%D0%B0%D1%8F_%D1%81%D0%BE%D1%80%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%BA%D0%B0">пирамидальным методом</a> <code>HeapSort</code> в чистом его виде.</p>

<p>Видимо все эти ухищрения для уменьшения накладных расходов <code>QuickSort</code> на малых массивах.</p>

<p>Вот такая вот далеко непрямолинейная реализация.</p>

<p>Далее.</p>

<p>Стабильная сортировка <a href="http://www.cplusplus.com/reference/algorithm/stable_sort/">std::stable_sort()</a> реализована <a href="http://ru.wikipedia.org/wiki/%D0%A1%D0%BE%D1%80%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%BA%D0%B0_%D1%81%D0%BB%D0%B8%D1%8F%D0%BD%D0%B8%D0%B5%D0%BC">алгоримом слияния</a> <code>MergeSort</code>. Особых ухищрений по сравнению с чистным алгоритмом я не нашел. Разве что малые фрагменты (короче 32-х элементов) досортировываются методом вставки InsertionSort, как и в случае с QuickSort.</p>

<p>Частичая сортировка <a href="http://www.cplusplus.com/reference/algorithm/partial_sort/">std::partial_sort()</a> реализована в чистом виде пирамидальным методом HeapSort.</p>

<p><strong>Вывод:</strong> Читать исходники очень интересно. Особенно хорошие исходники.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Скрипты на Lua в С++]]></title>
    <link href="http://demin.ws/blog/russian/2009/06/12/lua-scripts-in-cpp/"/>
    <updated>2009-06-12T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/06/12/lua-scripts-in-cpp/</id>
    <content type="html"><![CDATA[<p><a href="http://lua.org/">Lua</a> отличный язык для встраеваемых сценариев. Продуманная структура языка, полный арсенал для процедурного и модульного программирования, а-ля функциональные возможности в виде функций-объектов и замыканий, работа со списками, кооперативная многопотоковость, зачатки объектно-ориентированности в достаточной мере для языка подобного рода, и вообще приятный синтаксис. Написан на стандартном С, поэтому отлично компилируется на разных платформах.</p>

<p>Есть великое множество оберток Lua для С++, но я не нашел ни одной, где не надо вообще вызывать С-шные функции Lua вручную из основной программы. Также для создания новых функций на С++, которые можно будет вызывать из Lua, должен быть только С++&lsquo;ый подход.</p>

<p>Моя идея была в создании чисто плюсого интерфейса для Lua с максимально простой интеграцией в рабочий проект.</p>

<p>То, что пока вышло называется <a href="http://code.google.com/p/luascript/">luascript</a>.</p>

<p>Для включения в свой проект надо скопировать библиотеку в подкаталог <code>luascript/</code> и добавить в проект два файла: <code>luascript/luascript.cpp</code> и <code>luascript/lua/lua-files.c</code>.</p>

<p>После этого можно писать вот такие куски кода:</p>

<pre class="hl">
lua script<span class="hl opt">;</span>
script<span class="hl opt">.</span>set_variable<span class="hl opt">&lt;</span>lua<span class="hl opt">::</span>string_arg_t<span class="hl opt">&gt;(</span><span class="hl str">&quot;a&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;test&quot;</span><span class="hl opt">);</span>
script<span class="hl opt">.</span><span class="hl kwd">exec</span><span class="hl opt">(</span><span class="hl str">&quot;b = a .. '123';&quot;</span><span class="hl opt">);</span>
std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> script<span class="hl opt">.</span>get_variable<span class="hl opt">&lt;</span>lua<span class="hl opt">::</span>string_arg_t<span class="hl opt">&gt;(</span><span class="hl str">&quot;b&quot;</span><span class="hl opt">).</span><span class="hl kwd">value</span><span class="hl opt">());</span>
</pre>

<p>Данный простой скрипт принимает строку через переменню <code>a</code>, добавляет к ней <code>123</code> и записывает результат в переменную <code>b</code>, которая потом подхватывается из С++.</p>

<p>Если надо добавить свою функцию, например, для проверки существования файла, можно написать так:</p>

<pre class="hl">
<span class="hl kwc">class</span> file_exists_func_t <span class="hl opt">{</span>
 <span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl slc">// Регистрируем аргументы функции. В данном случае один аргумент типа &quot;строка&quot;.</span>
  <span class="hl kwb">static const</span> lua<span class="hl opt">::</span>args_t<span class="hl opt">*</span> <span class="hl kwd">in_args</span><span class="hl opt">() {</span>
    lua<span class="hl opt">::</span>args_t<span class="hl opt">*</span> args <span class="hl opt">=</span> <span class="hl kwa">new</span> lua<span class="hl opt">::</span><span class="hl kwd">args_t</span><span class="hl opt">();</span>
    args<span class="hl opt">-&gt;</span><span class="hl kwd">add</span><span class="hl opt">(</span><span class="hl kwa">new</span> lua<span class="hl opt">::</span><span class="hl kwd">string_arg_t</span><span class="hl opt">());</span>
    <span class="hl kwa">return</span> args<span class="hl opt">;</span>
  <span class="hl opt">}</span>

  <span class="hl slc">// Регистрируем выходные параметры. В данном случае это просто bool.</span>
  <span class="hl slc">// Фукнция в Lua может возвращать не только одно значение, а несколько,</span>
  <span class="hl slc">// поэтому можно задать список типов выходных параметров.</span>
  <span class="hl kwb">static const</span> lua<span class="hl opt">::</span>args_t<span class="hl opt">*</span> <span class="hl kwd">out_args</span><span class="hl opt">() {</span>
    lua<span class="hl opt">::</span>args_t<span class="hl opt">*</span> args <span class="hl opt">=</span> <span class="hl kwa">new</span> lua<span class="hl opt">::</span><span class="hl kwd">args_t</span><span class="hl opt">();</span>
    args<span class="hl opt">-&gt;</span><span class="hl kwd">add</span><span class="hl opt">(</span><span class="hl kwa">new</span> lua<span class="hl opt">::</span><span class="hl kwd">bool_arg_t</span><span class="hl opt">());</span>
    <span class="hl kwa">return</span> args<span class="hl opt">;</span>
  <span class="hl opt">}</span>

  <span class="hl slc">// Задаем namespace и, собственно, имя фукнции. </span>
  <span class="hl slc">// Получается &quot;fs.file_exits()&quot;.</span>
  <span class="hl kwb">static const</span> std<span class="hl opt">::</span>string <span class="hl kwd">ns</span><span class="hl opt">() {</span> <span class="hl kwa">return</span> <span class="hl str">&quot;fs&quot;</span><span class="hl opt">; }</span>
  <span class="hl kwb">static const</span> std<span class="hl opt">::</span>string <span class="hl kwd">name</span><span class="hl opt">() {</span> <span class="hl kwa">return</span> <span class="hl str">&quot;file_exists&quot;</span><span class="hl opt">; }</span>

  <span class="hl slc">// Данный метод вычисляет значение функции.</span>
  <span class="hl slc">// Сначала надо разобрать входные параметры, вычислить функцию и</span>
  <span class="hl slc">// положить результы с массив выходных значений. Правильность</span>
  <span class="hl slc">// работы с типами аргументов, выходных данных и индексов в массивах,</span>
  <span class="hl slc">// их описывающих, лежит на плечах автора функции.</span>
  <span class="hl kwb">static void</span> <span class="hl kwd">calc</span><span class="hl opt">(</span><span class="hl kwb">const</span> lua<span class="hl opt">::</span>args_t<span class="hl opt">&amp;</span> in<span class="hl opt">,</span> lua<span class="hl opt">::</span>args_t<span class="hl opt">&amp;</span> out<span class="hl opt">) {</span>
    std<span class="hl opt">::</span>string filename <span class="hl opt">=</span> <span class="hl kwa">dynamic_cast</span><span class="hl opt">&lt;</span>lua<span class="hl opt">::</span>string_arg_t<span class="hl opt">&amp;&gt;(*</span>in<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]).</span><span class="hl kwd">value</span><span class="hl opt">();</span>
    std<span class="hl opt">::</span>ifstream <span class="hl kwd">is</span><span class="hl opt">(</span>filename<span class="hl opt">.</span><span class="hl kwd">c_str</span><span class="hl opt">());</span>
    <span class="hl kwa">dynamic_cast</span><span class="hl opt">&lt;</span>lua<span class="hl opt">::</span>bool_arg_t<span class="hl opt">&amp;&gt;(*</span>out<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]).</span><span class="hl kwd">value</span><span class="hl opt">() =</span> is<span class="hl opt">.</span><span class="hl kwd">good</span><span class="hl opt">();</span>
  <span class="hl opt">}</span>
<span class="hl opt">};</span>
<span class="hl opt">...</span>
<span class="hl kwa">try</span> <span class="hl opt">{</span>
  <span class="hl slc">// Создаем исполнителя скрипта.</span>
  lua script<span class="hl opt">;</span>
  <span class="hl slc">// Регистрируем нашу функцию &quot;fs.file_exists()&quot;.</span>
  script<span class="hl opt">.</span>register_function<span class="hl opt">&lt;</span> file_exists_func_t <span class="hl opt">&gt;();</span>
  <span class="hl slc">// Устанавливаем переменную &quot;fname&quot; в &quot;readme.txt&quot;.</span>
  script<span class="hl opt">.</span>set_variable<span class="hl opt">&lt;</span>lua<span class="hl opt">::</span>string_arg_t<span class="hl opt">&gt;(</span><span class="hl str">&quot;fname&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;readme.txt&quot;</span><span class="hl opt">);</span>
  <span class="hl slc">// Вызываем скрипт.</span>
  script<span class="hl opt">.</span><span class="hl kwd">exec</span><span class="hl opt">(</span><span class="hl str">&quot;exists = fs.file_exists(fname);&quot;</span><span class="hl opt">);</span>
  <span class="hl slc">// Получаем результат через переменную &quot;exists&quot;.</span>
  <span class="hl kwb">bool</span> exists <span class="hl opt">=</span> script<span class="hl opt">.</span>get_variable<span class="hl opt">&lt;</span>lua<span class="hl opt">::</span>bool_arg_t<span class="hl opt">&gt;(</span><span class="hl str">&quot;exists&quot;</span><span class="hl opt">).</span><span class="hl kwd">value</span><span class="hl opt">();</span>
<span class="hl opt">}</span> <span class="hl kwa">catch</span> <span class="hl opt">(</span>lua<span class="hl opt">::</span>exception<span class="hl opt">&amp;</span> e<span class="hl opt">) {</span>
  std<span class="hl opt">::</span>cerr <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;error: &quot;</span> <span class="hl opt">&lt;&lt;</span> e<span class="hl opt">.</span><span class="hl kwd">error</span><span class="hl opt">() &lt;&lt;</span> <span class="hl str">&quot;, line &quot;</span> <span class="hl opt">&lt;&lt;</span> e<span class="hl opt">.</span><span class="hl kwd">line</span><span class="hl opt">();</span>
<span class="hl opt">}</span>
</pre>

<p>Что пока не поддерживается, так это параметры типа <a href="http://www.lua.org/manual/5.1/manual.html#2.5.7">таблица (хеш)</a> для передачи их в функцию и получения их в качестве результата.</p>

<p>В каталоге <code>lib</code> лежат несколько мини примеров на Lua. Например, вот так можно вызвать внешнюю функцию для <code>base64</code> кодирования или декодирования:</p>

<pre class="hl">
lua script<span class="hl opt">;</span>
script<span class="hl opt">.</span><span class="hl kwd">exec</span><span class="hl opt">(</span><span class="hl str">&quot;package.path = package.path .. ';./lib/?.lua'&quot;</span><span class="hl opt">);</span>
script<span class="hl opt">.</span><span class="hl kwd">exec</span><span class="hl opt">(</span><span class="hl str">&quot;require('base64'); a = base64.encode('test');&quot;</span><span class="hl opt">);</span>
<span class="hl slc">// Данный пример напечатает &quot;dGVzdA==&quot;.</span>
std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> script<span class="hl opt">.</span>get_variable<span class="hl opt">&lt;</span>lua<span class="hl opt">::</span>string_arg_t<span class="hl opt">&gt;(</span><span class="hl str">&quot;a&quot;</span><span class="hl opt">).</span><span class="hl kwd">value</span><span class="hl opt">();</span>
</pre>

<p><a href="http://code.google.com/p/luascript/source/browse/">Исходники</a> доступны для просмотра в онлайне, или через <a href="http://code.google.com/p/luascript/source/checkout">Mercurial</a>.</p>

<p>Сборка.</p>

<p>Пока я проверял только в Студии 2008. <a href="http://luascript.googlecode.com/files/luascript-0.0.1.zip">Тестовый проект</a> включает в себя библиотеку, <a href="http://www.lua.org/ftp/lua-5.1.4.tar.gz">lua 5.1.4</a>, Google Test 1.3.0 и несколько тестов, чтобы почувствовать вкус библиотеки. Все в одном флаконе.</p>

<p>Те, у кого есть <a href="http://www.scons.org/">SCons</a>, могут собрать, набрав <code>scons -Q</code>. У кого нет, могут запустить скрипт <code>compile-vs2008.cmd</code>. Собранный runner для тестов <code>luascript_unittest_vs2008.exe</code> должен работать без ошибок. Посмотрев сами тесты в файле <code>luascript_unittest.cpp</code> можно в целом понять, как работать с библиотекой. Документация, конечно, будет, но пока так.</p>

<p>Общие замечания.</p>

<p>Забавно, в этих исходниках я попытался в качестве эксперимента максимально работать по <a href="http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml">стандарту кодирования Google</a>. Из основного, что затронуло лично меня, это:</p>

<ul>
<li>Отступ в 2 пробела (естественно, никаких табов). Для слов <code>public</code>, <code>protected</code>, <code>private</code> отступ в один пробел.</li>
<li>Максимальная экономия вертикального места (по возможности не лепить лишних пустых строк).
Открывающая скобка <code>{</code> практически всегда на той же строке (для классов, функций, циклов, условий и т.д.). Я раньше так не делал для классов и функций.</li>
<li>Никаких <code>cast</code>&lsquo;ов в стиле С, даже для элементарных типов. Только приведения в стиле С++. Мне это очень нравится.</li>
<li>Забота о длинных строках. Как только можно избегать строк длинее 80 символов.
В именах закрытых членов класса использовать не &ldquo;_<em>&rdquo; в качестве префикса, а &ldquo;</em>&rdquo; в качестве суффикса.</li>
</ul>

<p>Это был снова эксперимент на Google Code и в opensource&rsquo;e в целом. Если честно, то выкладывание исходников на публику страшно оздоравливает код, причем по всем статьям.</p>

<p>Данный проект не такой сухой как ранее выложенный <a href="http://demin.ws/blog/russian/2009/06/07/googlecode-hosting-serialcom/">SerialCom</a>. Я с ним более менее активно работаю, так что должны быть точно улучшения. На работе, например, я его примастырил для гибко сконфирурированного фильтрования при журналировании. Есть, конечно, проблемы с производительностью (интерпретатор, все-таки, хоть и с виртуальной машиной), но есть пути улучшения.</p>

<p>Посты и ссылки по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2009/06/07/googlecode-hosting-serialcom/">Хостинг на Google Code: SerialCom</a></li>
<li><a href="http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml">Стандарт кодирования для С++ от Google</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Хостинг на Google Code: SerialCom]]></title>
    <link href="http://demin.ws/blog/russian/2009/06/07/googlecode-hosting-serialcom/"/>
    <updated>2009-06-07T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/06/07/googlecode-hosting-serialcom/</id>
    <content type="html"><![CDATA[<p>В качестве эксперимента перенес один из своих старых проектов на <a href="http://code.google.com/">Google Code</a>. Очень хотелось пощупать хостинг Mercurial.</p>

<p><a href="http://code.google.com/p/serialcom/">SerialCom</a> — программа для ковыряния в потоковых протоколах. Умеет работать с компортом, быть TCP/IP клиентом или сервером. Умеет удобно отображать и посылать шестнадцатеричные дампы. В довершение — проста как валенок.</p>

<p>В общем, когда-то мне нужна программа для удобной отладки устройства на PIC&rsquo;е, с которым надо было работать по RS232. Ничего готового, подходящего мне по всем параметрам, я тогда не нашел, поэтому написал свою. Благо борландовые продукты располагают к пятиминутным двухкликовым проектам. Через некоторое время добавил работу с TCP/IP. Отлично подходит для возни с протоколами.</p>

<p>Проект очень прост. Кругом VCL и удобная компонента для работы с портом. Но это и обратная сторона медали — компилируется только в C++ Builder&rsquo;е, причем из-за гениальной архитектуры компонент в VCL для сборки без допиливания нужен билдер именно версии 6.0. Использование более поздних сред потребует танцев по установки обновленной версии компортовой компоненты.</p>

<p>Особых планов на развитие проекта у меня пока нет, а использую программу я весьма часто, поэтому, проект отлично подошел для игр с хостингом.</p>

<p>Что понравилось.</p>

<p>Прежде всего, что теперь я могу использовать Mercurial, то есть распределенный контроль версий, а не Subversion. И кроме самих исходников отдельно отдается <a href="http://code.google.com/p/serialcom/source/checkout">репозиторий wiki</a>, что позволяет редактировать документацию также в офлайне.</p>

<p>Удобно, что сходу в довесок к хостингу получаешь возможность создать группу для обсуждений по проекту, привязку к единой статистике посещаемости сайта Google Analytics (просто надо UA указать), механизм <a href="http://code.google.com/p/serialcom/issues/entry?show=review&amp;former=sourcelist">code review</a> и <a href="http://code.google.com/p/serialcom/issues/list">баг трекер</a> впридачу. Хорошо не то, что все эти, в целом, обычные примочки есть, а хорошо, что они все связаны и даются одним кликом.</p>

<p>Что не понравилось.</p>

<p>Пришлось изменить оригинальное имя с SmartCom на SerialCom, так как первое уже занято. Но это так, ерунда.</p>

<p>Лично мне пока все нравится. Будем искать проблемы, а то без них как-то пресно.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Архитектура Mercurial на Google Code]]></title>
    <link href="http://demin.ws/blog/russian/2009/06/06/mercurial-architecture-in-googlecode/"/>
    <updated>2009-06-06T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/06/06/mercurial-architecture-in-googlecode/</id>
    <content type="html"><![CDATA[<p>После <a href="http://code.google.com/events/io/">Google I/O</a> Mercurial стал доступен на Google Code в публичном доступе наравне с Subversion.</p>

<p>Весьма занимательное видео, рассказывающее некоторые подробности о внедрении Mercurial на Google Code. Почему именно Mercurial, а не Git или Bazaar, какие особенности именно у Mercurial, отличающие от конкурентов (я, например, не знал, в Mercurial хеш-идентификатор каждого коммита задействует не только метаданные, но и само содержимое файлов, что конкретно ограничивает возможности &ldquo;переписывания&rdquo; истории, хотя с точки зрения гугловцев это преимущество, нежели недостаток), и, собственно, как все это легло в инфраструктуру Google.</p>

<iframe width="560" height="420" src="https://www.youtube.com/embed/hhgQWAbPNYE?color=white&theme=light"></iframe>

<p>Посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2009/05/21/what-version-control-to-choose/">Какую распределенную систему контроля версий выбрать: Git, Bazaar или Mercurial?</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Обучение программированию на Лиспе]]></title>
    <link href="http://demin.ws/blog/russian/2009/06/01/teaching-programming-in-lisp/"/>
    <updated>2009-06-01T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/06/01/teaching-programming-in-lisp/</id>
    <content type="html"><![CDATA[<p>Вспоминая, как учили программированию меня, и как я сам потом учил программированию, сейчас я уверенно подошел к мысли, что учить с нуля просто необходимо на функциональных языках. Чтобы далеко не бегать - на любом из диалектов Лиспа.</p>

<p>Например, в школе, когда юный мозг так податлив и нежен, ничто так не уродует его как Бейсик, Рапира, Фокал, Лого или что-то там еще есть из разряда &ldquo;простых языков для начинающих&rdquo;. Лисп же совершенно без навязывания угловатых конструций типа циклов, условий, да вообще &ldquo;программных строк&rdquo; так таковых помогает сходу въехать в краеугольные темы типа рекурсии, списков, деревьев и т.д., которые так тяжело даются пониманию потом, когда в голове уже сидят классы, процедуры, функции с циклами впридачу. В Лиспе же можно без нудного прогружения в замыслование механизмы языке сходу переходить к делу - к структурам данных и алгоритмам. И получается, что их изучение идет параллельно с изучением языка программирования, а не с огромным запозданием. А это очень полезно для формирования правильного программерского мышления.</p>

<p>И пусть человек стопудово потом придет к обычным языкам, но его мозг уже будет иметь иммунитет на порой угловатые рамки любой императивщины. Сделать переход от функционального языка с императивному просто, а порой даже приятно, а вот наоборот - увы.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Какую распределенную систему контроля версий выбрать: Git, Bazaar или Mercurial?]]></title>
    <link href="http://demin.ws/blog/russian/2009/05/21/what-version-control-to-choose/"/>
    <updated>2009-05-21T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/05/21/what-version-control-to-choose/</id>
    <content type="html"><![CDATA[<p>Последние две недели занимаюсь вялотекущим сравнением трех распределенных систем контроля версий: <a href="http://git-scm.org">Git</a>, <a href="http://bazaar-vcs.org/">Bazaar</a> и <a href="http://www.selenic.com/mercurial/wiki/">Mercurial</a>.</p>

<p>Перечитал множество отзывов и сравнений, но ясно, надо попробовать все самому для своих задач.</p>

<p>Исторически Git для меня самая родная система, так как пользуюсь ей дольше всего. Поэтому пост будет во многом Git&rsquo;оцентричный.</p>

<p>С Bazaar познакомился благодаря отличному блогу &ldquo;<a href="http://bzr-day.blogspot.com/">Базарный день</a>&rdquo;.</p>

<p>Mercurial пришлось попробовать, так как это православно (причем весьма заслуженно).</p>

<p>Ни разу не претендую на глубину анализа или на попытку развязать холивар, а просто выскажу, что накопилось. Если я упустил какую-то возможность, пожалуйста поправьте меня.</p>

<p>О колокольне, с которой я смотрю на предмет. Я ищу систему не для дома (собственные проекты у меня сидят на разных системах, и все нормально), а для поддержки системы на нескольких видах UNIX плюс еще и Windows. Примерное количество файлов в ветке проекта около шести тысяч. Объем ~250 мегов (увы, есть некоторое количество двоичных файлов). Объем репозитория особо не волнует, если речь идет о разумных цифрах.</p>

<p><strong>Git</strong></p>

<p>Это скальпель. Время обучения и погружения в систему несколько больше, чем у конкурентов, но более менее приноровившись понимаешь, какой инструмент у тебя в руках. Начинающий пользователь с Git&rsquo;ом в руках выглядит как ребенок, режущий колбаску хирургическим скальпелем.</p>

<p>Теперь по делу.</p>

<p>Что мне очень нравится в Git — это наличие staging системы (промежуточное звено между рабочими файлами и репозиторием). Очень удобно, когда можно подготовить для комита не весь файл, а только его часть.</p>

<p>Очень удобная система <a href="http://book.git-scm.com/4_stashing.html">stashing</a> для хранения временных наработок и переключения между ними без создания ветки, когда надо отвлечься на минуту для эксперимента.</p>

<p>Очень подкупает невообразимо мощная команда <a href="http://book.git-scm.com/4_rebasing.html">rebase</a>, которой можно сделать с историей проекта все (в том числе и испортить). То есть Git не возводит в религию неприкосновенность истории. Механизм для ее модификации дается, но вот ответственность за результат перекладывается на пользователя. Никто не запретит тебе простым ключиком <code>--amend</code> подправить синтаксическую ошибку в тексте последнего комита (да и любого другого комита) или удалить любой комит из истории, но вот надо тебе или нет — вопрос персонального подхода к работе. Из личного опыта как занимающего выпуском релизов скажу, что порой очень нужно иметь возможность менять историю, увы. В Perforce мне из-за этого приходится делать много ручной работы.</p>

<p>Под занавес — есть приятный бонус в виде качественного публичного хостинга <a href="http://github.com/">github.com</a>.</p>

<p>Из минусов, трогающих меня — это просто омерзительный порт под Windows. Я пользуюсь <a href="http://book.git-scm.com/6_git_on_windows.html">версией, построенной на MinGW</a>. Пока непобежденным глюком для меня является тот факт, что по какой-то причине некоторые базовые утилиты UNIX, входящие в состав дистрибутива Git под Windows, при старте пытаются, видимо, определить наличие всех логических дисков (<code>C:</code>, <code>D:</code> и т.д.) в системе. Хорошо, когда нет сетевых дисков, а вот когда они есть, то такой опрос занимает раздражающие 2-3 секунды при каждом запуске (причина была выявлена путем анализа сетевого трафика, так как сначала я думал, что у меня вирус). На домашнем компьютере все отлично — там нет сетевых дисков.</p>

<p>Но несмотря на все препоны, с помощью <code>git-p4</code> я наладил для некоторых наших разработчиков, работающих часто в офлайне, неплохой механизм интеграции с централизованным Perforce. Человек синхронизируется, будучи онлайн, и обновляет локальный репозиторий Git. Потом спокойно работает в офлайне через Git, а затем опять в онлайне засылает все сделанное из Git в Perforce.</p>

<p><strong>Bazaar</strong></p>

<p>Классная система. Работает с полоборота из коробки, но только там, где есть Питон, поэтому на некоторых наших вынужденных UNIXах меня ждал облом.</p>

<p>Пока я не нашел особых смысловых изъянов, мешающих мне работать.</p>

<p>Очень мне нравится подход, когда каждая ветка как таковая живет в отдельном каталоге, то есть имеет свой набор рабочих файлов (хотя может и не иметь).</p>

<p>Как-то с ходу не нашел бесплатного хостинга для Bazaar.</p>

<p><strong>Mercurial</strong></p>

<p>Снова Питон, поэтому автоматически все шоколадно на системах, где он есть, но грустно, где его нет.</p>

<p>Из хороших бонусов есть факт, что Google сделал поддержку хостинга для этой системы. Как написано в их отчете о том, <a href="http://code.google.com/p/support/wiki/DVCSAnalysis">почему они выбрали именно Mercurial</a>, а не Git, как я понял, говорится, что основные причины в более простой интеграции Mercurial в систему http-сервисов (Git тоже умеет через http, но медленнее), и логическая близость синтаксиса команд Mercurial к Subversion (тут, конечно, Git ой как далеко).</p>

<p>В целом, для себя я решил пока так: если для дома для семьи или там где Windows да Linux, то это без сомнения Bazaar или Mercurial (можно монетку подкинуть), а вот все-таки для применения на множестве разнородных систем и там где надо уметь управлять историей, то пока Git.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Список процессов в Windows]]></title>
    <link href="http://demin.ws/blog/russian/2009/05/17/process-list-in-windows/"/>
    <updated>2009-05-17T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/05/17/process-list-in-windows/</id>
    <content type="html"><![CDATA[<p>Писал я как-то один QA тест, и нужно мне было понять — выполнятся ли сейчас определенный процесс или нет, и если да, то с какой командной строкой. Естественно, нужно и для UNIX и для Windows.</p>

<p>В UNIX в порядке вещей просто вызвать команду <a href="http://en.wikipedia.org/wiki/Ps_(Unix)">ps</a> через <a href="http://www.opengroup.org/onlinepubs/007908799/xsh/popen.html">popen()</a> и распарсить текстовый вывод. Переносимо и надежно, так как для всех UNIXов ps всегда существует, и на этот факт можно положиться.</p>

<p>Для Windows же все оказалось чуть сложнее. Известная утилита <code>pslist</code> не является стандартной, и полагаться на нее опасно. Возиться с Windows API тоже не хотелось.</p>

<p>Я нашел вот такой способ. Через <a href="http://msdn.microsoft.com/en-us/library/96ayss4b(VS.80).aspx">_popen()</a> (аналог UNIXового <code>popen()</code>) можно вызвать вот такую команду:</p>

<pre><code>WMIC PROCESS get Caption,Commandline,Processid
</code></pre>

<p>Получаем название процесса, командную строку и идентификатор процесса.</p>

<p>Конечно, не так задорно, как через ps, но зато стандартно.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Travis Swicegood, "Pragmatic Version Control using Git"]]></title>
    <link href="http://demin.ws/blog/russian/2009/05/17/pragmatic-version-control-using-git/"/>
    <updated>2009-05-17T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/05/17/pragmatic-version-control-using-git/</id>
    <content type="html"><![CDATA[<p>Travis Swicegood, &ldquo;Pragmatic Version Control using Git&rdquo;</p>

<p><a href="http://www.amazon.co.uk/gp/product/1934356158/ref=as_li_tf_il?ie=UTF8&tag=prodiy-21&linkCode=as2&camp=1634&creative=6738&creativeASIN=1934356158"><img border="0" src="http://ws.assoc-amazon.co.uk/widgets/q?_encoding=UTF8&Format=_SL160_&ASIN=1934356158&MarketPlace=GB&ID=AsinImage&WS=1&tag=prodiy-21&ServiceVersion=20070822" ></a><img src="http://www.assoc-amazon.co.uk/e/ir?t=prodiy-21&l=as2&o=2&a=1934356158" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p>Хорошее введение в распределенную систему контроля версий <a href="http://git-scm.org/">Git</a> от сообщества разработчиков ядра Линукса и от <a href="https://www.youtube.com/watch?v=4XpnKHJAok8">Линуса Торвальдса</a> в частности.</p>

<p>Я ценю такие книги за начальное вовлечение в предмет. Это книга для начинающих, и если вы не новичок в области распределенных систем контроля версий, то вы ее проглотите за вечер и захотите более глубоких знаний по Git. Так и произошло со мной. Я прочитал книгу за вечер, она сформулировала в голове десятки неотвеченных вопросов и позволила мне понять — на какие вопросы мне нужны ответы.</p>

<p>На официальном сайте есть превосходная электронная <a href="http://book.git-scm.com/">живая книга по Git</a>. Многие главы имеют дельные коротенькие видео уроки.</p>

<p><strong>Вывод</strong>: обычно я не храню книги &ldquo;для начинающих&rdquo;, так как после них ты либо никогда предметом не интересуешься, либо копаешь глубже и знания для начинающих становятся очевидными. Но эту я оставлю.</p>

<p>P.S. Для интересующихся распределенными системами контроля версий рекомендую отличный блог про альтернативую систему Bazaar &ldquo;<a href="http://bzr-day.blogspot.com/">Базарный день</a>&rdquo;. Прочтете несколько постов и будете готовы использовать Bazaar.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Том Демарко, Тимати Листер, "Человеческий фактор: успешные проекты и команды"]]></title>
    <link href="http://demin.ws/blog/russian/2009/05/17/peopleware/"/>
    <updated>2009-05-17T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/05/17/peopleware/</id>
    <content type="html"><![CDATA[<p>Том Демарко, Тимати Листер</p>

<p><a href="http://www.ozon.ru/context/detail/id/2338486/?partner=easy-coding">Человеский фактор: успешные проекты и команды</a></p>

<p><img src="http://demin.ws/images/covers/russian/peopleware-cover.jpg" /></p>

<p>Вы недавно помимо просто написания кода начали заниматься управлением командой?</p>

<p>Значит пока включить в свой книжный рацион раздел по управлению. И это одна из первых книг. Я прочитал ее не отрываясь за два вечера. Очень легко и понятно написано. Так как управление — это не программирование, и тут нельзя дать четкий рецепт &ldquo;делай раз, делай два&rdquo;, поэтому книги такого рода стоит рассматривать как повод для размызшлений о том, о чем вы, будучи просто программистом, никогда раньше не думали.</p>

<p><strong>Вывод</strong>: Прочитал и поставил на близкую рабочую полку по соседству с Макконнеллом и <a href="http://demin.ws/blog/russian/2009/03/03/mythical-man-month/">Бруксом</a>.</p>

<p>Посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2009/03/03/mythical-man-month/">Фредерик Брукс, &ldquo;Мифический человеко-месяц или как создаются программные системы&rdquo;</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Как вы пишете в Blogspot?]]></title>
    <link href="http://demin.ws/blog/russian/2009/05/17/how-do-you-write-to-blogspot/"/>
    <updated>2009-05-17T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/05/17/how-do-you-write-to-blogspot/</id>
    <content type="html"><![CDATA[<p>Лично я считаю, что Blogspot имеет радикально неудобный интерфейс для ввода и тем более последующего редактирования постов. Полное “сведение” поста в нем — это кошмар. Сначала ты пишешь основной текст в Ворде, затем вставляешь исходники, если нужно, и потом начинается длительное ёрзанье в html для придания посту правильного вида в браузере.</p>

<p>Так как предварительный просмотр поста в Blogspot не дает полной картины, то единственный способ проверить вид поста, это его, собственно, запостить. Но кому охота выкладывать недоделанный пост? Итерация правки поста крайне неудобна и медленна — цикл “правка –&gt; просмотр –&gt; постинг –&gt; ошибка –&gt; правка –&gt; &hellip;” очень коряв.</p>

<p>После некоторого времени использования Blogspot я пришел вот к такой схеме.</p>

<p>Для начала, нужен таки блог-клиент, как бы этого не хотелось. Тут тебе и вордовая проверка текста встроена, и preview какой никакой есть, и сохранение черновика и много прочих мелких радостей. Перебрав Semagic, BlogJet, несколько клиентов на Яве и придя от всего увиденного в ужас, а остановился, как ни странно на <a href="http://windowslivewriter.spaces.live.com/">Microsoft Live Writer</a>. Бесплатный (чудо для продукта от Microsoft), понимает Blogspot, много плагинов и встроенная вордовая проверка текста (то есть можно сразу в нем писать). В целом, почти все хорошо.</p>

<p>Но как бы не был хорош preview блог-клиента, единственный способ полностью проверить верстку в Blogspot — это запостить. Для этого можно завести еще один блог, тестовый, который должен быть точной копией основного блога в плане стилей и макета страницы. Теперь можно спокойно постить черновик в тестовый блог и отлаживать верстку окончательно. Причем цикл отладки выглядит так: редактирование в блог-клиента -&gt; постинг в тестовый блог -&gt; refresh страницы в браузере. Гораздо быстрее чем была, так как надо просто переключаться между окнами.</p>

<p>В конце отлаженный пост переносится в основной блог просто копированием html-кода.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Дж. Ханк Рейнвотер, "Наставление для программистов, руководящих другими программистами"]]></title>
    <link href="http://demin.ws/blog/russian/2009/05/17/herding-cats/"/>
    <updated>2009-05-17T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/05/17/herding-cats/</id>
    <content type="html"><![CDATA[<p>Дж. Ханк Рейнвотер</p>

<p><a href="http://www.ozon.ru/context/detail/id/2409500/?partner=easy-coding">Наставление для программистов, руководящих другими программистами</a></p>

<p><img src="http://demin.ws/images/covers/russian/herding-cats-cover.jpg" /></p>

<p>Продолжая тему про <a href="http://demin.ws/blog/russian/2009/05/17/peopleware/">книги для программистов</a>, начавших заниматься управлением, расскажу про эту книгу.</p>

<p>Ее многие рекомендуют, поэтому я ее купил. Если честно, я мусолил ее несколько месяцев урывками (недавно добил таки). Крайне тяжелый и корявый язык (может это просто проблема плохого перевода?), читается поэтому очень муторно. Повсюду цитаты, повторяющиеся в самом тексте, что сбивает напрочь ход мысли. Порой автор говорит какую-то очевидную банальщину типа:
Техническое лидерство взращивается на почве знания и питается готовностью учиться на собственных ошибках — в конечном итоге какая практика обязательно увенчается успехом.
Можно заменить &ldquo;техническое лидерство&rdquo; на программирование, учебу, игру в шахматы или гольф и суть высказывания не изменится. Тогда о чем все этом?</p>

<p>В целом, лично мне книга не понравилась и рекомендовать ее я не буду. Может вам с ней повезет больше.</p>

<p>Посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2009/05/17/peopleware/">Том Демарко, Тимати Листер, &ldquo;Человеческий фактор: успешные проекты и команды&rdquo;</a></li>
<li><a href="http://demin.ws/blog/russian/2009/03/03/mythical-man-month/">Фредерик Брукс, &ldquo;Мифический человеко-месяц или как создаются программные системы&rdquo;</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Стратегии выпуска релизов]]></title>
    <link href="http://demin.ws/blog/russian/2009/05/17/releases-strategy/"/>
    <updated>2009-05-17T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/05/17/releases-strategy/</id>
    <content type="html"><![CDATA[<p>Как мне кажется, в нынешнем мире программного обеспечения появилась доминирующая политика выпуска релизов/версий продукта. Эта политика основана не на факте появления новых возможностей или исправления ошибок, а просто на временных интервалах. А новые возможности и исправления ошибок просто вписываются в график релизов. То есть фраза «когда выйдет новая версия, то мы…» трансформируется в «когда такого-то числа выйдет следующая версия, то мы…».</p>

<p>Данный подход удобен всем. Разработчики в этом случае могу спокойно планировать свои спринты, распределяя по ним план развития продукта, а клиенты могут посмотреть на план этот развития (например, мы его публикуем на сайте поддержки) и понять, что и когда им ждать. Их планирование также упрощается.</p>

<p>Есть тут небольшая загвоздка – это исправление ошибок. Оценить время исправления коварного бага порой не так просто. Хорошо, что такие случаи, скорее всего исключения, так как если они становятся правилом, то возникает вопрос просто о качестве софта в целом.</p>

<p>Мы выпускаем релизы каждый месяц. Мне, как так называемому branch owner’у (я не очень люблю использовать английские слова, но вот «ответственный за версию» как-то уж очень коряво звучит), гораздо проще составлять списки патчей для включения в релиз и планировать окна тестирования, когда дата выпуска всегда постоянна. Конечно, интервал релизов подобран так, чтобы не приходилось выпускать пустые релизы без каких-либо патчей.</p>

<p>И каковы ваши наблюдения на этот счет?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Табуляция и пробелы]]></title>
    <link href="http://demin.ws/blog/russian/2009/05/11/tabulation/"/>
    <updated>2009-05-11T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/05/11/tabulation/</id>
    <content type="html"><![CDATA[<p>Символы табуляции в исходниках — это бесконечное зло. А зло в квадрате, когда табуляция используется не только для отступов слева, но как разделитель (например, между аргументами функций, в теле блоков комментариев и т.д.). Ничего, кроме криков из другого конца комнаты типа &ldquo;какая б&hellip; опять дописала кусок в моем неприкосновенном исходнике на С в Эклипсе, используя пробелы вместо табов, так что у меня тут в vi съехали все отступы?&rdquo;. И тут оба неправы. Первый в том, что не использовал тип отступов, принятый уже в существующем документе, а второй — в том, что использовал табуляцию изначально. Все шоколадно и солнечно, когда все сидят в Студии, но когда один использует vi, другой Студию, третий - FAR и т.д. (а это, увы, реалии много-платформенной разработки), то невозможно, чтобы все следовали правилу. Никто не любит соблюдать неудобные правила.</p>

<p>Лично я очень спокоен на тему стиля в целом и длины отступов в частности (лишь бы выглядело читабельно и соответствовало принятому для проекта соглашению), но вот табуляция — это как красная тряпка.</p>

<p>Ситуация усугубляется тем, что мы сопровождаем много кода, которому более двадцати лет, а тогда табуляция была еще ой как в ходу. Вот и приходится уговаривать людей проводить централизованные периодические зачистки кода от мусора прошлых лет, так как нет ничего хуже, когда человек совмещает смысловой коммит с &ldquo;небольшими стилистическими правками&rdquo;, типа удаления табуляций, разбиения длинных строк и т.д. В целом, в этом не ничего плохого, но после таких &ldquo;небольших правок&rdquo; слияние веток становится кошмаром.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Автоматизация сборки продукта]]></title>
    <link href="http://demin.ws/blog/russian/2009/05/04/automated-product-build/"/>
    <updated>2009-05-04T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/05/04/automated-product-build/</id>
    <content type="html"><![CDATA[<p>Лично я убежден на 100%, что сборка более менее серьезного по размерам проекта/продукта должна производиться в командной строке, то есть никаких GUI-сред, в которые надо заходить, нажимать кнопки, смотреть в окна результатов и т.д. Все это здорово на этапе собственно написания кода, тестирования и отладки. Но когда код переходит в стадию “почти закончен”, все должно заканчиваться полностью авторизированной сборкой без вариантов “тут надо кликнуть, тут надо ввести путь, тут надо сделать <code>clean</code>-up и <code>refresh</code>, а то все съедет” и т.д. Прелесть командной строки в том, что вне зависимости с какого ты сегодня будуна, и что твоя голова с утра проходит в дверь только боком, ты набираешь <code>cd /my/super/project</code> и затем <code>make</code>. После этого ты откидываешься на стул в мыслях о пивасике, а проект тем временем собирается и тестируется. В идеале, конечно, вместо компиляции, ты должен просто скачать свежую автоматизированную ночную сборку, которая уже там, оттестирована и готова к употреблению.</p>

<p>Ладно, это была всем очевидная лирика.</p>

<p>Наш софт представляет собой монструозный симбиоз из С, С++, Java, BASIC (это наш собственный внутренний СУБД-ориентированный язык), Python’а и UNIX-скриптов. Система же сборки основана на GNU Make и по сути является огромным многоуровневым Makefile’ом. Необходимая при сборке логика, которую нельзя реализовать напрямую в <a href="http://www.gnu.org/software/make/">GNU Make</a> дополняется UNIX-скриптами и мини утилитками на C, которые компилируются прямо перед запуском. Java части используют <a href="http://ant.apache.org/">Ant</a>. Плагин <a href="http://ant.apache.org/ivy/">Ivy</a> используется для подкачки из репозитория двоичных модулей. Лично я против каких-либо двоичных файлов в проекте, и считаю, что в разы удобнее все компилировать из текстового представления (пусть это и дольше по времени), так как текстовики можно сравнивать, в них можно искать и т.д. Конечно, реальная жизнь сложнее, и иногда приходится использовать заранее собранные бинарники (например, <a href="http://www.openssl.org/">OpenSSL</a>, <a href="http://icu-project.org/">ICU</a>, тучу сторонних jar’ов для Java и т.д.).</p>

<p>Итак, ясно, такая сборка со временем деградирует, становится сложнее, запутаннее, в ней сложно искать ошибки, а тем более узкие места.</p>

<p>Я пытался все перевести на Ant – возможностей много, но все крайне Ява-центричное, расширения надо тоже писать на ней же. Если мы все писали бы на Java, но у нас не тот случай.</p>

<p>Пробовал <a href="http://www.cmake.org/">CMake</a>. Очень неплохо, но обнаружились сложности скрещения с нашим собственным компилятором Бейсика.</p>

<p>Пробовал <a href="http://www.scons.org/">SCons</a>. Пожалуй, это самая прикольная система. Недаром ее используют в Гугле для реально нетривиальных проектов типа <a href="http://code.google.com/chromium/">Chrome</a> и <a href="http://code.google.com/p/nativeclient/">Native Client</a> и т.д. По сути <code>Makefile</code> – это программа на Питоне, то есть ограничения на особую логику сборки (запуск тестов, фильтров, сборка документации, публикация результатов на FTP и т.д.) просто отсутствуют. Нужное просто пишется на полноценном языке программирования Питон. Удалось мне даже собрать нормально Питон для AIX и HPUX (с Windows, Linux, Solaris проблем нет вообще). Но и тут получилась ложна гов&hellip; дегтя. У меня есть необходимость конвертировать тысячи отчетов по тестам в формат jUnit. Мини утилитка на С, которая писалась на коленке, делает это менее чем за секунду. Все мои попытки на Питоне работали минуты. Получается, что идея опять не чиста, так как нужны опять сопровождающие утилиты, и уже не ясно, зачем что-то менять как оно есть сейчас.</p>

<p>В целом, мои изыскания в области идеальной утилиты организации сборки пока не увенчались успехом. Но поиск продолжается.</p>

<p>Другие посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2009/04/26/continuous-integration-with-hudson/">Система автоматизированной интеграции Hudson</a></li>
<li><a href="http://demin.ws/blog/russian/2009/04/03/code-bullseye-coverage/">Анализатор покрытия кода тестами Bullseye Coverage</a></li>
<li><a href="http://demin.ws/blog/russian/2009/03/19/google-test-framework-130/">Google Test Framework 1.3.0</a></li>
<li><a href="http://demin.ws/blog/russian/2009/02/23/static-code-analysis-coverity-klocwork/">Статический анализ кода - Coverity, Klocwork</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Система автоматизированной интеграции Hudson]]></title>
    <link href="http://demin.ws/blog/russian/2009/04/26/continuous-integration-with-hudson/"/>
    <updated>2009-04-26T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/04/26/continuous-integration-with-hudson/</id>
    <content type="html"><![CDATA[<p>Не секрет, что максимально автоматизированная &ldquo;ночная&rdquo; интеграция (сборка, тестирование, архивация) — это залог уверенности в том, что можно в любой момент выдать работоспособный релиз. А это одна из основ гибкого подхода к разработке.</p>

<p>Мы использует для этих нужд <a href="https://hudson.dev.java.net/">Hudson</a>. Написано на Java, управляется через веб-интерфейс.</p>

<p>Несмотря на мою нелюбовь к Java, лично я мирно ужился с этой программой.</p>

<p>Что умеет Hudson, и для чего он нужен?</p>

<p>Hudson — это программа, которая умеет запускать скрипты локально или на удаленных машинах в зависимости от различных условий. Скрипты обычно производят сборку, тестирование, генерацию отчетов и документации, а события — это в основном поступление новых изменений в систему контроля версий.</p>

<p>Для начала, Hudson построен на плагинах, коих много, под разные запросы и желания.</p>

<p>Первый плагин, который нужен был конкретно нам — это плагин для работы с Perforce. Он умеет периодически опрашивать Perforce о наличии новых commit’ов и инициировать некоторые события, например сборку или запуск тестов.</p>

<p>Далее, ключевой момент для нас. Hudson имеет master-slave архитектуру, что позволяет с одного головного компьютера (master) проводить компиляцию, тестирование, архивирование и т.д. на множестве slave-машин. Так как наш софт поддерживается на нескольких разных типах UNIX и на Windows, по подобный подход очень упрощает управление таким зоопарком сборочных машин. Время разворачивания очередного slave’а — несколько минут (копирование <code>slave.jar</code>, запуск <code>java –jar slave.jar</code> и прописывание адреса этого slave’а на головной машине).</p>

<p>Еще мы активно используем плагины для посылки извещений по электропочте и для наглядного отображения результатов тестирования из формата jUnit. Наш софт состоит из смеси С, С++ и Java, поэтому пришлось выбрать единый формат представления журналов тестирования. Остановились на формате jUnit.</p>

<p>Каждая задача в Hudson может выполняться как на самом мастере, так и на заданном множестве slave-машин. Также  задача может являться условием запуска другой задачи. Например, если задача компиляции проекта прошла успешно, то инициируется задача тестирования. Естественно, на каждом этапе можно архивировать промежуточные результаты (логи, тестовые файлы и т.д.), к которым можно всегда вернуться позже.</p>

<p>Наш сценарий использования Hudson таков: каждые пять минут Hudson опрашивает Perforce. Если в какой-то ветке появились новые изменения, то запускается “чистая” сборка ветки с новыми кусками кода. Каждая такая сборка снабжается файлом, в котором перечислены изменения по сравнению с предыдущей сборкой (changelog). Если сборка прошла успешно, по запускается набор функциональных и приемочных тестов. Кроме этого каждую ночь делается сборка со всеми изменениями за день. Если тесты прошли успешно, что результат архивируется в виде очередного ночного билда и выкладывается на ftp.</p>

<p>Если какая-то задача оканчивается сбоем (например, компиляция, так как кто-то “сломал” сборку, забыв проверить новый код на другой платформе, или какой-то из тестов не работает), то посылаются извещения ответственным лицам и также виновнику сбоя.</p>

<p>При нашей интенсивности commit’ов крайне редко за пять минут появляются более одного. Чем это удобно? А тем, что если при очередной сборке кто-то сломал функциональный или приемочный тест, сразу выясняется кто и как это сделал.</p>

<p>В целом, Hudson позволил нам сделать такую универсальную консоль в виде веб-странички, на которой в одном месте сразу видно все, что происходит в разработке, начиная от состояние функциональных и приемочных тестов, отчетов по покрытию и анализу качества кода и заканчивая списком незакрытых инцидентов в каждой ветке продукта.</p>

<p>А теперь реальный пример. В какой-то момент бета-тестеры начали сообщать, что система стала “как-то тормозить”. Точного момента никто не засек, а последняя &ldquo;нормальная быстрая” сборка, которую эти тестеры имели, была сделана месяц назад. За этот месяц в ветку было внесено полсотни commit’ов. Искать среди них проблемный было бы занятием скучным (откат на определенную ревизию, сборка, тестирование, сравнение и т.д.).</p>

<p>Меня выручил Hudson. Я просмотрел отчеты по прогонам функциональных тестов за этот месяц и буквально сразу обнаружил, что в определенный день тесты сетевой подсистемы стали работать заметно медленнее. Область поиска сразу сузилась до четырех commit’ов сделанных в этот день. И только один из них был в сетевой подсистеме. Автор сего “улучшения” тоже нашелся сразу. Оказывается, человек что-то там оптимизировал в целях ускорения, а вышло наоборот.  Итого, около часа на полное разбирательство в проблеме, включая перебрасыванием электропочтой с участниками инцидента. Я думаю, ручной поиск занял был день-два.</p>

<p>Вывод — удобная и максимально автоматизированная система фоновой интеграции является такой же важной частью групповой программной разработки, как и багтрекер и контроль версий.</p>

<p>А вы какими программами пользуетесь для автоматической интеграции?</p>

<p>Другие посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2009/02/23/static-code-analysis-coverity-klocwork/">Статический анализ кода - Coverity, Klocwork</a></li>
<li><a href="http://demin.ws/blog/russian/2009/04/03/code-bullseye-coverage/">Анализатор покрытия кода тестами Bullseye Coverage</a></li>
<li><a href="http://demin.ws/blog/russian/2009/03/11/lightweight-integration-of-perforce-to-visual-studio/">&ldquo;Легкая&rdquo; интеграция Perforce в Visual Studio</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Задержка в одну секунду через time()]]></title>
    <link href="http://demin.ws/blog/russian/2009/04/13/one-second-delay-by-time/"/>
    <updated>2009-04-13T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/04/13/one-second-delay-by-time/</id>
    <content type="html"><![CDATA[<p>Иногда требуется сделать в программе цикл, работающий кратное секундам время. Есть множество способов для это.</p>

<p>Я предложу, как мне кажется, очень простой и очень переносимый способ.</p>

<p>Стандартная функция <code>time()</code> возвращает так называемое UNIX-время в секундах. Проблема в том, что секунда, номер которой возвращает эта функция, может быть уже через пару микросекунд перейдет на следующую. Надо как-то &ldquo;подравняться&rdquo; к границе секунд.</p>

<p>Фрагмент кода, в котором рабочий цикл имеет условие, позволяющее ему работать время, близкое к одной секунде:</p>

<pre class="hl">
<span class="hl opt">...</span>
<span class="hl slc">// Получаем номер текущей секунды</span>
<span class="hl kwb">time_t</span> started <span class="hl opt">=</span> <span class="hl kwd">time</span><span class="hl opt">(</span>NULL<span class="hl opt">);</span>
<span class="hl slc">// Ждем перехода на следующую секунду</span>
<span class="hl kwa">while</span> <span class="hl opt">(</span><span class="hl kwd">time</span><span class="hl opt">(</span>NULL<span class="hl opt">) ==</span> started<span class="hl opt">);</span>
<span class="hl slc">// И сразу запускаем рабочий цикл</span>
started <span class="hl opt">=</span> <span class="hl kwd">time</span><span class="hl opt">(</span>NULL<span class="hl opt">);</span>
<span class="hl kwa">do</span> <span class="hl opt">{</span>
   <span class="hl slc">// Цикл, работающий в течение секунды</span>
   <span class="hl opt">...</span>
<span class="hl opt">}</span> <span class="hl kwa">while</span> <span class="hl opt">(</span><span class="hl kwd">time</span><span class="hl opt">(</span>NULL<span class="hl opt">) ==</span> started<span class="hl opt">);</span>
<span class="hl opt">...</span>
</pre>

<p>Тут, конечно, есть недостатки. Подготовительный цикл ожидания перехода на следующую секунду может &ldquo;есть&rdquo; процессорное время, если <code>time()</code> для вашей системы не отдает time slice. Также сложно сделать какой-то надежный универсальный шаблон или макрос, так как надо гарантированно избежать какого-либо лишнего кода, чтобы не терять точность.</p>

<p>В целом, такой прием дает рабочему циклу работать время, очень близкое к секунде.</p>

<p>Если знаете, как сделать еще проще — предлагайте.</p>

<p>Другие посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2009/01/29/milliseconds-timer-for-windows-and-unix/">Миллисекундный таймер для Windows и UNIX</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Анализатор покрытия кода тестами Bullseye Coverage]]></title>
    <link href="http://demin.ws/blog/russian/2009/04/03/code-bullseye-coverage/"/>
    <updated>2009-04-03T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/04/03/code-bullseye-coverage/</id>
    <content type="html"><![CDATA[<p><a href="http://demin.ws/blog/russian/2009/02/23/static-code-analysis-coverity-klocwork/">Статические анализаторы кода</a>, например <a href="http://www.coverity.com/html/prevent-for-c-c++.html">Coverity</a> или <a href="http://www.klocwork.com/">Klocwork</a> являются отличным подспорьем для качественного программирования.</p>

<p>Еще одним мощнейшим подспорьем является тестирование. Есть различные виды тестирования — unit-тестирование, функциональное тестирование, регрессивное тестирование и т.д.</p>

<p>Что понять, насколько хорошо проект покрыт тестами, нужна какая-то количественная мера. Например, это может быть количество предопределенных пользовательских сценариев, которые должны работать как задумано. Это неплохой показатель, и он обычно является основной мерой функционального тестирования и в целом отправной точкой в принятии решения о готовности релиза. Проблема этого подхода, что сами сценарии определены людьми, а значит являются условным и могут содержать ошибки и неточности. Хочется чего-то более объективного и более беспристрастного.</p>

<p>Одним из таких показателей может является количество строк кода, которые были отработаны (выполнены) в процессе тестирования. Эдакая мера для черных дыр в коде, которые никогда не выполняются обычно, а когда таки до них доходит, то все падает. Этот подход вовсе не отменяет функциональное тестирование, а органично дополняется его.</p>

<p>Итак, задача — надо понять, какие части программного коды были задействованы (были выполнены хотя бы раз) в процессе тестирования.</p>

<p>Представим ситуацию, что тестерам дали задание написать функциональные тесты для новой версии API на основе unit-тестов, написанных программистами, и на основе ожиданий заказчика от этого API. Они написали. А как понять, насколько полно они задействовали своими тестами все укромные уголки кода? Нужен какой-то инструмент.</p>

<p>Мы в компании остановились на <a href="http://www.bullseye.com/">Bullseye Coverage</a>. Относительно небольшая цена (для сравнения с Coverity, которая стоила нам несколько десятков кило-зеленых на год, хотя это того стоит). Можно получить тестовый временный ключ для того, чтобы поиграться перед покупкой. Система поддерживает множество основных платформ.</p>

<p>Bullseye Coverage работает на уровне компилятора. Все что нужно — это активировать ее перед компиляцией проекта. После этого бинарные модули проекта будут сохранять в специальном файле статистику по собственной работе (чем-то похоже на работу профилировщика). Откомпилировали, запустили тесты (любые) и посмотрели — какие строки кода были реально выполнены этими тестами.</p>

<p>Bullseye Coverage может показывать задействование на уровне файлов/модулей, функций/классов и просто строк. Открыв файл исходного текста после прогона тестов специальным просмотрщиком можно, например, сказать, что эта конкретная строка или эта функция никогда не вызывалась в процессе тестирования. Порой это очень впечатляет.</p>

<p>Единственное, чего Bullseye Coverage не умеет, так это делать сравнительный анализ нескольких сборок, чтобы бы можно было отследить изменения показателей, а не просто иметь их абсолютные величины.</p>

<p>Лично меня результаты анализа некоторых наших проектов очень впечатлили и, порой, озадачили.</p>

<p>А вас?</p>

<p>Другие посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2009/02/23/static-code-analysis-coverity-klocwork/">Статический анализ кода - Coverity, Klocwork</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Триггер параллельных потоков для Windows и UNIX]]></title>
    <link href="http://demin.ws/blog/russian/2009/03/29/trigger-for-concurrent-threads/"/>
    <updated>2009-03-29T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/03/29/trigger-for-concurrent-threads/</id>
    <content type="html"><![CDATA[<p>Условные переменные, как и <a href="http://demin.ws/blog/russian/2009/02/06/universal-mutex-in-cpp-for-windows-and-unix/">мьютексы</a>, являются базовыми примитивами для синхронизации в параллельном программировании. К сожалению, классическая условная переменная в нотации потоков POSIX (pthread) <a href="http://www.cs.wustl.edu/~schmidt/win32-cv-1.html">сложно реализуема в Windows</a> (<a href="http://msdn.microsoft.com/en-us/library/ms686903(VS.85).aspx">судя по MSDN Windows</a> таки поддерживают механизм условных переменных на уровне API, но не в XP или 2003, в чем-то более новом, увы). Мне потребовался для одного проекта простейший механизм синхронизации двух потоков: один поток ждет, не занимая ресурсов процессора, и активизируется, только когда другой поток его попросит об этом. Простейший триггер. Конечно, по логике — это обыкновенная условная переменная в упрощенном варианте. Для UNIX это реализуется именно через условную переменную потоков POSIX, а для Windows — через события.</p>

<p>Файл <code>trigger.h</code>:</p>

<pre class="hl">
<span class="hl ppc">#ifndef _EXT_TRIGGER_H</span>
<span class="hl ppc">#define _EXT_TRIGGER_H</span>

<span class="hl ppc">#ifdef WIN32</span>
  <span class="hl ppc">#include &lt;windows.h&gt;</span>
<span class="hl ppc">#else</span>
  <span class="hl ppc">#include &lt;pthread.h&gt;</span>
<span class="hl ppc">#endif</span>

<span class="hl kwa">namespace</span> ext <span class="hl opt">{</span>

<span class="hl kwc">class</span> Trigger <span class="hl opt">{</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl kwd">Trigger</span><span class="hl opt">();</span>
  <span class="hl opt">~</span><span class="hl kwd">Trigger</span><span class="hl opt">();</span>
  
  <span class="hl slc">// Функция посылки сигнала потоку, </span>
  <span class="hl slc">// ждущему на функции Wait().</span>
  <span class="hl kwb">void</span> <span class="hl kwd">Signal</span><span class="hl opt">();</span>
  <span class="hl slc">// Функция ожидания сигнала.</span>
  <span class="hl slc">// Вызов этой функции приводит к блокировке потока до</span>
  <span class="hl slc">// получения сигнала от функции Signal().</span>
  <span class="hl slc">// Внимание: функция Signal() не должна быть вызвана до</span>
  <span class="hl slc">// того, как ждущий поток &quot;сядет&quot; на Wait(). Подобное </span>
  <span class="hl slc">// использование ведет к неопределенному поведению.</span>
  <span class="hl kwb">void</span> <span class="hl kwd">Wait</span><span class="hl opt">();</span>

<span class="hl kwc">private</span><span class="hl opt">:</span>
<span class="hl ppc">#ifdef WIN32    </span>
  HANDLE __handle<span class="hl opt">;</span>
<span class="hl ppc">#else</span>
  pthread_mutex_t __mutex<span class="hl opt">;</span>
  pthread_cond_t __cv<span class="hl opt">;</span>
<span class="hl ppc">#endif</span>
  <span class="hl slc">// &quot;Защита&quot; от случайного копирования.</span>
  <span class="hl kwd">Trigger</span><span class="hl opt">(</span><span class="hl kwb">const</span> Trigger<span class="hl opt">&amp;);</span>
  <span class="hl kwb">void</span> <span class="hl kwc">operator</span><span class="hl opt">=(</span><span class="hl kwb">const</span> Trigger<span class="hl opt">&amp;);</span>
<span class="hl opt">};</span>

<span class="hl opt">}</span> <span class="hl slc">// namespace ext</span>

<span class="hl ppc">#endif</span>
</pre>

<p>Файл <code>trigger.cpp</code>:</p>

<pre class="hl">
<span class="hl ppc">#include</span> <span class="hl pps">&quot;Trigger.h&quot;</span><span class="hl ppc"></span>

<span class="hl kwa">namespace</span> ext <span class="hl opt">{</span>

<span class="hl ppc">#ifdef WIN32</span>

Trigger<span class="hl opt">::</span><span class="hl kwd">Trigger</span><span class="hl opt">() {</span> 
  __handle <span class="hl opt">=</span> <span class="hl kwd">CreateEvent</span><span class="hl opt">(</span>
    NULL<span class="hl opt">,</span>               <span class="hl slc">// Атрибуты безопасности по умолчанию.</span>
    TRUE<span class="hl opt">,</span>               <span class="hl slc">// Режим ручной активации события.</span>
    FALSE<span class="hl opt">,</span>              <span class="hl slc">// Начальное состояния -- неактивное.</span>
    NULL                <span class="hl slc">// Безымянное событие.</span>
  <span class="hl opt">);</span> 
<span class="hl opt">}</span>

Trigger<span class="hl opt">::~</span><span class="hl kwd">Trigger</span><span class="hl opt">() {</span> 
  <span class="hl kwd">CloseHandle</span><span class="hl opt">(</span>__handle<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span> Trigger<span class="hl opt">::</span><span class="hl kwd">Signal</span><span class="hl opt">() {</span>
  <span class="hl kwd">SetEvent</span><span class="hl opt">(</span>__handle<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span> Trigger<span class="hl opt">::</span><span class="hl kwd">Wait</span><span class="hl opt">() {</span>
  <span class="hl slc">// Ждем наступление события.</span>
  <span class="hl kwd">WaitForSingleObject</span><span class="hl opt">(</span>__handle<span class="hl opt">,</span> INFINITE<span class="hl opt">);</span>
  <span class="hl slc">// &quot;Перезаряжаем&quot; событие.</span>
  <span class="hl kwd">ResetEvent</span><span class="hl opt">(</span>__handle<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl ppc">#else</span> <span class="hl slc">// WIN32</span>
<span class="hl ppc"></span>
Trigger<span class="hl opt">::</span><span class="hl kwd">Trigger</span><span class="hl opt">() {</span> 
  <span class="hl kwd">pthread_mutex_init</span><span class="hl opt">(&amp;</span>__mutex<span class="hl opt">,</span> NULL<span class="hl opt">);</span> 
  <span class="hl kwd">pthread_cond_init</span><span class="hl opt">(&amp;</span>__cv<span class="hl opt">,</span> NULL<span class="hl opt">);</span> 
<span class="hl opt">}</span>

Trigger<span class="hl opt">::~</span><span class="hl kwd">Trigger</span><span class="hl opt">() {</span> 
  <span class="hl kwd">pthread_cond_destroy</span><span class="hl opt">(&amp;</span>__cv<span class="hl opt">);</span> 
  <span class="hl kwd">pthread_mutex_destroy</span><span class="hl opt">(&amp;</span>__mutex<span class="hl opt">);</span> 
<span class="hl opt">}</span>

<span class="hl kwb">void</span> Trigger<span class="hl opt">::</span><span class="hl kwd">Signal</span><span class="hl opt">() {</span>
  <span class="hl kwd">pthread_mutex_lock</span><span class="hl opt">(&amp;</span>__mutex<span class="hl opt">);</span>
  <span class="hl kwd">pthread_cond_signal</span><span class="hl opt">(&amp;</span>__cv<span class="hl opt">);</span>
  <span class="hl kwd">pthread_mutex_unlock</span><span class="hl opt">(&amp;</span>__mutex<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span> Trigger<span class="hl opt">::</span><span class="hl kwd">Wait</span><span class="hl opt">() {</span>
  <span class="hl kwd">pthread_mutex_lock</span><span class="hl opt">(&amp;</span>__mutex<span class="hl opt">);</span>
  <span class="hl kwd">pthread_cond_wait</span><span class="hl opt">(&amp;</span>__cv<span class="hl opt">, &amp;</span>__mutex<span class="hl opt">);</span>
  <span class="hl kwd">pthread_mutex_unlock</span><span class="hl opt">(&amp;</span>__mutex<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl ppc">#endif</span> <span class="hl slc">// WIN32</span>
<span class="hl ppc"></span>
<span class="hl opt">}</span> <span class="hl slc">// namespace ext</span>
</pre>

<p>Пространство имен, как обычно, ext, так что меняете по вкусу.</p>

<p>Проверим, как будет работать (естественно, через тест).</p>

<p>Для тестирования также потребуются: класс <a href="http://demin.ws/blog/russian/2009/01/26/universal-threads-for-windows-and-unix/">Thread</a>, класс <a href="http://demin.ws/blog/russian/2009/01/29/milliseconds-timer-for-windows-and-unix/">PreciseTimer</a> и Google Test. О том, как собрать себе компактную версию Google</p>

<p>Test в виде всего двух файлов <code>gtest-all.cc</code> и <code>gtest.h</code> уже <a href="http://demin.ws/blog/russian/2009/03/19/google-test-framework-130/">писал</a>.</p>

<p>Файл <code>trigger_unittest.cpp</code>:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;gtest/gtest.h&gt;</span>

<span class="hl ppc">#include</span> <span class="hl pps">&quot;trigger.h&quot;</span><span class="hl ppc"></span>
<span class="hl ppc">#include</span> <span class="hl pps">&quot;thread.h&quot;</span><span class="hl ppc"></span>
<span class="hl ppc">#include</span> <span class="hl pps">&quot;pretimer.h&quot;</span><span class="hl ppc"></span>

<span class="hl slc">// Тестовый поток, который будет &quot;скакать&quot; по указанным ключевым</span>
<span class="hl slc">// точкам, увеличивая значение счетчика.</span>
<span class="hl kwc">class</span> TriggerThread<span class="hl opt">:</span> <span class="hl kwc">public</span> ext<span class="hl opt">::</span>Thread <span class="hl opt">{</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl kwd">TriggerThread</span><span class="hl opt">(</span><span class="hl kwc">volatile</span> <span class="hl kwb">int</span><span class="hl opt">&amp;</span> flag<span class="hl opt">,</span> ext<span class="hl opt">::</span>Trigger<span class="hl opt">&amp;</span> trigger<span class="hl opt">) :</span>
    <span class="hl kwd">__flag</span><span class="hl opt">(</span>flag<span class="hl opt">),</span> <span class="hl kwd">__trigger</span><span class="hl opt">(</span>trigger<span class="hl opt">)</span>
  <span class="hl opt">{}</span>

  <span class="hl kwc">virtual</span> <span class="hl kwb">void</span> <span class="hl kwd">Execute</span><span class="hl opt">() {</span>
    <span class="hl slc">// Ждем первого сигнала.</span>
    __trigger<span class="hl opt">.</span><span class="hl kwd">Wait</span><span class="hl opt">();</span>
    __flag <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
    <span class="hl slc">// Ждем второго сигнала.</span>
    __trigger<span class="hl opt">.</span><span class="hl kwd">Wait</span><span class="hl opt">();</span>
    __flag <span class="hl opt">=</span> <span class="hl num">2</span><span class="hl opt">;</span>
    <span class="hl slc">// Ждем третьего сигнала.</span>
    __trigger<span class="hl opt">.</span><span class="hl kwd">Wait</span><span class="hl opt">();</span>
    __flag <span class="hl opt">=</span> <span class="hl num">3</span><span class="hl opt">;</span>
  <span class="hl opt">}</span>

<span class="hl kwc">private</span><span class="hl opt">:</span>
  <span class="hl kwc">volatile</span> <span class="hl kwb">int</span><span class="hl opt">&amp;</span> __flag<span class="hl opt">;</span>
  ext<span class="hl opt">::</span>Trigger<span class="hl opt">&amp;</span> __trigger<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl kwd">TEST</span><span class="hl opt">(</span>Trigger<span class="hl opt">,</span> Generic<span class="hl opt">) {</span>
  <span class="hl kwc">volatile</span> <span class="hl kwb">int</span> flag <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
  ext<span class="hl opt">::</span>Trigger trigger<span class="hl opt">;</span>

  <span class="hl slc">// Создаем поток и запускаем егою</span>
  TriggerThread <span class="hl kwd">a</span><span class="hl opt">(</span>flag<span class="hl opt">,</span> trigger<span class="hl opt">);</span>
  a<span class="hl opt">.</span><span class="hl kwd">Start</span><span class="hl opt">();</span>

  <span class="hl slc">// Подождем, чтобы поток &quot;сел&quot; на Wait().</span>
  ext<span class="hl opt">::</span>PreciseTimer<span class="hl opt">::</span><span class="hl kwd">sleepMs</span><span class="hl opt">(</span><span class="hl num">10</span><span class="hl opt">);</span>
  <span class="hl slc">// Флаг не должен стать 1, так как поток</span>
  <span class="hl slc">// должен ждать на Wait().</span>
  <span class="hl kwd">EXPECT_EQ</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">, (</span><span class="hl kwb">int</span><span class="hl opt">)</span>flag<span class="hl opt">);</span>
   
  <span class="hl slc">// Информируем поток о событии.</span>
  trigger<span class="hl opt">.</span><span class="hl kwd">Signal</span><span class="hl opt">();</span>
  <span class="hl slc">// Подождем, чтобы поток успел изменить флаг на 1.</span>
  ext<span class="hl opt">::</span>PreciseTimer<span class="hl opt">::</span><span class="hl kwd">sleepMs</span><span class="hl opt">(</span><span class="hl num">10</span><span class="hl opt">);</span>
  <span class="hl slc">// Проверим, как он это сделал.</span>
  <span class="hl kwd">EXPECT_EQ</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">, (</span><span class="hl kwb">int</span><span class="hl opt">)</span>flag<span class="hl opt">);</span>

  <span class="hl slc">// Далее проверка повторяется еще пару раз, чтобы проверить,</span>
  <span class="hl slc">// что синхронизирующий объект правильно &quot;взводится&quot; после</span>
  <span class="hl slc">// срабатывания.</span>

  trigger<span class="hl opt">.</span><span class="hl kwd">Signal</span><span class="hl opt">();</span>
  ext<span class="hl opt">::</span>PreciseTimer<span class="hl opt">::</span><span class="hl kwd">sleepMs</span><span class="hl opt">(</span><span class="hl num">10</span><span class="hl opt">);</span>
  <span class="hl kwd">EXPECT_EQ</span><span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">, (</span><span class="hl kwb">int</span><span class="hl opt">)</span>flag<span class="hl opt">);</span>

  trigger<span class="hl opt">.</span><span class="hl kwd">Signal</span><span class="hl opt">();</span>
  a<span class="hl opt">.</span><span class="hl kwd">Join</span><span class="hl opt">();</span>
  <span class="hl slc">// Последняя проверка не требует ожидания, так как мы присоединись</span>
  <span class="hl slc">// к потоку, и он точно уже завершился.</span>
  <span class="hl kwd">EXPECT_EQ</span><span class="hl opt">(</span><span class="hl num">3</span><span class="hl opt">, (</span><span class="hl kwb">int</span><span class="hl opt">)</span>flag<span class="hl opt">);</span>
<span class="hl opt">}</span>
</pre>

<p>Компилируем для Windows в Visual Studio:</p>

<pre><code>cl /EHsc /I. /Fetrigger_unittest_vs2008.exe /DWIN32 runner.cpp ^
    trigger.cpp trigger_unittest.cpp pretimer.cpp thread.cpp gtest\gtest-all.cc
</code></pre>

<p>или в GCC:</p>

<pre><code>g++ -I. -o trigger_unittest_vs2008.exe runner.cpp \
   trigger.cpp trigger_unittest.cpp pretimer.cpp thread.cpp gtest/gtest-all.cc
</code></pre>

<p>Запускаем:</p>

<pre><code>[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from Trigger
[ RUN      ] Trigger.Generic
[       OK ] Trigger.Generic (31 ms)
[----------] 1 test from Trigger (47 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (78 ms total)
[  PASSED  ] 1 test.
</code></pre>

<p>Работает.</p>

<p>Внимательный читатель заметит, что по хорошему бы надо протестировать случай, когда функция <code>Signal()</code> вызывается раньше, чем слушающий поток дойдет до <code>Wait()</code>. Как сказано в комментариях, эта ситуация считается логической ошибкой и ведет к неопределенному поведению. В жизни получается так: реализация для Windows считает, что если функция <code>Signal()</code> была вызвана до <code>Wait()</code>, то <code>Wait()</code> просто тут же выходит, как бы получив сигнал сразу при старте. Реализация же под UNIX работает иначе: <code>Wait()</code> отрабатывает только те вызовы <code>Signal()</code>, которые были сделаны после начала самого <code>Wait()</code>&lsquo;а. Самое настоящее неопределенное поведение. При использовании данного класса надо помнить об этом ограничении.</p>

<p>Другие посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2009/03/19/google-test-framework-130/">Google Test Framework 1.3.0</a></li>
<li><a href="http://demin.ws/blog/russian/2009/01/26/universal-threads-for-windows-and-unix/">Универсальные потоки на С++ для Windows и UNIX</a></li>
<li><a href="http://demin.ws/blog/russian/2009/02/06/universal-mutex-in-cpp-for-windows-and-unix/">Самодельный мьютекс на C++ для Windows и UNIX</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Test Framework 1.3.0]]></title>
    <link href="http://demin.ws/blog/russian/2009/03/19/google-test-framework-130/"/>
    <updated>2009-03-19T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/03/19/google-test-framework-130/</id>
    <content type="html"><![CDATA[<p>Сегодня вышла новая версия <a href="http://code.google.com/p/googletest/">Google Test Framework</a> — <a href="http://googletest.googlecode.com/files/gtest-1.3.0.zip">1.3.0</a>.</p>

<p>Радостно, что авторы воплотили <a href="http://groups.google.com/group/googletestframework/browse_thread/thread/55f0b08a154b0afb">мою идею</a>, когда вся библиотека собирается всего в два файла: <code>gtest-all.cc</code> и <code>gtest.h</code>. Теперь для этого есть специальный скрипт на Питоне. Распаковываем архив <code>gtest-1.30.zip</code> и запускаем:</p>

<pre><code>python scripts\fuse_gtest_files.py . fuse
</code></pre>

<p>После этого во вновь созданном подкаталоге fuse будет находиться &ldquo;упакованная&rdquo; версия библиотеки в виде двух файлов <code>gtest/gtest-all.cc</code> и <code>gtest/gtest.h</code>. Моя аналогичная, но <a href="http://demin.ws/downloads/gtest-amalgamation-1.2.1.zip">ручная сборка</a> для предыдущей версии больше неактуальна.</p>

<p>Опять таки приятно, что включили <a href="http://code.google.com/p/googletest/source/detail?r=184&amp;path=/trunk/test/gtest_unittest.cc">мой микропатч</a> для возможности установки флагов командной строки прямо в исходниках тестов. Это очень удобно. Например, есть возможность печати времени работы тестов. Но по умолчанию эта функция выключена, и для ее включения надо в командной строке сказать <code>--gtest_print_time</code>. Неудобно постоянно таскать за собой этот ключ. Теперь же можно прямо в тексте тестов, например, в головном модуле, задать этот параметр:</p>

<pre class="hl">
<span class="hl ppc">#include</span> <span class="hl pps">&quot;gtest/gtest.h&quot;</span><span class="hl ppc"></span>
<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[]) {</span>
  testing<span class="hl opt">::</span><span class="hl kwd">InitGoogleTest</span><span class="hl opt">(&amp;</span>argc<span class="hl opt">,</span> argv<span class="hl opt">);</span>
  testing<span class="hl opt">::</span><span class="hl kwd">GTEST_FLAG</span><span class="hl opt">(</span>print_time<span class="hl opt">) =</span> <span class="hl kwa">true</span><span class="hl opt">;</span> 
  <span class="hl kwa">return</span> <span class="hl kwd">RUN_ALL_TESTS</span><span class="hl opt">();</span>
<span class="hl opt">}</span>
</pre>

<p>Итак, новые возможности версии 1.3.0:</p>

<ul>
<li>поддержка так называемых &ldquo;смертельных тестов&rdquo; для Windows (раньше это работало только под Linux)</li>
<li>параметр командной строки <code>--gtest_also_run_disabled_tests</code> для принудительного запуска отключенных тестов</li>
<li>возможность распараллеливать запуск тестов на разных машинах</li>
</ul>

<p>Небольшая программа ниже демонстрируем новые &ldquo;вкусности&rdquo; Google Test.</p>

<p>Файл <code>runner.cpp</code>:</p>

<pre class="hl">
<span class="hl ppc">#include</span> <span class="hl pps">&quot;gtest/gtest.h&quot;</span><span class="hl ppc"></span>

<span class="hl ppc">#include &lt;fstream&gt;</span>
<span class="hl ppc">#include &lt;iostream&gt;</span>
<span class="hl ppc">#include &lt;cstdlib&gt;</span>

<span class="hl slc">// -------------------------------------------------------</span>

<span class="hl slc">// Данная функция, если файл не существует, печатает сообщение</span>
<span class="hl slc">// об ошибке и завершает программу с ненулевым кодом.</span>
<span class="hl kwb">void</span> <span class="hl kwd">openfile</span><span class="hl opt">(</span><span class="hl kwb">const char</span><span class="hl opt">*</span> name<span class="hl opt">) {</span>
  std<span class="hl opt">::</span>ifstream <span class="hl kwd">is</span><span class="hl opt">(</span>name<span class="hl opt">);</span>
  <span class="hl kwa">if</span> <span class="hl opt">(!</span>is<span class="hl opt">) {</span>
    std<span class="hl opt">::</span>cerr <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;Unable to open the file&quot;</span> <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
    std<span class="hl opt">::</span><span class="hl kwd">exit</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span>  
  <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl slc">// Тест для функции openfile().</span>
<span class="hl kwd">TEST</span><span class="hl opt">(</span>OpenFileDeathTest<span class="hl opt">,</span> ExitIfNoFile<span class="hl opt">) {</span>
  <span class="hl slc">// Задаем заведомо несуществующий файл и смотрим - завершилась</span>
  <span class="hl slc">// ли программа с ненулевым кодом. Также проверяем регулярным</span>
  <span class="hl slc">// выражением то, что программа напечатала при выходе.</span>
  <span class="hl slc">// Мы ожидаем слово &quot;open&quot; среди остального вывода.</span>
  <span class="hl kwd">ASSERT_DEATH</span><span class="hl opt">({</span> <span class="hl kwd">openfile</span><span class="hl opt">(</span><span class="hl str">&quot;__nofile__&quot;</span><span class="hl opt">); },</span> <span class="hl str">&quot;.*open.*&quot;</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl slc">// -------------------------------------------------------</span>

<span class="hl slc">// Данная функция должна падать с assert'ом, если делитель</span>
<span class="hl slc">// равен нулю.</span>
<span class="hl kwb">int</span> <span class="hl kwd">divide</span><span class="hl opt">(</span><span class="hl kwb">int</span> a<span class="hl opt">,</span> <span class="hl kwb">int</span> b<span class="hl opt">) {</span>
  <span class="hl kwa">assert</span><span class="hl opt">(</span>b <span class="hl opt">!=</span> <span class="hl num">0</span><span class="hl opt">);</span>
  <span class="hl kwa">return</span> a <span class="hl opt">/</span> b<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl slc">// Тест для assert'а в функции divide().</span>
<span class="hl kwd">TEST</span><span class="hl opt">(</span>AssertDeathTest<span class="hl opt">,</span> DivideByZero<span class="hl opt">) {</span>
  <span class="hl slc">// Задаем нулевой делитель и смотрим - упала или нет.</span>
  <span class="hl slc">// Вывод программы при падении не проверяем.</span>
  <span class="hl kwd">ASSERT_DEATH</span><span class="hl opt">({</span> <span class="hl kwd">divide</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">); },</span> <span class="hl str">&quot;&quot;</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl slc">// -------------------------------------------------------</span>

<span class="hl slc">// Данная функция должна при ненулевом коде завершать</span>
<span class="hl slc">// программу, прибавив к заданному коду ошибки 50.</span>
<span class="hl kwb">void</span> <span class="hl kwd">abandon</span><span class="hl opt">(</span><span class="hl kwb">int</span> code<span class="hl opt">) {</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>code <span class="hl opt">!=</span> <span class="hl num">0</span><span class="hl opt">)</span> std<span class="hl opt">::</span><span class="hl kwd">exit</span><span class="hl opt">(</span>code <span class="hl opt">+</span> <span class="hl num">50</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl slc">// Тест для функции abandon().</span>
<span class="hl kwd">TEST</span><span class="hl opt">(</span>AbandonDeathTest<span class="hl opt">,</span> ExitCode<span class="hl opt">) {</span>
  <span class="hl slc">// Вызываем функцию и смотрим код возврата.</span>
  <span class="hl slc">// Вывод программы при выходе не проверяем.</span>
  <span class="hl kwd">ASSERT_EXIT</span><span class="hl opt">(</span><span class="hl kwd">abandon</span><span class="hl opt">(</span><span class="hl num">200</span><span class="hl opt">),</span> testing<span class="hl opt">::</span><span class="hl kwd">ExitedWithCode</span><span class="hl opt">(</span><span class="hl num">250</span><span class="hl opt">),</span> <span class="hl str">&quot;&quot;</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl slc">// -------------------------------------------------------</span>

<span class="hl slc">// Заведомо неработающий “сломанный” тест.</span>
<span class="hl slc">// Если имя группы тестов или теста в отдельности предварить</span>
<span class="hl slc">// словом DISABLED_, то тест не будет участвовать с запуске.</span>
<span class="hl slc">// Это удобно, когда какой-то тест сломан, времени на его</span>
<span class="hl slc">// отладку нет, но убирать его из тестирования совсем нельзя.</span>
<span class="hl slc">// В это случае его можно отключить. Google Test при каждом</span>
<span class="hl slc">// запуске будет напоминать, сколько имеется отключенных тестов.</span>
<span class="hl slc">// В процессе же работы над тестом можно запускать программу</span>
<span class="hl slc">// с параметром &quot;--gtest_also_run_disabled_tests&quot;, который</span>
<span class="hl slc">// будет проверять также и отключенные тесты.</span>
<span class="hl kwd">TEST</span><span class="hl opt">(</span>BadTest<span class="hl opt">,</span> DISABLED_Test<span class="hl opt">) {</span>
  <span class="hl kwd">FAIL</span><span class="hl opt">();</span>
<span class="hl opt">}</span>

<span class="hl slc">// -------------------------------------------------------</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[]) {</span>
  testing<span class="hl opt">::</span><span class="hl kwd">InitGoogleTest</span><span class="hl opt">(&amp;</span>argc<span class="hl opt">,</span> argv<span class="hl opt">);</span>
  <span class="hl slc">// Принудительно печатаем время работы тестов.</span>
  testing<span class="hl opt">::</span><span class="hl kwd">GTEST_FLAG</span><span class="hl opt">(</span>print_time<span class="hl opt">) =</span> <span class="hl kwa">true</span><span class="hl opt">;</span>
  <span class="hl kwa">return</span> <span class="hl kwd">RUN_ALL_TESTS</span><span class="hl opt">();</span>
<span class="hl opt">}</span>
</pre>

<p>Компилируем в Visual Studio:</p>

<pre><code>cl /EHsc /I. /Ferunner_vs2008.exe /DWIN32 runner.cpp gtest\gtest-all.cc
</code></pre>

<p>Запускаем:</p>

<pre><code>[==========] Running 3 tests from 3 test cases.
[----------] Global test environment set-up.
[----------] 1 test from OpenFileDeathTest
[ RUN      ] OpenFileDeathTest.ExitIfNoFile
[       OK ] OpenFileDeathTest.ExitIfNoFile (31 ms)
[----------] 1 test from OpenFileDeathTest (31 ms total)

[----------] 1 test from AssertDeathTest
[ RUN      ] AssertDeathTest.DivideByZero
[       OK ] AssertDeathTest.DivideByZero (31 ms)
[----------] 1 test from AssertDeathTest (31 ms total)

[----------] 1 test from AbandonDeathTest
[ RUN      ] AbandonDeathTest.ExitCode
[       OK ] AbandonDeathTest.ExitCode (32 ms)
[----------] 1 test from AbandonDeathTest (32 ms total)

[----------] Global test environment tear-down
[==========] 3 tests from 3 test cases ran. (94 ms total)
[  PASSED  ] 3 tests.

  YOU HAVE 1 DISABLED TEST
</code></pre>

<p>Отлично, все работает. Также не забудем, что у нас таки есть один отключенный тест. Его можно запустить принудительно, использовав ключ <code>--gtest_also_run_disabled_tests</code>:</p>

<pre><code>runner_vs2008.exe --gtest_also_run_disabled_tests
</code></pre>

<p>Получим следующее:</p>

<pre><code>[==========] Running 4 tests from 4 test cases.
[----------] Global test environment set-up.
[----------] 1 test from OpenFileDeathTest
[ RUN      ] OpenFileDeathTest.ExitIfNoFile
[       OK ] OpenFileDeathTest.ExitIfNoFile (31 ms)
[----------] 1 test from OpenFileDeathTest (31 ms total)

[----------] 1 test from AssertDeathTest
[ RUN      ] AssertDeathTest.DivideByZero
[       OK ] AssertDeathTest.DivideByZero (32 ms)
[----------] 1 test from AssertDeathTest (32 ms total)

[----------] 1 test from AbandonDeathTest
[ RUN      ] AbandonDeathTest.ExitCode
[       OK ] AbandonDeathTest.ExitCode (31 ms)
[----------] 1 test from AbandonDeathTest (31 ms total)

[----------] 1 test from BadTest
[ RUN      ] BadTest.DISABLED_Test
runner.cpp(72): error: Failed
[  FAILED  ] BadTest.DISABLED_Test (0 ms)
[----------] 1 test from BadTest (0 ms total)

[----------] Global test environment tear-down
[==========] 4 tests from 4 test cases ran. (94 ms total)
[  PASSED  ] 3 tests.
[  FAILED  ] 1 test, listed below:
[  FAILED  ] BadTest.DISABLED_Test

 1 FAILED TEST
</code></pre>

<p>Под занавес отмечу, что появился еще один новый ключ командной строки <code>--gtest_help</code> для печати на экран всех весьма многочисленных параметров Google Test.</p>

<p>Я уже обновился до версии 1.3.0, а вы?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Включение/выключение proxy в Internet Explorer]]></title>
    <link href="http://demin.ws/blog/russian/2009/03/19/on-off-proxy-in-internet-explorer/"/>
    <updated>2009-03-19T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/03/19/on-off-proxy-in-internet-explorer/</id>
    <content type="html"><![CDATA[<p>Иногда таки приходится пользоваться Internet Explorer&rsquo;ом (всякие сайты кривые, web-интерфейсы некоторых роутеров и т.д.).</p>

<p>Для включения/выключения proxy надо лазать в меню, что долго и неудобно. Лично мне удобнее просто скрипт запустить.</p>

<p>Кстати, гугловский Chrome по каким-то причинам использует настройки интернета от IE (системные для всего Windows), поэтому все сказанное актуально и для него.</p>

<p>Итак, привожу два скрипта для включения и отключения proxy в системных настройках интернета в Windows.</p>

<p>Файл <code>iepon.cmd</code>:</p>

<pre class="hl">
reg add <span class="hl str">&quot;HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings&quot;</span> <span class="hl opt">/</span>v ProxyEnable <span class="hl opt">/</span>t REG_DWORD <span class="hl opt">/</span>d <span class="hl num">1</span> <span class="hl opt">/</span>f
</pre>

<p>Файл <code>iepoff.cmd</code>:</p>

<pre class="hl">
reg add <span class="hl str">&quot;HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings&quot;</span> <span class="hl opt">/</span>v ProxyEnable <span class="hl opt">/</span>t REG_DWORD <span class="hl opt">/</span>d <span class="hl num">0</span> <span class="hl opt">/</span>f
</pre>

<p>Я проверял это только в Windows XP.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming WTF]]></title>
    <link href="http://demin.ws/blog/russian/2009/03/17/programming-wtf/"/>
    <updated>2009-03-17T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/03/17/programming-wtf/</id>
    <content type="html"><![CDATA[<p>Когда вы в приступе ярости при тщетных попытках заставить чужой код работать вдруг захотели громогласным криком сообщить окружающим, что вы работате среди некомпетентных дураков, и только вы один такой тут красивый д&rsquo;Артаньян, можно так и сделать — и пар выпустите, и коллеги вас поймут и поддержат.</p>

<p>Потом можно для снятия умственного напряжения и для еще большого подняния самооценки полистать сообщество &ldquo;<a href="http://community.livejournal.com/code_wtf/">Programming WTF</a>&rdquo;.</p>

<p>Начав с известной нетленки для проверки условия <code>i &lt; 10</code>:</p>

<pre class="hl">
<span class="hl kwb">uint</span> i<span class="hl opt">;</span>
<span class="hl opt">...</span>
<span class="hl kwa">if</span> <span class="hl opt">(</span>i<span class="hl opt">.</span><span class="hl kwd">ToString</span><span class="hl opt">().</span>Length <span class="hl opt">==</span> <span class="hl num">1</span><span class="hl opt">)</span>
<span class="hl opt">{</span>
  <span class="hl opt">...</span>
<span class="hl opt">}</span>
</pre>

<p>можно постепенно усиливать ощущения&hellip;</p>

<pre class="hl">
std<span class="hl opt">::</span>string str1<span class="hl opt">;</span>
std<span class="hl opt">::</span>string str2<span class="hl opt">;</span>
<span class="hl opt">...</span>
<span class="hl kwa">if</span> <span class="hl opt">(!</span><span class="hl kwd">strcmp</span><span class="hl opt">(</span>str1<span class="hl opt">.</span><span class="hl kwd">c_str</span><span class="hl opt">(),</span> str2<span class="hl opt">.</span><span class="hl kwd">c_str</span><span class="hl opt">()))</span>
<span class="hl opt">{</span>
   <span class="hl opt">...</span>
<span class="hl opt">}</span>
</pre>

<p>вставляя в код противопехотные мины&hellip;</p>

<p><img src="http://demin.ws/images/blog/wtf-get_random_number.png" /></p>

<p>различного радиуса поражения&hellip;</p>

<pre class="hl">
<span class="hl ppc">#define bool BOOL</span>
</pre>

<p>и убойной силы.</p>

<pre class="hl">
<span class="hl opt">&lt;</span>?
<span class="hl kwd">define</span><span class="hl opt">(</span> <span class="hl str">&quot;FALSE&quot;</span><span class="hl opt">, -</span><span class="hl num">1</span> <span class="hl opt">);</span>
<span class="hl kwd">define</span><span class="hl opt">(</span> <span class="hl str">&quot;TRUE&quot;</span><span class="hl opt">,</span> <span class="hl num">0</span> <span class="hl opt">);</span>
?<span class="hl opt">&gt;</span>
</pre>

<p>А вот это для настоящих гурманов и знатоков своего дела:</p>

<pre class="hl">
<span class="hl ppc">#define sizeof(x) rand()</span>
</pre>

<p>После того, как вы, обойдя вашу систему ревизий кода, чтобы никто не заметил засады, добавили это в какой-нибудь тихий, но повсеместно используемый файл ваших коллег смело идите покурить. Не думаю, что удасться выкурить в тишине хотя бы одну сигарету.</p>

<p>Теперь ваши коллеги тоже снимут стресс и напряжение.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Какой конструктор когда вызывается в С++]]></title>
    <link href="http://demin.ws/blog/russian/2009/03/15/constructor-call-in-cpp/"/>
    <updated>2009-03-15T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/03/15/constructor-call-in-cpp/</id>
    <content type="html"><![CDATA[<p>С++ имеет весьма разнообразный синтаксис для конструирования объектов. Надо признать, что порой этот синтаксис весьма неочевиден, и многие вещи надо просто знать, нежели догадаться, как они работают. Например:</p>

<pre class="hl">
<span class="hl kwc">class</span> T <span class="hl opt">{...};</span>
<span class="hl opt">...</span>
T t <span class="hl opt">=</span> <span class="hl kwd">T</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span>
</pre>

<p>По очевидной логике вещей данный код должен при создании экземпляра класса <code>T</code> вызвать конструктор по умолчанию (без аргументов), затем создать временный объект с помощью конструктора с одним аргументом и скопировать его в исходный объект перегруженным оператором копирования (или может конструктором копирования? ведь слева и справа объекты явно типа <code>T</code>&hellip;).</p>

<p>К сожалению, тут невозможно просто догадаться по логике, тут надо знать, как это прописано в стандарте. Все эти &ldquo;тонкости&rdquo; конечно очевидны для профессионала, но у начинающих это порой вызывает непонимание, и как следствие использование однажды опробованных штампов &ldquo;так работает&rdquo; без какой-либо попытки что-то изменить.</p>

<p>Именно для таких случаев я обычно даю следующий пример, который покрывает часто используемые варианты создания объектов. Разобрав его один раз целиком, можно использовать его как подсказку в будущем, когда опять возникает вопрос &ldquo;а что ж здесь будет вызвано: конструктор или оператор копирования?&hellip;&ldquo;.</p>

<p>Итак, файл <code>ctor.cpp</code>:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;iostream&gt;</span>

<span class="hl kwc">class</span> T <span class="hl opt">{</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl kwd">T</span><span class="hl opt">() {</span> std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;T()&quot;</span> <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">; }</span>
  <span class="hl kwd">T</span><span class="hl opt">(</span><span class="hl kwb">int</span><span class="hl opt">) {</span> std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;T(int)&quot;</span> <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">; }</span>
  <span class="hl kwd">T</span><span class="hl opt">(</span><span class="hl kwb">int</span><span class="hl opt">,</span> <span class="hl kwb">int</span><span class="hl opt">) {</span> std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;T(int, int)&quot;</span> <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">; }</span>
  <span class="hl kwd">T</span><span class="hl opt">(</span><span class="hl kwb">const</span> T<span class="hl opt">&amp;) {</span> std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;T(const T&amp;)&quot;</span> <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">; }</span>
  <span class="hl kwb">void</span> <span class="hl kwc">operator</span><span class="hl opt">=(</span><span class="hl kwb">const</span> T<span class="hl opt">&amp;)</span> 
    <span class="hl opt">{</span> std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;operator=(const T&amp;)&quot;</span> <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">; }</span>
<span class="hl opt">};</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;T t1           : &quot;</span><span class="hl opt">;</span> T t1<span class="hl opt">;</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;T t2(1)        : &quot;</span><span class="hl opt">;</span> T <span class="hl kwd">t2</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;T t3 = 1       : &quot;</span><span class="hl opt">;</span> T t3 <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;T t4 = T(1)    : &quot;</span><span class="hl opt">;</span> T t4 <span class="hl opt">=</span> <span class="hl kwd">T</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;T t5(1, 2)     : &quot;</span><span class="hl opt">;</span> T <span class="hl kwd">t5</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">);</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;T t6 = T(1, 2) : &quot;</span><span class="hl opt">;</span> T t6 <span class="hl opt">=</span> <span class="hl kwd">T</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">);</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;T t7; t7 = 1   : &quot;</span><span class="hl opt">;</span> T t7<span class="hl opt">;</span> t7 <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;T t8; t8 = T(1): &quot;</span><span class="hl opt">;</span> T t8<span class="hl opt">;</span> t8 <span class="hl opt">=</span> <span class="hl kwd">T</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;T t9(t8)       : &quot;</span><span class="hl opt">;</span> T <span class="hl kwd">t9</span><span class="hl opt">(</span>t8<span class="hl opt">);</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;T t10 = 'a'    : &quot;</span><span class="hl opt">;</span> T t10 <span class="hl opt">=</span> <span class="hl str">'a'</span><span class="hl opt">;</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Компилируем, например в Visual Studio:</p>

<pre><code>cl /EHsc ctor.cpp
</code></pre>

<p>и запускаем:</p>

<pre><code>T t1           : T()
T t2(1)        : T(int)
T t3 = 1       : T(int)
T t4 = T(1)    : T(int)
T t5(1, 2)     : T(int, int)
T t6 = T(1, 2) : T(int, int)
T t7; t7 = 1   : T()
T(int)
operator=(const T&amp;)
T t8; t8 = T(1): T()
T(int)
operator=(const T&amp;)
T t9(t8)       : T(const T&amp;)
T t10 = 'a'    : T(int)
</code></pre>

<p>Видно, что во всех этих &ldquo;разнообразных&rdquo; способах создания объекта всегда вызывался непосредственно конструктор, а не оператор копирования. Оператор же копирования был вызван только когда знак присваивания использовался явно в отдельном от вызова конструктора операторе. То есть знак &ldquo;=&rdquo;, используемый в операторе конструирования объекта так или иначе приводит к вызову конструкторов, а не оператора копирования. И это происходит вне зависимости от какой-либо оптимизации, проводимой компилятором.</p>

<p>Также интересно, как был создана переменная <code>t10</code>. Видно, что для символьной константы компилятор &ldquo;подобрал&rdquo; наиболее подходящий конструктор. Неявным образом был вызвал конструктор от <code>int</code>. Если подобное поведение не входит в ваши планы, и вам совсем не нужно, чтобы конструктор от <code>int</code> вызывался, когда идет попытка создать объект от типа, который может быть неявно преобразован в <code>int</code>, например <code>char</code>, то можно воспользоваться ключевым словом <code>explicit</code>:</p>

<pre class="hl">
<span class="hl kwc">class</span> T <span class="hl opt">{</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl opt">...</span>
  <span class="hl kwc">explicit</span> <span class="hl kwd">T</span><span class="hl opt">(</span><span class="hl kwb">int</span><span class="hl opt">) {</span> std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;T(int)&quot;</span> <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">; }</span>
  <span class="hl opt">...</span>
<span class="hl opt">};</span>
</pre>

<p>Это запретит какое-либо неявное преобразования для аргумента этого конструктора.</p>

<p>Вообще практика объявления любого конструктора с одним параметром со модификатором <code>explicit</code> является весьма полезной, и позволяет избежать некоторых неприятных сюрпризов, например, если вы хотели вызвать конструктор строки от типа <code>char</code>, предполагая создать строку, состоящую только из одного символа, а получилось, что этот класс не имеет такого конструктора. Зато есть конструктор от <code>int</code>, делающий совершенно не то, что вам нужно. Вот и будет сюрприз в виде символьной константы, истолкованной как целое число.</p>

<p>Я обычно по умолчанию пишу <code>explicit</code> для конструкторов с одним параметром, и очень редко приходится потом убирать этого слово. Тут как со словом <code>const</code> — сначала можно написать, а потом уже думать нужно ли тут его убрать или нет.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA["Легкая" интеграция Perforce в Visual Studio]]></title>
    <link href="http://demin.ws/blog/russian/2009/03/11/lightweight-integration-of-perforce-to-visual-studio/"/>
    <updated>2009-03-11T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/03/11/lightweight-integration-of-perforce-to-visual-studio/</id>
    <content type="html"><![CDATA[<p>Одной из многочисленных прелестей использования системы контроля версий является возможность четко понимать, какие файлы ты изменил в процессе работы. Конечно, всегда можно сделать глобальный <code>diff</code> по всем файлам проекта на сервере, но это может занимать минуты при большом проекте.</p>

<p>Например, в <a href="http://perforce.com">Perforce</a>, как и во многих других системах контроля версий это решается выставлением атрибута <code>read-only</code> по умолчанию на все локальные файлы, находящиеся под контролем версий. Это позволяет исключить “случайное” изменение. Если надо изменить файл, то он помечается как рабочий (в Perforce <code>p4 edit имя_файла</code>). После этого с файла снимается флаг <code>read-only</code>, и Perforce добавляет его список &ldquo;открытых&rdquo; файлов. Теперь, когда вы хотите узнать, какие файлы у вас сейчас на редактировании, то команда Perforce <code>p4 opened</code> моментально выдаст список без глобального сканирования изменений. Также <code>p4 diff</code> столь же мгновенно отобразит сами изменения. По началу, такой подход может напрягать, и я часто слышу жалобы типа проще открыть сразу весь проект по маске через <code>p4 edit ...</code>, поработать спокойно, а уже под занавес сделать полное сканирование изменений для определений реально измененных файлов и только их отправить на сервер командой <code>p4 submit</code>.</p>

<p>Я постоянно борюсь с таким подходом, так как чаще всего это приводит к тому, что человек забывает отделить реально измененные файлы от остальных, а Perforce как солдат — ему сказали поместить открытые для редактирование файлы на сервер, он и помещает (может в этом есть какая-то задумка пользователя). И получается, что в набор изменений попадают неизмененные файлы. С точки зрения целостности системы проблем нет, но вот при анализе проблемных изменений начинается кошмар, как надо вручную отсеивать нетронутые файлы. Кроме того, неосторожная работы по маске часто приводит к появлению в репозитории временных файлов, которых не заметили или забыли при записи измененных файлов на сервер. Конечно, их можно вычистить потом, но проще сразу их туда просто не класть.</p>

<p>Perforce предоставляет специальный плагин для Visual Studio, который призван облегчить процесс работы с файлами, находящимися под контролем версий. Вы просто работаете в среде, и когда нужно изменить какой-то файл (например, вы просто начали что-то набивать в окне редактора), то студия сама предложить вам открыть файл для редактирования. Вы скажете &ldquo;Да&rdquo;, и файл открывается для работы. В жизни же все обычно отключают этот надоедливый запрос, разрешая по умолчанию открывать файлы без запроса. И мы снова приходим к варианту, когда имеется огромное количество открытых файлов, а изменены только несколько. Поэтому я предпочитаю не ставить этот плагин, а открыть файлы вручную.</p>

<p>Конечно, работая в студии, не всегда удобно постоянно лазить в командную строку для <code>p4 edit ...</code>. Хочется делать это прямо из меню. Способ есть, и никакой шибко умный плагин не нужен.</p>

<p>Идем в меню <code>Tools</code>, затем в <code>External tool...</code>. Далее создаем кнопкой <code>Add</code> элементы <code>&amp;P4 Edit</code> (Arguments: <code>edit $(ItemPath)</code>), <code>&amp;P4 Revert</code> (Arguments: <code>revert $(ItemPath)</code>), <code>&amp;P4 Diff</code> (Arguments: <code>diff $(ItemPath)</code>) по аналогии с картинкой.</p>

<p><img src="http://demin.ws/images/blog/lightweight-p4-integration-to-vs.gif" /></p>

<p>Теперь для открытия за запись файла из текущего окна редактирования надо выбрать в меню <code>Tools-&gt;P4 Edit</code>, для отката изменений — <code>Tools-&gt;P4 Revert</code>, а для просмотра изменений — <code>Tools-&gt;P4 Diff</code>.</p>

<p>Вывод этих команд сохраняется в окне <code>Output</code>.</p>

<p>По вкусу можно добавить аналогичным образом любую команду из арсенала командного клиента Perforce <code>p4</code>, но именно эти обычно нужны в 99% случаев. Я обычно назначаю горячие клавиши на эти пункты меню. Для остального можно уже слазить в командную строку или в графический клиент Perforce (<code>P4V</code> или <code>P4Win</code>).</p>

<p>Правда, если вам потребуется изменить файл проекта или солюшена, то это придется делать либо в командной строке или в графическом клиенте <code>P4V</code>.</p>

<p>Лично для меня подобная схема привносит порядок в работу. Я четко знаю, что я изменил, и могу быстренько пробежаться глазами по изменениям перед отправкой их на сервер, отсеив пару-тройку файлов, которые я открыл таки для редактирование, но в этоге не менял.</p>

<p>И под занавес выскажу свое мнение про графический интерфейс для систем контроля версий. Мы используем Perforce. Да, это централизованная система, а не распределенная, как модно сейчас, но для корпоративной разработки так проще. Perforce хорош. Есть шероховатости, но с ними можно жить.</p>

<p>Лично предпочитаю &ldquo;разговаривать&rdquo; с Perforce через командную строку, ибо в командной строке можно сделать все, и удобно, когда надо выполнить много рутинных однотипных операций. Но есть один случай, когда именно графический клиент становится настоящим спасением. Это случай слияний изменений и разрешения конфликтов. Проблемы начинаются, когда ты хочешь зафиксировать на сервере свои изменения, а там уже кто-то &ldquo;потрогал&rdquo; твои файлы. Это называется конфликт, и его надо разрешать. Делать это в обычном текстовом редакторе, особенно когда конфликтуют сотни пересекающихся строк, практически нереально. Очень медленно, и вероятность ошибки огромна. В Perforce есть удивительная графическая программа для сравнения и слияния изменений. Обычно, если конфликтующие строки не пересекаются, Perforce сам автоматически смешает в правильном порядке. Если же есть пересекающиеся конфликты, то тут уже нужен человек для понимания, что выкинуть, а что оставить.</p>

<p>Утилита слияния в Perforce предоставляет для этого очень удобный сервис. На уровне строк можно выбирать нужные для включения в слияние. В окне одновременно отображаются три исходника: твой текущий, твой базовый, на основе которого ты делал изменения, и текущий из репозитория, с которым и возникает конфликт. А под этим всем внизу отображается результат слияния. Все подсвечивается разными цветами, максимально облегчая выбор правильного варинта. Я даже не знаю, как это может быть еще лучше сделано. Даже изобилующие конфликтами слияния между целыми ветками (например, из рабочей ветки в основную, где уже успели исправить порядочно ошибок) у нас делаются за несколько часов.</p>

<p>Приятно, что графический клиент Perforce <code>P4V</code> существует не только под Windows (в отличие от старого <code>P4Win</code>). Он есть под Linux, Solaris, FreeBSD и Mac. Если надо работать сразу под несколькими системам, можно запустить у себя на машине X-сервер, и видеть клиентов со всех платформ одновременно. <code>P4V</code> использует <a href="http://www.qtsoftware.com/">Qt</a>, посему выглядит почти одинаково на всех системах.</p>

<p>Кстати, выскажу свое субъективное мнение на тему контроля версий. Если бы мне продавали исходники чего-то сложного, то для меня было бы очень важным критерием среди прочих наличие не только вылизанной для продажи &ldquo;последней супер версии&rdquo;, но и всей истории разработки, в формате какой-нибудь системы контроля версий и баг-трекинга.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sizeof('a') в С и C++]]></title>
    <link href="http://demin.ws/blog/russian/2009/03/09/sizeof-in-c-and-cpp/"/>
    <updated>2009-03-09T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/03/09/sizeof-in-c-and-cpp/</id>
    <content type="html"><![CDATA[<p>В очередной раз <a href="http://alenacpp.blogspot.com/2009/03/sizeofa.html">узнал</a> для себя новый потенциальный вопрос для &ldquo;прогиба&rdquo; на каком-нибудь тесте по языку С.</p>

<p>Программа <code>x.c</code>:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;stdio.h&gt;</span>
<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
  <span class="hl kwb">char</span> s<span class="hl opt">[</span><span class="hl num">4</span><span class="hl opt">];</span>
  s<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] =</span> <span class="hl str">'C'</span><span class="hl opt">;</span> s<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] =</span> s<span class="hl opt">[</span><span class="hl num">2</span><span class="hl opt">] =</span> <span class="hl str">'+'</span><span class="hl opt">;</span> s<span class="hl opt">[</span><span class="hl num">3</span><span class="hl opt">] =</span> <span class="hl num">0</span><span class="hl opt">;</span>
  s<span class="hl opt">[</span><span class="hl kwa">sizeof</span><span class="hl opt">(</span><span class="hl str">' '</span><span class="hl opt">) ^</span> <span class="hl num">5</span><span class="hl opt">] =</span> <span class="hl num">0</span><span class="hl opt">;</span>
  <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;%s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> s<span class="hl opt">);</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Компилируем и запускаем.</p>

<p>Visual Studio:</p>

<pre><code>cl x.c &amp;&amp; x
</code></pre>

<p>или в Cygwin:</p>

<pre><code>gcc -o x x.c &amp;&amp; x
</code></pre>

<p>Имеем следующий результат:</p>

<pre><code>C
</code></pre>

<p>А теперь так:</p>

<pre><code>cl /TP x.c &amp;&amp; x
</code></pre>

<p>или в Cygwin:</p>

<pre><code>g++ -o x x.c &amp;&amp; x
</code></pre>

<p>Теперь программа печает иное:</p>

<pre><code>C++
</code></pre>

<p>Результат повеселил некоторых моих коллег.</p>

<p>Нашел небольшой список еще некоторых &ldquo;<a href="http://grprakash.googlepages.com/confusion">отличий</a>&rdquo; С и С++, но, пожалуй, этот самый неявный, а значит потенциально опасный.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Загрузка Linux без ядра за 25 секунд]]></title>
    <link href="http://demin.ws/blog/russian/2009/03/08/boot-linux-without-kernel-in-25-seconds/"/>
    <updated>2009-03-08T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/03/08/boot-linux-without-kernel-in-25-seconds/</id>
    <content type="html"><![CDATA[<p>Естественно, загрузиться Linux совсем без ядра не может. Но он может загрузиться не имея в начале процесса загрузки ядра в двоичном виде. А откуда же берется ядро? Ядро компилируется прямо при загрузке!</p>

<p>Вы думаете, такая загрузка будет длиться годы? ну или хотя бы минуты? Нет. На все про все — 25 секунд с хвостиком.</p>

<p>Итак, по порядку.</p>

<p>Все знают <a href="http://bellard.org/qemu/">QEMU</a> — бесплатная виртуальная машина. Из нее, например, вырос пакет <a href="http://www.virtualbox.org/">VirtualBox</a>, а <a href="http://www.linux-kvm.com/">KVM</a> унаследовал интерфейс командной строки. Это чистый виртуализатор без всяких там “пара-” приставок. Из-за этого работает небыстро и для критичных по скорости задач слабо применимо, но с другой стороны из-за “чистоты” виртуализации работает на многих платформах и виртуализирует многие платформы, а не только Intel, как большинство “быстрых” виртуальных машин. Из-за все сказанного, QEMU идеален для всякого рода экспериментов и нестандартных задач.</p>

<p>Но мы отвлеклись. Автор QEMU — <a href="http://bellard.org/">Fabrice Bellard</a> — написал еще нескольно занимательных программ.</p>

<p>Одной из них является TCC — <a href="http://bellard.org/tcc/">Tiny C Compiler</a>. Это ультра быстрый и ультра маленький компилятор С. Сразу возникает подозрение — слово “tiny” в название, да еще и “ультра быстрый” и “ультра маленький”. Главный вопрос — какие у него ограничения?</p>

<p>Как заявляет автор, TCC полностью поддерживает стандарт языка С вплоть до <a href="http://ru.wikipedia.org/wiki/C99">ISO C99</a> включительно, но целевая платформа только x86. Компилятор имеет также мини версию системной библиотеки <code>libc</code>. Когда это возможно, компилятор совмещает фазы компилирования, ассемблирования и линковки для дополнительного ускорения, хотя поддерживаются стандартные <a href="http://ru.wikipedia.org/wiki/ABI">ABI</a> и можно подлинковать что-то готовое.</p>

<p>Компилятор доступен в исходных текстах и в двоичном виде под Windows. Скомпилировать его можно вручную, например, самим же TCC.</p>

<p>Нужно на чем-нибудь проверить TCC, на чем-нибудь нетривиальном. Ядро Linux&rsquo;а является весьма сложным и большим проектом, это его сборка была бы отличной проверкой.</p>

<p>TCC не только успешно собирает ядро, но и делает это до 9 раз быстрее, чем GCC (естественно, речь идет только о платформе x86).</p>

<p>Невероятная скорость компиляции позволяет использовать TCC как компилирующий “интерпретатор” скриптов. Если добавить первой строкой вашей программы на С строчку <code>#!/usr/local/bin/tcc –run</code> и установить флаг <code>executable</code> на исходник, то ваша программа будет запущена в UNIX’е прямо из исходного текста, будучи скомпилированной на лету.</p>

<p>Мы подходим к сути. Автор предлагает вариант загрузки Linux, когда ядро компилируется прямо в процессе загрузки из исходных текстов. Проект называется <a href="http://bellard.org/tcc/tccboot.html">TCCBOOT</a>. Можно <a href="http://bellard.org/tcc/tccboot.iso">скачать ISO имидж</a> (около 6 мегабайт), записать на болванку, загрузиться с нее и увидеть все самому. Что я и сделал.</p>

<p>Загрузчик ISOLINUX запускает мини образ, в котором содержится TCC, исходники ядра и минимальное окружение для запуска командного интерпретатора под скомпилированным на лету ядром.</p>

<p>Поехали…</p>

<p>Старт, запустился ISOLINUX, началась компиляция ядра:</p>

<p><img src="http://demin.ws/images/blog/tccboot-started.jpg" /></p>

<p>Все, за 25.4 секунды ядро скомпилировано, запущено, и загружена минимальная UNIX система:</p>

<p><img src="http://demin.ws/images/blog/tccboot-finished.jpg" /></p>

<p>Все, за 25.4 секунды ядро скомпилировано, запущено, и загружена минимальная UNIX система:</p>

<p>Фотографии я делал с рук, так что немного коряво выглядит. Можно было, конечно, все это проделать под виртуальной машиной, тогда бы и скриншоты были бы красивее, но пропало бы ощущение самого главного — чудовищной скорости. Забавно, на первом снимке видно, что строка отображения имен компилируемых файлов смазана — так все “летает”.</p>

<p>Эксперимент проводился на ноутбуке Core 2 1GHz, 2GB RAM.</p>

<p>Я был очень впечатлен. А если в TCC нормально поддержать многопроцессорность? Тут недалеко и до полностью функциональной операционной системы, у которой нет двоичного представления до загрузки.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Саморазархивирующиеся архивы для UNIX]]></title>
    <link href="http://demin.ws/blog/russian/2009/03/06/self-extractring-archives-on-unix/"/>
    <updated>2009-03-06T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/03/06/self-extractring-archives-on-unix/</id>
    <content type="html"><![CDATA[<p>Когда ты поставляешь софт под UNIX, редко бывает ситуация, когда на стороне заказчика в группе сопровождения вообще нет людей, знакомых с UNIXом. Так или иначе, стиль этой операционной системы заставляет работать с командной строкой и знать хотя бы базовые команды. Тут порой недостаточно просто &ldquo;кликнуть на файл с дистрибутивом&rdquo;. Не буду говорить, как это хорошо или плохо для заказчика — это его выбор, но для нас, поставщиков, это удобно. Удобно, когда &ldquo;с той стороны&rdquo; есть люди, которым достаточно сказать типа возьмите tar-архив, разверните в такой то директории, проверьте права и замените такие-то бинарники.</p>

<p>Но порой нужно таки сделать &ldquo;а-ля&rdquo; коробочную установку в стиле &ldquo;взял один файл-архив, запустил и получил результат&rdquo;. Ситуация усугубляется, когда все это надо делать под разными сортами UNIXа. Конечно, есть вариант написать этого зверя на Java. На ней можно сделать установщик еще и графическим. Нужно только, чтобы эта Java была у заказчика, то есть опять тема простоты уходит. Нужно что-то простое и легковесное.</p>

<p>Небольшой анализ привел меня к <a href="http://megastep.org/makeself/">makeself</a>. В двух словах — это саморазархивирующиеся shell-скрипты. То есть вы готовите процедуру установки, сводите все к наличию каталога со всеми необходимыми файлами, и, если нужно, скриптом, которые надо запустить после разархивации. Все как у так называемых SFX (self extract) модулей для WinRAR, например. Прелесть в том, что в итоге вы получаете одиночный файл, который является абсолютно стандартным shell-скриптом, работающим в большом количестве типов UNIX, и который также содержит внутри себя архив с вашими файлами. Все, что нужно сделать на стороне клиента, это запустить этот файл.</p>

<p>Допустим, вы подготовили ваш дистрибутив в каталоге <code>/home/sandbox/intallation</code>. Также у вас есть скрипт <code>./setup</code>, который необходимо запустить после разархивации для локальной настройки, например. Все, что вы делаете:</p>

<pre><code>makeself.sh /home/sandbox/installation megasoft-0.0.1.sh &quot;Mega Software 0.0.1&quot; ./setup
</code></pre>

<p>Данная команда создаст файл <code>megasoft-0.0.1.sh</code>, в который упакуется содержимое каталога <code>/home/sandbox/intallation</code> и скрипт <code>./setup</code>. Теперь все, что надо сделать на стороне клиента, это запустить это файл командой:</p>

<pre><code>. ./megasoft-0.0.1.sh
</code></pre>

<p>Скрипт разархивирует собственное содержимое и запустит ваш скрипт setup, который сможет окончательно настроить установку.</p>

<p><code>makeself</code> позволяет использовать для компрессии стандартные средства UNIX на выбор — compress, gzip, bzip2. Также содержимое архива дополнительно защищается контрольными суммами: MD5 или CRC. Это может быть полезно, если вы не используете компрессию, а целостность данных проверять все же хотите.</p>

<p>Список же поддерживаемых типов UNIX для текущей версии 2.1 весьма внушителен:</p>

<ul>
<li>Linux (all distributions)</li>
<li>Sun Solaris (8 tested)</li>
<li>HP-UX (tested on 11.0 and 11i on HPPA RISC)</li>
<li>SCO OpenUnix and OpenServer</li>
<li>IBM AIX 5.1L</li>
<li>MacOS X (Darwin)</li>
<li>SGI IRIX 6.5</li>
<li>FreeBSD</li>
<li>UnicOS / Cray</li>
</ul>

<p>Напомню ссылку на <code>makeself</code> еще раз — <a href="http://megastep.org/makeself/">http://megastep.org/makeself/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Как обойтить без макроса NOMINMAX]]></title>
    <link href="http://demin.ws/blog/russian/2009/03/05/how-to-do-without-nominmax/"/>
    <updated>2009-03-05T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/03/05/how-to-do-without-nominmax/</id>
    <content type="html"><![CDATA[<p>В комментариях к <a href="http://demin.ws/blog/russian/2009/02/15/min-max-in-visual-studio/">посту</a> про проблему конфликта имен STL&rsquo;евских <code>std::min</code> и <code>std::max</code> с одноименными макросами из файла <code>windows.h</code> мне подсказали интересное решение.</p>

<p>Если вместо, например, <code>std::max(a, b)</code> написать <code>(std::max)(a, b)</code>, то результат работы препроцессора выглядит так:</p>

<pre class="hl">
<span class="hl ppc">#line 3</span> <span class="hl pps">&quot;minmax.cpp&quot;</span><span class="hl ppc"></span>
<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
  <span class="hl kwb">int</span> a <span class="hl opt">= (</span>std<span class="hl opt">::</span>min<span class="hl opt">)(</span><span class="hl num">10</span><span class="hl opt">,</span> <span class="hl num">20</span><span class="hl opt">);</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>вместо:</p>

<pre class="hl">
<span class="hl ppc">#line 3</span> <span class="hl pps">&quot;minmax.cpp&quot;</span><span class="hl ppc"></span>
<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
  <span class="hl kwb">int</span> a <span class="hl opt">=</span> std<span class="hl opt">::(((</span><span class="hl num">10</span><span class="hl opt">) &lt; (</span><span class="hl num">20</span><span class="hl opt">))</span> ? <span class="hl opt">(</span><span class="hl num">10</span><span class="hl opt">) : (</span><span class="hl num">20</span><span class="hl opt">));</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>и конфликта не происходит. Все компилируется без проблем.</p>

<p>Не берусь судить, на сколько это красивое решение, и я бы все-таки предпочел действовать напрямую через макрос NOMINMAX, но выход элегантный.</p>

<p>Другие посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2009/02/15/min-max-in-visual-studio/">std::min() и std::max() в Visual Studio</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[QueryPerformanceCounter на мультиядерных и виртуальных системах]]></title>
    <link href="http://demin.ws/blog/russian/2009/03/05/queryperformancecounter-on-multicore-and-virtual-systems/"/>
    <updated>2009-03-05T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/03/05/queryperformancecounter-on-multicore-and-virtual-systems/</id>
    <content type="html"><![CDATA[<p>Как я <a href="http://demin.ws/blog/russian/2009/02/26/coredump-for-windows-unittest/">обещал</a>, рассказываю про мои приключения с классом <a href="http://demin.ws/blog/russian/2009/01/29/milliseconds-timer-for-windows-and-unix/">PreciseTimer</a>.</p>

<p>Мой класс <code>PreciseTimer</code> предназначен для работы с миллисекундными интервалами времени. Реализация под Windows основана на использовании функций <a href="http://msdn.microsoft.com/en-us/library/ms644905.aspx">QueryPerformanceFrequency</a> и <a href="http://msdn.microsoft.com/en-us/library/ms644904.aspx">QueryPerformanceCounter</a>.</p>

<p>Этот класс активно используется в некоторых наших проектах. Также, в силу некоторых обстоятельств, мы активно используем виртуальные машины для тестовых сборок. И, например, сборка под Windows 64-бита производится под <a href="http://www.virtualbox.org/">VirtualBox</a>. И вот очередной релиз-кандидат ушел в тестирование. Немедленно мне посыпались жалобы, что сборка не работает под 64-битным Windows под виртуальной машиной.</p>

<p>Я запретил тестерам временно отключать тест и начал проверять все сам. На реальных машинах все работает. Начал гонять на виртуальных. На <a href="http://www.vmware.com/">VMWare</a> тоже глючит. Тест <code>PreciseTimer.MeasurementAccuracy</code> выдает ошибку типа:</p>

<pre><code>c:\sandbox\test\PreTimer_unittest.cpp(22): error: Value of: delta &lt;= allowed_delta_ms
  Actual: false
Expected: true
Delta (100) &gt; than 10
[  FAILED  ] PreciseTimer.MeasurementAccuracy (110 ms)
</code></pre>

<p>Получается, что задержка в 100 миллисекунд была измерена практически как нулевая.</p>

<p>Я заподозрил функцию <code>QueryPerformanceCounter()</code>. Написал еще один кондовый тест:</p>

<pre class="hl">
<span class="hl kwd">TEST</span><span class="hl opt">(</span>PreciseTimer<span class="hl opt">,</span> MillisecCounter<span class="hl opt">) {</span>
  monitor<span class="hl opt">::</span>PreciseTimer timer<span class="hl opt">;</span>
  monitor<span class="hl opt">::</span>PreciseTimer<span class="hl opt">::</span>Counter a <span class="hl opt">=</span> timer<span class="hl opt">.</span><span class="hl kwd">millisec</span><span class="hl opt">();</span>
  timer<span class="hl opt">.</span><span class="hl kwd">sleepMs</span><span class="hl opt">(</span><span class="hl num">10000</span><span class="hl opt">);</span>
  monitor<span class="hl opt">::</span>PreciseTimer<span class="hl opt">::</span>Counter b <span class="hl opt">=</span> timer<span class="hl opt">.</span><span class="hl kwd">millisec</span><span class="hl opt">();</span>
  <span class="hl kwd">EXPECT_EQ</span><span class="hl opt">(</span><span class="hl num">10000</span><span class="hl opt">,</span> b <span class="hl opt">-</span> a<span class="hl opt">);</span>
<span class="hl opt">}</span>
</pre>

<p>Этот тест делает видную глазом задержку в 10 секунд (чтобы исключить проблему в самой задержке) и затем проверят показания таймера.</p>

<p>Итак, на реальной машине тест выдает следующее:</p>

<pre><code>[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from PreciseTimer
[ RUN      ] PreciseTimer.MillisecCounter
c:\sandbox\test\PreTimer_unittest.cpp(17): error: Value of: b - a

  Actual: 9995
Expected: 10000
[  FAILED  ] PreciseTimer.MillisecCounter
[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran.
[  PASSED  ] 0 tests.
[  FAILED  ] 1 test, listed below:
[  FAILED  ] PreciseTimer.MillisecCounter

 1 FAILED TEST
</code></pre>

<p>Тест, конечно, сбоит, но тут четко видно, что требуемая задержка в 10000 миллисекунд (10 секунд) измерена как 9995 миллисекунд. Понятно, тут невозможно измерить точь в точь, но суть работает верно.</p>

<p>А вот, что я получил на виртуальное машине:</p>

<pre><code>[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from PreciseTimer
[ RUN      ] PreciseTimer.MillisecCounter
c:\sandbox\test\PreTimer_unittest.cpp(17): error: Value of: b - a
  Actual: 90
Expected: 10000
[  FAILED  ] PreciseTimer.MillisecCounter
[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran.
[  PASSED  ] 0 tests.
[  FAILED  ] 1 test, listed below:
[  FAILED  ] PreciseTimer.MillisecCounter

 1 FAILED TEST
</code></pre>

<p>Задержка в 10000 миллисекунд была измерена всего как 90. Вот и причина сбоя — функция <code>QueryPerformanceCounter()</code>. Полчаса работы.</p>

<p>Затем я поискал в интернете на тему проблем у функции <code>QueryPerformanceCounter()</code> на виртуальных машинах и нашел объяснение в MSDN. Корень проблемы, как оказалось, был не конкретно в виртуальных машинах, а в &ldquo;старом&rdquo; биосе и в использовании мультиядерных систем. На наших реальных мультиядерных машинах все работало, так как, видимо их биос был &ldquo;нормальным&rdquo;.</p>

<p>В итоге проблема решилась добавлением параметра <code>/usepmtimer</code> в файл <code>c:\boot.ini</code>, как рекомендуется в найденной статье. После этого все тесты заработали как положено.</p>

<p>Я включил подробное описание проблемы в Release Notes, чтобы клиенты не наступили на эти грабли, и инцидент был исчерпан. Еще полчаса работы. Итого час на все.</p>

<p>А теперь вдумайтесь в произошедшее. Проблема была локализована и исправлена не то, чтобы до релиза. Она была локализована даже до тестового запуска. Лично я вот ну ни как не ожидал, что в Windows функция <code>QueryPerformanceCounter()</code> почему-то как-то особенно работает на мультиядерных системах со &ldquo;старым&rdquo; биосом (видимо биосы VMWare и VirtualBox как раз подходят под эту категорию). А вот как бы искал эту проблему потом? уже на реальной работающей системе. Одно из применений этого класса у нас, это измерения временных данных по транзакциям. Да я потратил был потом полжизни для поиска этой &ldquo;маленькой проблемки&rdquo;, случись она у реального клиента.</p>

<p>Пишите тесты! Это экономит не только деньги, но самое драгоценное — ваши нервы.</p>

<p>Другие посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2009/01/29/milliseconds-timer-for-windows-and-unix/">Миллисекундный таймер для Windows и UNIX</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Фредерик Брукс, "Мифический человеко-месяц или как создаются программные системы"]]></title>
    <link href="http://demin.ws/blog/russian/2009/03/03/mythical-man-month/"/>
    <updated>2009-03-03T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/03/03/mythical-man-month/</id>
    <content type="html"><![CDATA[<p><a href="http://ru.wikipedia.org/wiki/%D0%91%D1%80%D1%83%D0%BA%D1%81,_%D0%A4%D1%80%D0%B5%D0%B4%D0%B5%D1%80%D0%B8%D0%BA">Фредерик Брукс</a></p>

<p><a href="http://www.ozon.ru/context/detail/id/83760/?partner=easy-coding">Мифический человеко-месяц или как создаются программные системы</a></p>

<p><img src="http://demin.ws/images/covers/russian/mythical-man-month-cover.jpg" /></p>

<p>Как многие программисты, я весьма нетерпелив, и люблю как можно быстрее переходить к делу, а лучше — к реальным и осязаемым результатам. Поэтому с большим трудом читаю книги по профессии, где уж слишком много словоблудия, и особенно осторожен, когда кто-то пытается чего-то там теоретизировать. Я глубоко уверен, что кумиров &ldquo;по умолчанию&rdquo; в профессии иметь опасно, а лучше вообще не иметь, и любую веру в &ldquo;крутизну&rdquo; кого-либо надо проверять лично, поэтому я <a href="http://lib.ru/CTOTOR/BRUKS/mithsoftware.txt_with-big-pictures.html">распечатал</a>  себе эту книгу (у меня получилось около 70 листов А4 с двух сторон), и решил полистать вечерком у телевизора.</p>

<p>В итоге, я не отрываясь внимательно прочитал ее до конца часа за два, и некоторые куски потом пересматривал. По моему мнению, это надо прочесть любому программисту или руководителю программистов. Несмотря на то, что книге скоро стукнет 35 лет, и ее переиздание 1995 года практически повторяет оригинальное, в новом издании всего добавили пару глав, но старые главы остались в исходном виде. Даже когда автор употребляет несколько угловатые в наши дни выражения типа &ldquo;выйти на машину&rdquo; или &ldquo;обратиться к журналу с дисплейного терминала&rdquo; — это совершенно не искажает сути. Видимо из-за собственной самоуверенности, я считал, что такие значимые для меня вещи как многоуровневое тестирование, самодокументируемый код, контроль версий, готовность вносить изменения и т.д. придуманы совершенно недавно, можно сказать, на моих глазах. &ldquo;Ах какой удар от классика!&rdquo; — все это придумано и применялось уже тогда.</p>

<p>Лично я получил отличную пищу для ума, начиная от обдумывания аналогий о том, как делали что-то раньше, и во что это трансформировалось сейчас, и заканчивая абсолютно точным описанием &ldquo;смоляной ямы&rdquo; (программирование больших и сложных систем), в которой могут пропасть самые выдающиеся умы, и как в нее по возможности не попасть. Если бы все начальники читали бы эту книгу, они бы знали, что если проект по написанию программного обеспечения прогибается по срокам, то &ldquo;влив&rdquo; в него еще людей может только ускорить его кончину.</p>

<p><strong>Вывод</strong></p>

<p>Два часа прочтения будут отзываться в вас еще долго, а необычные сегодня картины вычислительной техники &ldquo;тех&rdquo; дней только помогут кристаллизовать абсолютно актуальные до сих пор выводы Фредерика Брукса.</p>

<p>Посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2009/05/17/peopleware/">Том Демарко, Тимати Листер, &ldquo;Человеческий фактор: успешные проекты и команды&rdquo;</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit-тестирование в языке С]]></title>
    <link href="http://demin.ws/blog/russian/2009/03/01/unit-testing-in-c/"/>
    <updated>2009-03-01T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/03/01/unit-testing-in-c/</id>
    <content type="html"><![CDATA[<p>По роду работы мне приходится работать с огромным количеством кода на С, причем чаще всего — это старый код, написанный много лет назад, и написан он без каких-либо намеков на тестирование, увы.
Исправляя в таком коде ошибки, внося какие-то изменения, хочется какой-то гармонии с самим собой, а именно — иметь возможность тестировать, тем самым уменьшить вероятность повторного внесения ошибок. Пусть уж полностью старый код остается без тестов, но раз уж я что-то меняю, я хочу подкрепить свои изменения тестами.</p>

<p>Мир языка С++ не такой дружественный к тестированию, как например, мир Java, C# или мир интерпретаторов. Главная причина — крайне слабый механизм интроспекции, то есть возможности исследования двоичного кода в плане получения информации о структуре исходных текстов. В Java, например, есть <code>Reflection</code>, с помощью которого можно прямо на основе скомпилированных классов создать тестовую среду (понять иерархию классов, типа аргументов и т.д.). В С++ приходится многое закладывать в исходный текст на этапе его создания, чтобы облегчить будущее тестирование.</p>

<p>А что же мы имеем в С? Тут, как мне кажется, разрыв в удобстве тестирования по отношению к С++ в разы больше, чем между С++ и Java, например. Причин море: процедурная модель вместо объектно-ориентированной, отсутствие интроспекции вообще, крайне слабая защита при работе с памятью и т.д.</p>

<p>Но шансы все же остались. Я начал поиск готовых библиотек для unit-тестирования в С. Например, есть библиотека <a href="http://www.jera.com/techinfo/jtns/jtn002.html">MinUnit</a>, длиной в четыре строки. Вполне жизненно. Следующий вполне себе вариант — это <a href="http://cunit.sourceforge.net/">CUnit</a>. Тут даже есть продвинутый консольный интерфейс.</p>

<p>Перебрав еще несколько вариантов, я остановился на гугловской библиотеке <a href="http://code.google.com/p/cmockery/">cmockery</a>. Мне понравилось, что библиотека, несмотря на весьма сложный код, успешно компилируются не только в Visual Studio и GNU C, но и “родными” компиляторами AIX, HP-UX, SunOS и некоторых других экзотических зверей. Также библиотека умеет отлавливать утечки памяти, неправильную работу с распределенными кусками памяти (так называемые buffer over- и under- run). Еще в <code>cmockery</code> есть зачатки mock-механизмов, то есть когда задаются предполагаемые сценарии выполнения тестируемого блока, и потом результаты тестового прогона сверяются с предполагаемым сценарием. Mock-возможности я не буду пока рассматривать в данной статье. Про это стоит написать отдельно.</p>

<p>На текущий момент актуальной версией <code>cmockery</code> является <a href="http://cmockery.googlecode.com/files/cmockery-0.1.2.tar.gz">0.1.2</a>. Из всего архива реально нужны только два файла: <code>cmockery.c</code> и <code>cmockery.h</code>. Можно, конечно, собрать библиотеку как положено, в двоичном виде, но я предпочитаю работать всегда с исходными текстами, благо компилируется очень быстро (это ж не С++).</p>

<p>Желающие, могут скачать <a href="http://demin.ws/downloads/cmockery-0.1.2-vs.zip">мою сборку</a>  cmockery. В этом архиве только необходимые два файла <code>cmockery.c</code> и <code>cmockery.h</code>. Также в файл <code>cmockery.h</code> я внес небольшое изменение, связанное к тем, что функция <code>IsDebuggerPresent()</code> почему-то явно объявлена в заголовочных файлах только в Visual Studio 2008. Для студии 2003 и 2005 надо вручную объявлять прототип, иначе при линковке вылезает сообщение:</p>

<pre><code>error LNK2019: unresolved external symbol _IsDebuggerPresent referenced in function __run_test
</code></pre>

<p>Я отрапортовал об этом досадном недочете авторам, и пока новый релиз cmockery не вышел, можно пользоваться моей сборкой, которая без предупреждений компилируются в любой студии.</p>

<p>Теперь пример реального использования <code>cmockery</code>.</p>

<p>Я долго выбирал то, на чем можно хоть как-то наглядно продемонстрировать unit-тестирование в С. В итоге я остановился на библиотеке для работы со строками. Эта библиотека реализует так называемые строки с длинной. То есть надо для кода на С дать более менее удобный интерфейс для манипулированию строками, которые хранят внутри себя длину.</p>

<p>Основа библиотеки была написана весьма давно, и много раз переписывалась практически с нуля, но я все еще использую ее в некоторых проектах.</p>

<p>Естественно, я не буду приводить всю библиотеку. Во-первых, она весьма тривиальна и вся ее &ldquo;фишка&rdquo; состоит в удобности работы, нежели в какой-то особо хитрой и заумной реализации. Во-вторых, полный ее исходный текст весьма объемен. Я выбрал небольшой ее фрагмент, но его тестирование позволяет почувствовать дух тестирования в С.</p>

<p>Итак, библиотека <code>cstring</code>. Тут можно создавать в некоторые &ldquo;объекты&rdquo;, реализованные через структуры, которые представляют собой &ldquo;строки&rdquo;. Такая &ldquo;строка&rdquo; может создаваться либо в стеке (автоматическая переменная), либо в куче. Также предоставляется набор разнообразных базовых функций: определение длины, копирование, склейка, интерфейс со строками языка С <code>(char *)</code> и т.д. Как я уже сказал, для демонстрации системы тестирования я оставил только несколько функций.</p>

<p>Заголовочный файл <code>cstring.h</code>:</p>

<pre class="hl">
<span class="hl ppc">#ifndef _CSTRING_H</span>
<span class="hl ppc">#define _CSTRING_H</span>

<span class="hl ppc">#define _decl_string_t(N) \</span>
<span class="hl ppc">struct {                  \</span>
<span class="hl ppc">  int sz;                 \</span>
<span class="hl ppc">  char data[N];           \</span>
<span class="hl ppc">}</span>

<span class="hl kwc">typedef</span> <span class="hl kwd">_decl_string_t</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">)</span> string_t<span class="hl opt">;</span>

<span class="hl com">/**</span>
<span class="hl com"> * Объявление строки в форме автоматической переменной в стеке.</span>
<span class="hl com"> * Длина строки инициализируется нулем.</span>
<span class="hl com"> */</span>
<span class="hl ppc">#define decl_string_t(name, size) _decl_string_t(size) name = { 0 }</span>

<span class="hl com">/**</span>
<span class="hl com"> * Создание новой строки в куче.</span>
<span class="hl com"> */</span>
string_t<span class="hl opt">*</span> <span class="hl kwd">string_new</span><span class="hl opt">(</span><span class="hl kwb">int</span> sz<span class="hl opt">);</span>

<span class="hl com">/* Трюк с дублированием имен функций, начинающихся с символа '_'</span>
<span class="hl com"> * требуется для подавление предупреждений компилятора о преобразовании</span>
<span class="hl com"> * типов.</span>
<span class="hl com"> */</span>

<span class="hl com">/**</span>
<span class="hl com"> * Удаление строки из кучи.</span>
<span class="hl com"> */</span>
<span class="hl ppc">#define string_delete(str) _string_delete((string_t*)str)</span>
<span class="hl kwb">void</span> <span class="hl kwd">_string_delete</span><span class="hl opt">(</span>string_t<span class="hl opt">*</span> str<span class="hl opt">);</span>

<span class="hl com">/** </span>
<span class="hl com"> * Текущая длина строки.</span>
<span class="hl com"> */</span>
<span class="hl ppc">#define string_length(str) _string_length((const string_t*)str)</span>
<span class="hl kwb">int</span> <span class="hl kwd">_string_length</span><span class="hl opt">(</span><span class="hl kwb">const</span> string_t<span class="hl opt">*</span> str<span class="hl opt">);</span>

<span class="hl com">/**</span>
<span class="hl com"> * Изменение длины строки.</span>
<span class="hl com"> */</span>
<span class="hl ppc">#define string_resize(str, sz) _string_resize((string_t*)str, sz)</span>
<span class="hl kwb">int</span> <span class="hl kwd">_string_resize</span><span class="hl opt">(</span>string_t<span class="hl opt">*</span> str<span class="hl opt">,</span> <span class="hl kwb">int</span> sz<span class="hl opt">);</span>

<span class="hl com">/**</span>
<span class="hl com"> * Копирование строки из строки С, завершающейся нулем.</span>
<span class="hl com"> */</span>
<span class="hl ppc">#define string_from_c_str(dst, src) _string_from_c_str((string_t*)dst, src)</span>
string_t<span class="hl opt">*</span> <span class="hl kwd">_string_from_c_str</span><span class="hl opt">(</span>string_t<span class="hl opt">*</span> dst<span class="hl opt">,</span> <span class="hl kwb">const char</span><span class="hl opt">*</span> src<span class="hl opt">);</span>

<span class="hl com">/**</span>
<span class="hl com"> * Добавление символа в строку.</span>
<span class="hl com"> */</span>
<span class="hl ppc">#define string_append_ch(str, ch) _string_append_ch((string_t*)str, ch)</span>
string_t<span class="hl opt">*</span> <span class="hl kwd">_string_append_ch</span><span class="hl opt">(</span>string_t<span class="hl opt">*</span> str<span class="hl opt">,</span> <span class="hl kwb">char</span> ch<span class="hl opt">);</span>

<span class="hl com">/**</span>
<span class="hl com"> * Превращение строки в строку С без добавления нуля на конце.</span>
<span class="hl com"> */</span>
<span class="hl ppc">#define string_data(str) str-&gt;data</span>

<span class="hl com">/**</span>
<span class="hl com"> * Превращение строки в строку С с нулем на конце.</span>
<span class="hl com"> */</span>
<span class="hl ppc">#define string_c_str(str) _string_c_str((string_t*)str)</span>
<span class="hl kwb">char</span><span class="hl opt">*</span> <span class="hl kwd">_string_c_str</span><span class="hl opt">(</span>string_t<span class="hl opt">*</span> str<span class="hl opt">);</span>

<span class="hl ppc">#endif</span>
</pre>

<p>Файл <code>cstring.c</code>:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;stdlib.h&gt;</span>

<span class="hl ppc">#include</span> <span class="hl pps">&quot;cstring.h&quot;</span><span class="hl ppc"></span>

<span class="hl com">/**</span>
<span class="hl com"> * Подготовительная площадка для тестирования.</span>
<span class="hl com"> * Если задан макрос UNIT_TESTING, то функции работы с кучей подменяются</span>
<span class="hl com"> * на тестовые.</span>
<span class="hl com"> */</span>
<span class="hl ppc">#if UNIT_TESTING</span>
<span class="hl kwc">extern</span> <span class="hl kwb">void</span><span class="hl opt">*</span> <span class="hl kwd">_test_malloc</span><span class="hl opt">(</span><span class="hl kwb">const size_t</span> size<span class="hl opt">,</span> <span class="hl kwb">const char</span><span class="hl opt">*</span> file<span class="hl opt">,</span> <span class="hl kwb">const int</span> line<span class="hl opt">);</span>
<span class="hl kwc">extern</span> <span class="hl kwb">void</span><span class="hl opt">*</span> <span class="hl kwd">_test_calloc</span><span class="hl opt">(</span><span class="hl kwb">const size_t</span> number_of_elements<span class="hl opt">,</span> <span class="hl kwb">const size_t</span> size<span class="hl opt">,</span>
                          <span class="hl kwb">const char</span><span class="hl opt">*</span> file<span class="hl opt">,</span> <span class="hl kwb">const int</span> line<span class="hl opt">);</span>
<span class="hl kwc">extern</span> <span class="hl kwb">void</span> <span class="hl kwd">_test_free</span><span class="hl opt">(</span><span class="hl kwb">void</span><span class="hl opt">*</span> <span class="hl kwb">const</span> ptr<span class="hl opt">,</span> <span class="hl kwb">const char</span><span class="hl opt">*</span> file<span class="hl opt">,</span> <span class="hl kwb">const int</span> line<span class="hl opt">);</span>

<span class="hl ppc">#define malloc(size) _test_malloc(size, __FILE__, __LINE__)</span>
<span class="hl ppc">#define calloc(num, size) _test_calloc(num, size, __FILE__, __LINE__)</span>
<span class="hl ppc">#define free(ptr) _test_free(ptr, __FILE__, __LINE__)</span>
<span class="hl ppc">#endif</span> <span class="hl slc">// UNIT_TESTING</span>
<span class="hl ppc"></span>
<span class="hl com">/**</span>
<span class="hl com"> * Создание новой строки в куче. Трюк &quot;sizeof(string_t)&quot; используется, чтобы</span>
<span class="hl com"> * правильно отработать ситуацию, если из-за выравнивания между элементами</span>
<span class="hl com"> * структуры string_t 'sz' и 'data' вдруг появится промежуток.</span>
<span class="hl com"> */</span> 
string_t<span class="hl opt">*</span> <span class="hl kwd">string_new</span><span class="hl opt">(</span><span class="hl kwb">int</span> sz<span class="hl opt">) {</span>
  <span class="hl kwa">return</span> <span class="hl kwd">malloc</span><span class="hl opt">(</span><span class="hl kwa">sizeof</span><span class="hl opt">(</span>string_t<span class="hl opt">) +</span> sz <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl com">/**</span>
<span class="hl com"> * Удаление строки из кучи.</span>
<span class="hl com"> */</span>
<span class="hl kwb">void</span> <span class="hl kwd">_string_delete</span><span class="hl opt">(</span>string_t<span class="hl opt">*</span> str<span class="hl opt">) {</span>
  <span class="hl kwd">free</span><span class="hl opt">((</span><span class="hl kwb">void</span> <span class="hl opt">*)</span>str<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl com">/**</span>
<span class="hl com"> * Текущая длина строки.</span>
<span class="hl com"> */</span>
<span class="hl kwb">int</span> <span class="hl kwd">_string_length</span><span class="hl opt">(</span><span class="hl kwb">const</span> string_t<span class="hl opt">*</span> str<span class="hl opt">) {</span>
  <span class="hl kwa">return</span> str<span class="hl opt">-&gt;</span>sz<span class="hl opt">;</span>                                                                                        
<span class="hl opt">}</span>

<span class="hl com">/**</span>
<span class="hl com"> * Изменение длины строки.</span>
<span class="hl com"> */</span>
<span class="hl kwb">int</span> <span class="hl kwd">_string_resize</span><span class="hl opt">(</span>string_t<span class="hl opt">*</span> str<span class="hl opt">,</span> <span class="hl kwb">int</span> sz<span class="hl opt">) {</span>
  <span class="hl kwa">return</span> str<span class="hl opt">-&gt;</span>sz <span class="hl opt">=</span> sz<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl com">/**</span>
<span class="hl com"> * Копирование строки из строки С, завершающейся нулем.</span>
<span class="hl com"> */</span>
string_t<span class="hl opt">*</span> <span class="hl kwd">_string_from_c_str</span><span class="hl opt">(</span>string_t<span class="hl opt">*</span> dst<span class="hl opt">,</span> <span class="hl kwb">const char</span><span class="hl opt">*</span> src<span class="hl opt">) {</span>
  <span class="hl kwb">int</span> sz <span class="hl opt">=</span> <span class="hl kwd">strlen</span><span class="hl opt">(</span>src<span class="hl opt">);</span>
  <span class="hl kwd">memcpy</span><span class="hl opt">(</span>dst<span class="hl opt">-&gt;</span>data<span class="hl opt">,</span> src<span class="hl opt">,</span> sz<span class="hl opt">);</span>
  dst<span class="hl opt">-&gt;</span>sz <span class="hl opt">=</span> sz<span class="hl opt">;</span>
  <span class="hl kwa">return</span> dst<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl com">/**</span>
<span class="hl com"> * Добавление символа в строку.</span>
<span class="hl com"> */</span>
string_t<span class="hl opt">*</span> <span class="hl kwd">_string_append_ch</span><span class="hl opt">(</span>string_t<span class="hl opt">*</span> str<span class="hl opt">,</span> <span class="hl kwb">char</span> ch<span class="hl opt">) {</span>
  str<span class="hl opt">-&gt;</span>data<span class="hl opt">[</span>str<span class="hl opt">-&gt;</span>sz<span class="hl opt">++] =</span> ch<span class="hl opt">;</span>
  <span class="hl kwa">return</span> str<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl com">/**</span>
<span class="hl com"> * Превращение строки в строку С с нулем на конце. Фактически,</span>
<span class="hl com"> * в тело строки добавляется ноль и возвращается указатель на данные.</span>
<span class="hl com"> */</span>
<span class="hl kwb">char</span><span class="hl opt">*</span> <span class="hl kwd">_string_c_str</span><span class="hl opt">(</span>string_t<span class="hl opt">*</span> str<span class="hl opt">) {</span>
  str<span class="hl opt">-&gt;</span>data<span class="hl opt">[</span>str<span class="hl opt">-&gt;</span>sz<span class="hl opt">] =</span> <span class="hl num">0</span><span class="hl opt">;</span>
  <span class="hl kwa">return</span> <span class="hl kwd">string_data</span><span class="hl opt">(</span>str<span class="hl opt">);</span>
<span class="hl opt">}</span>
</pre>

<p>Как вы заметили, в коде есть специальный блок, ограниченный макросом <code>UNIT_TESTING</code>. Ничего не поделаешь, в языке С приходится &ldquo;готовить&rdquo; код к потенциальному тестированию и вставлять фрагменты, позволяющие тестовой среде работать с этим кодом. Этот блок, если задан макрос <code>UNIT_TESTING</code>, переопределяет функции работы с кучей, чтобы можно было перехватывать их вызовы. Подменяющие функции <code>_test_malloc()</code>, <code>_test_calloc()</code> и <code>_test_free()</code> предоставляются библиотекой <code>cmockery</code>.</p>

<p>Теперь файл тестов <code>cstring_unittest.c</code>:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;stdarg.h&gt;</span>
<span class="hl ppc">#include &lt;stddef.h&gt;</span>
<span class="hl ppc">#include &lt;setjmp.h&gt;</span>
<span class="hl ppc">#include &lt;cmockery.h&gt;</span>

<span class="hl ppc">#include</span> <span class="hl pps">&quot;cstring.h&quot;</span><span class="hl ppc"></span>

<span class="hl com">/**</span>
<span class="hl com"> * Тестируем декларацию строки длиной 20 в виде автоматической</span>
<span class="hl com"> * переменной, добавляем в нее два символа, обрезаем строку</span>
<span class="hl com"> * до длины в один байт и проверяем, добавился ли 0 при преобразовании</span>
<span class="hl com"> * в строку С.</span>
<span class="hl com"> */</span>
<span class="hl kwb">void</span> <span class="hl kwd">string_c_str_test</span><span class="hl opt">(</span><span class="hl kwb">void</span> <span class="hl opt">**</span>state<span class="hl opt">) {</span>
  <span class="hl kwd">decl_string_t</span><span class="hl opt">(</span>a<span class="hl opt">,</span> <span class="hl num">20</span><span class="hl opt">);</span>
  a<span class="hl opt">.</span>data<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] =</span> <span class="hl str">'a'</span><span class="hl opt">;</span>
  a<span class="hl opt">.</span>data<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] =</span> <span class="hl str">'b'</span><span class="hl opt">;</span>
  a<span class="hl opt">.</span>sz <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
  <span class="hl kwd">assert_memory_equal</span><span class="hl opt">(</span><span class="hl str">&quot;a\0&quot;</span><span class="hl opt">,</span> <span class="hl kwd">string_c_str</span><span class="hl opt">(&amp;</span>a<span class="hl opt">),</span> <span class="hl num">2</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl com">/**</span>
<span class="hl com"> * Тестируем изменение длины строки.</span>
<span class="hl com"> */</span>
<span class="hl kwb">void</span> <span class="hl kwd">string_resize_test</span><span class="hl opt">(</span><span class="hl kwb">void</span> <span class="hl opt">**</span>state<span class="hl opt">) {</span>
  <span class="hl kwd">decl_string_t</span><span class="hl opt">(</span>a<span class="hl opt">,</span> <span class="hl num">20</span><span class="hl opt">);</span>
  a<span class="hl opt">.</span>sz <span class="hl opt">=</span> <span class="hl num">2</span><span class="hl opt">;</span>
  <span class="hl kwd">string_resize</span><span class="hl opt">(&amp;</span>a<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">);</span>
  <span class="hl kwd">assert_int_equal</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl kwd">string_length</span><span class="hl opt">(&amp;</span>a<span class="hl opt">));</span>
<span class="hl opt">}</span>

<span class="hl com">/**</span>
<span class="hl com"> * Тестируем добавление символа путем сравнения со строками С</span>
<span class="hl com"> */</span>
<span class="hl kwb">void</span> <span class="hl kwd">string_append_ch_test</span><span class="hl opt">(</span><span class="hl kwb">void</span> <span class="hl opt">**</span>state<span class="hl opt">) {</span>
  <span class="hl kwd">decl_string_t</span><span class="hl opt">(</span>a<span class="hl opt">,</span> <span class="hl num">20</span><span class="hl opt">);</span>
  <span class="hl kwd">assert_string_equal</span><span class="hl opt">(</span><span class="hl str">&quot;&quot;</span><span class="hl opt">,</span> <span class="hl kwd">string_c_str</span><span class="hl opt">(&amp;</span>a<span class="hl opt">));</span>
  <span class="hl kwd">assert_string_equal</span><span class="hl opt">(</span><span class="hl str">&quot;a&quot;</span><span class="hl opt">,</span> <span class="hl kwd">string_c_str</span><span class="hl opt">(</span><span class="hl kwd">string_append_ch</span><span class="hl opt">(&amp;</span>a<span class="hl opt">,</span> <span class="hl str">'a'</span><span class="hl opt">)));</span>
  <span class="hl kwd">assert_string_equal</span><span class="hl opt">(</span><span class="hl str">&quot;ab&quot;</span><span class="hl opt">,</span> <span class="hl kwd">string_c_str</span><span class="hl opt">(</span><span class="hl kwd">string_append_ch</span><span class="hl opt">(&amp;</span>a<span class="hl opt">,</span> <span class="hl str">'b'</span><span class="hl opt">)));</span>
<span class="hl opt">}</span>

<span class="hl com">/**</span>
<span class="hl com"> * Тестируем декларацию строки в виде автоматической переменной.</span>
<span class="hl com"> * Длина строки сразу после декларации должна быть нулевой.</span>
<span class="hl com"> */</span>
<span class="hl kwb">void</span> <span class="hl kwd">string_declare_test</span><span class="hl opt">(</span><span class="hl kwb">void</span> <span class="hl opt">**</span>state<span class="hl opt">) {</span>
  <span class="hl kwd">decl_string_t</span><span class="hl opt">(</span>a<span class="hl opt">,</span> <span class="hl num">20</span><span class="hl opt">);</span>
  <span class="hl kwd">assert_int_equal</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl kwd">string_length</span><span class="hl opt">(&amp;</span>a<span class="hl opt">));</span>
<span class="hl opt">}</span>

<span class="hl com">/**</span>
<span class="hl com"> * Тестируем размещение новой строки в куче и ее удаление из нее.</span>
<span class="hl com"> */</span>
<span class="hl kwb">void</span> <span class="hl kwd">string_heap_allocation_test</span><span class="hl opt">(</span><span class="hl kwb">void</span> <span class="hl opt">**</span>state<span class="hl opt">) {</span>
  string_t<span class="hl opt">*</span> a <span class="hl opt">=</span> <span class="hl kwd">string_new</span><span class="hl opt">(</span><span class="hl num">20</span><span class="hl opt">);</span>
  <span class="hl kwd">string_delete</span><span class="hl opt">(</span>a<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl com">/**</span>
<span class="hl com"> * Тестируем копирование строки из строки С с нулем на конце.</span>
<span class="hl com"> */</span>
<span class="hl kwb">void</span> <span class="hl kwd">string_from_c_str_test</span><span class="hl opt">(</span><span class="hl kwb">void</span> <span class="hl opt">**</span>state<span class="hl opt">) {</span>
  string_t<span class="hl opt">*</span> a <span class="hl opt">=</span> <span class="hl kwd">string_new</span><span class="hl opt">(</span><span class="hl num">8</span><span class="hl opt">);</span>
  <span class="hl kwd">string_from_c_str</span><span class="hl opt">(</span>a<span class="hl opt">,</span> <span class="hl str">&quot;12345678&quot;</span><span class="hl opt">);</span>
  <span class="hl kwd">assert_int_equal</span><span class="hl opt">(</span><span class="hl num">8</span><span class="hl opt">,</span> <span class="hl kwd">string_length</span><span class="hl opt">(</span>a<span class="hl opt">));</span>
  <span class="hl kwd">string_delete</span><span class="hl opt">(</span>a<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl com">/**</span>
<span class="hl com"> * Создаем список тестов и запускаем их.</span>
<span class="hl com"> */</span>
<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[]) {</span>
  <span class="hl kwb">const</span> UnitTest tests<span class="hl opt">[] = {</span>
    <span class="hl kwd">unit_test</span><span class="hl opt">(</span>string_declare_test<span class="hl opt">),</span>
    <span class="hl kwd">unit_test</span><span class="hl opt">(</span>string_c_str_test<span class="hl opt">),</span>
    <span class="hl kwd">unit_test</span><span class="hl opt">(</span>string_append_ch_test<span class="hl opt">),</span>
    <span class="hl kwd">unit_test</span><span class="hl opt">(</span>string_heap_allocation_test<span class="hl opt">),</span>
    <span class="hl kwd">unit_test</span><span class="hl opt">(</span>string_from_c_str_test<span class="hl opt">),</span>
    <span class="hl kwd">unit_test</span><span class="hl opt">(</span>string_resize_test<span class="hl opt">),</span>
  <span class="hl opt">};</span>
  <span class="hl kwa">return</span> <span class="hl kwd">run_tests</span><span class="hl opt">(</span>tests<span class="hl opt">);</span>
<span class="hl opt">}</span>
</pre>

<p>Схема очень похожа на любое другое <a href="http://en.wikipedia.org/wiki/Unit_testing">xUnit</a> тестирование: каждый тест проверяет какой-то один функциональный элемент, тесты объединяются в группы и запускаются автоматически все вместе. Правда, из-за ограничений языка С каждый тест приходится вручную добавлять в список запуска, увы.</p>

<p>Как я уже сказал, для компиляции потребуются файлы <code>cmockery.c</code> и <code>cmockery.h</code> (см. выше). Эти файлы можно положить в текущий каталог.</p>

<p>Компилируем в Visual Studio:</p>

<pre><code>cl /DUNIT_TESTING /I. cstring_unittest.c cstring.c cmockery.c
</code></pre>

<p>Если все скомпилировалось нормально, то запускаем файл <code>cstring_unittest</code>:</p>

<pre><code>string_declare_test: Starting test
string_declare_test: Test completed successfully.
string_c_str_test: Starting test
string_c_str_test: Test completed successfully.
string_append_ch_test: Starting test
string_append_ch_test: Test completed successfully.
string_heap_allocation_test: Starting test
string_heap_allocation_test: Test completed successfully.
string_from_c_str_test: Starting test
string_from_c_str_test: Test completed successfully.
string_resize_test: Starting test
string_resize_test: Test completed successfully.
All 6 tests passed
</code></pre>

<p>Все тесты отработали правильно.</p>

<p>Но неинтересно, когда все работает. Внесем в тест библиотеки &ldquo;случайные ошибки&rdquo;. Каждую из них можно спокойно допустить непреднамеренно. Строки с ошибками я пометил комментариями со словом &ldquo;ОШИБКА (!)&rdquo;. Посмотрим, как <code>cmockery</code> справится с этим.</p>

<p>Файл <code>cstring.c</code> с &ldquo;ошибками&rdquo;:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;stdlib.h&gt;</span>

<span class="hl ppc">#include</span> <span class="hl pps">&quot;cstring.h&quot;</span><span class="hl ppc"></span>

<span class="hl com">/**</span>
<span class="hl com"> * Подготовительная площадка для тестирования.</span>
<span class="hl com"> * Если задан макрос UNIT_TESTING, то функции работы с кучей подменяются</span>
<span class="hl com"> * на тестовые.</span>
<span class="hl com"> */</span>
<span class="hl ppc">#if UNIT_TESTING</span>
<span class="hl kwc">extern</span> <span class="hl kwb">void</span><span class="hl opt">*</span> <span class="hl kwd">_test_malloc</span><span class="hl opt">(</span><span class="hl kwb">const size_t</span> size<span class="hl opt">,</span> <span class="hl kwb">const char</span><span class="hl opt">*</span> file<span class="hl opt">,</span> <span class="hl kwb">const int</span> line<span class="hl opt">);</span>
<span class="hl kwc">extern</span> <span class="hl kwb">void</span><span class="hl opt">*</span> <span class="hl kwd">_test_calloc</span><span class="hl opt">(</span><span class="hl kwb">const size_t</span> number_of_elements<span class="hl opt">,</span> <span class="hl kwb">const size_t</span> size<span class="hl opt">,</span>
                          <span class="hl kwb">const char</span><span class="hl opt">*</span> file<span class="hl opt">,</span> <span class="hl kwb">const int</span> line<span class="hl opt">);</span>
<span class="hl kwc">extern</span> <span class="hl kwb">void</span> <span class="hl kwd">_test_free</span><span class="hl opt">(</span><span class="hl kwb">void</span><span class="hl opt">*</span> <span class="hl kwb">const</span> ptr<span class="hl opt">,</span> <span class="hl kwb">const char</span><span class="hl opt">*</span> file<span class="hl opt">,</span> <span class="hl kwb">const int</span> line<span class="hl opt">);</span>

<span class="hl ppc">#define malloc(size) _test_malloc(size, __FILE__, __LINE__)</span>
<span class="hl ppc">#define calloc(num, size) _test_calloc(num, size, __FILE__, __LINE__)</span>
<span class="hl ppc">#define free(ptr) _test_free(ptr, __FILE__, __LINE__)</span>
<span class="hl ppc">#endif</span> <span class="hl slc">// UNIT_TESTING</span>
<span class="hl ppc"></span>
<span class="hl com">/**</span>
<span class="hl com"> * Создание новой строки в куче. Трюк &quot;sizeof(string_t)&quot; используется, чтобы</span>
<span class="hl com"> * правильно отработать ситуацию, если из-за выравнивания между элементами</span>
<span class="hl com"> * структуры string_t 'sz' и 'data' вдруг появится промежуток.</span>
<span class="hl com"> */</span> 
string_t<span class="hl opt">*</span> <span class="hl kwd">string_new</span><span class="hl opt">(</span><span class="hl kwb">int</span> sz<span class="hl opt">) {</span>
  <span class="hl kwa">return</span> <span class="hl kwd">malloc</span><span class="hl opt">(</span><span class="hl kwa">sizeof</span><span class="hl opt">(</span>string_t<span class="hl opt">) +</span> <span class="hl num">1</span> <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">);</span> <span class="hl slc">// (ОШИБКА!) &quot;Неверная&quot; длина.</span>
<span class="hl opt">}</span>

<span class="hl com">/**</span>
<span class="hl com"> * Удаление строки из кучи.</span>
<span class="hl com"> */</span>
<span class="hl kwb">void</span> <span class="hl kwd">_string_delete</span><span class="hl opt">(</span>string_t<span class="hl opt">*</span> str<span class="hl opt">) {</span>
  <span class="hl slc">// (ОШИБКА!) &quot;Забыли&quot; вызвать free().</span>
<span class="hl opt">}</span>

<span class="hl com">/**</span>
<span class="hl com"> * Текущая длина строки.</span>
<span class="hl com"> */</span>
<span class="hl kwb">int</span> <span class="hl kwd">_string_length</span><span class="hl opt">(</span><span class="hl kwb">const</span> string_t<span class="hl opt">*</span> str<span class="hl opt">) {</span>
  <span class="hl kwa">return</span> str<span class="hl opt">-&gt;</span>sz<span class="hl opt">;</span>                                                                                        
<span class="hl opt">}</span>

<span class="hl com">/**</span>
<span class="hl com"> * Изменение длины строки.</span>
<span class="hl com"> */</span>
<span class="hl kwb">int</span> <span class="hl kwd">_string_resize</span><span class="hl opt">(</span>string_t<span class="hl opt">*</span> str<span class="hl opt">,</span> <span class="hl kwb">int</span> sz<span class="hl opt">) {</span>
  <span class="hl kwa">return</span> str<span class="hl opt">-&gt;</span>sz<span class="hl opt">;</span>  <span class="hl slc">// (ОШИБКА!) &quot;Забыли&quot; уменьшить длину строки.</span>
<span class="hl opt">}</span>

<span class="hl com">/**</span>
<span class="hl com"> * Копирование строки из строки С, завершающейся нулем.</span>
<span class="hl com"> */</span>
string_t<span class="hl opt">*</span> <span class="hl kwd">_string_from_c_str</span><span class="hl opt">(</span>string_t<span class="hl opt">*</span> dst<span class="hl opt">,</span> <span class="hl kwb">const char</span><span class="hl opt">*</span> src<span class="hl opt">) {</span>
  <span class="hl kwb">int</span> sz <span class="hl opt">=</span> <span class="hl kwd">strlen</span><span class="hl opt">(</span>src<span class="hl opt">);</span>
  <span class="hl kwd">memcpy</span><span class="hl opt">(</span>dst<span class="hl opt">-&gt;</span>data<span class="hl opt">,</span> src<span class="hl opt">,</span> sz<span class="hl opt">);</span>
  <span class="hl slc">// (ОШИБКА!) &quot;Забыли&quot; присвоить длине новое значение.</span>
  <span class="hl kwa">return</span> dst<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl com">/**</span>
<span class="hl com"> * Добавление символа в строку.</span>
<span class="hl com"> */</span>
string_t<span class="hl opt">*</span> <span class="hl kwd">_string_append_ch</span><span class="hl opt">(</span>string_t<span class="hl opt">*</span> str<span class="hl opt">,</span> <span class="hl kwb">char</span> ch<span class="hl opt">) {</span>
  str<span class="hl opt">-&gt;</span>data<span class="hl opt">[</span>str<span class="hl opt">-&gt;</span>sz<span class="hl opt">] =</span> ch<span class="hl opt">;</span> <span class="hl slc">// (ОШИБКА!) &quot;Забыли&quot; увеличить длину.</span>
  <span class="hl kwa">return</span> str<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl com">/**</span>
<span class="hl com"> * Превращение строки в строку С с нулем на конце. Фактически,</span>
<span class="hl com"> * в тело строки добавляется ноль и возвращается указатель на данные.</span>
<span class="hl com"> */</span>
<span class="hl kwb">char</span><span class="hl opt">*</span> <span class="hl kwd">_string_c_str</span><span class="hl opt">(</span>string_t<span class="hl opt">*</span> str<span class="hl opt">) {</span>
  <span class="hl slc">// (ОШИБКА!) &quot;Забыли&quot; добавить 0 в конец.</span>
  <span class="hl kwa">return</span> <span class="hl kwd">string_data</span><span class="hl opt">(</span>str<span class="hl opt">);</span>
<span class="hl opt">}</span>
</pre>

<p>Компилируем и запускаем:</p>

<pre><code>string_declare_test: Starting test
string_declare_test: Test completed successfully.
string_c_str_test: Starting test
difference at offset 1 0x00 0x62
1 bytes of 0x0040f014 and 0x0012fe7c differ
ERROR: cstring_unittest.c:19 Failure!
string_c_str_test: Test failed.
string_append_ch_test: Starting test
&quot;ab&quot; != &quot;b&quot;
ERROR: cstring_unittest.c:39 Failure!
string_append_ch_test: Test failed.
string_heap_allocation_test: Starting test
Blocks allocated...
  0x00326ee0 : cstring.c:27
ERROR: string_heap_allocation_test leaked 1 block(s)
string_heap_allocation_test: Test failed.
string_from_c_str_test: Starting test
Blocks allocated...
  0x00326ee0 : cstring.c:27
Guard block of 0x00326f18 size=8 allocated by cstring.c:27 at 0x00326f20 is corrupt
ERROR: cmockery.c:1379 Failure!
string_from_c_str_test: Test failed.
string_resize_test: Starting test
0x1 != 0x2
ERROR: cstring_unittest.c:29 Failure!
string_resize_test: Test failed.
5 out of 6 tests failed!
    string_c_str_test
    string_append_ch_test
    string_heap_allocation_test
    string_from_c_str_test
    string_resize_test
Blocks allocated...
  0x00326ee0 : cstring.c:27
Guard block of 0x00326f18 size=8 allocated by cstring.c:27 at 0x00326f20 is corrupt
ERROR: cmockery.c:1379 Failure!
</code></pre>

<p>Бам! 5 из 6 тестов сломаны. Проанализируем полученное.</p>

<p>Тест <code>string_c_str_test</code> выявил, что функция <code>string_c_str</code> не добавила 0 в конец строки, хотя должна была:</p>

<pre><code>string_c_str_test: Starting test
difference at offset 1 0x00 0x62
1 bytes of 0x0040f014 and 0x0012fe7c differ
ERROR: cstring_unittest.c:19 Failure!
string_c_str_test: Test failed.
</code></pre>

<p>Тест <code>string_append_ch_test</code> выявил, что функция добавления символа в конец строки не работает:</p>

<pre><code>string_append_ch_test: Starting test
&quot;ab&quot; != &quot;b&quot;
ERROR: cstring_unittest.c:39 Failure!
string_append_ch_test: Test failed.
</code></pre>

<p>Тест <code>string_heap_allocation_test</code> выявил, что у нас имеется неосвобожденный блок памяти (утечка?). Конечно, мы же &ldquo;забыли&rdquo; освободить память в функции <code>string_delete()</code>:</p>

<pre><code>string_heap_allocation_test: Starting test
Blocks allocated...
  0x00326ee0 : cstring.c:27
ERROR: string_heap_allocation_test leaked 1 block(s)
string_heap_allocation_test: Test failed.
</code></pre>

<p>Тест <code>string_from_c_str_test</code> выявил, что мы &ldquo;вылезли&rdquo; за границы выделенного куска памяти. Мы записали что-то мимо. Это болезненная ошибка. Конечно, <code>cmockery</code> не всегда может находить такие ляпы. Например, если переменная выделена с стеке, а не в куче, то проблема не вскроется. Тут уже помогут только динамические отладчики типа <a href="http://valgrind.org/">valgrind</a>:</p>

<pre><code>string_from_c_str_test: Starting test
Blocks allocated...
  0x00326ee0 : cstring.c:27
Guard block of 0x00326f18 size=8 allocated by cstring.c:27 at 0x00326f20 is corrupt
ERROR: cmockery.c:1379 Failure!
string_from_c_str_test: Test failed.
</code></pre>

<p>Тест <code>string_resize_test</code> показал, что функция изменения размера строки не работает как положено:</p>

<pre><code>string_resize_test: Starting test
0x1 != 0x2
ERROR: cstring_unittest.c:29 Failure!
string_resize_test: Test failed.
</code></pre>

<p>В целом, очень неплохие результаты.</p>

<p>Теперь представьте, что вы решили переписать реализацию библиотеки под новый процессор, чтобы работало в десять раз быстрее. Но как проверить результат? Элементарно. Запустите старые тесты. Если они работают, то по крайней мере с большой вероятностью вы не сломали старую функциональность. И, кстати, чем более тщательно написаны тесты, тем более ценны они. Чем более критична какая часть системы для стабильности системы в целом (например, библиотека строк или каких-то базовых контейнеров), тем более тщательно они должны быть покрыты тестами.</p>

<p>Конечно, уровень комфорта при написании тестов на С и их отладке очень далек даже от С++, но это не может быть оправданием для отказа от тестирования. Честно могу сказать, часто результатом работы &ldquo;сломанного&rdquo; теста в С, который неверно работает с памятью, например, может является просто зависание, а не красивый отчет, что тест &ldquo;не работает&rdquo;. Но даже такой &ldquo;знак&rdquo; очень важен и дает понять, что что-то сломано. Пусть лучше повиснет тест, нежели готовый продукт у заказчика.</p>

<p>Под занавес приведу список основных функций-проверок (<code>assert</code>-фукнции), которые доступны в <code>cmockery</code>:</p>

<ul>
<li><code>assert_true()</code>, <code>assert_false()</code> — проверка булевых флагов</li>
<li><code>assert_int_equal()</code>, <code>assert_int_not_equal()</code> — сравнение для типа <code>int</code></li>
<li><code>assert_string_equal()</code>, <code>assert_string_not_equal()</code> — сравнение для типа <code>char*</code> (для С-строк, заканчивающихся нулем)</li>
<li><code>assert_memory_equal()</code>, <code>assert_memory_not_equal()</code> — сравнение кусков памяти</li>
<li><code>assert_in_range()</code>, <code>assert_not_in_range()</code> — проверка нахождения числа в указанном интервале</li>
<li><code>assert_in_set()</code>, <code>assert_not_in_set()</code> — проверка нахождения строки <code>(char*)</code> среди заданного набора строк</li>
<li><code>fail()</code> — безусловное завершения теста с ошибкой</li>
</ul>

<p><strong>Вывод</strong></p>

<p>Unit-тестирование в С порой сопряжено с трудностями, но оно возможно. И нет причин от него отказываться.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit-тест для Coredump в Windows]]></title>
    <link href="http://demin.ws/blog/russian/2009/02/26/coredump-for-windows-unittest/"/>
    <updated>2009-02-26T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/02/26/coredump-for-windows-unittest/</id>
    <content type="html"><![CDATA[<p>Как мне подсказали в комментариях к посту про <a href="http://demin.ws/blog/russian/2009/02/25/coredump-for-windows/">создание coredump файлов в Windows</a>, если изменить код возврата из функции обработки исключения, то можно подавить появление стандартного окна об ошибке. Посему родился unit-тест для этого модуля.</p>

<p>Модифицированный текст файла <code>coredump.cpp</code>, в котором с помощью макроса <code>UNIT_TESTING</code> встроена поддержка для тестирования. Если этот макрос определен, то, как я уже сказал, подавляется появление окна с ошибкой, и <code>coredump</code> файл создается с постоянным именем.</p>

<p>Файл <code>coredump.cpp</code>:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;windows.h&gt;</span>
<span class="hl ppc">#include &lt;dbghelp.h&gt;   </span>
<span class="hl ppc">#include &lt;stdio.h&gt;</span>       <span class="hl slc">// _snprintf</span>
<span class="hl ppc"></span>
<span class="hl slc">// Наш обработчик непойманного исключения.</span>
<span class="hl kwb">static</span> LONG WINAPI <span class="hl kwd">ExceptionFilter</span><span class="hl opt">(</span>EXCEPTION_POINTERS<span class="hl opt">*</span> ExceptionInfo<span class="hl opt">);</span>

<span class="hl slc">// Статический экземпляр переменной, конструктор которой</span>
<span class="hl slc">// вызывается до начала функции main().</span>
<span class="hl kwb">static struct</span> CoredumpInitializer <span class="hl opt">{</span>
  <span class="hl kwd">CoredumpInitializer</span><span class="hl opt">() {</span>
    <span class="hl kwd">SetUnhandledExceptionFilter</span><span class="hl opt">(&amp;</span>ExceptionFilter<span class="hl opt">);</span>
  <span class="hl opt">}</span>
<span class="hl opt">}</span> coredumpInitializer<span class="hl opt">;</span>

LONG WINAPI <span class="hl kwd">ExceptionFilter</span><span class="hl opt">(</span>EXCEPTION_POINTERS<span class="hl opt">*</span> ExceptionInfo<span class="hl opt">) {</span>
  <span class="hl kwb">char</span> fname<span class="hl opt">[</span>_MAX_PATH<span class="hl opt">];</span>

  SYSTEMTIME st<span class="hl opt">;</span>
  <span class="hl kwd">GetLocalTime</span><span class="hl opt">(&amp;</span>st<span class="hl opt">);</span>

  HANDLE proc <span class="hl opt">=</span> <span class="hl kwd">GetCurrentProcess</span><span class="hl opt">();</span>

<span class="hl ppc">#ifdef UNIT_TESTING</span>
  <span class="hl kwd">lstrcpy</span><span class="hl opt">(</span>fname<span class="hl opt">,</span> <span class="hl str">&quot;___coredump.dmp&quot;</span><span class="hl opt">);</span>
<span class="hl ppc">#else</span>
  <span class="hl slc">// Формируем имя для coredump'а.</span>
  <span class="hl kwd">_snprintf</span><span class="hl opt">(</span>
    fname<span class="hl opt">,</span> _MAX_PATH<span class="hl opt">,</span> 
    <span class="hl str">&quot;coredump-%ld-%ld-%04d%02d%02d%02d%02d%02d%03d.dmp&quot;</span><span class="hl opt">,</span> 
    <span class="hl kwd">GetProcessId</span><span class="hl opt">(</span>proc<span class="hl opt">),</span> <span class="hl kwd">GetCurrentThreadId</span><span class="hl opt">(),</span>
    st<span class="hl opt">.</span>wYear<span class="hl opt">,</span> st<span class="hl opt">.</span>wMonth<span class="hl opt">,</span> st<span class="hl opt">.</span>wDay<span class="hl opt">,</span> 
    st<span class="hl opt">.</span>wHour<span class="hl opt">,</span> st<span class="hl opt">.</span>wMinute<span class="hl opt">,</span> st<span class="hl opt">.</span>wSecond<span class="hl opt">,</span> st<span class="hl opt">.</span>wMilliseconds
  <span class="hl opt">);</span>
<span class="hl ppc">#endif</span>

  <span class="hl slc">// Открываем файл.</span>
  HANDLE file <span class="hl opt">=</span> <span class="hl kwd">CreateFile</span><span class="hl opt">(</span>
    fname<span class="hl opt">,</span> 
    GENERIC_READ<span class="hl opt">|</span>GENERIC_WRITE<span class="hl opt">,</span> 
    FILE_SHARE_READ<span class="hl opt">,</span> 
    NULL<span class="hl opt">,</span>
    CREATE_ALWAYS<span class="hl opt">,</span> 
    FILE_ATTRIBUTE_NORMAL<span class="hl opt">,</span> 
    NULL
  <span class="hl opt">);</span>

  MINIDUMP_EXCEPTION_INFORMATION info<span class="hl opt">;</span>
  info<span class="hl opt">.</span>ExceptionPointers <span class="hl opt">=</span> ExceptionInfo<span class="hl opt">;</span>
  info<span class="hl opt">.</span>ThreadId <span class="hl opt">=</span> <span class="hl kwd">GetCurrentThreadId</span><span class="hl opt">();</span>
  info<span class="hl opt">.</span>ClientPointers <span class="hl opt">=</span> NULL<span class="hl opt">;</span>

  <span class="hl slc">// Собственно, сбрасываем образ памяти в файл.</span>
  <span class="hl kwd">MiniDumpWriteDump</span><span class="hl opt">(</span>  
    proc<span class="hl opt">,</span> 
    <span class="hl kwd">GetProcessId</span><span class="hl opt">(</span>proc<span class="hl opt">),</span> 
    file<span class="hl opt">,</span>
    MiniDumpWithFullMemory<span class="hl opt">,</span>
    ExceptionInfo ? <span class="hl opt">&amp;</span>info <span class="hl opt">:</span> NULL<span class="hl opt">,</span>
    NULL<span class="hl opt">,</span> NULL
  <span class="hl opt">);</span>

  <span class="hl kwd">CloseHandle</span><span class="hl opt">(</span>file<span class="hl opt">);</span>

<span class="hl ppc">#ifdef UNIT_TESTING</span>
  <span class="hl kwa">return</span> EXCEPTION_EXECUTE_HANDLER<span class="hl opt">;</span>
<span class="hl ppc">#else</span>
  <span class="hl kwa">return</span> EXCEPTION_CONTINUE_SEARCH<span class="hl opt">;</span>
<span class="hl ppc">#endif</span>
<span class="hl opt">}</span>
</pre>

<p>Теперь, собственно, тест:</p>

<p>Файл <code>coredump_unittest.cpp</code>:</p>

<pre class="hl">
<span class="hl ppc">#include</span> <span class="hl pps">&quot;gtest/gtest.h&quot;</span><span class="hl ppc"></span>

<span class="hl ppc">#include &lt;fstream&gt;</span>
<span class="hl ppc">#include &lt;windows.h&gt;</span>
<span class="hl ppc">#include &lt;stdlib.h&gt;</span>

<span class="hl kwd">TEST</span><span class="hl opt">(</span>Coredump<span class="hl opt">,</span> CoredumpCreation<span class="hl opt">) {</span>
   <span class="hl kwb">const char</span><span class="hl opt">*</span> coredump <span class="hl opt">=</span> <span class="hl str">&quot;___coredump.dmp&quot;</span><span class="hl opt">;</span>

   <span class="hl slc">// На всякий случай заведомо стираем старые файлы.</span>
   <span class="hl kwd">EXPECT_EQ</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> std<span class="hl opt">::</span><span class="hl kwd">system</span><span class="hl opt">(</span><span class="hl str">&quot;cmd.exe /c del ___coredump_main.* 1&gt;nul 2&gt;&amp;1&quot;</span><span class="hl opt">));</span>

   <span class="hl slc">// Создаем файл с тестовой программой.</span>
   std<span class="hl opt">::</span>string program <span class="hl opt">=</span> <span class="hl str">&quot;int main() { *(char *)0 = 0; return 0; }&quot;</span><span class="hl opt">;</span>
   std<span class="hl opt">::</span>ofstream <span class="hl kwd">os</span><span class="hl opt">(</span><span class="hl str">&quot;___coredump_main.cpp&quot;</span><span class="hl opt">);</span>
   os <span class="hl opt">&lt;&lt;</span> program <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
   os<span class="hl opt">.</span><span class="hl kwd">close</span><span class="hl opt">();</span>

   <span class="hl slc">// Компилируем тестовую программу с опцией UNIT_TESTING.</span>
   <span class="hl slc">// С этой опцией coredump файл будет создаваться с постоянным</span>
   <span class="hl slc">// именем &quot;___coredump.dmp&quot;, и будет подавляется окно с сообщением</span>
   <span class="hl slc">// об ошибке. </span>
   <span class="hl kwd">EXPECT_EQ</span><span class="hl opt">(</span>
      <span class="hl num">0</span><span class="hl opt">,</span> std<span class="hl opt">::</span><span class="hl kwd">system</span><span class="hl opt">(</span>
         <span class="hl str">&quot;cl /Zi /DUNIT_TESTING /Fe___coredump_main.exe&quot;</span>
         <span class="hl str">&quot; ___coredump_main.cpp coredump.cpp dbghelp.lib&quot;</span>
         <span class="hl str">&quot; 1&gt;nul 2&gt;&amp;1&quot;</span>
      <span class="hl opt">)</span>
   <span class="hl opt">);</span>

   <span class="hl slc">// На всякий случая удаляем старый coredump файл.</span>
   std<span class="hl opt">::</span><span class="hl kwd">remove</span><span class="hl opt">(</span>coredump<span class="hl opt">);</span>

   <span class="hl slc">// Убеждаемся, что файл действительно удалился.</span>
   std<span class="hl opt">::</span>ifstream <span class="hl kwd">isdel</span><span class="hl opt">(</span>coredump<span class="hl opt">);</span>
   <span class="hl kwd">EXPECT_FALSE</span><span class="hl opt">(</span>isdel<span class="hl opt">.</span><span class="hl kwd">good</span><span class="hl opt">());</span>
   isdel<span class="hl opt">.</span><span class="hl kwd">close</span><span class="hl opt">();</span>

   <span class="hl slc">// Запускаем тестовую программу.</span>
   <span class="hl kwd">ASSERT_EQ</span><span class="hl opt">(</span><span class="hl num">0xC0000005</span><span class="hl opt">,</span> std<span class="hl opt">::</span><span class="hl kwd">system</span><span class="hl opt">(</span><span class="hl str">&quot;___coredump_main.exe&quot;</span><span class="hl opt">));</span>

   <span class="hl slc">// Проверяем, создался ли файл coredump.dmp.</span>
   std<span class="hl opt">::</span>ifstream <span class="hl kwd">is</span><span class="hl opt">(</span>coredump<span class="hl opt">);</span>
   <span class="hl kwd">EXPECT_TRUE</span><span class="hl opt">(</span>is<span class="hl opt">.</span><span class="hl kwd">good</span><span class="hl opt">());</span>
   is<span class="hl opt">.</span><span class="hl kwd">close</span><span class="hl opt">();</span>

   <span class="hl slc">// Удаляем за собой временные файлы.</span>
   <span class="hl kwd">EXPECT_EQ</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> std<span class="hl opt">::</span><span class="hl kwd">system</span><span class="hl opt">(</span><span class="hl str">&quot;cmd.exe /c del ___coredump_main.* 1&gt;nul 2&gt;&amp;1&quot;</span><span class="hl opt">));</span>
   std<span class="hl opt">::</span><span class="hl kwd">remove</span><span class="hl opt">(</span>coredump<span class="hl opt">);</span>
<span class="hl opt">}</span>
</pre>

<p>Данный тест имеет ряд существенных недостатков. Во-первых, он использует файловую систему, и во-вторых, он вызывает компилятор, что занимает небольшое, но все же время. Недостатки неприятные, но в целом приемлемые.</p>

<p>Кстати, <a href="http://code.google.com/p/googletest/">Google Test Framework</a> умеет делать так называемые &ldquo;<a href="http://code.google.com/p/googletest/wiki/GoogleTestAdvancedGuide#Death_Tests">смертельные</a>&rdquo; (death) тесты. То есть можно протестировать именно аварийное &ldquo;падение&rdquo; фрагмента кода, например, из-за нарушения защиты памяти, и для проведения такого теста не надо вручную компилировать что-либо, как мы делали тут. К сожалению, эта возможность основана на использования юниксового системного вызова <code>fork()</code> и поэтому доступна только на UNIX платформах.</p>

<p>Дежурный файл для запуска тестов (<code>runner.cpp</code>):</p>

<pre class="hl">
<span class="hl ppc">#include</span> <span class="hl pps">&quot;gtest/gtest.h&quot;</span><span class="hl ppc"></span>
<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[]) {</span>
  testing<span class="hl opt">::</span><span class="hl kwd">InitGoogleTest</span><span class="hl opt">(&amp;</span>argc<span class="hl opt">,</span> argv<span class="hl opt">);</span>
  <span class="hl kwa">return</span> <span class="hl kwd">RUN_ALL_TESTS</span><span class="hl opt">();</span>
<span class="hl opt">}</span>
</pre>

<p>Традиционно, для компиляции тестов нам нужна <a href="http://code.google.com/p/googletest/">Google Test Framework</a>. Как я уже <a href="http://demin.ws/blog/russian/2009/01/28/unit-testing-concurrent-threads/">писал</a>, вы можете скачать <a href="http://demin.ws/downloads/gtest-amalgamation-1.2.1.zip">мою модификацию</a>  этой библиотеки, которая сокращена до двух необходимых файлов <code>gtest/gtest.h</code> и <code>gtest-all.cc</code>.</p>

<p>Компилируем, например в Visual Studio 2008:</p>

<pre><code>cl /EHsc /I. /Fecoredump_unittest_vs2008.exe /DWIN32 runner.cpp coredump_unittest.cpp gtest\gtest-all.cc`
</code></pre>

<p>Запускаем:</p>

<pre><code>[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from Coredump
[ RUN      ] Coredump.CoredumpCreation
[       OK ] Coredump.CoredumpCreation
[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran.
[  PASSED  ] 1 test.
</code></pre>

<p>Работает.</p>

<p>Сразу скажу, я проверял все это только под Windows XP SP2 и Server 2003. Пожалуйста, сообщайте, если есть какие-то проблемы или тонкости под другими виндами.</p>

<p>Как это часто бывает в unit-тестировании, тест получился больше, чем сам тестируемый код. Но повторюсь — это того стоит. Буквально скоро расскажу о моих приключениях с <a href="http://demin.ws/blog/russian/2009/01/29/milliseconds-timer-for-windows-and-unix/">модулем таймера</a>, и как меня выручили тесты.</p>

<p>Другие посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2009/02/25/coredump-for-windows/">Coredump для Windows</a></li>
<li><a href="http://demin.ws/blog/russian/2009/03/05/queryperformancecounter-on-multicore-and-virtual-systems/">QueryPerformanceCounter на мультиядерных и виртуальных системах</a></li>
<li><a href="http://demin.ws/blog/russian/2009/01/28/unit-testing-concurrent-threads/">Unit-тестирование для параллельных потоков</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Чарльз Уэзерелл, "Этюды для программистов"]]></title>
    <link href="http://demin.ws/blog/russian/2009/02/26/etudes-for-programmers/"/>
    <updated>2009-02-26T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/02/26/etudes-for-programmers/</id>
    <content type="html"><![CDATA[<p>Лет пятнадцать назад мне в руки попала книга Чарльза Уэзерелла &ldquo;<a href="http://www.ozon.ru/context/detail/id/1940685/?partner=easy-coding">Этюды для программистов</a>&rdquo;.</p>

<p><img src="http://demin.ws/images/covers/russian/etudes-for-programmers-cover.jpg" /></p>

<p>Книга содержит 27 “этюдов”. Каждый этюд – это законченная задача для обучающихся программированию. Удивительно, книге более 30 лет, но любой из этюдов может быть до сих пор использован по назначению. Я сам с удовольствием давал этюды из этой книги студентам.</p>

<p>Тематика задач совершенно разная: ретроспективная задача по программе, которая печатает свой текст, игра Джона Конвея “<a href="http://ru.wikipedia.org/wiki/%D0%98%D0%B3%D1%80%D0%B0_%D0%B6%D0%B8%D0%B7%D0%BD%D1%8C">Жизнь</a>”, игровое и имитационное моделирование, интерпретаторы форматов и форматирование текста, статистический анализ карточных игр, символьные алгебраические вычисления, плавающая арифметика и работа с числами большой разрядности, математические методы взлома шифров, искусственный интеллект, <a href="http://ru.wikipedia.org/wiki/%D0%9C%D0%B0%D1%88%D0%B8%D0%BD%D0%B0_%D1%82%D1%8C%D1%8E%D1%80%D0%B8%D0%BD%D0%B3%D0%B0">машина Тьюринга</a>, рекурсивные алгоритмы поиска, компрессия данных, эмуляция виртуальной компьютерной архитектуры, связывающий загрузчик, компилятор, интерпретатор символьного а-ля функционального языка и т.д. И все эти задачи времен, когда программировали на фортране с помощью перфокарт!</p>

<p>Удивительно, как человек смог написать столь долгоживущую книгу, легкого и неперегруженного чрезмерной научностью содержания. Я пытался найти какие-то еще книги Уэзерелла, но безуспешно. Может это его единственная книга.</p>

<p>И я бережно храню переведенный на русский экземпляр до сих пор. Не исключено, что эта книга пришлась мне в нужное время, и поэтому она стала моей главной книгой.</p>

<p>С различным успехом, но с огромным азартом, я возился в разные времена со всеми этюдами.</p>

<p>Был интересный эпизод с одним из этюдов. В главе 24, под названием “Секрет фирмы, или Математический подход к раскрытию шифров” описывается задача по взлому <a href="http://ru.wikipedia.org/wiki/%D0%A8%D0%B8%D1%84%D1%80_%D0%92%D0%B8%D0%B6%D0%B5%D0%BD%D0%B5%D1%80%D0%B0">шифра Виженера</a> (точнее, одной из его модификаций). В книге давался зашифрованный текст, описывался метод взлома и предлагалось расшифровать секретное послание.</p>

<p><img src="http://demin.ws/images/blog/efp-vigenere-cryptotext-russian.jpg" /></p>

<p>И так меня эта задача торкнула, что я даже списался с одним из технических переводчиков этой книги. Тогда еще мне пришлось делать это по обычной бумажной почте России. У меня была масса вопросов, так как расшифровать предлагаемый в книге пример не получалось (математический анализ я тогда еще не изучал). Мне ответили, и среди всего прочего рассказали, как они сами (те, кто переводил книгу) расшифровывали. Ведь им, чтобы опубликовать это на русском языке, надо было иметь исходное сообщение, но в книге не приводился ответ, так что пришлось засучить рукава и заняться английской шифровкой:</p>

<p><img src="http://demin.ws/images/blog/efp-vigenere-cryptotext-english.jpg" /></p>

<p>Решить задачу предложенным автором способом не получилось, и наши решили все по-своему (советская математическая школа показала себя), выявив, что метод автора не совсем правильный. В русском варианте в главе 24 есть “партия переводчика”, где описывается “советский” способ решения. Попутно наши переводчики выяснили, что в английском оригинале, &ldquo;Etudes for programmers&rdquo;, есть опечатка! Одна из строк шифровки просто пропущена. Уже после перевода они связывались с господином Уэзереллом, и тот подтвердил факт наличия досадной опечатки.</p>

<p>Кстати, в интернете ходит много решений “этюдов” Уэзерелла. Например, программа, <a href="http://vak.ru/doku.php/proj/kalah/kalah">играющая в Калах</a>, или <a href="http://vak.ru/doku.php/proj/trac/trac">интерпретатор символьного интерактивного языка TRAC</a>.</p>

<p>Но теперь к самому главному.</p>

<p>Пару дней назад королевская почта доставила мне то, что я так давно мечтал полистать лично — это английский оригинал этой книги.</p>

<p><a href="http://www.amazon.co.uk/gp/product/0132918072/ref=as_li_tf_il?ie=UTF8&tag=prodiy-21&linkCode=as2&camp=1634&creative=6738&creativeASIN=0132918072"><img border="0" src="http://ws.assoc-amazon.co.uk/widgets/q?_encoding=UTF8&Format=_SL160_&ASIN=0132918072&MarketPlace=GB&ID=AsinImage&WS=1&tag=prodiy-21&ServiceVersion=20070822" ></a><img src="http://www.assoc-amazon.co.uk/e/ir?t=prodiy-21&l=as2&o=2&a=0132918072" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p>Книга была издана аж в 1978 (я тогда даже не ходил пешком под стол, а просто лежал) и более не переиздавалась. Я купил списанный библиотечный экземпляр. Немного потертый, переклеенный скотчем по корешку, с библиотечным кармашком для карточки на обратной стороне обложки. Экстаз, один словом.</p>

<p>Если в мире программирования могут существовать иконы, то “Этюды для программистов” Чальза Уэзеррела одна из них.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coredump для Windows]]></title>
    <link href="http://demin.ws/blog/russian/2009/02/25/coredump-for-windows/"/>
    <updated>2009-02-25T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/02/25/coredump-for-windows/</id>
    <content type="html"><![CDATA[<p>Тривиальная задачка: что будет, если запустить вот такую программу?</p>

<p>Файл <code>main.cpp</code>:</p>

<pre class="hl">
<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
  <span class="hl opt">*(</span><span class="hl kwb">char</span> <span class="hl opt">*)</span><span class="hl num">0</span> <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>В UNIX&rsquo;е самым вероятным исходом будет сообщение:</p>

<pre><code>Segmentation fault
</code></pre>

<p>Это означает безусловное падение из-за нарушения защиты памяти. Если пользователь разрешил создание <code>coredump</code> файлов (например, для командного интерпретатора <code>bash</code> это делается командой):</p>

<pre><code>ulimit -c unlimited
</code></pre>

<p>то после запуска будет создан файл <code>coredump</code>. Этот файл фактически содержит образ памяти вашей программы в момент возникновения ошибки, и его можно открыть в отладчике, например в <code>gdb</code>:</p>

<pre><code>gdb -c coredump
</code></pre>

<p>После чего командой <code>bt</code> (back trace) можно точно установить место в программе, в котором произошла ошибка. Естественно, для удобства, программа должна быть скомпилирована с включенной отладочной информацией.</p>

<p>Когда ошибка происходит в процессе отладки у вас на глазах, то проще запустить программу сразу под отладчиком. Но когда, например, ошибка происходит у заказчика, и вас нет рядом, то тогда можно попросить прислать вам <code>coredump</code> файл для анализа. Во многих случаях этого хватает для локализации проблемы.</p>

<p>А что делать под Windows? Запуск приведенной программы под виндами обычно приведет вот к такому сообщению:</p>

<p><img src="http://demin.ws/images/blog/windows-coredump.gif" /></p>

<p>Неискушенный пользователь обычно жмет <code>Don't send</code>, и затем программа благополучно падает, и не останется никакой информации произошедшей ошибке. Конечно, программа может вести подробное журналирование, но часто ошибки подобного рода редко удается локализовать по журналам.</p>

<p>Я слышал, что может так случиться, что после нажатия <code>Send Error Report</code> Майкрософт с вами свяжется и поможет решить проблему. Со мной такого ни разу не случалось, увы.</p>

<p>В Windows тоже есть схожий механизм создания “на лету” образов памяти работающего процесса, но для его использования надо немного потрудиться.</p>

<p>Windows предоставляет механизм исключений, чем-то схожий с исключениями в С++ и системными сигналами в UNIX. На С++ эти исключения похожи <code>try-catch</code> синтаксисом, а на UNIX — тем, что можно перехватывать исключительные ситуации (например, ошибки) в программе типа нашей (для UNIX можно было бы перехватить сигнал <code>SIGSEGV</code> и получить управление при возникновении подобной ошибки).</p>

<p>Естественно, сигналы в UNIX используются не только для этого.</p>

<p>Итак, ниже я приведу исходный текст небольшого модуля, который будет создавать аналогичный по смыслу юниксовому coredump&rsquo;у файл, по которому можно будет установить причину аварийного завершения программы. Все, что нужно — это прилинковать этот модуль в ваш проект. Ничего вызывать специально не надо. Модуль инициализируется автоматически.</p>

<p>Файл <code>coredump.cpp</code>:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;windows.h&gt;</span>
<span class="hl ppc">#include &lt;dbghelp.h&gt;   </span>
<span class="hl ppc">#include &lt;stdio.h&gt;</span>       <span class="hl slc">// _snprintf</span>
<span class="hl ppc"></span>
<span class="hl slc">// Наш обработчик непойманного исключения.</span>
<span class="hl kwb">static</span> LONG WINAPI <span class="hl kwd">ExceptionFilter</span><span class="hl opt">(</span>EXCEPTION_POINTERS<span class="hl opt">*</span> ExceptionInfo<span class="hl opt">);</span>

<span class="hl slc">// Статический экземпляр переменной, конструктор которой</span>
<span class="hl slc">// вызывается до начала функции main().</span>
<span class="hl kwb">static struct</span> CoredumpInitializer <span class="hl opt">{</span>
  <span class="hl kwd">CoredumpInitializer</span><span class="hl opt">() {</span>
    <span class="hl kwd">SetUnhandledExceptionFilter</span><span class="hl opt">(&amp;</span>ExceptionFilter<span class="hl opt">);</span>
  <span class="hl opt">}</span>
<span class="hl opt">}</span> coredumpInitializer<span class="hl opt">;</span>

LONG WINAPI <span class="hl kwd">ExceptionFilter</span><span class="hl opt">(</span>EXCEPTION_POINTERS<span class="hl opt">*</span> ExceptionInfo<span class="hl opt">) {</span>
  <span class="hl kwb">char</span> fname<span class="hl opt">[</span>_MAX_PATH<span class="hl opt">];</span>

  SYSTEMTIME st<span class="hl opt">;</span>
  <span class="hl kwd">GetLocalTime</span><span class="hl opt">(&amp;</span>st<span class="hl opt">);</span>

  HANDLE proc <span class="hl opt">=</span> <span class="hl kwd">GetCurrentProcess</span><span class="hl opt">();</span>

  <span class="hl slc">// Формируем имя для coredump'а.</span>
  <span class="hl kwd">_snprintf</span><span class="hl opt">(</span>
    fname<span class="hl opt">,</span> _MAX_PATH<span class="hl opt">,</span> 
    <span class="hl str">&quot;coredump-%ld-%ld-%04d%02d%02d%02d%02d%02d%03d.dmp&quot;</span><span class="hl opt">,</span> 
    <span class="hl kwd">GetProcessId</span><span class="hl opt">(</span>proc<span class="hl opt">),</span> <span class="hl kwd">GetCurrentThreadId</span><span class="hl opt">(),</span>
    st<span class="hl opt">.</span>wYear<span class="hl opt">,</span> st<span class="hl opt">.</span>wMonth<span class="hl opt">,</span> st<span class="hl opt">.</span>wDay<span class="hl opt">,</span> 
    st<span class="hl opt">.</span>wHour<span class="hl opt">,</span> st<span class="hl opt">.</span>wMinute<span class="hl opt">,</span> st<span class="hl opt">.</span>wSecond<span class="hl opt">,</span> st<span class="hl opt">.</span>wMilliseconds
  <span class="hl opt">);</span>

  <span class="hl slc">// Открываем файл.</span>
  HANDLE file <span class="hl opt">=</span> <span class="hl kwd">CreateFile</span><span class="hl opt">(</span>
    fname<span class="hl opt">,</span>
    GENERIC_READ<span class="hl opt">|</span>GENERIC_WRITE<span class="hl opt">,</span> 
    FILE_SHARE_READ<span class="hl opt">,</span>
    NULL<span class="hl opt">,</span>
    CREATE_ALWAYS<span class="hl opt">,</span>
    FILE_ATTRIBUTE_NORMAL<span class="hl opt">,</span> 
    NULL
  <span class="hl opt">);</span>

  MINIDUMP_EXCEPTION_INFORMATION info<span class="hl opt">;</span>
  info<span class="hl opt">.</span>ExceptionPointers <span class="hl opt">=</span> ExceptionInfo<span class="hl opt">;</span>
  info<span class="hl opt">.</span>ThreadId <span class="hl opt">=</span> <span class="hl kwd">GetCurrentThreadId</span><span class="hl opt">();</span>
  info<span class="hl opt">.</span>ClientPointers <span class="hl opt">=</span> NULL<span class="hl opt">;</span>

  <span class="hl slc">// Собственно, сбрасываем образ памяти в файл.</span>
  <span class="hl kwd">MiniDumpWriteDump</span><span class="hl opt">(</span>
    proc<span class="hl opt">,</span>
    <span class="hl kwd">GetProcessId</span><span class="hl opt">(</span>proc<span class="hl opt">),</span>
    file<span class="hl opt">,</span>
    MiniDumpWithFullMemory<span class="hl opt">,</span>
    ExceptionInfo ? <span class="hl opt">&amp;</span>info <span class="hl opt">:</span> NULL<span class="hl opt">,</span>
    NULL<span class="hl opt">,</span> NULL
  <span class="hl opt">);</span>

  <span class="hl kwd">CloseHandle</span><span class="hl opt">(</span>file<span class="hl opt">);</span>

  <span class="hl kwa">return</span> EXCEPTION_CONTINUE_SEARCH<span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Данный модуль создает статический объект <code>coredumpInitializer</code>, конструктор которого вызывается до функции <code>main()</code>. Конструктор устанавливает специальный обработчик для системных исключений, в котором в файл и записывается образ памяти текущего процесса при возникновении системных ошибок. Имя файла содержит идентификатор процесса, идентификатор потока и текущее время. Этот файл можно открыть в Visual Studio просто запустив его, либо в самой студии в меню <code>File-&gt;Open-&gt;Project/Solution</code> выбрать этот файл, указав его тип как <code>Dump files</code>. Далее надо запустить программу через отладчик, нажав <code>F5</code>, и отладчик остановится на месте возникновения ошибки. Естественно, для работы на уровне исходного текста необходимо наличие файла с расширением .PDB, содержащего символьную информацию, в том каталоге, где расположен ваш coredump файл. Файл с раширением .PDB обычно создается при компиляции с включенной отладочной информацией, например, при использования ключа <code>/Zi</code>.</p>

<p>Надо отметить, что если ошибка в вашей программе произойдет до функции <code>main()</code>, например, при инициализации каких-то статических объектов, то данный модуль может и не сработать, так как вызов конструктора объекта <code>coredumpInitializer</code> может быть запланирован уже после проблемного места. Вообще, статические переменные и объекты — это источник многих проблем, в основном из-за неопределенного порядка их инициализации, и их использования стоит избегать по возможности.</p>

<p>Итак, компилируем:</p>

<pre><code>cl /Zi main.cpp coredump.cpp dbghelp.lib
</code></pre>

<p>Для компиляции необходима библиотека <code>DbgHelp.lib</code>. Она обычно входит в состав Windows SDK в составе студии. Также получившийся исполняемый файл main.exe будет использовать динамическую библиотеку <code>DbgHelp.dll</code>. <code>DbgHelp.dll</code> входит в состав так называемых redistributable файлов, то есть которые вы имеете право распространять вместе с программой на случай, если у клиента нет этой dll&rsquo;ки. Эта dll&rsquo;ка с большой вероятностью находится у вас в каталоге <code>C:\WINDOWS\system32</code>.</p>

<p>Теперь при запуске программы <code>main.exe</code> и после закрытия пользователем окна с сообщением об ошибке (см. картинку выше), будет создан .DMP файл с именем, начинающийся со слова coredump, например <code>coredump-4584-3240-20090226022327093.dmp</code>. Этот файл уже можно открыть в Visual Studio.</p>

<p>Теперь, когда у заказчика программа падает, можно попросить его прислать такой файл для анализа. Единственное, надо хранить .PDB файлы, соответствующие отданным заказчику исполняемым модулям.</p>

<p>Пока я не придумал, как сделать для модуля <code>coredump.cpp</code> автоматизированный unit-тест. Проблема в том, что тут надо как-то подавить вывод окна с ошибкой (см. картинку выше). Если это сделать, то тест может быть вполне себе автоматизированным.</p>

<p>Более подробная информация вопросу создания образов памяти процесса есть в хорошей статье &ldquo;<a href="http://www.debuginfo.com/articles/effminidumps.html">Effective minidumps</a>&rdquo;.</p>

<p>Другие посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2009/02/26/coredump-for-windows-unittest/">Unit-тест для Coredump</a></li>
<li><a href="http://demin.ws/blog/russian/2009/01/28/unit-testing-concurrent-threads/">Unit-тестирование для параллельных потоков</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Голубая (Борланд) палитра для Visual Studio]]></title>
    <link href="http://demin.ws/blog/russian/2009/02/23/blue-borland-theme-for-visual-studio/"/>
    <updated>2009-02-23T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/02/23/blue-borland-theme-for-visual-studio/</id>
    <content type="html"><![CDATA[<p>В процессе перехода Visual Studio 2008 с Professional на Team System в очередной раз слетели настройки палитры. Так сложилось, годы работы на борланде приучили меня к голубому фону и желтым буквам, и ничего уже поделать нельзя. Как-то давно, покопав в интернете на тему разных палитр для Visual Studio, я пришел вот к такой трехшаговой комбинации, которая за минуту превращает стандартную микрософтовскую белую палитру в 90%-e подобие борландовой.</p>

<pre><code>Menu -&gt; Tools -&gt; Options -&gt; Environment -&gt; Fonts and Colors:
Font -&gt; Fixedsys
TextEditor:
Plain text -&gt; Yellow/Navy
KeyWord -&gt; Lime/(фон оставить по умолчанию)
</code></pre>

<p>Конечно, тут есть еще что доработать по мелочам, но лично мне и этого хватает.</p>

<p>А вот для чего я перешел с Professional на Team я расскажу <a href="http://demin.ws/blog/russian/2009/02/23/static-code-analysis-coverity-klocwork/">буквально скоро</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Статический анализ кода - Coverity, Klocwork]]></title>
    <link href="http://demin.ws/blog/russian/2009/02/23/static-code-analysis-coverity-klocwork/"/>
    <updated>2009-02-23T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/02/23/static-code-analysis-coverity-klocwork/</id>
    <content type="html"><![CDATA[<p>Все программисты ошибаются, даже самые продвинутые. Хорошим подспорьем в отлове ошибок, которые просмотрел программист, являются анализаторы кода.</p>

<p>Конечно, последней инстанцией будет непосредственно клиент, который непременно сообщит, что программа падает, но всегда хочется минимизировать такие случаи. Хорошо, когда процедура внедрения у заказчика вообще существует. Это позволяет без особых проблем сделать “критическое обновление” уже после релиза. Но в некоторых областях цена допущенных до клиента ошибок крайне высока. Например, для области встраиваемых систем любая минимальная утечка памяти будет фатальной, или, например, для разработчиков игр под игровые консоли будет трудновато “донести” до клиентов критические обновления, необходимость в которых выяснилась сразу после релиза и начала продаж (как это обычно бывает).</p>

<p>Перейдем от слов к делу и рассмотрим конкретный пример работы статического анализатора.</p>

<p>Вот пример &ldquo;не очень хорошей программы&rdquo;:</p>

<pre class="hl">
<span class="hl kwc">class</span> A <span class="hl opt">{</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
 <span class="hl kwd">A</span><span class="hl opt">() {</span>
  <span class="hl kwb">char</span><span class="hl opt">*</span> __p <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwb">char</span><span class="hl opt">[</span><span class="hl num">10</span><span class="hl opt">];</span>
  __p <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwb">char</span><span class="hl opt">[</span><span class="hl num">10</span><span class="hl opt">];</span>

  <span class="hl kwb">char</span><span class="hl opt">*</span> a <span class="hl opt">= (</span><span class="hl kwb">char</span> <span class="hl opt">*)</span><span class="hl num">0</span><span class="hl opt">;</span>
  <span class="hl opt">*</span>a <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>

  <span class="hl kwb">char</span> c<span class="hl opt">[</span><span class="hl num">10</span><span class="hl opt">];</span>
  c<span class="hl opt">[</span><span class="hl num">10</span><span class="hl opt">] =</span> <span class="hl num">0</span><span class="hl opt">;</span>
 <span class="hl opt">}</span>
 <span class="hl opt">~</span><span class="hl kwd">A</span><span class="hl opt">() {</span>
  <span class="hl kwa">delete</span> __p<span class="hl opt">;</span>

  <span class="hl kwb">char</span><span class="hl opt">*</span> a <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwb">char</span><span class="hl opt">[</span><span class="hl num">100</span><span class="hl opt">];</span>
  <span class="hl kwa">return</span><span class="hl opt">;</span>

  <span class="hl kwa">delete</span><span class="hl opt">[]</span> a<span class="hl opt">;</span>
<span class="hl opt">}</span>
<span class="hl kwc">private</span><span class="hl opt">:</span>
  <span class="hl kwb">char</span><span class="hl opt">*</span> __p<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
  A a<span class="hl opt">;</span>  
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Тут без микроскопа видно, что проблем полно:</p>

<ul>
<li><p>Утечка памяти в строке 05. Указатель <code>__p</code> явно имеет неправильное объявление в виде лишнего <code>char*</code>, которое перекрывает декларацию этого указателя в классе в строке 23. Оператор <code>delete</code> в строке 15 скорее всего закончится аварийно, так как значение <code>__p</code> для него будут неопределенно.</p></li>

<li><p>Строка 06 присваивает указателю <code>__p</code> адрес вновь распределенной памяти, тем самым затирая старое значение, присвоенное в строке 05, которое будет потеряно.</p></li>

<li><p>Строки 08 и 09 — это обращение по нулевому указателю, приводящее к нарушению защиты памяти.</p></li>

<li><p>Строки 12 и 12 — это типичное переполнение буфера (buffer overrun)</p></li>

<li><p>Память под указателем в строке 17 никогда не будет освобождена. Это утечка памяти.</p></li>
</ul>

<p>Достаточно для начала. Не спорю, пример очень вычурный, но ошибки то весьма типичные, а когда они перемешаны с “правильным” кодом, их обнаружение становится серьезной проблемой.</p>

<p>Теперь возьмем &ldquo;микроскоп&rdquo;.</p>

<p>Посмотрим, что сможет сделать для нас Visual Studio. Начиная с версии 2005 у компилятора <code>cl.exe</code> появился ключ <code>/analyze</code>, который включает дополнительный анализ и вывод предупреждений о потенциальных проблемах. К сожалению, этот ключ есть только в версии студии Team (в Professional его нет).</p>

<p>Компилируем в Visual Studio 2008 Team:</p>

<pre><code>cl /W3 /O2 /analyze /EHsc bad.cpp
</code></pre>

<p>Вот, что дает анализ:</p>

<pre><code>c:\sandbox\analyze\bad.cpp(12) : warning C6201: Index '10' is out of valid index range '0' to '9' for possibly stack allocated buffer 'c'

c:\sandbox\analyze\bad.cpp(5) : warning C6211: Leaking memory '__p' due to an exception. Consider using a local catch block to clean up memory: Lines: 5, 6

c:\sandbox\analyze\bad.cpp(9) : warning C6011: Dereferencing NULL pointer 'a': Lines: 5, 6, 8,9

c:\sandbox\analyze\bad.cpp(12) : warning C6386: Buffer overrun: accessing 'c', the writable size is '10' bytes, but '11' bytes might be written: Lines: 5, 6, 8, 9, 11, 12`
</code></pre>

<p>Не так много, как хотелось бы, но хоть что-то. Переполнение буфера в строке 12 обнаружено. Запись по нулевому указателю в строке 09 тоже найдена. Давайте разберемся с сообщением об утечке памяти. Нам сообщается, что возможна утечка, если в строке 06 произойдет исключение (<code>std::bad_alloc</code>, например), тогда память, распределенная в строке 05 будет потеряна. Это, конечно, проблема, но все-таки суть ошибки передана неверно. Как мне показалось, анализатор в <code>cl.exe</code> работает последовательно, то есть он следует ходу компиляции, отсюда и “последовательный” характер смысла выведенных предупреждений.</p>

<p>Мы в компании для статического анализа используем <a href="http://www.coverity.com/html/prevent-for-c-c++.html">Coverity Prevent for C/C++</a>. Есть еще похожий продукт — <a href="http://www.klocwork.com/">Klocwork</a>. Эти два продукта делают примерно одну и ту же работу примерно с одинаковым результатом. Мы выбрали первый из-за более подходящей нам ценовой политики и более простого встраивания в систему сборки.</p>

<p>Суть анализа, проводимого данными продуктами, это подобие псевдо-компиляции, когда строится синтаксическое дерево разбора и на основе его проводится анализ всех возможных ветвлений программы. Проходя все ветки, анализатор и проводит свои многочисленные проверки. Прикол в том, что анализ может найти проблему в таком закоулке кода, который может выполняется то раз в год (и раз в год программа падает), и может вы сами никогда не видели, как этот кусок программы работает. Анализ на уровне синтаксиса языка позволяет находить парные проблемы, которые могут быть расположены в разных частях исходного текста (например, поиск несоответствий в конструкторе и деструкторе). Также понимание синтаксиса дает возможность анализировать вложенные вызовы, когда, например, неверный указатель &ldquo;проявляет&rdquo; себя только двух или тремя уровнями выше.</p>

<p>Программы-анализаторы типа <code>lint</code> (или тот же ключ <code>/analyze</code>), которые просто ищут шаблоны &ldquo;плохого&rdquo; кода на уровне лексем, обычно выдаются миллиарды предупреждений, из которых только единицы ценны. При таком подходе разработчику быстро надоедает заниматься выуживанием “жемчужин” из общего потока мусора, и он перестает это делать. Анализаторы же в Coverity и Klocwork выдаются крайне точные сообщения, и процент ложных срабатываний крайне мал (по крайне мере на моем опыте). Также, в каждом из этих продуктов можно самостоятельно настраивать анализатор, фокусируя его на специфичных конкретно для вас потенциальных проблемах, отключая ненужные проверки для уменьшения “шума”.</p>

<p>Идея, лежащая в этих продуктах, это дать не просто нечто, генерирующее тонны текстовых файлов, в которых надо копаться вручную. Тут дается целая среда для автоматизации анализа: групповая работа, система интеграции с контролем версий, позволяющая отдельно проверять каждый внесенный кусок кода и моментально локализовывать время, место и автора “проблем”, система рецензирования когда по исправлению ошибок, общая база данных по ошибкам, которая исключает повторный анализ уже исправленных ошибок, так как положение ошибки характеризуется не просто именем файла и номером строки, на контекстом, и поэтому даже когда ошибка “переехала” в другое место, то он не будет заявлена как новая. Обычно время псевдо-компиляции равно времени вашей обычной сборки, а время самого анализа может занимать в среднем в 3-4 раза дольше. Анализатор прекрасно может использовать многоядерные системы для радикального ускорения процесса. Например, мы с интегрировали статический анализ с системой автоматических “ночных” сборок.</p>

<p>Естественно, никакой анализатор — это не панацея, и все 100% ошибок он не найдет, но изрядную долю выловит, позволив вам потратить освободившееся время на внесение новых ошибок.</p>

<p>Кстати, обе эти конторы всегда организуют бесплатный тест-драйв. Можно попробовать, чего такого интересного сможет найти их анализатор в конкретно вашем коде. Честно могу сказать, это производит впечатление даже на самых заядлых зануд и скептиков среди разработчиков и менеджеров. Когда на ваших глазах открывается такое в коде, что волосы дыбом встают, то к этому невозможно остаться равнодушным. Например, мы сопровождаем большое количество так называемого legacy кода, и тут, конечно, статический анализ проявляет себя во всей красе, хотя и новом, объектно-ориентированном и unit-оттестированном коде тоже бывают ошибки. Это человеческий фактор и от него никуда не деться.</p>

<p>Так вот, анализатор Coverity нашел все проблемы в данной маленькой, но очень плохой программе, включая несоответствие распределения памяти в конструкторе, и ее “неправильном” освобождении в деструкторе.
У нас в отделе есть даже специальная копилка, если в твоем коде статический анализатор находит серьезную проблему, типа утечки или какой-нибудь “неприятности” с указателями или памятью, то принято внести в кассу посильную сумму, чтобы ее можно было потратить коллективно при очередном походе в паб. А пабе как-то особенно продуктивно обсуждаются темы типа кто, куда и какую ошибку внес.</p>

<p>Сейчас мы рассмотрели статический анализ кода. Также существует также динамический анализ, когда уже в процессе работы программы специальными средствами производится автоматизированный поиск ошибок. Лично я постоянно использую совершенно волшебный динамический анализатор <a href="http://valgrind.org/">Valgrind</a>. Valgrind не так удобен, как мне кажется, для полностью автоматизированной проверки и больше подходит, когда надо поймать какой-то конкретный глюк, например, явную утечку памяти, обнаруженную функциональными тестами, но не выявленную статическим анализом.</p>

<p>Отдельной строкой хочу отметить Borland/CodeGear Codeguard, входящий в состав одноименной студии. Данная библиотека может опционально встраиваться борландовым компилятором в код, шпигуя его сотнями проверок на различные утечки, неправильную работу с указателями и прочими неприятностями. Код при этом замедляется в разы и порой делает невозможным отладку вычислительно тяжелых алгоритмов, но вот находимые с помощью Codeguard’а ошибки порой дорогого стоят.</p>

<p>Анализаторы кода (статические или динамические) являются крайне необходимым инструментом. А конкретно, статические, позволяют автоматизировано находится “плохие” места кода, которые проглядели программисты.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Разница между "T()" и "T"]]></title>
    <link href="http://demin.ws/blog/russian/2009/02/21/difference-between-type-and-type-with-brackets/"/>
    <updated>2009-02-21T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/02/21/difference-between-type-and-type-with-brackets/</id>
    <content type="html"><![CDATA[<p>Как совершенно справедливо было замечено в комментариях в <a href="http://demin.ws/blog/russian/2009/02/20/difference-between-new-and-new-with-brackets/">посте про разницу между &ldquo;new T()&rdquo; и &ldquo;new T&rdquo;</a> — при объявлении автоматической переменной, а не динамической через new, нельзя использовать скобки, если подразумевается вызвать конструктор по умолчанию. То есть нельзя писать:</p>

<pre class="hl">
T <span class="hl kwd">a</span><span class="hl opt">();</span>
</pre>

<p>а надо писать:</p>

<pre class="hl">
T a<span class="hl opt">;</span>
</pre>

<p>так как в первом случае такая запись будет означать декларацию функции a, которая возвращает тип <code>T</code>, а далеко не декларацию переменной класса <code>T</code> с вызовом конструктора по умолчанию.</p>

<p>Не спорю, это очевидно для профессионалов. Для новичков же порой подобная &ldquo;неочевидная&rdquo; разница вызывает затруднения, поэтому приведу простейший пример, которые расставит все на свои места.</p>

<pre class="hl">
<span class="hl ppc">#include &lt;iostream&gt;</span>
<span class="hl kwc">class</span> T <span class="hl opt">{</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl kwd">T</span><span class="hl opt">() {</span> std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;constructor T()&quot;</span><span class="hl opt">; }</span>
<span class="hl opt">};</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;T a: &quot;</span><span class="hl opt">;</span>
  <span class="hl slc">// Это синтаксис создания экземпляра класса T с вызовом</span>
  <span class="hl slc">// конструктора по умолчанию.</span>
  T a<span class="hl opt">;</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>

  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;T b(): &quot;</span><span class="hl opt">;</span>
  <span class="hl slc">// А вот это декларация функции &quot;b&quot; без аргументов,</span>
  <span class="hl slc">// которая возвращает тип T.</span>
  T <span class="hl kwd">b</span><span class="hl opt">();</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Результат:</p>

<pre><code>T a: constructor T()
T b():
</code></pre>

<p>Видно, что для <code>T b();</code> никакой конструктор не был вызван. Что в целом и ожидалось.</p>

<p>Использование круглых скобок может быть весьма <a href="http://demin.ws/blog/russian/2009/02/09/dark-corners-of-cpp/">тонким вопросом в С++</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Спрятать кнопку "Пуск" и помигать клавиатурой]]></title>
    <link href="http://demin.ws/blog/russian/2009/02/21/hide-start-button-and-flash-keyboard-lights/"/>
    <updated>2009-02-21T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/02/21/hide-start-button-and-flash-keyboard-lights/</id>
    <content type="html"><![CDATA[<p>Я с удовольствием коллекционирую всякие программные штучки-дрючки в виде миниатюрных исходников.</p>

<p>Приведу парочку из загашника. Ни разу не претендую на авторство, так что ценителей авторского права просьба сообщать о возможных нарушениях незамедлительно.</p>

<p><strong>Убирание кнопки Пуск в Windows</strong></p>

<p>Данная программа убирает кнопку Пуск (Start) на 5 секунд, а потом возвращает ее назад. Проверял на Windows 2000 и XP. Если программу прервать в отведенные 5 секунд, кнопку Пуск придется восстанавливать повторным запуском программы</p>

<pre class="hl">
<span class="hl ppc">#include &lt;windows.h&gt;</span>
<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">void</span><span class="hl opt">) {</span>
   <span class="hl slc">// Ищем кнопку.</span>
   HWND hWnd<span class="hl opt">;</span>
   hWnd <span class="hl opt">=</span> <span class="hl kwd">FindWindow</span><span class="hl opt">(</span><span class="hl str">&quot;Shell_TrayWnd&quot;</span><span class="hl opt">,</span> NULL<span class="hl opt">);</span>
   hWnd <span class="hl opt">=</span> <span class="hl kwd">FindWindowEx</span><span class="hl opt">(</span>hWnd<span class="hl opt">,</span> NULL<span class="hl opt">,</span> <span class="hl str">&quot;BUTTON&quot;</span><span class="hl opt">,</span> NULL<span class="hl opt">);</span>

   <span class="hl slc">// Прячем её.</span>
   <span class="hl kwd">ShowWindow</span><span class="hl opt">(</span>hWnd<span class="hl opt">,</span> SW_HIDE<span class="hl opt">);</span>

   <span class="hl slc">// Ждём.</span>
   <span class="hl kwd">Sleep</span><span class="hl opt">(</span><span class="hl num">5000</span><span class="hl opt">);</span>

   <span class="hl slc">// Показываем обратно.</span>
   <span class="hl kwd">ShowWindow</span><span class="hl opt">(</span>hWnd<span class="hl opt">,</span> SW_SHOW<span class="hl opt">);</span>

   <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p><strong>Мигание индикаторами на клавиатуре</strong></p>

<p>Данная программа устраивает бегущий огонек по индикаторам <code>NUM LOCK</code>, <code>CAPS LOCK</code> и <code>SCROLL LOCK</code> на более менее обычных клавиатурах.</p>

<pre class="hl">
<span class="hl ppc">#include &lt;windows.h&gt;</span>

<span class="hl kwb">void</span> <span class="hl kwd">kbdLight</span><span class="hl opt">(</span>WORD code<span class="hl opt">) {</span>
   INPUT input<span class="hl opt">;</span>

   input<span class="hl opt">.</span>type <span class="hl opt">=</span> INPUT_KEYBOARD<span class="hl opt">;</span>
   input<span class="hl opt">.</span>ki<span class="hl opt">.</span>wVk <span class="hl opt">=</span> code<span class="hl opt">;</span>
   input<span class="hl opt">.</span>ki<span class="hl opt">.</span>wScan <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
   input<span class="hl opt">.</span>ki<span class="hl opt">.</span>dwFlags <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
   input<span class="hl opt">.</span>ki<span class="hl opt">.</span>time <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
   input<span class="hl opt">.</span>ki<span class="hl opt">.</span>dwExtraInfo <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>

   <span class="hl kwd">SendInput</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">, &amp;</span>input<span class="hl opt">,</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span>input<span class="hl opt">));</span>

   input<span class="hl opt">.</span>type <span class="hl opt">=</span> INPUT_KEYBOARD<span class="hl opt">;</span>
   input<span class="hl opt">.</span>ki<span class="hl opt">.</span>wVk <span class="hl opt">=</span> code<span class="hl opt">;</span>
   input<span class="hl opt">.</span>ki<span class="hl opt">.</span>wScan <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
   input<span class="hl opt">.</span>ki<span class="hl opt">.</span>dwFlags <span class="hl opt">=</span> KEYEVENTF_KEYUP<span class="hl opt">;</span>
   input<span class="hl opt">.</span>ki<span class="hl opt">.</span>time <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
   input<span class="hl opt">.</span>ki<span class="hl opt">.</span>dwExtraInfo <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>

   <span class="hl kwd">SendInput</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">, &amp;</span>input<span class="hl opt">,</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span>input<span class="hl opt">));</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">void</span><span class="hl opt">) {</span>
   <span class="hl kwa">while</span> <span class="hl opt">(</span><span class="hl kwa">true</span><span class="hl opt">) {</span>
      <span class="hl kwd">kbdLight</span><span class="hl opt">(</span>VK_NUMLOCK<span class="hl opt">);</span>
      <span class="hl kwd">Sleep</span><span class="hl opt">(</span><span class="hl num">100</span><span class="hl opt">);</span>
      <span class="hl kwd">kbdLight</span><span class="hl opt">(</span>VK_CAPITAL<span class="hl opt">);</span>
      <span class="hl kwd">Sleep</span><span class="hl opt">(</span><span class="hl num">100</span><span class="hl opt">);</span>
      <span class="hl kwd">kbdLight</span><span class="hl opt">(</span>VK_SCROLL<span class="hl opt">);</span>
      <span class="hl kwd">Sleep</span><span class="hl opt">(</span><span class="hl num">100</span><span class="hl opt">);</span>
   <span class="hl opt">}</span>
   <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Если у вас есть интересные исходнички подобного рода — прикладывайте в комментарии.</p>

<p>Не все же нам в каких-то конструкторах копаться.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Разница между "new T()" и "new T"]]></title>
    <link href="http://demin.ws/blog/russian/2009/02/20/difference-between-new-and-new-with-brackets/"/>
    <updated>2009-02-20T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/02/20/difference-between-new-and-new-with-brackets/</id>
    <content type="html"><![CDATA[<p>Начнем с <code>new T()</code>.</p>

<p>Стандарт говорит нам, что если <code>Т</code> является POD-классом (не объектно-ориентированной сущностью), то объект будет инициализирован значением по умолчанию (обычно, например, для арифметических типов это 0), а если это не POD-класс (явная объектно-ориентированная сущность), то для него вызовется конструктор по умолчанию (либо явный, либо созданный компилятором). Если конструктор по умолчанию задан явно, то будет вызван только он, и вся ответственность за инициализацию ляжет на него. Никой инициализации по умолчанию больше не будет. Если же конструктор по умолчанию не задан явно, и компилятор создал его сам, и в этом случае все члены класса будут проинициализированы неявно: POD-объекты будут проинициализированы нулем, а для не-POD объектов будет проведена инициализация по умолчанию (включая всех его дочерних составляющих — рекурсивный обход всех подобъектов и их инициализация по такому же принципу).</p>

<p>Теперь <code>new T</code>.</p>

<p>В этом случае для POD-объектов вообще не будет никакой инициализации (что было в памяти на момент распределения, то и будет). Для не POD-объекта просто будет вызван конструктор по умолчанию (либо явный, ли заданный компилятором по умолчанию), и не будет проводиться никакой инициализации POD-составляющих этого объекта.</p>

<p>Для простоты, POD-типами (Plain Old Data) является все наследие языка С в С++. Везде, где есть объектно-ориентированная примесь — это уже не POD-класс. Для не POD-классов нельзя делать никаких предположений о внутренней структуре, расположению в памяти и т.д.</p>

<p>Забавно, структура:</p>

<pre class="hl">
<span class="hl kwb">struct</span> A <span class="hl opt">{</span>
  <span class="hl kwb">int</span> b<span class="hl opt">;</span>
<span class="hl opt">};</span>
</pre>

<p>является POD-типом, а вот если добавить в нее, например, слово <code>public</code>:</p>

<pre class="hl">
<span class="hl kwb">struct</span> A <span class="hl opt">{</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl kwb">int</span> b<span class="hl opt">;</span>
<span class="hl opt">};</span>
</pre>

<p>то по стандарту это не POD-объект, и его нельзя уже трогать на уровне внутреннего представления, например обнулить через <code>memset</code>. Хотя многие компиляторы разрешают такие &ldquo;игры&rdquo; с не POD-объектами и, программа может в принципе работать, но это против стандарта, и, конечно, против переносимости программы.</p>

<p>Итак, описание различий весьма путанное, поэтому лучше рассмотреть пример.</p>

<p>Для чистоты эксперимента я буду использовать так называемое распределение памяти с размещением. То есть я вручную указываю, в каком месте памяти должен будет создаваться объект. Это позволит контролировать &ldquo;непредсказуемые&rdquo; значения неинициализированной памяти.</p>

<p>Итак, первый пример:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;iostream&gt;</span>
<span class="hl ppc">#include &lt;cstdlib&gt;</span>

<span class="hl kwc">class</span> T <span class="hl opt">{</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl slc">// Для простоты экспериментируем на однобайтовом типе.</span>
  <span class="hl kwb">unsigned char</span> n<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
  <span class="hl slc">// &quot;Случайная&quot; память для создания объекта.</span>
  <span class="hl slc">// Берем с запасом, чтобы уж точно вместить объект класса T.</span>
  <span class="hl kwb">char</span> p<span class="hl opt">[</span><span class="hl num">10240</span><span class="hl opt">];</span>

  <span class="hl slc">// Заполняем память числом 170 (0xAA)</span>
  std<span class="hl opt">::</span><span class="hl kwd">memset</span><span class="hl opt">(</span>p<span class="hl opt">,</span> <span class="hl num">170</span> <span class="hl com">/* 0xAA */</span><span class="hl opt">,</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span>p<span class="hl opt">));</span>
  <span class="hl slc">// Создаем объект явно в памяти, заполненной числом 170.</span>
  T<span class="hl opt">*</span> a <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl opt">(</span>p<span class="hl opt">)</span> T<span class="hl opt">;</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;new T: T.n = &quot;</span> <span class="hl opt">&lt;&lt; (</span><span class="hl kwb">int</span><span class="hl opt">)</span>a<span class="hl opt">-&gt;</span>n <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>

  <span class="hl slc">// Заполняем память числом 171 (0xAB)</span>
  std<span class="hl opt">::</span><span class="hl kwd">memset</span><span class="hl opt">(</span>p<span class="hl opt">,</span> <span class="hl num">171</span> <span class="hl com">/* 0xAB */</span><span class="hl opt">,</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span>p<span class="hl opt">));</span>

  <span class="hl slc">// Создаем объект явно в памяти, заполненной числом 171.</span>
  T<span class="hl opt">*</span> b <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl opt">(</span>p<span class="hl opt">)</span> <span class="hl kwd">T</span><span class="hl opt">();</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;new T(): T.n = &quot;</span> <span class="hl opt">&lt;&lt; (</span><span class="hl kwb">int</span><span class="hl opt">)</span>b<span class="hl opt">-&gt;</span>n <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>

  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Данный пример выведет:</p>

<pre><code>new T: T.n = 170
new T(): T.n = 0
</code></pre>

<p>Видно, что для <code>new T</code> элемент <code>T.n</code> так остался неинициализированным и равным числу <code>170</code>, которые заполнили память заранее. Для <code>new T()</code> же в свою очередь элемент <code>T.n</code> стал равны нулю, то есть он был проинициализирован. Все, как сказано в стандарте.</p>

<p>Теперь изменим одну маленькую деталь — добавим в класс <code>Т</code> явный конструктор:</p>

<pre class="hl">
<span class="hl kwc">class</span> T <span class="hl opt">{</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl slc">// Явный конструктор.</span>
  <span class="hl kwd">T</span><span class="hl opt">() {}</span>
  <span class="hl slc">// Для простоты экспериментируем на однобайтовом типе.</span>
  <span class="hl kwb">unsigned char</span> n<span class="hl opt">;</span>
<span class="hl opt">};</span>
</pre>

<p>Теперь нас ждет сюрприз. Теперь программа будет выводить следующее:</p>

<pre><code>new T: T.n = 170
new T(): T.n = 171
</code></pre>

<p>Получается, что даже при new <code>T()</code> элемент <code>T.n</code> не был более инициализирован. Почему? А потому, что стандарт гласит: если задан явный конструктор класса, то никакие инициализации по умолчанию для POD-объектов не производятся. Раз программист задал конструктор явно, значит он знает что делает, и вся ответственность за инициализацию теперь на его плечах.</p>

<p>Лично для себя я всегда предпочитаю писать <code>new T()</code> хотя бы для единообразия вызова конструкторов. Также я всегда явно инициализирую все POD-объекты вручную в конструкторе или в его списке инициализации. Отсутствие предположений о значении POD-типов по умолчанию и инициализация их принудительно позволяет избежать сюрпризов при смене компилятора.</p>

<p>Другие посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2009/02/21/difference-between-type-and-type-with-brackets/">Разница между T() и T</a></li>
<li><a href="http://demin.ws/blog/russian/2009/02/09/dark-corners-of-cpp/">Темные углы С++</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Исключения в списке инициализации конструктора]]></title>
    <link href="http://demin.ws/blog/russian/2009/02/19/exceptions-in-initilization-list/"/>
    <updated>2009-02-19T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/02/19/exceptions-in-initilization-list/</id>
    <content type="html"><![CDATA[<p>Правилом хорошего тона в С++ является использование списка инициализации для вызова конструкторов членов класса, например:</p>

<pre class="hl">
<span class="hl kwc">class</span> A <span class="hl opt">{ ... };</span>

<span class="hl kwc">class</span> B <span class="hl opt">{</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl kwd">B</span><span class="hl opt">(</span><span class="hl kwb">int</span> n<span class="hl opt">);</span>
<span class="hl kwc">private</span><span class="hl opt">:</span>
  A __a<span class="hl opt">;</span>
<span class="hl opt">};</span>

B<span class="hl opt">::</span><span class="hl kwd">B</span><span class="hl opt">(</span><span class="hl kwb">int</span> n<span class="hl opt">)</span> 
  <span class="hl opt">:</span> <span class="hl kwd">__a</span><span class="hl opt">(</span>n<span class="hl opt">)</span>        <span class="hl slc">// вызов конструктора А() в списке инициализации.</span>
<span class="hl opt">{}</span>
</pre>

<p>А что произойдет, если в одном из вызовов в списке инициализации произойдет исключение? Например:</p>

<pre class="hl">
<span class="hl kwc">class</span> A <span class="hl opt">{</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl kwd">A</span><span class="hl opt">(</span><span class="hl kwb">int</span> n<span class="hl opt">) {</span>
    <span class="hl kwa">throw</span> <span class="hl num">0</span><span class="hl opt">;</span>   <span class="hl slc">// Конструктор класса А бросает исключение int</span>
  <span class="hl opt">}</span>
<span class="hl opt">};</span>

<span class="hl kwc">class</span> B <span class="hl opt">{</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl kwd">B</span><span class="hl opt">(</span><span class="hl kwb">int</span> n<span class="hl opt">);</span>
<span class="hl kwc">private</span><span class="hl opt">:</span>
  A __a<span class="hl opt">;</span>
<span class="hl opt">};</span>

B<span class="hl opt">::</span><span class="hl kwd">B</span><span class="hl opt">(</span><span class="hl kwb">int</span> n<span class="hl opt">)</span> 
  <span class="hl opt">:</span> <span class="hl kwd">__a</span><span class="hl opt">(</span>n<span class="hl opt">)</span>     <span class="hl slc">// Данный вызов бросает исключение</span>
<span class="hl opt">{}</span>
</pre>

<p>Хотелось бы иметь возможность поймать это исключение и провести &ldquo;чистку&rdquo; уже распределенной на тот момент памяти, например:</p>

<pre class="hl">
<span class="hl kwc">class</span> P <span class="hl opt">{ ... };</span>

<span class="hl kwc">class</span> A <span class="hl opt">{</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl kwd">A</span><span class="hl opt">(</span><span class="hl kwb">int</span> n<span class="hl opt">) {</span>
    <span class="hl kwa">throw</span> <span class="hl num">0</span><span class="hl opt">;</span>   <span class="hl slc">// Конструктор класс А бросает исключение int</span>
  <span class="hl opt">}</span>
<span class="hl opt">};</span>

<span class="hl kwc">class</span> B <span class="hl opt">{</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl kwd">B</span><span class="hl opt">();</span>
<span class="hl kwc">private</span><span class="hl opt">:</span>
  P<span class="hl opt">*</span> __p<span class="hl opt">;</span>
  A __a<span class="hl opt">;</span>
<span class="hl opt">};</span>

B<span class="hl opt">::</span><span class="hl kwd">B</span><span class="hl opt">()</span> 
  <span class="hl opt">:</span> <span class="hl kwd">__p</span><span class="hl opt">(</span><span class="hl kwa">new</span> P<span class="hl opt">),</span>    <span class="hl slc">// Память для P распределяется до вызова конструктора класса А</span>
  <span class="hl kwd">__a</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">)</span>           <span class="hl slc">// Данный вызов бросает исключение</span>
<span class="hl opt">{}</span>
</pre>

<p>На момент, когда конструктор А бросит исключение, мы уже будем иметь распределенную память под указателем <code>__p</code> и, не обработав исключение, эту память можно потерять.</p>

<p>В С++ есть форма задания <code>try-catch</code> блока на уровне функции. Используя ее, можно переписать пример так:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;iostream&gt;</span>

<span class="hl kwc">class</span> A <span class="hl opt">{</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl kwd">A</span><span class="hl opt">(</span><span class="hl kwb">int</span> n<span class="hl opt">) {</span>
    <span class="hl kwa">throw</span> <span class="hl num">0</span><span class="hl opt">;</span>   <span class="hl slc">// Конструктор класс А бросает исключение int</span>
  <span class="hl opt">}</span>
<span class="hl opt">};</span>

<span class="hl kwc">class</span> P <span class="hl opt">{</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl kwd">P</span><span class="hl opt">() {</span> std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;P(), constructor&quot;</span> <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">; }</span>
  <span class="hl opt">~</span><span class="hl kwd">P</span><span class="hl opt">() {</span> std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;~P(), destructor&quot;</span> <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">; }</span>
<span class="hl opt">};</span>

<span class="hl kwc">class</span> B <span class="hl opt">{</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl kwd">B</span><span class="hl opt">();</span>
<span class="hl kwc">private</span><span class="hl opt">:</span>
  P<span class="hl opt">*</span> __p<span class="hl opt">;</span>
  A __a<span class="hl opt">;</span>
<span class="hl opt">};</span>

B<span class="hl opt">::</span><span class="hl kwd">B</span><span class="hl opt">()</span> 
<span class="hl kwa">try</span>
  <span class="hl opt">:</span> <span class="hl kwd">__p</span><span class="hl opt">(</span><span class="hl kwa">new</span> P<span class="hl opt">),</span> <span class="hl kwd">__a</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">) {</span>
<span class="hl opt">}</span> <span class="hl kwa">catch</span> <span class="hl opt">(</span><span class="hl kwb">int</span><span class="hl opt">&amp;</span> e<span class="hl opt">) {</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;B(), exception &quot;</span> <span class="hl opt">&lt;&lt;</span> e <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  <span class="hl kwa">delete</span> __p<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[]) {</span>
  <span class="hl kwa">try</span> <span class="hl opt">{</span>
    B b<span class="hl opt">;</span>
  <span class="hl opt">}</span> <span class="hl kwa">catch</span> <span class="hl opt">(</span><span class="hl kwb">int</span><span class="hl opt">&amp;</span> e<span class="hl opt">) {</span>
    std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;main(), exception &quot;</span> <span class="hl opt">&lt;&lt;</span> e <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  <span class="hl opt">}</span>
<span class="hl opt">}</span>
</pre>

<p>Видно (см. тело конструктора <code>B::B()</code>), что лист инициализации ушел между словом <code>try</code> и началом try-блока, а тело конструктора теперь внутри try-блока (в данном примере оно пустое), а обработчик исключения находится в catch-блоке после тела конструктора. Данный пример сумеет обработать исключение класса А и освободит память из под указателя <code>__p</code>. Данный пример выведет следующее:</p>

<pre><code>P(), constructor
B(), exception 0
~P(), destructor
main(), exception 0
</code></pre>

<p>Видно, что деструктор класса <code>P</code> был вызван.</p>

<p>Внимательный читатель заметит, что в функции <code>main()</code> тоже есть try-блок, а последней строкой программа печатает <code>main(), exception 0</code>, что значит, что исключение было обработано дважды: в теле try-блока конструктора и затем в функции <code>main()</code>. Почему?</p>

<p>Правило гласит: исключение, пойманное в обрамляющем функцию виде <code>try-catch</code> блоке конструктора, будет переброшено еще раз при выходе из конструктора, если конструктор принудительно не сделал это сам, поймав это исключение. Сейчас очень важный момент: если хоть один из членов класса бросил исключение в процессе конструирования, то <strong>весь</strong> объект принудительно завершает конструирование аварийно с исключением вне зависимости от того, обработано это исключение в конструкторе или нет.</p>

<p>Единственное, что мы тут можем сделать, это &ldquo;на лету&rdquo; подправить исключение, брошенное членом класса (например, добавить туда дополнительную информацию). Следующий пример меняет код брошенного классом <code>А</code> исключения:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;iostream&gt;</span>

<span class="hl kwc">class</span> A <span class="hl opt">{</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl kwd">A</span><span class="hl opt">(</span><span class="hl kwb">int</span> n<span class="hl opt">) {</span>
    <span class="hl kwa">throw</span> <span class="hl num">0</span><span class="hl opt">;</span>   <span class="hl slc">// Конструктор класс А бросает исключение int</span>
  <span class="hl opt">}</span>
<span class="hl opt">};</span>

<span class="hl kwc">class</span> B <span class="hl opt">{</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl kwd">B</span><span class="hl opt">();</span>
<span class="hl kwc">private</span><span class="hl opt">:</span>
  A __a<span class="hl opt">;</span>
<span class="hl opt">};</span>

B<span class="hl opt">::</span><span class="hl kwd">B</span><span class="hl opt">()</span> 
<span class="hl kwa">try</span>
  <span class="hl opt">:</span> <span class="hl kwd">__a</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">) {</span>
<span class="hl opt">}</span> <span class="hl kwa">catch</span> <span class="hl opt">(</span><span class="hl kwb">int</span><span class="hl opt">&amp;</span> e<span class="hl opt">) {</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;B(), exception &quot;</span> <span class="hl opt">&lt;&lt;</span> e <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  e <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>      <span class="hl slc">// Меняем код исключения с 0 на 1.</span>
<span class="hl opt">};</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[]) {</span>
  <span class="hl kwa">try</span> <span class="hl opt">{</span>
    B b<span class="hl opt">;</span>
  <span class="hl opt">}</span> <span class="hl kwa">catch</span> <span class="hl opt">(</span><span class="hl kwb">int</span><span class="hl opt">&amp;</span> e<span class="hl opt">) {</span>
    std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;main(), exception &quot;</span> <span class="hl opt">&lt;&lt;</span> e <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  <span class="hl opt">}</span>
<span class="hl opt">}</span>
</pre>

<p>Эта программы выведет следующее:</p>

<pre><code>B(), exception 0
main(), exception 1
</code></pre>

<p>Видно, что когда исключение было поймано второй раз, код у него уже не 0 как в оригинальном исключении, а 1.</p>

<p>С конструкторами вроде разобрались. Перейдем к деструкторам.</p>

<p>Деструктор — это тоже функция. К нему тоже применим синтаксис ловли исключения на уровне тела функции, например:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;iostream&gt;</span>

<span class="hl kwc">class</span> B <span class="hl opt">{</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl opt">~</span><span class="hl kwd">B</span><span class="hl opt">();</span>
<span class="hl opt">};</span>

B<span class="hl opt">::~</span><span class="hl kwd">B</span><span class="hl opt">()</span> 
<span class="hl kwa">try</span> <span class="hl opt">{</span>
  <span class="hl kwa">throw</span> <span class="hl num">2</span><span class="hl opt">;</span>
<span class="hl opt">}</span> <span class="hl kwa">catch</span> <span class="hl opt">(</span><span class="hl kwb">int</span><span class="hl opt">&amp;</span> e<span class="hl opt">) {</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;~B(), exception &quot;</span> <span class="hl opt">&lt;&lt;</span> e <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Поведение ловли исключения в деструкторе на уровне функции схоже с конструктором, то есть исключение, пойманное в catch-блоке на уровне функции будет переброшено автоматически снова при завершении деструктора, если он это не сделал сам, обработав исключение. Например:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;iostream&gt;</span>

<span class="hl kwc">class</span> B <span class="hl opt">{</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl opt">~</span><span class="hl kwd">B</span><span class="hl opt">();</span>
<span class="hl opt">};</span>

B<span class="hl opt">::~</span><span class="hl kwd">B</span><span class="hl opt">()</span> 
<span class="hl kwa">try</span> <span class="hl opt">{</span>
  <span class="hl kwa">throw</span> <span class="hl num">2</span><span class="hl opt">;</span>
<span class="hl opt">}</span> <span class="hl kwa">catch</span> <span class="hl opt">(</span><span class="hl kwb">int</span><span class="hl opt">&amp;</span> e<span class="hl opt">) {</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;~B(), exception &quot;</span> <span class="hl opt">&lt;&lt;</span> e <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[]) {</span>
  <span class="hl kwa">try</span> <span class="hl opt">{</span>
    B b<span class="hl opt">;</span>
  <span class="hl opt">}</span> <span class="hl kwa">catch</span> <span class="hl opt">(</span><span class="hl kwb">int</span><span class="hl opt">&amp;</span> e<span class="hl opt">) {</span>
    std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;main(), B(), exception &quot;</span> <span class="hl opt">&lt;&lt;</span> e <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  <span class="hl opt">}</span>
<span class="hl opt">}</span>
</pre>

<p>выведет:</p>

<pre class="hl">
<span class="hl opt">~</span><span class="hl kwd">B</span><span class="hl opt">(),</span> exception <span class="hl num">2</span>
<span class="hl kwd">main</span><span class="hl opt">(),</span> <span class="hl kwd">B</span><span class="hl opt">(),</span> exception <span class="hl num">2</span>
</pre>

<p>то есть исключение, после его обработки в деструкторе было переброшено снова. Конечно, не пойманные исключения в деструкторе являются большим &ldquo;no-no!&rdquo; в С++. Принято считать, что не пойманное в деструкторе исключение — это прямой путь к аварийному завершению программы, так как нарушается принцип целостности системы исключений. Если хотите, чтобы ваши программы на С++ работали стабильно, то не допускайте, чтобы исключения “вылетали” из деструктора. Например так:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;iostream&gt;</span>

<span class="hl kwc">class</span> B <span class="hl opt">{</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl opt">~</span><span class="hl kwd">B</span><span class="hl opt">();</span>
<span class="hl opt">};</span>

B<span class="hl opt">::~</span><span class="hl kwd">B</span><span class="hl opt">() {</span>
  <span class="hl kwa">try</span> <span class="hl opt">{</span>
    <span class="hl kwa">throw</span> <span class="hl num">2</span><span class="hl opt">;</span>            <span class="hl slc">// Бросаем исключение.</span>
  <span class="hl opt">}</span> <span class="hl kwa">catch</span> <span class="hl opt">(</span><span class="hl kwb">int</span><span class="hl opt">&amp;</span> e<span class="hl opt">) {</span>    <span class="hl slc">// И тут же ловим его, не пропуская него “на волю”.</span>
    std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;~B(), exception &quot;</span> <span class="hl opt">&lt;&lt;</span> e <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[]) {</span>
  <span class="hl kwa">try</span> <span class="hl opt">{</span>
    B b<span class="hl opt">;</span>
  <span class="hl opt">}</span> <span class="hl kwa">catch</span> <span class="hl opt">(</span><span class="hl kwb">int</span><span class="hl opt">&amp;</span> e<span class="hl opt">) {</span>
    std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;main(), B(), exception &quot;</span> <span class="hl opt">&lt;&lt;</span> e <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  <span class="hl opt">}</span>
<span class="hl opt">}</span>
</pre>

<p>Эта программа выведет:</p>

<pre><code>~B(), exception 2
</code></pre>

<p>Видно, что исключение не дошло до функции <code>main()</code>.</p>

<p>С деструкторами тоже вроде разобрались. Теперь перейдем к обычным функциям.</p>

<p>Технику обработки исключений на уровне функции можно применять для любой функции, а не только для конструктора или деструктора, например:</p>

<pre class="hl">
<span class="hl kwb">void</span> <span class="hl kwd">f</span><span class="hl opt">()</span> 
<span class="hl kwa">try</span> <span class="hl opt">{</span>
  <span class="hl kwa">throw</span> <span class="hl num">1</span><span class="hl opt">;</span>
<span class="hl opt">}</span> <span class="hl kwa">catch</span> <span class="hl opt">(</span><span class="hl kwb">int</span><span class="hl opt">&amp;</span> e<span class="hl opt">) {</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;f(), exception &quot;</span> <span class="hl opt">&lt;&lt;</span> e <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Но целесообразность такого синтаксиса сомнительна, так как пойманное исключение <strong>не перебрасывается</strong> автоматически снова после окончания функции, как это было в случае с конструктором и деструктором. Программа:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;iostream&gt;</span>

<span class="hl kwb">void</span> <span class="hl kwd">f</span><span class="hl opt">()</span> 
<span class="hl kwa">try</span> <span class="hl opt">{</span>
  <span class="hl kwa">throw</span> <span class="hl num">1</span><span class="hl opt">;</span>
<span class="hl opt">}</span> <span class="hl kwa">catch</span> <span class="hl opt">(</span><span class="hl kwb">int</span><span class="hl opt">&amp;</span> e<span class="hl opt">) {</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;f(), B(), exception &quot;</span> <span class="hl opt">&lt;&lt;</span> e <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[]) {</span>
  <span class="hl kwa">try</span> <span class="hl opt">{</span>
    <span class="hl kwd">f</span><span class="hl opt">();</span>
  <span class="hl opt">}</span> <span class="hl kwa">catch</span> <span class="hl opt">(</span><span class="hl kwb">int</span><span class="hl opt">&amp;</span> e<span class="hl opt">) {</span>
    std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;main(), f(), B(0), exception &quot;</span> <span class="hl opt">&lt;&lt;</span> e <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  <span class="hl opt">}</span>
<span class="hl opt">}</span>
</pre>

<p>напечатает только:</p>

<pre class="hl">
<span class="hl kwd">f</span><span class="hl opt">(),</span> <span class="hl kwd">B</span><span class="hl opt">(),</span> exception <span class="hl num">1</span>
</pre>

<p>то есть исключение не было передано дальше, поэтому разумнее было бы просто оформить функцию традиционным образом с помощью try-блока, обрамляющего всё тело функции:</p>

<pre class="hl">
<span class="hl kwb">void</span> <span class="hl kwd">f</span><span class="hl opt">() {</span>
  <span class="hl kwa">try</span> <span class="hl opt">{</span>
    <span class="hl kwa">throw</span> <span class="hl num">1</span><span class="hl opt">;</span>
  <span class="hl opt">}</span> <span class="hl kwa">catch</span> <span class="hl opt">(</span><span class="hl kwb">int</span><span class="hl opt">&amp;</span> e<span class="hl opt">) {</span>
    std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;f(), B(), exception &quot;</span> <span class="hl opt">&lt;&lt;</span> e <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  <span class="hl opt">}</span>
<span class="hl opt">}</span>
</pre>

<p>не внося в форматирование текста лишней каши непривычным положением слов <code>try</code> и <code>catch</code>.</p>

<p>Лично мне кажется, из всего выше написанного, реально для применения только <code>try-catch</code> блок на уровне функции для конструктора. Там это действительно актуально, чтобы не допустить объектов, сконструированных только наполовину и убитых в процессе создания исключением от собственного члена (простите за каламбур).</p>

<p><strong>Выводы</strong></p>

<p>Исключения, брошенные при обработке списка инициализации класса можно поймать в теле конструктора через синтаксис <code>try-catch</code> блока на уровне функции.</p>

<p>Если хоть один элементов класса при конструировании выбросил исключение, то <strong>весь</strong> класс принудительно завершает собственное конструирование с ошибкой в форме исключения вне зависимости от того, было это исключение поймано в конструкторе или нет.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Автоматический мьютекс с использованием RAII]]></title>
    <link href="http://demin.ws/blog/russian/2009/02/17/auto-mutex-using-raii/"/>
    <updated>2009-02-17T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/02/17/auto-mutex-using-raii/</id>
    <content type="html"><![CDATA[<p>Описанный мной ранее класс <a href="http://demin.ws/blog/russian/2009/02/06/universal-mutex-in-cpp-for-windows-and-unix/">Mutex</a> является базовым механизмом синхронизации потоков при параллельном программировании и применяется сплошь и рядом.</p>

<p>Часто бывают случаи, когда несколько функций реализуют какую-то единую функциональность, построенную на общем разделяемом ресурсе, защищенном блокировкой. В этом случае каждая функция в начале работы занимает эту блокировку, а на выходе — освобождает ее. Например, методы класса-регистратора системных событий все работают с выходным буфером и используют единую блокировку для синхронизации доступа к нему. Например:</p>

<pre class="hl">
<span class="hl kwc">class</span> Logger <span class="hl opt">{</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl opt">...</span>
  <span class="hl kwb">void</span> <span class="hl kwd">put</span><span class="hl opt">(</span><span class="hl kwb">const char</span><span class="hl opt">*</span> str<span class="hl opt">) {</span>
    __lock<span class="hl opt">.</span><span class="hl kwd">Lock</span><span class="hl opt">();</span>
    __buffer<span class="hl opt">.</span><span class="hl kwd">push_back</span><span class="hl opt">(</span>str<span class="hl opt">);</span>
    __lock<span class="hl opt">.</span><span class="hl kwd">Unlock</span><span class="hl opt">();</span>
  <span class="hl opt">}</span>
  <span class="hl kwb">void</span> <span class="hl kwd">flush</span><span class="hl opt">() {</span>
    __lock<span class="hl opt">.</span><span class="hl kwd">Lock</span><span class="hl opt">();</span>
    <span class="hl opt">...</span>
    __buffer<span class="hl opt">.</span><span class="hl kwd">clear</span><span class="hl opt">();</span>
    __lock<span class="hl opt">.</span><span class="hl kwd">Unlock</span><span class="hl opt">();</span>
  <span class="hl opt">}</span>
  <span class="hl opt">...</span>
<span class="hl kwc">private</span><span class="hl opt">:</span>
  Mutex __lock<span class="hl opt">;</span>
  std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span>std<span class="hl opt">::</span>string<span class="hl opt">&gt;</span> __buffer<span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>В целом, такой подход является не совсем правильным, так как данные методы могут быть весьма сложными, иметь многочисленные условные операторы, могут генерировать исключения. В этом случае программисту необходимо позаботиться о <strong>всех</strong> возможных вариантах завершения каждой функции и везде вставить оператор освобождения блокировки:</p>

<pre class="hl">
__lock<span class="hl opt">.</span><span class="hl kwd">Unlock</span><span class="hl opt">();</span>
</pre>

<p>Если этого не сделать, то неосвобожденная по какой-то редко возникающей причине блокировка может просто &ldquo;подвесить&rdquo; всю программу, так как все остальные функции, работающие с этой блокировкой, более никогда не получат управления.</p>

<p>К счастью, в С++ есть механизм, дающий возможность очень просто избежать подобных проблем, вывозом кода освобождения блокировки при любом варианте завершения функции. Механизм называется RAII (<a href="http://ru.wikipedia.org/wiki/RAII">Resource Acquisition Is Initialization</a>). В С++ деструкторы созданных в контексте функции объектов <strong>обязательно</strong> вызываются перед завершением контекста (попросту говоря, когда функция завершается любым способом). Если возникло непойманное в функции исключение, то в процессе раскрутки стека деструкторы созданных локальных объектов тоже будут вызваны. Отсюда и идея: занимать блокировку в конструкторе созданного в функции локального объекта и затем освобождать ее в деструкторе. Использование такого метода позволило бы изменить приведенный пример так:</p>

<pre class="hl">
<span class="hl kwc">class</span> Logger <span class="hl opt">{</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl opt">...</span>
  <span class="hl kwb">void</span> <span class="hl kwd">put</span><span class="hl opt">(</span><span class="hl kwb">const char</span><span class="hl opt">*</span> str<span class="hl opt">) {</span>
    <span class="hl kwd">AutoLock</span><span class="hl opt">(</span>__lock<span class="hl opt">);</span>
    __buffer<span class="hl opt">.</span><span class="hl kwd">push_back</span><span class="hl opt">(</span>str<span class="hl opt">);</span>
  <span class="hl opt">}</span>
  <span class="hl kwb">void</span> <span class="hl kwd">flush</span><span class="hl opt">() {</span>
    <span class="hl kwd">AutoLock</span><span class="hl opt">(</span>__lock<span class="hl opt">);</span>
    <span class="hl opt">...</span>
    __buffer<span class="hl opt">.</span><span class="hl kwd">clear</span><span class="hl opt">();</span>
  <span class="hl opt">}</span>
  <span class="hl opt">...</span>
<span class="hl kwc">private</span><span class="hl opt">:</span>
  Mutex __lock<span class="hl opt">;</span>
  std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span>std<span class="hl opt">::</span>string<span class="hl opt">&gt;</span> __buffer<span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Объект <code>AutoLock</code>, создаваемый первым в контексте каждой функции, будет занимать блокировку и освобождать ее при закрытии этого контекста.</p>

<p>Идея проста и понятна, а класс, реализующий эту логику еще проще.</p>

<p>Пространство имен ext можно заменить по вкусу на подходящее вам.</p>

<p>Файл <code>autolock.h</code>:</p>

<pre class="hl">
<span class="hl ppc">#ifndef _EXT_AUTOLOCK_H</span>
<span class="hl ppc">#define _EXT_AUTOLOCK_H</span>

<span class="hl ppc">#include</span> <span class="hl pps">&quot;mutex.h&quot;</span><span class="hl ppc"></span>

<span class="hl kwa">namespace</span> ext <span class="hl opt">{</span>

<span class="hl kwc">class</span> AutoLock <span class="hl opt">{</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl slc">// Запираем блокировку в конструторе</span>
  <span class="hl kwd">AutoLock</span><span class="hl opt">(</span>Mutex<span class="hl opt">&amp;</span> lock<span class="hl opt">) :</span> <span class="hl kwd">__lock</span><span class="hl opt">(</span>lock<span class="hl opt">) {</span>
    __lock<span class="hl opt">.</span><span class="hl kwd">Lock</span><span class="hl opt">();</span>
  <span class="hl opt">}</span>

  <span class="hl slc">// Освобождаем блокировку в деструкторе</span>
  <span class="hl opt">~</span><span class="hl kwd">AutoLock</span><span class="hl opt">() {</span>
    __lock<span class="hl opt">.</span><span class="hl kwd">Unlock</span><span class="hl opt">();</span>
  <span class="hl opt">}</span>
<span class="hl kwc">private</span><span class="hl opt">:</span>
  <span class="hl slc">// Защита от случайного копирования</span>
  <span class="hl kwd">AutoLock</span><span class="hl opt">(</span><span class="hl kwb">const</span> AutoLock<span class="hl opt">&amp;);</span>
  <span class="hl kwb">void</span> <span class="hl kwc">operator</span><span class="hl opt">=(</span><span class="hl kwb">const</span> AutoLock<span class="hl opt">&amp;);</span>

  Mutex<span class="hl opt">&amp;</span> __lock<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl opt">}</span> <span class="hl slc">// ext </span>

<span class="hl ppc">#endif</span>
</pre>

<p>Данный класс использует реализацию блокировки (мьютекса) <a href="http://demin.ws/blog/russian/2009/02/06/universal-mutex-in-cpp-for-windows-and-unix/">Mutex</a>.</p>

<p>Посмотрим, как оно будет в деле (конечно с помощью unit-тестирования).</p>

<p>Традиционно, для компиляции тестов нам нужна <a href="http://code.google.com/p/googletest/">Google Test Framework</a>. Как я уже <a href="http://demin.ws/blog/russian/2009/01/28/unit-testing-concurrent-threads/">писал</a>, вы можете скачать <a href="http://demin.ws/downloads/gtest-amalgamation-1.2.1.zip">мою модификацию</a> этой библиотеки, которая сокращена до двух необходимых файлов <code>gtest/gtest.h</code> и <code>gtest-all.cc</code>.</p>

<p>Файл <code>autolock_unittest.cpp</code>:</p>

<pre class="hl">
<span class="hl ppc">#include</span> <span class="hl pps">&quot;gtest/gtest.h&quot;</span><span class="hl ppc"></span>

<span class="hl ppc">#include</span> <span class="hl pps">&quot;autolock.h&quot;</span><span class="hl ppc"></span>
<span class="hl ppc">#include</span> <span class="hl pps">&quot;mutex.h&quot;</span><span class="hl ppc"></span>
<span class="hl ppc">#include</span> <span class="hl pps">&quot;thread.h&quot;</span><span class="hl ppc"></span>

<span class="hl slc">// Универсальная задержка в миллисекундах для Windows и UNIX</span>
<span class="hl ppc">#ifdef WIN32</span>
<span class="hl ppc">#include &lt;windows.h&gt;</span>
<span class="hl ppc">#define msleep(x)    Sleep(x)</span>
<span class="hl ppc">#else</span>
<span class="hl ppc">#include &lt;unistd.h&gt;</span>
<span class="hl ppc">#define msleep(x)    usleep((x)*1000)</span>
<span class="hl ppc">#endif</span>

<span class="hl slc">// Тестовый поток</span>
<span class="hl kwc">class</span> T<span class="hl opt">:</span> <span class="hl kwc">public</span> ext<span class="hl opt">::</span>Thread <span class="hl opt">{</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl slc">// Параметры потока:</span>
  <span class="hl slc">//   flag    - флаг для сигнализации о выполненном действии</span>
  <span class="hl slc">//   mutex   - рабочий объект-блокировка</span>
  <span class="hl slc">//   timeout - время, которое необходимо подождать после </span>
  <span class="hl slc">//             установки флага</span>
  <span class="hl slc">//   val     - значение, в которое надо установить флаг</span>
  <span class="hl kwd">T</span><span class="hl opt">(</span><span class="hl kwc">volatile</span> <span class="hl kwb">int</span><span class="hl opt">&amp;</span> flag<span class="hl opt">,</span> ext<span class="hl opt">::</span>Mutex<span class="hl opt">&amp;</span> mutex<span class="hl opt">,</span> <span class="hl kwb">int</span> timeout<span class="hl opt">,</span> <span class="hl kwb">int</span> val<span class="hl opt">) :</span>
    <span class="hl kwd">__flag</span><span class="hl opt">(</span>flag<span class="hl opt">),</span> <span class="hl kwd">__mutex</span><span class="hl opt">(</span>mutex<span class="hl opt">),</span> <span class="hl kwd">__timeout</span><span class="hl opt">(</span>timeout<span class="hl opt">),</span> <span class="hl kwd">__val</span><span class="hl opt">(</span>val<span class="hl opt">)</span>
  <span class="hl opt">{}</span>

  <span class="hl slc">// Функция потока: занять автоматическую блокировку, установить</span>
  <span class="hl slc">// флаг, подождать указанное время, освободить автоматическую</span>
  <span class="hl slc">// блокировку.</span>
  <span class="hl kwc">virtual</span> <span class="hl kwb">void</span> <span class="hl kwd">Execute</span><span class="hl opt">() {</span>
    ext<span class="hl opt">::</span>AutoLock <span class="hl kwd">locker</span><span class="hl opt">(</span>__mutex<span class="hl opt">);</span>
    __flag <span class="hl opt">=</span> __val<span class="hl opt">;</span>
    <span class="hl kwd">msleep</span><span class="hl opt">(</span>__timeout<span class="hl opt">);</span>
  <span class="hl opt">}</span>
<span class="hl kwc">private</span><span class="hl opt">:</span>
  <span class="hl kwc">volatile</span> <span class="hl kwb">int</span><span class="hl opt">&amp;</span> __flag<span class="hl opt">;</span>
  ext<span class="hl opt">::</span>Mutex<span class="hl opt">&amp;</span> __mutex<span class="hl opt">;</span>
  <span class="hl kwb">int</span> __timeout<span class="hl opt">;</span>
  <span class="hl kwb">int</span> __val<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl slc">// Данный тест выполняет параллельно две функции, которые конкурируют</span>
<span class="hl slc">// за одну блокировку. Функция-поток 'a' занимает блокировку, устанавливает</span>
<span class="hl slc">// флаг в 1, ждет 100мс и затем освобождает блокировку. Функция-поток 'b'</span>
<span class="hl slc">// стартует, когда поток 'a' уже занял блокировку, поэтому после старта</span>
<span class="hl slc">// потока 'b' флаг еще некоторое время будет равен 1, пока поток 'a' не</span>
<span class="hl slc">// отпустит блокировку, и затем поток 'b' изменит флаг в 0, получив </span>
<span class="hl slc">// управление ожидания на блокировке.</span>
<span class="hl kwd">TEST</span><span class="hl opt">(</span>AutoLock<span class="hl opt">,</span> ConcurrentCalls<span class="hl opt">) {</span>
  <span class="hl kwc">volatile</span> <span class="hl kwb">int</span> flag <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>

  ext<span class="hl opt">::</span>Mutex mutex<span class="hl opt">;</span>

  T <span class="hl kwd">a</span><span class="hl opt">(</span>flag<span class="hl opt">,</span> mutex<span class="hl opt">,</span> <span class="hl num">100</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">);</span>
  T <span class="hl kwd">b</span><span class="hl opt">(</span>flag<span class="hl opt">,</span> mutex<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">);</span>

  <span class="hl slc">// Запускаем поток 'a'.</span>
  a<span class="hl opt">.</span><span class="hl kwd">Start</span><span class="hl opt">();</span>
  <span class="hl slc">// Ждем, пока поток 'a' займет блокировку.</span>
  <span class="hl slc">// Это случится, когда флаг станет равен 1.  </span>
  <span class="hl kwa">while</span> <span class="hl opt">(!</span>flag<span class="hl opt">);</span>

  <span class="hl slc">// Запускаем поток 'b'.</span>
  b<span class="hl opt">.</span><span class="hl kwd">Start</span><span class="hl opt">();</span>
  <span class="hl slc">// Ждем немного, чтобы убедиться, что поток запустился</span>
  <span class="hl slc">// и дошел до попытки занять блокировку.</span>
  <span class="hl kwd">msleep</span><span class="hl opt">(</span><span class="hl num">50</span><span class="hl opt">);</span>

  <span class="hl slc">// Так как время задержки в потоке 'a' больше 50мс,</span>
  <span class="hl slc">// то флаг все еще равен 1, так как поток 'a' пока не отпустил</span>
  <span class="hl slc">// блокировку, не давая потоку 'b' получить управление</span>
  <span class="hl slc">// и изменить флаг в 0.</span>
  <span class="hl kwd">EXPECT_EQ</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span> flag<span class="hl opt">);</span>

  <span class="hl slc">// Ждем завершения потока 'a' (блокировка должна быть</span>
  <span class="hl slc">// отпущена при его завершении.</span>
  a<span class="hl opt">.</span><span class="hl kwd">Join</span><span class="hl opt">();</span>

  <span class="hl slc">// Ждем завершения потока 'b', который к своему завершению</span>
  <span class="hl slc">// должен обнулить флаг.</span>
  b<span class="hl opt">.</span><span class="hl kwd">Join</span><span class="hl opt">();</span>
  <span class="hl kwd">EXPECT_EQ</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> flag<span class="hl opt">);</span>
<span class="hl opt">}</span>
</pre>

<p>Для компиляции нам также понадобятся файлы <code>mutex.h</code> (класс <a href="http://demin.ws/blog/russian/2009/02/06/universal-mutex-in-cpp-for-windows-and-unix/">Mutex</a>), <code>thread.cpp</code> и <code>thread.h</code> (класс <a href="http://demin.ws/blog/russian/2009/01/26/universal-threads-for-windows-and-unix/">Thread</a>).</p>

<p>Файл для запуска тестов <code>runner.cpp</code>:</p>

<pre class="hl">
<span class="hl ppc">#include</span> <span class="hl pps">&quot;gtest/gtest.h&quot;</span><span class="hl ppc"></span>
<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[]) {</span>
  testing<span class="hl opt">::</span><span class="hl kwd">InitGoogleTest</span><span class="hl opt">(&amp;</span>argc<span class="hl opt">,</span> argv<span class="hl opt">);</span>
  <span class="hl kwa">return</span> <span class="hl kwd">RUN_ALL_TESTS</span><span class="hl opt">();</span>
<span class="hl opt">}</span>
</pre>

<p>Компилируем:</p>

<p>Visual Studio:</p>

<pre><code>cl /EHsc /I. /Feautolock_unittest_vs2008.exe /DWIN32 runner.cpp autolock_unittest.cpp thread.cpp gtest\gtest-all.cc
</code></pre>

<p>Cygwin:</p>

<pre><code>cl /EHsc /I. /Feautolock_unittest_vs2008.exe /DWIN32 runner.cpp autolock_unittest.cpp thread.cpp gtest\gtest-all.cc
</code></pre>

<p>Запускаем:</p>

<pre><code>[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from AutoLock
[ RUN      ] AutoLock.ConcurrentCalls
[       OK ] AutoLock.ConcurrentCalls
[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran.
[  PASSED  ] 1 test.
</code></pre>

<p>Работает, что приятно. Тест работает как ожидалось.</p>

<p>Не забудьте включить файл <code>autolock_unittest.cpp</code> в тестовый набор вашего проекта. Не тратьте время на вылавливание неожиданных глюков тогда, когда вы уже порядком подзабыли, как тут все работает. Пусть ловлей глюков занимается тест, автоматизировано.</p>

<p>Другие посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2009/02/06/universal-mutex-in-cpp-for-windows-and-unix/">Самодельный мьютекс на C++ для Windows и UNIX</a></li>
<li><a href="http://demin.ws/blog/russian/2009/01/26/universal-threads-for-windows-and-unix/">Универсальные потоки на С++ для Windows и UNIX</a></li>
<li><a href="http://demin.ws/blog/russian/2009/01/28/unit-testing-concurrent-threads/">Unit-тестирование для параллельных потоков</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Олег Цилюрик, Егор Горошко, "QNX/UNIX. Анатомия параллелизма"]]></title>
    <link href="http://demin.ws/blog/russian/2009/02/16/qnx-unix-parallelism-anatomy/"/>
    <updated>2009-02-16T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/02/16/qnx-unix-parallelism-anatomy/</id>
    <content type="html"><![CDATA[<p>Олег Цилюрик, Егор Горошко</p>

<p><a href="http://www.ozon.ru/context/detail/id/2512096/?partner=easy-coding">QNX/UNIX. Анатомия параллелизма</a></p>

<p><img src="http://demin.ws/images/covers/russian/qnx-unix-parallelism-anatomy-cover.jpg" /></p>

<p>Хоть я в многопотоковом программировании далеко не новичок, я прочитал эту книгу от корки до корки, дважды. С удовольствием цеплялся на каждый абзац, перечитывал, обдумывал примеры, чтобы ничего не пропустить, компилировал их, крутил туда-сюда, сравнивал результаты с книгой, пробовал на разных системах и т.д.</p>

<p>Несмотря на присутствие слова QNX в названии книги, она является прекрасным руководством по программированию потоков в UNIX в целом. Начиная прямо от печки, то есть от определения потока и его порой неверного отделения от термина &ldquo;процесс&rdquo;, далее, следуя по базовым способам синхронизации потоков (блокировки, семафоры, условные переменные), детально разжеваны все тонкости поточного программирования с точки зрения идей и концепций, и в конкретном применении их в потоках POSIX (pthreads), включая нестандартные расширения различных версий.</p>

<p>Отдельной строкой укажу на отличную главу про взаимодействие механизма сигналов UNIX&rsquo;а и, собственно, потоков. Это весьма сложная тема, но тут она понятно расписана. Даны рекомендации “как надо” и “как не надо”.</p>

<p>Полно показательных примеров на С++. Причем примеры не просто призваны показать типа &ldquo;о! работает в потоке!&rdquo;. Примеры демонстрируют особенности, проблемы потоков, позволяют оценить ресурсоемкость различных приемов. Везде авторы дают рекомендации типа как ускорить данный кусок кода, как его упростить, как сделать его надежнее, как его тестировать.</p>

<p>Даются сравнительные оценки работы потоков в различных UNIX&rsquo;ах, например, QNX против Linux. Все плюсы и минусы обстоятельно, без эмоций разобраны. В конце книги рассматриваются некоторые чисто QNX&rsquo;овые возможности: пулы потоков, и как QNX избавляет программиста от огромного количества головной боли при их использовании, методика программирования сервисов на основе сообщений (для QNX это вообще родная тема благодаря микроядру).</p>

<p>Авторы совершенно точно смогли сконцентрироваться именно на теме многопоточности, не тратя место в книге (всего ~280 страниц) на смежные вопросы, предоставив для “открытых” вопросов отличную библиографию.</p>

<p>Есть книги, которые, как говориться, прочитал, передай другому, а некоторые уже не хочется никому отдавать. Это одна из таких немногих книг.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RapidEE - Редактор переменных окружения для Windows]]></title>
    <link href="http://demin.ws/blog/russian/2009/02/16/rapidee-windows-environment-editor/"/>
    <updated>2009-02-16T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/02/16/rapidee-windows-environment-editor/</id>
    <content type="html"><![CDATA[<p>Поднимите руки те, кому удобно пользоваться стандартным способом редактирования переменных окужения в Windows XP? Особенно когда, например, редактируешь длиннющую строку PATH в поле ввода длиной десять сантиметров. Я руку не поднимал, так как мне не нравится, радикально не нравится.</p>

<p>Есть замечательная программа <a href="http://www.rapidee.com/ru/about">Rapid Environment Editor</a> (RapidEE). Она позволяет очень удобно редактировать переменные окружения Windows в виде двух панелей: слева системные переменные, справа пользователькие. Переменная PATH автоматически представляется в виде списка путей. И даже то, что всю картину переменных видно как на ладони, и то, что программа понимает вставку из буфера обмена — все это меркнет перед гениальной функцией подсветки &ldquo;мертвых&rdquo; путей в переменной PATH. &ldquo;Мертвым&rdquo; путь может быть в основном по двум причинам: либо путь остался от программы, которая давно снесена, либо путь просто задан неверно, а вы битый час пытаетесь понять, почему что-то там не запускается. RapidEE моментально решает подобные проблемы.</p>

<p>Я не сторонник графического интерфейса, и чего греха таить, люблю командную строку. В свое время я написал небольшой скрипт, который в Windows распечатывает пути из переменной PATH по отдельности:</p>

<p>Файл <code>splitpath.cmd</code>:</p>

<pre class="hl">
&#64;<span class="hl kwb">echo</span> off 
<span class="hl kwb">set</span> line<span class="hl opt">=</span><span class="hl kwc">%path%</span>
<span class="hl kwb">setlocal</span> 
<span class="hl opt">:</span>parse_line
<span class="hl kwa">for</span> <span class="hl opt">/</span>F <span class="hl str">&quot;delims=; tokens=1,*&quot;</span> <span class="hl kwc">%%a</span> in <span class="hl opt">(</span><span class="hl str">&quot;%line%&quot;) do (</span>
<span class="hl str">   echo %%a</span>
<span class="hl str">   set line=%%b</span>
<span class="hl str">)</span>
<span class="hl str">if &quot;</span><span class="hl kwc">%line%&quot;</span> NEQ <span class="hl str">&quot;&quot;</span> <span class="hl kwa">goto</span> parse_line
<span class="hl kwb">endlocal</span>
</pre>

<p>Примерный результат его работы выглядит так:</p>

<pre><code>C:\WINDOWS\system32
C:\WINDOWS
C:\WINDOWS\System32\Wbem
c:\Python25
C:\Program Files\CodeGear\RAD Studio\5.0\bin
C:\Program Files\Java\jdk1.6.0_04
C:\Program Files\Java\jdk1.6.0_04\jre\bin
C:\Program Files\PC Connectivity Solution
c:\oracle\9.2.0.1\bin
C:\Program Files\Oracle\jre\1.3.1\bin
C:\Program Files\Oracle\jre\1.1.8\bin
C:\WINDOWS\Microsoft.NET\Framework\v1.1.4322
C:\PROGRA~1\Borland\CBUILD~1\Bin
</code></pre>

<p>Но после перехода на RapidEE нужда в скрипте отпала совсем.</p>

<p><strong>Вывод</strong>: RapidEE очень удобная программа для редактирования переменных окружения в Windows. Программа бесплатная. Может работать в portable режиме и не требовать установки.</p>

<p>Скриншот:</p>

<p><img src="http://demin.ws/images/blog/rapidee.png" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[std::min() и std::max() в Visual Studio]]></title>
    <link href="http://demin.ws/blog/russian/2009/02/15/min-max-in-visual-studio/"/>
    <updated>2009-02-15T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/02/15/min-max-in-visual-studio/</id>
    <content type="html"><![CDATA[<p>Простейший кусок кода (файл <code>minmax.cpp</code>):</p>

<pre class="hl">
<span class="hl ppc">#include &lt;algorithm&gt;</span>
<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
  <span class="hl kwb">int</span> a <span class="hl opt">=</span> std<span class="hl opt">::</span><span class="hl kwd">min</span><span class="hl opt">(</span><span class="hl num">10</span><span class="hl opt">,</span> <span class="hl num">20</span><span class="hl opt">);</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Все тривиально и отлично компилируется и в Visual Studio, и в CodeGear/Borland Studio, и Cygwin. Но допустим потребовались какие-то функции из Windows API, и вы подключили файл <code>windows.h</code>:</p>

<p>Теперь компиляция в Visual Studio (я проверял в 2005 и 2008) будет падать со следующей ошибкой:</p>

<pre><code>minmax.cpp
minmax.cpp(4) : error C2589: '(' : illegal token on right side of '::'
minmax.cpp(4) : error C2059: syntax error : '::'
</code></pre>

<p>Постановка <code>#include &lt;windows.h&gt;</code> до <code>#include &lt;algorithm&gt;</code> проблемы не решает.</p>

<p>Очевидно, проблема в том, что кто-то переопределил значение слова min. Запустим препроцессор и проверим догадку:</p>

<pre><code>cl /P minmax.cpp
</code></pre>

<p>И что мы видим? А видим мы следующее (фрагмент файла <code>minmap.i</code>):</p>

<pre class="hl">
<span class="hl ppc">#line 7</span> <span class="hl pps">&quot;minmax.cpp&quot;</span><span class="hl ppc"></span>
<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
  <span class="hl kwb">int</span> a <span class="hl opt">=</span> std<span class="hl opt">::(((</span><span class="hl num">10</span><span class="hl opt">) &lt; (</span><span class="hl num">20</span><span class="hl opt">))</span> ? <span class="hl opt">(</span><span class="hl num">10</span><span class="hl opt">) : (</span><span class="hl num">20</span><span class="hl opt">));</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Естественно, это каша с точки зрения синтаксиса, и компилятор ругается совершенно законно.
Покопавшись в заголовочных файлах Windows SDK, в файле <code>WinDef.h</code>, который косвенно подключается через <code>windows.h</code>, я нашел корень зла:</p>

<pre class="hl">
<span class="hl ppc">#ifndef NOMINMAX</span>

<span class="hl ppc">#ifndef max</span>
<span class="hl ppc">#define max(a,b)            (((a) &gt; (b)) ? (a) : (b))</span>
<span class="hl ppc">#endif</span>

<span class="hl ppc">#ifndef min</span>
<span class="hl ppc">#define min(a,b)            (((a) &lt; (b)) ? (a) : (b))</span>
<span class="hl ppc">#endif</span>

<span class="hl ppc">#endif</span>  <span class="hl com">/* NOMINMAX */</span><span class="hl ppc"></span>
</pre>

<p>Вот теперь ясно, что делать — надо определить макрос NOMINMAX, тем самым заблокировать определение <code>min</code> и <code>max</code>:</p>

<pre class="hl">
<span class="hl ppc">#define NOMINMAX</span>
<span class="hl ppc">#include &lt;algorithm&gt;</span>
<span class="hl ppc">#include &lt;windows.h&gt;</span>
<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
  <span class="hl kwb">int</span> a <span class="hl opt">=</span> std<span class="hl opt">::</span><span class="hl kwd">min</span><span class="hl opt">(</span><span class="hl num">10</span><span class="hl opt">,</span> <span class="hl num">20</span><span class="hl opt">);</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Забавно, что в Cygwin и CodeGear/Borland исходный пример компилируется без проблем. В борландовой версии <code>windows.h</code> я нашел вот такой фрагмент:</p>

<pre class="hl">
<span class="hl ppc">#if defined(__BORLANDC__)</span>
<span class="hl opt">...</span>
<span class="hl ppc">#    if defined(__cplusplus)</span>
<span class="hl ppc">#       define NOMINMAX</span>              <span class="hl com">/* for WINDEF.H */</span><span class="hl ppc"></span>
<span class="hl opt">...</span>
<span class="hl ppc">#    endif</span>
<span class="hl opt">...</span>
<span class="hl ppc">#endif</span> <span class="hl com">/* __BORLANDC__ */</span><span class="hl ppc"></span>
</pre>

<p>Эдак они заранее оградились от проблемы, принудительно запретив проблемные макросы.</p>

<p><strong>Вывод</strong>: Порой промежуточные результаты работы препроцессора являются крайне полезной информацией.</p>

<p>На всякий случай напомню, как его запускать для перечисленных мной компиляторов:</p>

<p>Visual Studio:</p>

<pre><code>cl.exe /P имя_исходника.cpp
</code></pre>

<p>Borland/CodeGear Studio:</p>

<pre><code>cpp32.exe имя_исходника.cpp
</code></pre>

<p>Cygwin:</p>

<pre><code>cpp.exe имя_исходника.cpp
</code></pre>

<p>Прочие флаги командной строки должны повторять флаги при обычной компиляции. Для препроцессора важны определения макросов (обычно это флаги <code>-D</code> и <code>-U</code>) и пути для поиска включаемых файлов (обычно это флаг <code>-I</code>).</p>

<p>Другие посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2009/03/05/how-to-do-without-nominmax/">Как обойтить без макроса NOMINMAX</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Шестнадцатеричная печать в STL поток]]></title>
    <link href="http://demin.ws/blog/russian/2009/02/14/hex-print-to-stl-stream/"/>
    <updated>2009-02-14T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/02/14/hex-print-to-stl-stream/</id>
    <content type="html"><![CDATA[<p>Когда-то очень давно я написал элементарный манипулятор для шестнадцатеричной печати в стандарный поток. Все просто и тривиально. Но тем не менее я заметил, что таскаю этот микрокласс почти в кажный проект, где нужна отладочная печать. Обычно для шестнадцатеричной печати надо указывать сразу несколько итераторов, типа:</p>

<pre class="hl">
std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>hex <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>uppercase <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span><span class="hl kwd">setfill</span><span class="hl opt">(</span><span class="hl str">'0'</span><span class="hl opt">) &lt;&lt;</span> std<span class="hl opt">::</span><span class="hl kwd">setw</span><span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">) &lt;&lt;</span> <span class="hl num">0xAA</span><span class="hl opt">;</span>
</pre>

<p>Причем <code>std::setw()</code> надо повторять для каждого нового выводимого элемента. Я свел все это в один итератор, чтобы можно было просто написать (указав итератору ширину выводимого поля):</p>

<pre class="hl">
std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> ext<span class="hl opt">::</span><span class="hl kwd">Hex</span><span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">) &lt;&lt;</span> <span class="hl num">0xAA</span><span class="hl opt">;</span>
</pre>

<p>Итак, класс <code>Hex</code> (название пространства имен можно подкрутить по вкусу), файл <code>hex.h</code>:</p>

<pre class="hl">
<span class="hl ppc">#ifndef _EXT_HEX_H</span>
<span class="hl ppc">#define _EXT_HEX_H</span>

<span class="hl ppc">#include &lt;iostream&gt;</span>
<span class="hl ppc">#include &lt;iomanip&gt;</span>

<span class="hl kwa">namespace</span> ext <span class="hl opt">{</span>

<span class="hl kwc">class</span> Hex <span class="hl opt">{</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl kwd">Hex</span><span class="hl opt">(</span><span class="hl kwb">int</span> width<span class="hl opt">) :</span> <span class="hl kwd">__width</span><span class="hl opt">(</span>width<span class="hl opt">) {}</span>
  <span class="hl kwc">friend</span> std<span class="hl opt">::</span>ostream<span class="hl opt">&amp;</span> <span class="hl kwc">operator</span><span class="hl opt">&lt;&lt; (</span>std<span class="hl opt">::</span>ostream<span class="hl opt">&amp;</span> os<span class="hl opt">,</span> <span class="hl kwb">const</span> Hex<span class="hl opt">&amp;</span> hex<span class="hl opt">);</span>
<span class="hl kwc">private</span><span class="hl opt">:</span>
  <span class="hl kwb">int</span> __width<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl kwc">inline</span> std<span class="hl opt">::</span>ostream<span class="hl opt">&amp;</span> <span class="hl kwc">operator</span><span class="hl opt">&lt;&lt; (</span>std<span class="hl opt">::</span>ostream<span class="hl opt">&amp;</span> os<span class="hl opt">,</span> <span class="hl kwb">const</span> Hex<span class="hl opt">&amp;</span> hex<span class="hl opt">) {</span>
  std<span class="hl opt">::</span><span class="hl kwd">hex</span><span class="hl opt">(</span>os<span class="hl opt">);</span>
  std<span class="hl opt">::</span><span class="hl kwd">uppercase</span><span class="hl opt">(</span>os<span class="hl opt">);</span>
  os<span class="hl opt">.</span><span class="hl kwd">width</span><span class="hl opt">(</span>hex<span class="hl opt">.</span>__width<span class="hl opt">);</span>
  os<span class="hl opt">.</span><span class="hl kwd">fill</span><span class="hl opt">(</span><span class="hl str">'0'</span><span class="hl opt">);</span>
  <span class="hl kwa">return</span> os<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl opt">}</span> <span class="hl slc">// ext</span>

<span class="hl ppc">#endif</span> <span class="hl slc">// _EXT_HEX_H</span><span class="hl ppc"></span>
</pre>

<p>Теперь можно писать так:</p>

<pre class="hl">
std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> ext<span class="hl opt">::</span><span class="hl kwd">Hex</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">)  &lt;&lt;</span> <span class="hl num">0x0a</span> <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> ext<span class="hl opt">::</span><span class="hl kwd">Hex</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">)  &lt;&lt;</span> <span class="hl num">0x0a</span> <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> ext<span class="hl opt">::</span><span class="hl kwd">Hex</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">)  &lt;&lt;</span> <span class="hl num">0xaa</span> <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> ext<span class="hl opt">::</span><span class="hl kwd">Hex</span><span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">)  &lt;&lt;</span> <span class="hl num">0xaa</span> <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> ext<span class="hl opt">::</span><span class="hl kwd">Hex</span><span class="hl opt">(</span><span class="hl num">4</span><span class="hl opt">)  &lt;&lt;</span> <span class="hl num">0xaa</span> <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> ext<span class="hl opt">::</span><span class="hl kwd">Hex</span><span class="hl opt">(</span><span class="hl num">8</span><span class="hl opt">)  &lt;&lt;</span> <span class="hl num">0x0a</span> <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> ext<span class="hl opt">::</span><span class="hl kwd">Hex</span><span class="hl opt">(</span><span class="hl num">16</span><span class="hl opt">) &lt;&lt;</span> <span class="hl num">0x0a</span> <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> ext<span class="hl opt">::</span><span class="hl kwd">Hex</span><span class="hl opt">(</span><span class="hl num">32</span><span class="hl opt">) &lt;&lt;</span> <span class="hl num">0x0a</span> <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
</pre>

<p>И результатом будет:</p>

<pre><code>A
A
AA
AA
00AA
0000000A
000000000000000A
0000000000000000000000000000000A
</code></pre>

<p>На всякий случай, unit-тест. Чтобы не было сюрпризов при обновлении компилятора, STLport или чего-то еще. Тест всегда проверит, работает ли класс так, как вы от него ждете. Вы можете возразить — ну класс-то выеденного яйца не стоит, а тут для него тесты&hellip; Соглашусь. А еще я соглашусь, что сотни раз самые казалось бы ненужные на первый взгляд тесты для &ldquo;очевидных&rdquo; классов помогали обнаружить глюки на новой версии системных библиотек, новой версии компилятора, использовании &ldquo;более мощных&rdquo; параметров оптимизации и т.д. Время на написание тестов всегда окупается сполна, всегда.</p>

<p>Традиционно, для компиляции тестов нам нужна <a href="http://code.google.com/p/googletest/">Google Test Framework</a>. Как я уже <a href="http://demin.ws/blog/russian/2009/01/28/unit-testing-concurrent-threads/">писал</a>, вы можете скачать <a href="http://demin.ws/downloads/gtest-amalgamation-1.2.1.zip">мою модификацию</a>  этой библиотеки, которая сокращена до двух необходимых файлов <code>gtest/gtest.h</code> и <code>gtest-all.cc</code>.</p>

<p>Файл <code>hex_unittest.cpp</code>:</p>

<pre class="hl">
<span class="hl ppc">#include</span> <span class="hl pps">&quot;gtest/gtest.h&quot;</span><span class="hl ppc"></span>
<span class="hl ppc">#include</span> <span class="hl pps">&quot;hex.h&quot;</span><span class="hl ppc"></span>
<span class="hl ppc">#include &lt;sstream&gt;</span>

<span class="hl kwb">void</span> <span class="hl kwd">testHex</span><span class="hl opt">(</span><span class="hl kwb">int</span> n<span class="hl opt">,</span> <span class="hl kwb">int</span> w<span class="hl opt">,</span> <span class="hl kwb">const</span> std<span class="hl opt">::</span>string<span class="hl opt">&amp;</span> etalon<span class="hl opt">) {</span>
  std<span class="hl opt">::</span>stringstream fmt<span class="hl opt">;</span>
  fmt <span class="hl opt">&lt;&lt;</span> ext<span class="hl opt">::</span><span class="hl kwd">Hex</span><span class="hl opt">(</span>w<span class="hl opt">) &lt;&lt;</span> n<span class="hl opt">;</span>
  <span class="hl kwd">EXPECT_EQ</span><span class="hl opt">(</span>etalon<span class="hl opt">,</span> fmt<span class="hl opt">.</span><span class="hl kwd">str</span><span class="hl opt">());</span>
<span class="hl opt">}</span>

<span class="hl kwd">TEST</span><span class="hl opt">(</span>HexManip<span class="hl opt">,</span> Generic<span class="hl opt">) {</span>
  <span class="hl kwd">testHex</span><span class="hl opt">(</span><span class="hl num">0x0A</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl str">&quot;A&quot;</span><span class="hl opt">);</span>
  <span class="hl kwd">testHex</span><span class="hl opt">(</span><span class="hl num">0x0A</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl str">&quot;A&quot;</span><span class="hl opt">);</span>
  <span class="hl kwd">testHex</span><span class="hl opt">(</span><span class="hl num">0xAA</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl str">&quot;AA&quot;</span><span class="hl opt">);</span>
  <span class="hl kwd">testHex</span><span class="hl opt">(</span><span class="hl num">0xAA</span><span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">,</span> <span class="hl str">&quot;AA&quot;</span><span class="hl opt">);</span>
  <span class="hl kwd">testHex</span><span class="hl opt">(</span><span class="hl num">0xAA</span><span class="hl opt">,</span> <span class="hl num">4</span><span class="hl opt">,</span> <span class="hl str">&quot;00AA&quot;</span><span class="hl opt">);</span>
  <span class="hl kwd">testHex</span><span class="hl opt">(</span><span class="hl num">0xAA</span><span class="hl opt">,</span> <span class="hl num">8</span><span class="hl opt">,</span> <span class="hl str">&quot;000000AA&quot;</span><span class="hl opt">);</span>
  <span class="hl kwd">testHex</span><span class="hl opt">(</span><span class="hl num">0xAA</span><span class="hl opt">,</span> <span class="hl num">16</span><span class="hl opt">,</span> <span class="hl str">&quot;00000000000000AA&quot;</span><span class="hl opt">);</span>
  <span class="hl kwd">testHex</span><span class="hl opt">(</span><span class="hl num">0xAA</span><span class="hl opt">,</span> <span class="hl num">32</span><span class="hl opt">,</span> <span class="hl str">&quot;000000000000000000000000000000AA&quot;</span><span class="hl opt">);</span>
<span class="hl opt">}</span>
Ну и головная программа<span class="hl opt">:</span>
<span class="hl ppc">#include</span> <span class="hl pps">&quot;gtest/gtest.h&quot;</span><span class="hl ppc"></span>
<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[]) {</span>
  testing<span class="hl opt">::</span><span class="hl kwd">InitGoogleTest</span><span class="hl opt">(&amp;</span>argc<span class="hl opt">,</span> argv<span class="hl opt">);</span>
  <span class="hl kwa">return</span> <span class="hl kwd">RUN_ALL_TESTS</span><span class="hl opt">();</span>
<span class="hl opt">}</span>
</pre>

<p>Компилируем.</p>

<p>Visual Studio:</p>

<pre><code>cl /EHsc /I. /Fehex_unittest_vs2008.exe runner.cpp hex_unittest.cpp gtest\gtest-all.cc
</code></pre>

<p>Cygwin:</p>

<pre><code>g++ -I. -o hex_unittest_cygwin.exe runner.cpp hex_unittest.cpp gtest/gtest-all.cc
</code></pre>

<p>Запускаем:</p>

<pre><code>[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from HexManip
[ RUN      ] HexManip.Generic
[       OK ] HexManip.Generic
[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran.
[  PASSED  ] 1 test.
</code></pre>

<p>Работает как положено.</p>

<p>При использовании <code>Hex</code> у себя в проекте не забудьте включить файл <code>hex_unittest.cpp</code> в ваш набор unit-тестов. Оберегите себя от ненужной траты времени в будущем.</p>

<p>Под занавес пара слов о производительности. Очевидно, что если вы выводите в поток десятки тысяч шестнадцатеричных чисел подряд, то разумнее будет использовать стандартные итераторы — настроить поток с помощью <code>std::hex</code>, <code>std::uppercase</code> и <code>std::setfill</code>, а потом вызывать только <code>std::setw</code> для каждого нового элемента. Но если вы печатаете разнородные данные, что часто требуется при отладке, то тогда итератор <code>Hex</code> будет в самый раз.</p>

<p>Другие посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2009/01/28/unit-testing-concurrent-threads/">Unit-тестирование для параллельных потоков</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Павел Агуров, "Интерфейс USB. Практика использования и программирования"]]></title>
    <link href="http://demin.ws/blog/russian/2009/02/14/usb-interface-usage-and-programming/"/>
    <updated>2009-02-14T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/02/14/usb-interface-usage-and-programming/</id>
    <content type="html"><![CDATA[<p>Павел Агуров</p>

<p><a href="http://www.ozon.ru/context/detail/id/1955129/?partner=easy-coding">Интерфейс USB. Практика использования и программирования</a></p>

<p><img src="http://demin.ws/images/covers/russian/usb-interface-usage-and-programming-cover.jpg" /></p>

<p>Очень целостная книга про USB от электрических основ и применяемых микросхем до написания драйверов под Windows. Я прочитал книгу на одном дыхании, и не пожалел ни капли о потраченном времени. Правда, если быть честным, то последние главы про написание драйверов под Windows я уже просматривал по диагонали, ехидно хихикая про себя на тему “как же можно было усложнить написание драйверов под винды…” и почему в <a href="http://libusb.wiki.sourceforge.net/">libusb</a> так просто и понятно даже с нуля, а в Windows DDK проще использовать всякие конструкторы драйверов для радикального сокращения времени “начального вхождения” в тему. Но это мои личные тараканы.</p>

<p>Прочитав книгу вы как минимум точно будете знать почему конкретно нельзя два компьютера просто взять и соединить обычным USB кабелем. Я, например, со своим программистским сознанием недоумевал раньше, мол почему если принтер можно подсоединить к компьютеру по USB, то почему же нельзя вместо принтера поставить другой компьютер, написав для него программу по аналогии с принтерной прошивкой, и организовать тем самым мини сеть? Это же просто вопрос драйверов (я так думал)… А тут меня заставляют покупать какой-то хитрый кабель с логикой внутри…</p>

<p>В общем, за себя могу сказать — я на капельку поумнел, что приятно.</p>

<p>А если серьезно, то прочитав эту книгу, можно спокойно самостоятельно “набросать” USB-устройство и написать для него драйвера по Windows.</p>

<p>Жалко, что в книге рассмотрено написание USB драйверов только под Windows. Было бы интересно написать один и то же драйвер под Windows и Linux, например, и оценить трудозатраты.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Шаблоны как параметры шаблона]]></title>
    <link href="http://demin.ws/blog/russian/2009/02/13/templates-as-templates-parameters/"/>
    <updated>2009-02-13T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/02/13/templates-as-templates-parameters/</id>
    <content type="html"><![CDATA[<p>Есть в шаблонах С++ интересная возможность параметризировать сами параметры шаблонов. Чтобы это могло значить?</p>

<p>Бывают случаи, когда параметр шаблона сам является шаблонным классом и для его инстанцирования тоже нужно указать параметр. Например, универсальная шаблонная функция для печати стандартного контейнера любого типа в поток:</p>

<pre class="hl">
<span class="hl kwc">template</span><span class="hl opt">&lt;</span> typename C<span class="hl opt">,</span> typename E <span class="hl opt">&gt;</span>
<span class="hl kwb">void</span> <span class="hl kwd">print</span><span class="hl opt">(</span><span class="hl kwb">const</span> C<span class="hl opt">&lt;</span>E<span class="hl opt">&gt;&amp;</span> v<span class="hl opt">) {</span>
  <span class="hl kwd">copy</span><span class="hl opt">(</span>v<span class="hl opt">.</span><span class="hl kwd">begin</span><span class="hl opt">(),</span> v<span class="hl opt">.</span><span class="hl kwd">end</span><span class="hl opt">(),</span> ostream_iterator<span class="hl opt">&lt;</span>E<span class="hl opt">&gt;(</span>cout<span class="hl opt">,</span> <span class="hl str">&quot;  &quot;</span><span class="hl opt">));</span>
  cout <span class="hl opt">&lt;&lt;</span> endl<span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>И все бы ничего, но с только зрения синтаксиса С++ это неверно. Нельзя просто написать <code>C&lt;E&gt;</code>, если <code>E</code> сам является не определенным типом, а параметром шаблона. Правильный способ использования параметра шаблона, который в свою очередь зависит от другого параметра, должен выглядеть так:</p>

<pre class="hl">
<span class="hl kwc">template</span><span class="hl opt">&lt;</span> <span class="hl kwc">template</span><span class="hl opt">&lt;</span>typename<span class="hl opt">&gt;</span> <span class="hl kwc">class</span> C<span class="hl opt">,</span> typename E <span class="hl opt">&gt;</span>
<span class="hl kwb">void</span> <span class="hl kwd">print</span><span class="hl opt">(</span><span class="hl kwb">const</span> C<span class="hl opt">&lt;</span>E<span class="hl opt">&gt;&amp;</span> v<span class="hl opt">) {</span>
  <span class="hl kwd">copy</span><span class="hl opt">(</span>v<span class="hl opt">.</span><span class="hl kwd">begin</span><span class="hl opt">(),</span> v<span class="hl opt">.</span><span class="hl kwd">end</span><span class="hl opt">(),</span> ostream_iterator<span class="hl opt">&lt;</span>E<span class="hl opt">&gt;(</span>cout<span class="hl opt">,</span> <span class="hl str">&quot;  &quot;</span><span class="hl opt">));</span>
  cout <span class="hl opt">&lt;&lt;</span> endl<span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Теперь полный пример (<code>template_parameter.cpp</code>):</p>

<pre class="hl">
<span class="hl ppc">#include &lt;iostream&gt;</span>
<span class="hl ppc">#include &lt;iomanip&gt;</span>
<span class="hl ppc">#include &lt;algorithm&gt;</span>
<span class="hl ppc">#include &lt;iterator&gt;</span>
<span class="hl ppc">#include &lt;string&gt;</span>
<span class="hl ppc">#include &lt;vector&gt;</span>
<span class="hl ppc">#include &lt;list&gt;</span>
<span class="hl ppc">#include &lt;deque&gt;</span>

<span class="hl slc">// Я обычно не использую пространства имен &quot;по умолчанию&quot;, но тут</span>
<span class="hl slc">// это сделано для компактности примера.</span>
<span class="hl kwa">using namespace</span> std<span class="hl opt">;</span>

<span class="hl slc">// Вся изюминка тут: template&lt;typename&gt; или template&lt;class&gt;.</span>
<span class="hl slc">// Без этого параметр шаблона &quot;С&quot; нельзя будет параметризировать.</span>
<span class="hl slc">// в конструкции C&lt;E&gt;&amp;.</span>
<span class="hl kwc">template</span><span class="hl opt">&lt;</span> <span class="hl kwc">template</span><span class="hl opt">&lt;</span>typename<span class="hl opt">&gt;</span> <span class="hl kwc">class</span> C<span class="hl opt">,</span> typename E <span class="hl opt">&gt;</span>
<span class="hl slc">// Тут происходит параметризация параметра &quot;С&quot; параметром &quot;E&quot;.</span>
<span class="hl slc">// Без этого класс &quot;С&quot; не может быть использован, так как &quot;E&quot;</span>
<span class="hl slc">// является не просто типом, а тоже параметром шаблона.</span>
<span class="hl kwb">void</span> <span class="hl kwd">print</span><span class="hl opt">(</span><span class="hl kwb">const</span> C<span class="hl opt">&lt;</span>E<span class="hl opt">&gt;&amp;</span> v<span class="hl opt">) {</span>
  <span class="hl slc">// Так как класс элемента контейнера &quot;Е&quot; нам тут нужен как отдельный</span>
  <span class="hl slc">// тип, то для этого и затеяна вся тема с параметризированными</span>
  <span class="hl slc">// параметрами шаблона.</span>
  <span class="hl kwd">copy</span><span class="hl opt">(</span>v<span class="hl opt">.</span><span class="hl kwd">begin</span><span class="hl opt">(),</span> v<span class="hl opt">.</span><span class="hl kwd">end</span><span class="hl opt">(),</span> ostream_iterator<span class="hl opt">&lt;</span>E<span class="hl opt">&gt;(</span>cout<span class="hl opt">,</span> <span class="hl str">&quot;  &quot;</span><span class="hl opt">));</span>
  cout <span class="hl opt">&lt;&lt;</span> endl<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl slc">// Тестовая программа демонстрирует, как одна функция print()</span>
<span class="hl slc">// может использоваться для печати любого контейнера</span>
<span class="hl slc">// (если, конечно, он удовлетворяет требованиям алгоритма</span>
<span class="hl slc">// copy() по наличию должных итераторов), содержащего элементы </span>
<span class="hl slc">// любого типа.</span>
<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[]) {</span>
  <span class="hl slc">// Массив целых.</span>
  <span class="hl kwb">int</span> i<span class="hl opt">[</span><span class="hl num">5</span><span class="hl opt">] = {</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">,</span> <span class="hl num">3</span><span class="hl opt">,</span> <span class="hl num">4</span><span class="hl opt">,</span> <span class="hl num">5</span> <span class="hl opt">};</span>
  <span class="hl slc">// Создаем вектор, состоящий из целых, и печатаем его.</span>
  print<span class="hl opt">&lt;</span> vector<span class="hl opt">,</span> <span class="hl kwb">int</span> <span class="hl opt">&gt;(</span> vector<span class="hl opt">&lt;</span><span class="hl kwb">int</span><span class="hl opt">&gt;(</span>i<span class="hl opt">,</span> i <span class="hl opt">+</span> <span class="hl num">5</span><span class="hl opt">) );</span>

  <span class="hl slc">// Массив вещественных.</span>
  <span class="hl kwb">float</span> f<span class="hl opt">[</span><span class="hl num">5</span><span class="hl opt">] = {</span> <span class="hl num">.1</span><span class="hl opt">,</span> <span class="hl num">.2</span><span class="hl opt">,</span> <span class="hl num">.3</span><span class="hl opt">,</span> <span class="hl num">.4</span><span class="hl opt">,</span> <span class="hl num">.5</span> <span class="hl opt">};</span>
  <span class="hl slc">// Создаем вектор, состоящий из вещественных, и печатаем его.</span>
  print<span class="hl opt">&lt;</span> vector<span class="hl opt">,</span> <span class="hl kwb">float</span> <span class="hl opt">&gt;(</span> vector<span class="hl opt">&lt;</span><span class="hl kwb">float</span><span class="hl opt">&gt;(</span>f<span class="hl opt">,</span> f <span class="hl opt">+</span> <span class="hl num">5</span><span class="hl opt">) );</span>

  <span class="hl slc">// Массив символов.</span>
  <span class="hl kwb">char</span> c<span class="hl opt">[</span><span class="hl num">5</span><span class="hl opt">] = {</span> <span class="hl str">'a'</span><span class="hl opt">,</span> <span class="hl str">'b'</span><span class="hl opt">,</span> <span class="hl str">'c'</span><span class="hl opt">,</span> <span class="hl str">'d'</span><span class="hl opt">,</span> <span class="hl str">'e'</span> <span class="hl opt">};</span>
  <span class="hl slc">// Создаем деку, состоящую их символов, и печатаем ее.</span>
  print<span class="hl opt">&lt;</span> deque<span class="hl opt">,</span> <span class="hl kwb">char</span> <span class="hl opt">&gt;(</span> deque<span class="hl opt">&lt;</span><span class="hl kwb">char</span><span class="hl opt">&gt;(</span>c<span class="hl opt">,</span> c <span class="hl opt">+</span> <span class="hl num">5</span><span class="hl opt">) );</span>

  <span class="hl slc">// Массив строк в стиле С.</span>
  <span class="hl kwb">char</span><span class="hl opt">*</span> s<span class="hl opt">[</span><span class="hl num">5</span><span class="hl opt">] = {</span> <span class="hl str">&quot;a1&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;b2&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;c3&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;d4&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;e5&quot;</span> <span class="hl opt">};</span>
  <span class="hl slc">// Создаем список, состоящий из строк, и печатаем его.</span>
  print<span class="hl opt">&lt;</span> list<span class="hl opt">,</span> string <span class="hl opt">&gt;(</span> list<span class="hl opt">&lt;</span>string<span class="hl opt">&gt;(</span>s<span class="hl opt">,</span> s <span class="hl opt">+</span> <span class="hl num">5</span><span class="hl opt">) );</span>

  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Компилируем.</p>

<p>Cygwin:</p>

<pre><code>g++ -o template_parameter_cygwin.exe template_parameter.cpp
</code></pre>

<p>или в Borland/Codegear Studio 2007:</p>

<pre><code>bcc32 /etemplate_parameter_cg2007.exe template_parameter.cpp
</code></pre>

<p>И запускаем скомпилированный файл:</p>

<pre><code>1  2  3  4  5
0.1  0.2  0.3  0.4  0.5
a  b  c  d  e
a1  b2  c3  d4  e5
</code></pre>

<p>Отчетливо видно, что на первой строке распечатаны целые, на второй вещественные, на третьей символы, и на четвертой строки.</p>

<p>Вы спросите, где компиляция в Visual Studio? А вот с ней вышел облом. Я пробовал скомпилировать этот пример в Visual Studio 2005 и 2008, и в обоих случаях я получал ошибки типа:</p>

<p><code>template_as_parameter.cpp(38) : error C3208: 'print' : template parameter list for class template 'std::vector' does not match template parameter list for template template parameter 'C'</code></p>

<p>Из чего я сделал вывод, что микрософтовский компилятор не поддерживает подобный синтаксис.</p>

<p>Я был очень расстроен подобным фактом, так как в целом очень положительно отношусь к <code>cl.exe</code>. А тут выходит, что даже борландовый компилятор это понимает, а <code>cl.exe</code> нет. Если кто знает, может есть ключик какой секретный для включения поддержки &ldquo;хитрых и редких&rdquo; возможностей С++ в компиляторе микрософта — научите, пожалуйста. Буду очень признателен.</p>

<p>Предвосхищу вопросы типа &ldquo;зачем так сложно, да еще и плохо переносимо&rdquo; — все верно. Лично я бы отнес все выше описанное к &ldquo;<a href="http://demin.ws/blog/russian/2009/02/09/dark-corners-of-cpp/">темным углам</a>&rdquo; С++, но уж больно интересно по ним полазать.</p>

<p><strong>Обновление</strong></p>

<p>Комментарий Александра прояснил ситуацию с проблемой при компиляции в Visual Studio. Окончательный вариант кода, чтобы работало в <code>cl.exe</code>, таков:</p>

<pre class="hl">
<span class="hl kwc">template</span><span class="hl opt">&lt;</span> <span class="hl kwc">template</span><span class="hl opt">&lt;</span>typename<span class="hl opt">,</span> typename<span class="hl opt">&gt;</span> <span class="hl kwc">class</span> C<span class="hl opt">,</span> typename E <span class="hl opt">&gt;</span>
<span class="hl kwb">void</span> <span class="hl kwd">print</span><span class="hl opt">(</span><span class="hl kwb">const</span> C<span class="hl opt">&lt;</span>E<span class="hl opt">,</span> allocator<span class="hl opt">&lt;</span>E<span class="hl opt">&gt; &gt;&amp;</span> v<span class="hl opt">) {</span>
  <span class="hl kwd">copy</span><span class="hl opt">(</span>v<span class="hl opt">.</span><span class="hl kwd">begin</span><span class="hl opt">(),</span> v<span class="hl opt">.</span><span class="hl kwd">end</span><span class="hl opt">(),</span> ostream_iterator<span class="hl opt">&lt;</span>E<span class="hl opt">&gt;(</span>cout<span class="hl opt">,</span> <span class="hl str">&quot;  &quot;</span><span class="hl opt">));</span>
  cout <span class="hl opt">&lt;&lt;</span> endl<span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>У шаблонов стандартных контейнеров есть второй параметр, так называемый <code>allocator</code>. Этот параметр часто используется со значением по умолчанию, поэтому редко приходится вспоминать о нем. И как уточнил Александр, моя проблема была в том, что <code>cl.exe</code> требует явного указания наличия этого параметра при параметризации параметра <code>C</code>.</p>

<p>Исправленный код компилируется во всех опробованных компиляторах, теперь включая и <code>cl.exe</code>.</p>

<p>Другие посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2009/02/09/dark-corners-of-cpp/">Темные углы С++</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Универсальная информация об ошибках в Windows и UNIX]]></title>
    <link href="http://demin.ws/blog/russian/2009/02/12/universal-error-information-for-windows-and-unix/"/>
    <updated>2009-02-12T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/02/12/universal-error-information-for-windows-and-unix/</id>
    <content type="html"><![CDATA[<p>Достоверная информация об ошибках во время исполнения программы является залогом простой ее эксплуатации и поддержки. Вместо выслушивания от клиента стенаний на тему &ldquo;я тут что-то нажал&hellip; а тут все не работает&hellip;&rdquo; можно просто попросить его прислать файл журнала программы (log), и с большой вероятностью этого будет достаточно для локализации проблемы. С логическими ошибками бизнес логики программы все понятно — тут все зависит от вас, и вы точно знаете, какая ошибка произошла. Хуже обстоит дело с ошибками системными. Тут надо максималько точно опросить систему, что произошло, и по возможности, получить расшифровку когда ошибки.</p>

<p>Как я уже писал, я работаю одновременно на совершенно разных платформах — от виндов до встраеваемого QNX&rsquo;а. Поэтому мне всегда хочется иметь максимально простые и переносимые исходники (и желательно с минимумом нестандартных зависимостей), чтобы модули можно было просто кидать из проекта в проект, с платформы на платформу, не допиливая каждый раз что-то напильником.</p>

<p>Итак, привожу ниже класс, который я использую для получения информации об ошибке, произошедшей в операционной системе. Можно узнать код ошибки и его текстовое объяснение, если оно предоставляется. Это не бог весть какой сложный и оригинальный класс, но у меня он работает без каких-либо &ldquo;допиливаний&rdquo; на Windows 32- и 64-бит, Linux 2.6 32- 64-бит SPARC и Intel, Sun OS 5.10 SPARC и Intel, AIX, HP-UX и HP-UX IA64. К тому же, этот класс безопасен для мультипотокового использования (что лично для меня, например, очень важно).</p>

<p>Итак, класс <code>SystemMessage</code>. Все члены статические, так что можно работать с ними без создания экземпляра класса.</p>

<p>Пространство имен, как обычно, ext, так что измените, если необходимо.</p>

<p>Файл <code>systemmessage.h</code>:</p>

<pre class="hl">
<span class="hl ppc">#ifndef _EXT_SYSTEM_MESSAGE_H</span>
<span class="hl ppc">#define _EXT_SYSTEM_MESSAGE_H</span>

<span class="hl ppc">#include &lt;string&gt;</span>

<span class="hl kwa">namespace</span> ext <span class="hl opt">{</span>

<span class="hl kwc">class</span> SystemMessage <span class="hl opt">{</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl slc">// Эта функция возращает код ошибки.</span>
  <span class="hl kwb">static int</span> <span class="hl kwd">code</span><span class="hl opt">();</span>
  <span class="hl slc">// Эта функция по коду ошибки возвращает ее текстовое описание, если</span>
  <span class="hl slc">// таковое предоставляется операционной системой. Если нет, то </span>
  <span class="hl slc">// возвращается строка &quot;?&quot;.</span>
  <span class="hl kwb">static</span> std<span class="hl opt">::</span>string <span class="hl kwd">message</span><span class="hl opt">(</span><span class="hl kwb">int</span> code<span class="hl opt">);</span>
<span class="hl opt">};</span>

<span class="hl opt">}</span> <span class="hl slc">// namespace ext</span>

<span class="hl ppc">#endif</span> <span class="hl slc">// _EXT_SYSTEM_MESSAGE_H</span><span class="hl ppc"></span>
</pre>

<p>Файл <code>systemmessage.cpp</code>:</p>

<pre class="hl">
<span class="hl ppc">#include</span> <span class="hl pps">&quot;SystemMessage.h&quot;</span><span class="hl ppc"></span>

<span class="hl ppc">#ifdef WIN32</span>
<span class="hl ppc">#include &lt;windows.h&gt;</span>
<span class="hl ppc">#else</span>
<span class="hl ppc">#include &lt;string.h&gt;</span>
<span class="hl ppc">#include &lt;unistd.h&gt;</span>
<span class="hl ppc">#include &lt;errno.h&gt;</span>
<span class="hl ppc">#endif</span>

<span class="hl kwa">namespace</span> ext <span class="hl opt">{</span>

<span class="hl kwb">int</span> SystemMessage<span class="hl opt">::</span><span class="hl kwd">code</span><span class="hl opt">() {</span>
<span class="hl ppc">#ifdef WIN32</span>
  <span class="hl kwa">return</span> <span class="hl kwd">GetLastError</span><span class="hl opt">();</span>
<span class="hl ppc">#else</span>
  <span class="hl kwa">return</span> errno<span class="hl opt">;</span>
<span class="hl ppc">#endif</span>
<span class="hl opt">}</span>

<span class="hl slc">// Если система по какой-то причине не имеет функции strerror_r,</span>
<span class="hl slc">// то придется лазить напрямую в таблицу сообщений об ошибках.</span>
<span class="hl slc">// Для этого надо при компиляции определить макрос LIBC_NO_STRERROR_R.</span>
<span class="hl slc">// Пока я видел такое только на HP-UX IA64 v2.</span>
<span class="hl ppc">#ifndef WIN32</span>
<span class="hl ppc">#ifndef LIBC_NO_STRERROR_R</span>
<span class="hl kwc">extern</span> <span class="hl str">&quot;C&quot;</span> <span class="hl kwb">int</span> sys_nerr<span class="hl opt">;</span>
<span class="hl kwc">extern</span> <span class="hl str">&quot;C&quot;</span> <span class="hl kwb">char</span><span class="hl opt">*</span> sys_errlist<span class="hl opt">[];</span>
<span class="hl ppc">#endif</span>
<span class="hl ppc">#endif</span>

std<span class="hl opt">::</span>string SystemMessage<span class="hl opt">::</span><span class="hl kwd">message</span><span class="hl opt">(</span><span class="hl kwb">int</span> code<span class="hl opt">) {</span>
  <span class="hl kwb">char</span> msg<span class="hl opt">[</span><span class="hl num">1024</span><span class="hl opt">];</span>

<span class="hl ppc">#ifdef WIN32</span>

  <span class="hl slc">// Версия для Windows</span>
  <span class="hl kwd">FormatMessage</span><span class="hl opt">(</span>
    FORMAT_MESSAGE_FROM_SYSTEM <span class="hl opt">|</span>
    FORMAT_MESSAGE_IGNORE_INSERTS<span class="hl opt">,</span>
    NULL<span class="hl opt">,</span>
    code<span class="hl opt">,</span>
    <span class="hl kwd">MAKELANGID</span><span class="hl opt">(</span>LANG_NEUTRAL<span class="hl opt">,</span> SUBLANG_DEFAULT<span class="hl opt">),</span>
    msg<span class="hl opt">,</span>
    <span class="hl kwa">sizeof</span><span class="hl opt">(</span>msg<span class="hl opt">) -</span> <span class="hl num">1</span><span class="hl opt">,</span>
    NULL
  <span class="hl opt">);</span>

  <span class="hl kwb">char</span><span class="hl opt">*</span> p <span class="hl opt">=</span> msg <span class="hl opt">+</span> <span class="hl kwd">strlen</span><span class="hl opt">(</span>msg<span class="hl opt">);</span>
  
  <span class="hl slc">// Обрезаем c конца '\r', '\n' и '.'</span>
  <span class="hl kwa">for</span><span class="hl opt">(</span>p <span class="hl opt">=</span> msg <span class="hl opt">+</span> <span class="hl kwd">strlen</span><span class="hl opt">(</span>msg<span class="hl opt">) -</span> <span class="hl num">1</span><span class="hl opt">;</span> 
    p <span class="hl opt">&gt;=</span> msg <span class="hl opt">&amp;&amp; (*</span>p <span class="hl opt">==</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span> <span class="hl opt">|| *</span>p <span class="hl opt">==</span> <span class="hl str">'</span><span class="hl esc">\r</span><span class="hl str">'</span> <span class="hl opt">|| *</span>p <span class="hl opt">==</span> <span class="hl str">'.'</span><span class="hl opt">); --</span>p<span class="hl opt">)</span> 
      <span class="hl opt">*</span>p <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>

<span class="hl ppc">#elif LIBC_NO_STRERROR_R</span>

  <span class="hl slc">// Если UNIX-платформа не имеет функции strerror_r, то делаем ее</span>
  <span class="hl slc">// работу вручную. Пока я встретил такое только на HP-UX IA64 v2.</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>code <span class="hl opt">&lt;</span> <span class="hl num">0</span> <span class="hl opt">||</span> code <span class="hl opt">&gt;=</span> sys_nerr<span class="hl opt">)</span>
    <span class="hl kwa">return</span> <span class="hl str">&quot;?&quot;</span><span class="hl opt">;</span>

  <span class="hl kwd">strncpy</span><span class="hl opt">(</span>msg<span class="hl opt">,</span> sys_errlist<span class="hl opt">[</span>code<span class="hl opt">],</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span>msg<span class="hl opt">) -</span> <span class="hl num">1</span><span class="hl opt">);</span>

  <span class="hl slc">// Если сообщение об ошибке длинее чем sizeof(msg)-1, то '\0'</span>
  <span class="hl slc">// не будет скопирован, поэтому добавляем его вручну.</span>
  msg<span class="hl opt">[</span><span class="hl kwa">sizeof</span><span class="hl opt">(</span>msg<span class="hl opt">) -</span> <span class="hl num">1</span><span class="hl opt">] =</span> <span class="hl num">0</span><span class="hl opt">;</span>

<span class="hl ppc">#else</span>

  <span class="hl slc">// Для нормальной UNIX-системы просто вызываем strerror_r.</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">strerror_r</span><span class="hl opt">(</span>code<span class="hl opt">,</span> msg<span class="hl opt">,</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span>msg<span class="hl opt">) -</span> <span class="hl num">1</span><span class="hl opt">) &lt;</span> <span class="hl num">0</span><span class="hl opt">)</span>
    <span class="hl kwa">return</span> <span class="hl str">&quot;?&quot;</span><span class="hl opt">;</span>

<span class="hl ppc">#endif</span>

  <span class="hl slc">// Поможем компилятору по возможности оптимизировать </span>
  <span class="hl slc">// возвращаемое значение как rvalue.</span>
  <span class="hl kwa">return</span> std<span class="hl opt">::</span><span class="hl kwd">string</span><span class="hl opt">(</span>msg<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl opt">}</span> <span class="hl slc">// namespace ext</span>
</pre>

<p>Теперь посмотрим это в работе.</p>

<p>Я как-то пока не придумал, как универсально написать unit-тест для этого класса, так как предсказуемые результаты будут все равно различны для каждой платформы. А писать тесты под все платформы как-то топорно. Хочется гармонии, а тут пока ее нет. Если кто имеет идею, как универсально тестировать этот класс на всех платформах — поделитесь, пожалуйста.</p>

<p>Тестовая программа <code>systemmessage_test.cpp</code>:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;iostream&gt;</span>
<span class="hl ppc">#include &lt;fstream&gt;</span>

<span class="hl ppc">#include</span> <span class="hl pps">&quot;systemmessage.h&quot;</span><span class="hl ppc"></span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[]) {</span>
  <span class="hl slc">// Пытаемся открыть заведомо несуществующий файл.</span>
  std<span class="hl opt">::</span>ifstream <span class="hl kwd">is</span><span class="hl opt">(</span><span class="hl str">&quot;__non_existing_file__&quot;</span><span class="hl opt">);</span>

  <span class="hl slc">// Печатаем ошибку.</span>
  <span class="hl kwb">int</span> error <span class="hl opt">=</span> ext<span class="hl opt">::</span>SystemMessage<span class="hl opt">::</span><span class="hl kwd">code</span><span class="hl opt">();</span>
  std<span class="hl opt">::</span>cout 
    <span class="hl opt">&lt;&lt;</span> error <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;, &quot;</span> 
    <span class="hl opt">&lt;&lt;</span> ext<span class="hl opt">::</span>SystemMessage<span class="hl opt">::</span><span class="hl kwd">message</span><span class="hl opt">(</span>error<span class="hl opt">)</span> 
    <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>

  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Компилируем в Visual Studio:</p>

<pre><code>cl /EHsc /Fesystemmessage_test_vs2008.exe /DWIN32 systemmessage_test.cpp systemmessage.cpp
</code></pre>

<p>Запускаем <code>systemmessage_test_vs2008.exe</code>:</p>

<pre><code>2, The system cannot find the file specified
</code></pre>

<p>Получили примерно ожидаемое виндовое сообщение об ошибке.</p>

<p>Теперь компилируем в Cygwin:</p>

<pre><code>g++ -o systemmessage_test_cygwin.exe systemmessage_test.cpp systemmessage.cpp
</code></pre>

<p>Запускаем <code>systemmessage_test_cygwin.exe</code>:</p>

<pre><code>2, No such file or directory
</code></pre>

<p>Получили сообщение об ошибке в стиле UNIX.</p>

<p>Повторюсь, в данном классе нет ничего удивительного и сложного. Просто это весьма универсальный и переносимый исходник.</p>

<p>И небольшая ремарка. В мире UNIX существует два диалекта функции <code>strerror_r</code>: XSI-версия (когда определен макрос <code>_XOPEN_SOURCE</code>, и он равен 600) и GNU-версия (доступная в libc, начиная с версии 2.0). Разница в том, что первая (XSI-версия) просто кладет сообщение об ошибке в предоставленный буфер и также возвращает код успешности или неуспешности своей работы в виде <code>int</code>&lsquo;а. Нормальный UNIX-подход. Вторая версия (GNU) возвращает не <code>int</code>, а, собственно, указатель на строку с ошибкой, причем указываеть он может как на предоставленный функции буфер, так и куда-то еще, например, на какой-то внутренний буфер. Данный класс рассчитан на работу с XSI-версией функции <code>strerror_r</code>. Поэтому, если вдруг при компиляции этого класс на UNIX-системах вы получите сообщение об ошибке в использовании этой функции, то определите макрос <code>_XOPEN_SOURCE</code> в значение 600 (<code>-D_XOPEN_SOURCE=600</code> для компилятора), тем самым будет принудительно использоваться XSI-версия этой болезной функции.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Двухпанельные файловые менеджеры]]></title>
    <link href="http://demin.ws/blog/russian/2009/02/11/two-panel-file-managers/"/>
    <updated>2009-02-11T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/02/11/two-panel-file-managers/</id>
    <content type="html"><![CDATA[<p>Пока в персонально-компьютером мире имя <a href="http://ru.wikipedia.org/wiki/%D0%9D%D0%BE%D1%80%D1%82%D0%BE%D0%BD,_%D0%9F%D0%B8%D1%82%D0%B5%D1%80">Питера Нортона</a>, прочно ассоциированное с программой <a href="http://ru.wikipedia.org/wiki/Norton_Commander">Norton Commander</a>, еще не забыто, особенно на территории бывшего СССР.</p>

<p>Интересно, что настоящим автором Нортон Коммандера является далеко не сам Питер Нортон, а <a href="http://en.wikipedia.org/wiki/John_Socha">John Socha</a>. Именно он создал изначальную версию, которая называлась VDOS (Virtual DOS), еще будучи студентом. Следуя именно идее “виртуального ДОСа”, первая версия коммандера имела файловые панели только на половину экрана — вторая нижняя часть была &ldquo;виртуальным окном&rdquo; в ДОС. Сейчас это окно обычно сокращают до одной командной строки. Затем Джон Сόха присоединился к <a href="http://en.wikipedia.org/wiki/Peter_Norton_Computing">Peter Norton Computing</a>, и программа начала свое триумфальное шествие по планете под именем Norton Commander. Последней версией коммандера, вышедшей из под рук Джона, была версия 3.0. Именно она является &ldquo;классической&rdquo; и именно её знало большинство российских пользователей IBM PC. Но эта версия была лебединой песней коммандера. Питер Нортон продал компанию Symantec&rsquo;у, а Джон Сόха уволился, прекратив работу над коммандером. После версии 3.0 в Symantec выпустили еще пару версий, но время уходило. Оригинальный интерфейс версии 3.0 был &ldquo;улучшен&rdquo;, программа заметно потолстела и замедлилась, а на пятки уже наступали <a href="http://ru.wikipedia.org/wiki/DOS_Navigator">Дос Навигатор</a> и <a href="http://ru.wikipedia.org/wiki/%D0%92%D0%BE%D0%BB%D0%BA%D0%BE%D0%B2_%D0%BA%D0%BE%D0%BC%D0%BC%D0%B0%D0%BD%D0%B4%D0%B5%D1%80">Волков Коммандер</a>, а в новом 32-битном мире — первые версии <a href="http://ru.wikipedia.org/wiki/Far">FAR</a> и <a href="http://ru.wikipedia.org/wiki/Windows_Commander">Total (Windows) Commander</a>.</p>

<p>Вообще, <a href="http://www.softpanorama.org/OFM/Paradigm/Ch03/norton_commander.shtml">история</a> создания эпохального файлового менеджера весьма интересна.</p>

<p>На мой взгляд, именно представление файловой структуры в виде двух панелей с возможностью адресовать файлы с одной панели на другую, дополненная мгновенным редактором и просмотрщиком, является наиболее удобной для программистской работы, когда необходимо прыгать между десятком файлов одновременно, чего-то временно скопировать/переименовать/удалить, тут что-то быстренько отредактировать, в другом месте поискать и т.д. С трудом могу представить все эти действия через однопанельный файловый а-ля explorer, где только для копирования файла надо сначала мышкой на него указать, взять &ldquo;на копирование&rdquo;, открыть второй explorer с местом назначения и сделать туда &ldquo;Paste&rdquo;. Например, замечаю на собой постоянно, если мне надо подправить какие-либо настройки проекта в Visual Studio (например, пути), то мне гораздо быстрее переключиться в FAR, там через F4 открыть файл проекта, найти нужное место и исправить прямого в тексте конфигурации, чем ползать через окошки и менюшки самой IDE. Чего уж говорить об удобстве встроенного редактора, особенно если установлена подсветка синтаксиса. Я много раз пытался заставить себя по F4 вызывать внешний редактор, типа Notepad++, но все равно скатывался до встроенного, ибо он вызывается мгновенно. Notepad++, конечно, отличная программа, но в ней я только делаю “сложную” поиск-замену, когда нужны регулярные выражения.</p>

<p>Мир UNIX&rsquo;а тоже не обделен хорошими двухпанельными файловыми менеджерами, реально ускоряющими процесс, когда надо сотни раз повторять cd/ls/cp/mv/cd/ls/cp/mv&hellip;, разруливая какой-нибудь завал на файловой системе. <a href="http://en.wikipedia.org/wiki/Midnight_Commander">Midnight Commander</a> знают все. Радостно, что за последние несколько месяцев снова <a href="http://www.midnight-commander.org/">началась активная работа над проектом</a>, знамя которого лежало без движения уже несколько лет. Но есть еще один заслуживающий внимания проект. Неутомимый <a href="http://vak.ru/doku.php/proj">Сергей Вакуленко</a> создал и развивает <a href="http://groups.google.com/group/bashc/web/overview">Bash Commander</a>. Сейчас это патч к официальной версии Bash, но Сергей бьется за включения его в общее дерево. Этот патч ненавязчиво добавляет в Bash то, что там так не хватает: при нажатии на Ctrl-O (^O) появляются заветные две панели. То есть пока идет неспешная программерская работа в стиле make/vi, то все как обычно в командной строке шелла, но как только надо муторно повозиться с множеством файлов, то нажимаем Ctrl-O, и далее привычные панели с клавишам F1-F10. Интерфейс, конечно, крайне минималистический и не имеет всех наворотов MC, но есть один плюс - крайне простая сборка. Везде, где собирается Bash, там можно собрать и Bash Commander, чего нельзя сказать MC с длинным списков зависимостей, который просто собирается разве что под линуксом, а вот на динозаврах типа AIX&rsquo;а или HP-UX&rsquo;а становится грустно. Функциональность Bash Commander’а легко расширяется при помощи самих же скриптов на Bash. Надеюсь, что работу Сергея таки включат в официальную версию Bash.</p>

<p>Мне кажется, что наш постсоветский IBM-PC&rsquo;шный мир привил некоторым из нас не самую плохую привычку к двухпанельным текстовым файловым менеджерам, не так ли?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UNIX time 1234567890]]></title>
    <link href="http://demin.ws/blog/russian/2009/02/10/unix-time-1234567890/"/>
    <updated>2009-02-10T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/02/10/unix-time-1234567890/</id>
    <content type="html"><![CDATA[<p>Наверняка многие знают, что в эту пятницу, а именно 13.02.2009 в 23:31:30 по Гринвичу так называемое <a href="http://ru.wikipedia.org/wiki/UNIX-%D0%B2%D1%80%D0%B5%D0%BC%D1%8F">UNIX-время</a>, по которому работает большинство правильных операционных систем, достигнет отметки в 1234567890 секунд. Также, это будет пятница 13-е!</p>

<p>К сожалению для Москвы этот день будет не столь особым, так как там это произойдет уже 14-го в 02:31:30.</p>

<p>Это, наверное, как наблюдать затмение, в некотором цифровом виде.</p>

<p>Для отслеживания обратного отсчета сего события есть забавная страничка с говорящим адресом: <a href="http://coolepochcountdown.com/">http://coolepochcountdown.com/</a></p>

<p>Всегда любил игры в числа.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Темные углы C++]]></title>
    <link href="http://demin.ws/blog/russian/2009/02/09/dark-corners-of-cpp/"/>
    <updated>2009-02-09T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/02/09/dark-corners-of-cpp/</id>
    <content type="html"><![CDATA[<p>Я нашел таки для себя ответ на вопрос про &ldquo;лишние скобки&rdquo; вокруг параметра, задающего интервальный итератор (см. &ldquo;<a href="http://demin.ws/blog/russian/2009/02/08/reading-file-via-stl-iterators/">Скоростное чтение файла в STL через итераторы</a>&rdquo;). Например:</p>

<pre class="hl">
std<span class="hl opt">::</span>ifstream <span class="hl kwd">is</span><span class="hl opt">(</span><span class="hl str">&quot;testfile.txt&quot;</span><span class="hl opt">);</span>
std<span class="hl opt">::</span>string <span class="hl kwd">val</span><span class="hl opt">(</span>
  <span class="hl opt">(</span>std<span class="hl opt">::</span>istream_iterator<span class="hl opt">&lt;</span><span class="hl kwb">char</span><span class="hl opt">&gt;(</span>is<span class="hl opt">)),</span>
  std<span class="hl opt">::</span>istream_iterator<span class="hl opt">&lt;</span><span class="hl kwb">char</span><span class="hl opt">&gt;()</span>
<span class="hl opt">);</span>
</pre>

<p>Скотт Мейерс в книге &ldquo;<a href="http://www.ozon.ru/context/detail/id/1253685/?partner=easy-coding">Эффективное использование STL. Библиотека программиста</a>&rdquo; в Совете 6 &ldquo;Остерегайтесь странностей лексического разбора C++&rdquo; (стр. 42, изд. &ldquo;Питер&rdquo; 2002) дает исчерпывающее объяснение этого &ldquo;феномена&rdquo;. Ответ крайне меня опечалил, так как вскрыл некоторую нелогичность и корявость в целом стройного и красивого языка С++ в данном вопросе. Очевидно, что причины этого в сохранения в С++ обратной совместимости с С, но от этого не легче.</p>

<p>Итак, давайте разберемся по порядку (чтобы меня не обвинили в плагиате, сразу скажу, что я буду следовать примерному тексту Мейерса, так как он дал великолепное объяснение с примерами, и изобретать велосипед в данном случае было бы неразумно). Как мы предполагали, код <code>std::istream_iterator&lt;char&gt;(is)</code> создает экземпляр потокового итератора, привязанного к потоку <code>is</code>. И все бы ничего, если такая конструкция используется как самостоятельное объявление. Вся проблема в именно в использовании такого выражения в контексте вызова функции (в данном случае, конструктора), то есть в качестве параметра. Мейерс приводит следующий пример:</p>

<pre class="hl">
<span class="hl kwb">int</span> <span class="hl kwd">f</span><span class="hl opt">(</span><span class="hl kwb">double</span> d<span class="hl opt">);</span>
</pre>

<p>Это команда объявления функции <code>f</code>, которая получает <code>double</code> и возвращает <code>int</code>.</p>

<p>Тоже самое происходит и в следующей строке. Круглые скобки вокруг имени параметра <code>d</code> не нужны, поэтому компилятор их игнорирует:</p>

<pre class="hl">
<span class="hl kwb">int</span> <span class="hl kwd">f</span><span class="hl opt">(</span><span class="hl kwb">double</span> <span class="hl opt">(</span>d<span class="hl opt">));</span>     <span class="hl slc">// То же; круглые скобки вокруг d игнорируются</span>
</pre>

<p>Теперь третий вариант объявления той же функции. В нем имя параметра просто не указано:</p>

<pre class="hl">
<span class="hl kwb">int</span> <span class="hl kwd">f</span><span class="hl opt">(</span><span class="hl kwb">double</span><span class="hl opt">);</span>         <span class="hl slc">// То же; имя параметра не указано</span>
</pre>

<p>Три такие формы объявления знакомы всем, хотя про возможность заключения параметра в скобки знают не все (может просто потому, что это очевидно лишние по логике вещей скобки).</p>

<p>Теперь можно рассмотреть еще три объявления функции. В первом объявляется функция <code>g</code> с параметром — указателем на функцию, которая вызывается без параметров и возвращает <code>double</code>:</p>

<pre class="hl">
<span class="hl kwb">int</span> <span class="hl kwd">g</span><span class="hl opt">(</span><span class="hl kwb">double</span> <span class="hl opt">(*</span>pf<span class="hl opt">)());</span> <span class="hl slc">// Функции g передается указатель на функцию</span>
</pre>

<p>То же самое можно сформулировать иначе. Единственное различие заключается в том, что <code>pf</code> объявляется в синтаксисе без указателей (допустимом как в С, так и в С++):</p>

<pre class="hl">
<span class="hl kwb">int</span> <span class="hl kwd">g</span><span class="hl opt">(</span><span class="hl kwb">double</span> <span class="hl kwd">pf</span><span class="hl opt">());</span>    <span class="hl slc">// То же; pf неявно интерпретируется как указатель</span>
</pre>

<p>Как обычно, имена параметров могут опускаться, поэтому возможен и третий вариант объявления <code>g</code> без указания имени <code>pf</code>:</p>

<pre class="hl">
<span class="hl kwb">int</span> <span class="hl kwd">g</span><span class="hl opt">(</span><span class="hl kwb">double</span><span class="hl opt">());</span>       <span class="hl slc">// То же; имя параметра не указано</span>
</pre>

<p>Обратите внимание на различия между круглыми скобками вокруг имени параметра (например, параметра <code>d</code> во втором объявлении <code>f</code>) и стоящими отдельно (как в этом примере). Круглые скобки, в которые заключено имя параметра, игнорируются, а стоящие отдельно, обозначают присутствие списка параметров; они сообщают о присутствии параметра, который является указателем на функцию.</p>

<p>Теперь вернемся к оригинальному примеру:</p>

<pre class="hl">
std<span class="hl opt">::</span>ifstream <span class="hl kwd">is</span><span class="hl opt">(</span><span class="hl str">&quot;testfile.txt&quot;</span><span class="hl opt">);</span>
std<span class="hl opt">::</span>string <span class="hl kwd">val</span><span class="hl opt">(</span>
  std<span class="hl opt">::</span>istream_iterator<span class="hl opt">&lt;</span><span class="hl kwb">char</span><span class="hl opt">&gt;(</span>is<span class="hl opt">),</span>
  std<span class="hl opt">::</span>istream_iterator<span class="hl opt">&lt;</span><span class="hl kwb">char</span><span class="hl opt">&gt;()</span>
<span class="hl opt">);</span>
</pre>

<p>Сейчас я намеренно убрал таинственные &ldquo;лишние&rdquo; скобки вокруг первого параметра.</p>

<p>Что же перед нами тут? Совершенно не то, о чем мы думали изначально. Перед нами объявление функции <code>val</code>, возвращающей тип <code>std::string</code>. Функция получает два параметра:</p>

<ul>
<li>Первый параметр, <code>is</code>, относится к типу <code>istream_iterator&lt;char&gt;</code>. Лишние круглые скобки вокруг <code>is</code> игнорируются.</li>
<li>Второй параметр не имеет имени. Он относится к типу указателя на функцию, которая вызывается без параметров и возвращает <code>istream_iterator&lt;char&gt;</code>.</li>
</ul>

<p>А мы то тут ожидали увидеть описание вызова конструктора, которому передаются два потоковых итератора. Такая интерпретация написанного диктуется одним из основных правил C++: все, что может интерпретироваться как указатель функцию, должно интерпретироваться именно так. Так гласит стандарт:</p>

<p><em>В грамматике имеется неоднозначность, когда инструкция может быть выражением, так и объявлением. Если выражение с явным преобразованием типов в стиле вызова функции (<em>expr.type.conv</em>) является крайним слева, то оно может быть неотличимо от объявления, в котором первый оператор объявления начинается с открытой круглой скобки &ldquo;(&rdquo;. В этом случае инструкция рассматривается как объявление. — [C++03] п.6.8.</em></p>

<p>Так что же делают эти магические скобки вокруг первого параметра конструктора?</p>

<pre class="hl">
std<span class="hl opt">::</span>ifstream <span class="hl kwd">is</span><span class="hl opt">(</span><span class="hl str">&quot;testfile.txt&quot;</span><span class="hl opt">);</span>
std<span class="hl opt">::</span>string <span class="hl kwd">val</span><span class="hl opt">(</span>
  <span class="hl opt">(</span>std<span class="hl opt">::</span>istream_iterator<span class="hl opt">&lt;</span><span class="hl kwb">char</span><span class="hl opt">&gt;(</span>is<span class="hl opt">)),</span>
  std<span class="hl opt">::</span>istream_iterator<span class="hl opt">&lt;</span><span class="hl kwb">char</span><span class="hl opt">&gt;()</span>
<span class="hl opt">);</span>
</pre>

<p>А вот что — объявления формальных параметров не могут заключаться в круглые скобки, я вот заключить в круглые скобки аргумент при вызове функции можно. Вот эти круглые скобки и помогают компилятору решить неоднозначность в нужную нам сторону (а не как положено по стандарту по умолчанию) и точно указать, что перед нами именно использование параметра функции при ее вызове, а не при объявлении.</p>

<p>Соглашусь, от этого может слегка заболеть голова, причем совершенно без причины.</p>

<p>Как написал Герб Саттер в книге &ldquo;<a href="http://www.ozon.ru/context/detail/id/2342923/?partner=easy-coding">Новые сложные задачи на С++</a>&rdquo; (он тоже посвятил этому вопросу целую главу, “Задача 23. Инициализация ли это?”, стр. 192, изд. “Вильямс”), что такие моменты синтаксиса С++ являются его &ldquo;темными углами&rdquo;, и их стоит избегать. Рассмотренный пример можно упростить, объявив итератор отдельно, а не прямо в тексте вызова конструктора, тем самым не заходить в &ldquo;темный угол&rdquo;. Не так элегантно, зато просто и понятно:</p>

<pre class="hl">
std<span class="hl opt">::</span>ifstream <span class="hl kwd">is</span><span class="hl opt">(</span><span class="hl str">&quot;testfile.txt&quot;</span><span class="hl opt">);</span>
std<span class="hl opt">::</span>istream_iterator<span class="hl opt">&lt;</span><span class="hl kwb">char</span><span class="hl opt">&gt;</span> <span class="hl kwd">begin</span><span class="hl opt">(</span>is<span class="hl opt">);</span>
std<span class="hl opt">::</span>istream_iterator<span class="hl opt">&lt;</span><span class="hl kwb">char</span><span class="hl opt">&gt;</span> end<span class="hl opt">;</span>
std<span class="hl opt">::</span>string <span class="hl kwd">val</span><span class="hl opt">(</span>begin<span class="hl opt">,</span> end<span class="hl opt">);</span>
</pre>

<p>Читал я недавно, как <a href="http://lwn.net/Articles/249460/">Линус Торвальдс полоскал</a> С++ за неоправданную языковую сложность. &ldquo;C++ is a horrible language!&rdquo;, — сказал Линус. Может он и прав.</p>

<p>Мыши плакали, кололись, но продолжали грызть С++.</p>

<p>Другие посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2009/02/08/reading-file-via-stl-iterators/">Скоростное чтение файла в STL через итераторы</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Скоростное чтение файла в STL через итераторы]]></title>
    <link href="http://demin.ws/blog/russian/2009/02/08/reading-file-via-stl-iterators/"/>
    <updated>2009-02-08T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/02/08/reading-file-via-stl-iterators/</id>
    <content type="html"><![CDATA[<p>Во многих современных языках программирования считать весь файл в строку можно буквально одним оператором, например, в <code>php</code> это делается так:</p>

<pre class="hl">
<span class="hl kwc">$lines</span> <span class="hl opt">=</span> <span class="hl kwd">file_get_contents</span><span class="hl opt">(</span><span class="hl str">&quot;textfile.txt&quot;</span><span class="hl opt">);</span>
</pre>

<p>или так, медленно и неэффективно, по-старинке:</p>

<pre class="hl">
<span class="hl kwc">$lines</span> <span class="hl opt">=</span> <span class="hl kwd">join</span><span class="hl opt">(</span><span class="hl str">&quot;&quot;</span><span class="hl opt">,</span> <span class="hl kwd">file</span><span class="hl opt">(</span><span class="hl str">&quot;textfile.txt&quot;</span><span class="hl opt">));</span>
</pre>

<p>Задумался я, как бы это так элегантно одним оператором сделать в С++. Естественно, хочется, чтобы это работало приемлемо быстро для больших файлов (например, от одного мегабайта и больше).</p>

<p>Первое, что сходу приходит в голову (универсальная кондовая классика):</p>

<pre class="hl">
std<span class="hl opt">::</span>ifstream <span class="hl kwd">is</span><span class="hl opt">(</span><span class="hl str">&quot;testfile.txt&quot;</span><span class="hl opt">);</span>
std<span class="hl opt">::</span>string v<span class="hl opt">;</span>
<span class="hl kwb">char</span> buf<span class="hl opt">[</span>N<span class="hl opt">];</span>
<span class="hl kwa">while</span> <span class="hl opt">(</span>is<span class="hl opt">) {</span> 
  is<span class="hl opt">.</span><span class="hl kwd">read</span><span class="hl opt">(</span>buf<span class="hl opt">,</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span>buf<span class="hl opt">));</span>
  v<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span>buf<span class="hl opt">,</span> is<span class="hl opt">.</span><span class="hl kwd">gcount</span><span class="hl opt">());</span>
<span class="hl opt">}</span>
</pre>

<p>С размером буфера N можно еще проиграться, выбрав оптимальный.</p>

<p>Первое улучшение, приходящее в голову — это распределить заранее внутренний буфер для строки, минимизировав количество перераспределений буфера в процессе чтения. Для этого мы, естественно, должны заранее знать размер читаемого файла. Пусть это будет 1 мегабайт (1024*1024).</p>

<pre class="hl">
std<span class="hl opt">::</span>ifstream <span class="hl kwd">is</span><span class="hl opt">(</span><span class="hl str">&quot;testfile.txt&quot;</span><span class="hl opt">);</span>
std<span class="hl opt">::</span>string v<span class="hl opt">;</span>
<span class="hl slc">// Резервируем внутренний буфер std::string на указанный</span>
<span class="hl slc">// размер в один мегабайт.</span>
v<span class="hl opt">.</span><span class="hl kwd">reserve</span><span class="hl opt">(</span><span class="hl num">1024</span><span class="hl opt">*</span><span class="hl num">1024</span><span class="hl opt">);</span>
<span class="hl kwb">char</span> buf<span class="hl opt">[</span>N<span class="hl opt">];</span>
<span class="hl kwa">while</span> <span class="hl opt">(</span>is<span class="hl opt">) {</span> 
  is<span class="hl opt">.</span><span class="hl kwd">read</span><span class="hl opt">(</span>buf<span class="hl opt">,</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span>buf<span class="hl opt">));</span>
  v<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span>buf<span class="hl opt">,</span> is<span class="hl opt">.</span><span class="hl kwd">gcount</span><span class="hl opt">());</span>
<span class="hl opt">}</span>
</pre>

<p>Далее на сцену выходят STL-алгоритмы и потоковые итераторы. Берем типовой пример использования алгоритма <code>std::copy</code>, который есть практически в любой книге по С++:</p>

<pre class="hl">
std<span class="hl opt">::</span>ifstream <span class="hl kwd">is</span><span class="hl opt">(</span><span class="hl str">&quot;testfile.txt&quot;</span><span class="hl opt">);</span>
std<span class="hl opt">::</span>string v<span class="hl opt">;</span>
<span class="hl slc">// Сброс данного флага необходим для отключения пропуска пробельных</span>
<span class="hl slc">// символов при форматном вводе через поток.</span>
is<span class="hl opt">.</span><span class="hl kwd">unsetf</span><span class="hl opt">(</span>std<span class="hl opt">::</span>ios<span class="hl opt">::</span>skipws<span class="hl opt">);</span>
std<span class="hl opt">::</span><span class="hl kwd">copy</span><span class="hl opt">(</span>
  std<span class="hl opt">::</span>istream_iterator<span class="hl opt">&lt;</span><span class="hl kwb">char</span><span class="hl opt">&gt;(</span>is<span class="hl opt">),</span> 
  std<span class="hl opt">::</span>istream_iterator<span class="hl opt">&lt;</span><span class="hl kwb">char</span><span class="hl opt">&gt;(),</span> 
  std<span class="hl opt">::</span><span class="hl kwd">back_inserter</span><span class="hl opt">(</span>v<span class="hl opt">)</span>
<span class="hl opt">);</span>
</pre>

<p>Сразу скажу, это крайне медленный метод. Первым, приходящим в голову улучшением, как всегда, является предварительное распределение буфера приемной строки:</p>

<pre class="hl">
std<span class="hl opt">::</span>ifstream <span class="hl kwd">is</span><span class="hl opt">(</span><span class="hl str">&quot;testfile.txt&quot;</span><span class="hl opt">);</span>
std<span class="hl opt">::</span>string v<span class="hl opt">;</span>
<span class="hl slc">// Резервируем внутренний буфер std::string на указанный</span>
<span class="hl slc">// размер в один мегабайт.</span>
v<span class="hl opt">.</span><span class="hl kwd">reserve</span><span class="hl opt">(</span><span class="hl num">1024</span><span class="hl opt">*</span><span class="hl num">1024</span><span class="hl opt">);</span>
is<span class="hl opt">.</span><span class="hl kwd">unsetf</span><span class="hl opt">(</span>std<span class="hl opt">::</span>ios<span class="hl opt">::</span>skipws<span class="hl opt">);</span>
std<span class="hl opt">::</span><span class="hl kwd">copy</span><span class="hl opt">(</span>
  std<span class="hl opt">::</span>istream_iterator<span class="hl opt">&lt;</span><span class="hl kwb">char</span><span class="hl opt">&gt;(</span>is<span class="hl opt">),</span> 
  std<span class="hl opt">::</span>istream_iterator<span class="hl opt">&lt;</span><span class="hl kwb">char</span><span class="hl opt">&gt;(),</span> 
  std<span class="hl opt">::</span><span class="hl kwd">back_inserter</span><span class="hl opt">(</span>v<span class="hl opt">)</span>
<span class="hl opt">);</span>
</pre>

<p>В рассмотренном методе видно, что сначала данные изымаются из потока потоковым итератором <code>istream_iterator</code>, а потом кладутся через итератор строки <code>back_inserter</code> в саму строку. Двойная работа. Есть метод лучше — класть данные из потока напрямую в строку, используя один из специальных конструкторов класса <code>std::string</code>:</p>

<pre class="hl">
std<span class="hl opt">::</span>ifstream <span class="hl kwd">is</span><span class="hl opt">(</span><span class="hl str">&quot;testfile.txt&quot;</span><span class="hl opt">);</span>
is<span class="hl opt">.</span><span class="hl kwd">unsetf</span><span class="hl opt">(</span>std<span class="hl opt">::</span>ios<span class="hl opt">::</span>skipws<span class="hl opt">);</span>
<span class="hl slc">// Самое интересное происходит тут: создается переменная &quot;v&quot;</span>
<span class="hl slc">// через конструктор, работающий напрямую с итераторами потока,</span>
<span class="hl slc">// и данные напрямую поступают во внутренний буфер строки.</span>
std<span class="hl opt">::</span>string <span class="hl kwd">v</span><span class="hl opt">(</span>
  <span class="hl opt">(</span>std<span class="hl opt">::</span>istream_iterator<span class="hl opt">&lt;</span><span class="hl kwb">char</span><span class="hl opt">&gt;(</span>is<span class="hl opt">)),</span> 
  std<span class="hl opt">::</span>istream_iterator<span class="hl opt">&lt;</span><span class="hl kwb">char</span><span class="hl opt">&gt;()</span>
<span class="hl opt">);</span>
</pre>

<p>Опытный читатель заметит казалось бы ненужные обрамляющие скобки вокруг первого параметра. Сразу скажу — без них работать не будет, а будет ошибка компиляции. Тут мы касаемся одного из &ldquo;темных углов&rdquo; С++. Это не самый очевидный вопрос, поэтому я посвятил ему <a href="http://demin.ws/blog/russian/2009/02/09/dark-corners-of-cpp/">отдельную статью</a>.</p>

<p>Уже лучше, но двигаемся дальше. В потоках ввода есть специальные итераторы <code>istreambuf_iterator</code>, которые работают напрямую с внутренними буферами потока в обход всех высокоуровневых функций форматирования и выходного преобразования. Именно по этому для них вызов функции <code>unsetf</code> будет уже не нужен:</p>

<pre class="hl">
std<span class="hl opt">::</span>ifstream <span class="hl kwd">is</span><span class="hl opt">(</span><span class="hl str">&quot;testfile.txt&quot;</span><span class="hl opt">);</span>
std<span class="hl opt">::</span>string v<span class="hl opt">;</span>
<span class="hl slc">// Опциональное резервирование буфера приемной строки.</span>
v<span class="hl opt">.</span><span class="hl kwd">reserve</span><span class="hl opt">(</span><span class="hl num">1024</span><span class="hl opt">*</span><span class="hl num">1024</span><span class="hl opt">);</span>
std<span class="hl opt">::</span><span class="hl kwd">copy</span><span class="hl opt">(</span>
  std<span class="hl opt">::</span>istreambuf_iterator<span class="hl opt">&lt;</span><span class="hl kwb">char</span><span class="hl opt">&gt;(</span>is<span class="hl opt">),</span> 
  std<span class="hl opt">::</span>istreambuf_iterator<span class="hl opt">&lt;</span><span class="hl kwb">char</span><span class="hl opt">&gt;(),</span>
  std<span class="hl opt">::</span><span class="hl kwd">back_inserter</span><span class="hl opt">(</span>v<span class="hl opt">)</span> 
<span class="hl opt">);</span>
</pre>

<p>И теперь вариант через конструктор класса std::string:</p>

<pre class="hl">
std<span class="hl opt">::</span>ifstream <span class="hl kwd">is</span><span class="hl opt">(</span><span class="hl str">&quot;testfile.txt&quot;</span><span class="hl opt">);</span>
std<span class="hl opt">::</span>string <span class="hl kwd">v</span><span class="hl opt">(</span>
  <span class="hl opt">(</span>std<span class="hl opt">::</span>istreambuf_iterator<span class="hl opt">&lt;</span><span class="hl kwb">char</span><span class="hl opt">&gt;(</span>is<span class="hl opt">)),</span> 
  std<span class="hl opt">::</span>istreambuf_iterator<span class="hl opt">&lt;</span><span class="hl kwb">char</span><span class="hl opt">&gt;()</span>
<span class="hl opt">);</span>
</pre>

<p>Мы уже близки к идеалу. Теперь встроим создание объекта <code>std::ifstream</code> прямо в код создания строки:</p>

<pre class="hl">
std<span class="hl opt">::</span>string <span class="hl kwd">v</span><span class="hl opt">(</span>
  <span class="hl opt">(</span>std<span class="hl opt">::</span>istreambuf_iterator<span class="hl opt">&lt;</span><span class="hl kwb">char</span><span class="hl opt">&gt;(</span>
    std<span class="hl opt">::</span><span class="hl kwd">ifstream</span><span class="hl opt">(</span><span class="hl str">&quot;testfile.txt&quot;</span><span class="hl opt">)</span>
  <span class="hl opt">)),</span> 
  std<span class="hl opt">::</span>istreambuf_iterator<span class="hl opt">&lt;</span><span class="hl kwb">char</span><span class="hl opt">&gt;()</span>
<span class="hl opt">);</span>
</pre>

<p>Мы уже в миллиметре от идеала, но в приведенном примере есть одно большое &ldquo;но&rdquo;. Вызов <code>std::ifstream(&quot;testfile.txt&quot;)</code> прямо в вызове конструктора создает временный объект, который по стандарту языка всегда является константой, а первый параметр конструктора ожидает принять не константный параметр, поэтому &ldquo;строгий&rdquo; компилятор типа gcc скорее всего выдаст ошибку компиляции, а менее &ldquo;строгий&rdquo;, например <code>cl.exe</code> от Майкрософта на такой вызов не ругается. Но мы не можем принять такое не универсальное решение, поэтому изменим код, чтобы параметр создавался динамически в куче, а для автоматического его удаления будет использоваться <code>std::auto_ptr</code>:</p>

<pre class="hl">
std<span class="hl opt">::</span>string <span class="hl kwd">v</span><span class="hl opt">(</span>
  <span class="hl opt">(</span>std<span class="hl opt">::</span>istreambuf_iterator<span class="hl opt">&lt;</span><span class="hl kwb">char</span><span class="hl opt">&gt;(</span>
    <span class="hl opt">*(</span>std<span class="hl opt">::</span>auto_ptr<span class="hl opt">&lt;</span>std<span class="hl opt">::</span>ifstream<span class="hl opt">&gt;(</span>
      <span class="hl kwa">new</span> std<span class="hl opt">::</span><span class="hl kwd">ifstream</span><span class="hl opt">(</span><span class="hl str">&quot;testfile.txt&quot;</span><span class="hl opt">)</span>
    <span class="hl opt">)).</span><span class="hl kwd">get</span><span class="hl opt">()</span>
  <span class="hl opt">)),</span> 
  std<span class="hl opt">::</span>istreambuf_iterator<span class="hl opt">&lt;</span><span class="hl kwb">char</span><span class="hl opt">&gt;()</span>
<span class="hl opt">);</span>
</pre>

<p>Этот код должен работать в любом стандартном компиляторе С++.</p>

<p>Оглядимся назад. У нас столько вариантов — какой выбрать? Для начала, скорость. Надо понять, какой вариант работает банально быстрее. Для этого я собрал все эти варианты в тестовую программу (конечно, с использованием Google Test Framework).</p>

<p>Как я уже <a href="http://demin.ws/blog/russian/2009/01/28/unit-testing-concurrent-threads/">писал</a>, вы можете скачать <a href="http://demin.ws/downloads/gtest-amalgamation-1.2.1.zip">мою модификацию</a> этой библиотеки, которая сокращена до двух необходимых файлов <code>gtest/gtest.h</code> и <code>gtest-all.cc</code>.</p>

<p><code>filereader_unittest.cpp</code>:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;gtest/gtest.h&gt;</span>

<span class="hl ppc">#include &lt;iostream&gt;</span>
<span class="hl ppc">#include &lt;streambuf&gt;</span>
<span class="hl ppc">#include &lt;istream&gt;</span>
<span class="hl ppc">#include &lt;fstream&gt;</span>
<span class="hl ppc">#include &lt;ios&gt;</span>
<span class="hl ppc">#include &lt;iomanip&gt;</span>
<span class="hl ppc">#include &lt;string&gt;</span>
<span class="hl ppc">#include &lt;vector&gt;</span>
<span class="hl ppc">#include &lt;memory&gt;</span>
<span class="hl ppc">#include &lt;cstdlib&gt;</span>

<span class="hl slc">// Управляющий класс для нашей среды тестирования.</span>
<span class="hl kwc">class</span> Env<span class="hl opt">:</span> <span class="hl kwc">public</span> testing<span class="hl opt">::</span>Environment <span class="hl opt">{</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl slc">// Размер тестового файла: 1 мегабайт.</span>
  <span class="hl kwb">static int</span> <span class="hl kwd">testfile_sz</span><span class="hl opt">() {</span> <span class="hl kwa">return</span> <span class="hl num">1024</span> <span class="hl opt">*</span> <span class="hl num">1024</span><span class="hl opt">; }</span>
  <span class="hl slc">// Имя тестового файла.</span>
  <span class="hl kwb">static const char</span><span class="hl opt">*</span> <span class="hl kwd">testfile</span><span class="hl opt">() {</span> <span class="hl kwa">return</span> <span class="hl str">&quot;testfile&quot;</span><span class="hl opt">; }</span>

<span class="hl kwc">protected</span><span class="hl opt">:</span>
  <span class="hl slc">// Эта функция вызывается один раз в начале тестирования.</span>
  <span class="hl slc">// Она создает тестовый файл.</span>
  <span class="hl kwb">void</span> <span class="hl kwd">SetUp</span><span class="hl opt">() {</span>
    std<span class="hl opt">::</span>string <span class="hl kwd">dummy</span><span class="hl opt">(</span><span class="hl kwd">testfile_sz</span><span class="hl opt">(),</span> <span class="hl str">'x'</span><span class="hl opt">);</span>
    std<span class="hl opt">::</span>ofstream <span class="hl kwd">os</span><span class="hl opt">(</span><span class="hl kwd">testfile</span><span class="hl opt">());</span>
    os<span class="hl opt">.</span><span class="hl kwd">write</span><span class="hl opt">(</span>dummy<span class="hl opt">.</span><span class="hl kwd">c_str</span><span class="hl opt">(),</span> dummy<span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">());</span>
  <span class="hl opt">}</span>

  <span class="hl slc">// Эта функция вызывается один раз после всех тестов.</span>
  <span class="hl slc">// Она удаляет тестовый файл.</span>
  <span class="hl kwb">void</span> <span class="hl kwd">TearDown</span><span class="hl opt">() {</span>
    std<span class="hl opt">::</span><span class="hl kwd">remove</span><span class="hl opt">(</span><span class="hl kwd">testfile</span><span class="hl opt">());</span>
  <span class="hl opt">}</span>
<span class="hl opt">};</span>

<span class="hl slc">// Функция, реализующая классический метод чтения файла кусками</span>
<span class="hl slc">// заданной длины N. При необходимости производится предварительное</span>
<span class="hl slc">// распределение буфера приемной строки.</span>
<span class="hl kwb">void</span> <span class="hl kwd">rawRead</span><span class="hl opt">(</span><span class="hl kwb">int</span> N<span class="hl opt">,</span> <span class="hl kwb">bool</span> reserve<span class="hl opt">) {</span>
  std<span class="hl opt">::</span>ifstream <span class="hl kwd">is</span><span class="hl opt">(</span>Env<span class="hl opt">::</span><span class="hl kwd">testfile</span><span class="hl opt">());</span>

  std<span class="hl opt">::</span>string v<span class="hl opt">;</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>reserve<span class="hl opt">)</span>
    v<span class="hl opt">.</span><span class="hl kwd">reserve</span><span class="hl opt">(</span>Env<span class="hl opt">::</span><span class="hl kwd">testfile_sz</span><span class="hl opt">());</span>

  <span class="hl kwb">char</span><span class="hl opt">*</span> buf <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwb">char</span><span class="hl opt">[</span>N<span class="hl opt">];</span>
  <span class="hl kwa">while</span> <span class="hl opt">(</span>is<span class="hl opt">) {</span>
    is<span class="hl opt">.</span><span class="hl kwd">read</span><span class="hl opt">(</span>buf<span class="hl opt">,</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span>buf<span class="hl opt">));</span>
    v<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span>buf<span class="hl opt">,</span> is<span class="hl opt">.</span><span class="hl kwd">gcount</span><span class="hl opt">());</span>
  <span class="hl opt">}</span>
  <span class="hl kwa">delete</span><span class="hl opt">[]</span> buf<span class="hl opt">;</span>

  <span class="hl slc">// На всякий случай проверяем размер считанного файла.</span>
  <span class="hl kwd">EXPECT_EQ</span><span class="hl opt">(</span>Env<span class="hl opt">::</span><span class="hl kwd">testfile_sz</span><span class="hl opt">(),</span> v<span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">());</span> 
<span class="hl opt">}</span>

<span class="hl slc">// Классическое чтение с буфером в 100 байт.</span>
<span class="hl kwd">TEST</span><span class="hl opt">(</span>ReaderTest<span class="hl opt">,</span> raw_100<span class="hl opt">) {</span>
  <span class="hl kwd">rawRead</span><span class="hl opt">(</span><span class="hl num">100</span><span class="hl opt">,</span> <span class="hl kwa">false</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl slc">// Классическое чтение с буфером в 1 килобайт.</span>
<span class="hl kwd">TEST</span><span class="hl opt">(</span>ReaderTest<span class="hl opt">,</span> raw_1024<span class="hl opt">) {</span>
  <span class="hl kwd">rawRead</span><span class="hl opt">(</span><span class="hl num">1024</span><span class="hl opt">,</span> <span class="hl kwa">false</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl slc">// Классическое чтение с буфером в 10 килобайт.</span>
<span class="hl kwd">TEST</span><span class="hl opt">(</span>ReaderTest<span class="hl opt">,</span> raw_10240<span class="hl opt">) {</span>
  <span class="hl kwd">rawRead</span><span class="hl opt">(</span><span class="hl num">10240</span><span class="hl opt">,</span> <span class="hl kwa">false</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl slc">// Классическое чтение с буфером в 10 килобайт с предварительным</span>
<span class="hl slc">// распределением буфера приемной строки.</span>
<span class="hl kwd">TEST</span><span class="hl opt">(</span>ReaderTest<span class="hl opt">,</span> raw_reserve_10240<span class="hl opt">) {</span>
  <span class="hl kwd">rawRead</span><span class="hl opt">(</span><span class="hl num">10240</span><span class="hl opt">,</span> <span class="hl kwa">true</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl slc">// Функция, реализующая чтение через итератор istream_iterator.</span>
<span class="hl slc">// При необходимости производится предварительное распределение </span>
<span class="hl slc">// буфера приемной строки.</span>
<span class="hl kwb">void</span> <span class="hl kwd">check_istream_iterator</span><span class="hl opt">(</span><span class="hl kwb">bool</span> reserve<span class="hl opt">) {</span>
  std<span class="hl opt">::</span>ifstream <span class="hl kwd">is</span><span class="hl opt">(</span>Env<span class="hl opt">::</span><span class="hl kwd">testfile</span><span class="hl opt">());</span>

  std<span class="hl opt">::</span>string v<span class="hl opt">;</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>reserve<span class="hl opt">)</span>
    v<span class="hl opt">.</span><span class="hl kwd">reserve</span><span class="hl opt">(</span>Env<span class="hl opt">::</span><span class="hl kwd">testfile_sz</span><span class="hl opt">());</span>

  <span class="hl slc">// Принудительное игнорирование пропуска пробельных символов.</span>
  <span class="hl slc">// С этим флагом двоичные данные будут читаться неверно.</span>
  is<span class="hl opt">.</span><span class="hl kwd">unsetf</span><span class="hl opt">(</span>std<span class="hl opt">::</span>ios<span class="hl opt">::</span>skipws<span class="hl opt">);</span>
  std<span class="hl opt">::</span><span class="hl kwd">copy</span><span class="hl opt">(</span>
    std<span class="hl opt">::</span>istream_iterator<span class="hl opt">&lt;</span><span class="hl kwb">char</span><span class="hl opt">&gt;(</span>is<span class="hl opt">),</span> 
    std<span class="hl opt">::</span>istream_iterator<span class="hl opt">&lt;</span><span class="hl kwb">char</span><span class="hl opt">&gt;(),</span> 
    std<span class="hl opt">::</span><span class="hl kwd">back_inserter</span><span class="hl opt">(</span>v<span class="hl opt">)</span>
  <span class="hl opt">);</span>

  <span class="hl slc">// На всякий случай проверяем размер считанного файла.</span>
  <span class="hl kwd">EXPECT_EQ</span><span class="hl opt">(</span>Env<span class="hl opt">::</span><span class="hl kwd">testfile_sz</span><span class="hl opt">(),</span> v<span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">());</span> 
<span class="hl opt">}</span>

<span class="hl slc">// Тестируем работу через istream_iterator.</span>
<span class="hl kwd">TEST</span><span class="hl opt">(</span>ReaderTest<span class="hl opt">,</span> istream_iterator<span class="hl opt">) {</span>
  <span class="hl kwd">check_istream_iterator</span><span class="hl opt">(</span><span class="hl kwa">false</span><span class="hl opt">);</span>  
<span class="hl opt">}</span>

<span class="hl slc">// Тестируем работу через istream_iterator с предварительным</span>
<span class="hl slc">// распределением буфера приемной строки.</span>
<span class="hl kwd">TEST</span><span class="hl opt">(</span>ReaderTest<span class="hl opt">,</span> istream_iterator_reserve<span class="hl opt">) {</span>
  <span class="hl kwd">check_istream_iterator</span><span class="hl opt">(</span><span class="hl kwa">true</span><span class="hl opt">);</span>  
<span class="hl opt">}</span>

<span class="hl slc">// Тестируем работу через istream_iterator при прямом</span>
<span class="hl slc">// вызове конструктора строки, который берет данные напрямую</span>
<span class="hl slc">// из итераторов.</span>
<span class="hl kwd">TEST</span><span class="hl opt">(</span>ReaderTest<span class="hl opt">,</span> istream_iterator_tostring<span class="hl opt">) {</span>
  std<span class="hl opt">::</span>ifstream <span class="hl kwd">is</span><span class="hl opt">(</span>Env<span class="hl opt">::</span><span class="hl kwd">testfile</span><span class="hl opt">());</span>
  is<span class="hl opt">.</span><span class="hl kwd">unsetf</span><span class="hl opt">(</span>std<span class="hl opt">::</span>ios<span class="hl opt">::</span>skipws<span class="hl opt">);</span>

  std<span class="hl opt">::</span>string <span class="hl kwd">v</span><span class="hl opt">(</span>
    <span class="hl opt">(</span>std<span class="hl opt">::</span>istream_iterator<span class="hl opt">&lt;</span><span class="hl kwb">char</span><span class="hl opt">&gt;(</span>is<span class="hl opt">)),</span> 
    std<span class="hl opt">::</span>istream_iterator<span class="hl opt">&lt;</span><span class="hl kwb">char</span><span class="hl opt">&gt;()</span>
  <span class="hl opt">);</span>

  <span class="hl slc">// На всякий случай проверяем размер считанного файла.</span>
  <span class="hl kwd">EXPECT_EQ</span><span class="hl opt">(</span>Env<span class="hl opt">::</span><span class="hl kwd">testfile_sz</span><span class="hl opt">(),</span> v<span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">());</span> 
<span class="hl opt">}</span>

<span class="hl slc">// Функция, реализующая чтение через итератор istreambuf_iterator.</span>
<span class="hl slc">// При необходимости производится предварительное распределение </span>
<span class="hl slc">// буфера приемной строки. Для данного метода сброс флага</span>
<span class="hl slc">// std::ios::skipws не нужен, так как этот итератор работает</span>
<span class="hl slc">// на более низком уровне.</span>
<span class="hl kwb">void</span> <span class="hl kwd">check_istreambuf_iterator</span><span class="hl opt">(</span><span class="hl kwb">bool</span> reserve<span class="hl opt">) {</span>
  std<span class="hl opt">::</span>ifstream <span class="hl kwd">is</span><span class="hl opt">(</span>Env<span class="hl opt">::</span><span class="hl kwd">testfile</span><span class="hl opt">());</span>

  std<span class="hl opt">::</span>string v<span class="hl opt">;</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>reserve<span class="hl opt">)</span>
    v<span class="hl opt">.</span><span class="hl kwd">reserve</span><span class="hl opt">(</span>Env<span class="hl opt">::</span><span class="hl kwd">testfile_sz</span><span class="hl opt">());</span>

  std<span class="hl opt">::</span><span class="hl kwd">copy</span><span class="hl opt">(</span>
    std<span class="hl opt">::</span>istreambuf_iterator<span class="hl opt">&lt;</span><span class="hl kwb">char</span><span class="hl opt">&gt;(</span>is<span class="hl opt">),</span> 
    std<span class="hl opt">::</span>istreambuf_iterator<span class="hl opt">&lt;</span><span class="hl kwb">char</span><span class="hl opt">&gt;(),</span>
    std<span class="hl opt">::</span><span class="hl kwd">back_inserter</span><span class="hl opt">(</span>v<span class="hl opt">)</span>  
  <span class="hl opt">);</span>

  <span class="hl slc">// На всякий случай проверяем размер считанного файла.</span>
  <span class="hl kwd">EXPECT_EQ</span><span class="hl opt">(</span>Env<span class="hl opt">::</span><span class="hl kwd">testfile_sz</span><span class="hl opt">(),</span> v<span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">());</span> 
<span class="hl opt">}</span>

<span class="hl slc">// Тестируем работу через istreambuf_iterator.</span>
<span class="hl kwd">TEST</span><span class="hl opt">(</span>ReaderTest<span class="hl opt">,</span> istreambuf_iterator<span class="hl opt">) {</span>
  <span class="hl kwd">check_istreambuf_iterator</span><span class="hl opt">(</span><span class="hl kwa">false</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl slc">// Тестируем работу через istreambuf_iterator с предварительным</span>
<span class="hl slc">// распределением буфера приемной строки.</span>
<span class="hl kwd">TEST</span><span class="hl opt">(</span>ReaderTest<span class="hl opt">,</span> istreambuf_iterator_reserve<span class="hl opt">) {</span>
  <span class="hl kwd">check_istreambuf_iterator</span><span class="hl opt">(</span><span class="hl kwa">true</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl slc">// Тестируем работу через istreambuf_iterator при прямом</span>
<span class="hl slc">// вызове конструктора строки, который берет данные напрямую</span>
<span class="hl slc">// из итераторов.</span>
<span class="hl kwd">TEST</span><span class="hl opt">(</span>ReaderTest<span class="hl opt">,</span> istreambuf_iterator_tostring<span class="hl opt">) {</span>
  std<span class="hl opt">::</span>ifstream <span class="hl kwd">is</span><span class="hl opt">(</span>Env<span class="hl opt">::</span><span class="hl kwd">testfile</span><span class="hl opt">());</span>

  std<span class="hl opt">::</span>string <span class="hl kwd">v</span><span class="hl opt">(</span>
    <span class="hl opt">(</span>std<span class="hl opt">::</span>istreambuf_iterator<span class="hl opt">&lt;</span><span class="hl kwb">char</span><span class="hl opt">&gt;(</span>is<span class="hl opt">)),</span> 
    std<span class="hl opt">::</span>istreambuf_iterator<span class="hl opt">&lt;</span><span class="hl kwb">char</span><span class="hl opt">&gt;()</span>
  <span class="hl opt">);</span>

  <span class="hl slc">// На всякий случай проверяем размер считанного файла.</span>
  <span class="hl kwd">EXPECT_EQ</span><span class="hl opt">(</span>Env<span class="hl opt">::</span><span class="hl kwd">testfile_sz</span><span class="hl opt">(),</span> v<span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">());</span> 
<span class="hl opt">}</span>

<span class="hl ppc">#ifdef WIN32</span>

<span class="hl slc">// Этот тест аналогичен тесту istreambuf_iterator_tostring</span>
<span class="hl slc">// за исключение создания объекта потока прямо в вызове</span>
<span class="hl slc">// конструктора строки. Работает только в cl.exe, так как</span>
<span class="hl slc">// &quot;стандартный&quot; компилятор запрещает передавать временные</span>
<span class="hl slc">// объекты по неконстантной ссылке, а cl.exe почему-то это</span>
<span class="hl slc">// разрешает.</span>
<span class="hl kwd">TEST</span><span class="hl opt">(</span>ReaderTest<span class="hl opt">,</span> istreambuf_iterator_tostring_short<span class="hl opt">) {</span>
  std<span class="hl opt">::</span>string <span class="hl kwd">v</span><span class="hl opt">(</span>
    <span class="hl opt">(</span>std<span class="hl opt">::</span>istreambuf_iterator<span class="hl opt">&lt;</span><span class="hl kwb">char</span><span class="hl opt">&gt;(</span>
      std<span class="hl opt">::</span><span class="hl kwd">ifstream</span><span class="hl opt">(</span>Env<span class="hl opt">::</span><span class="hl kwd">testfile</span><span class="hl opt">())</span>
    <span class="hl opt">)),</span> 
    std<span class="hl opt">::</span>istreambuf_iterator<span class="hl opt">&lt;</span><span class="hl kwb">char</span><span class="hl opt">&gt;()</span>
  <span class="hl opt">);</span>

  <span class="hl slc">// На всякий случай проверяем размер считанного файла.</span>
  <span class="hl kwd">EXPECT_EQ</span><span class="hl opt">(</span>Env<span class="hl opt">::</span><span class="hl kwd">testfile_sz</span><span class="hl opt">(),</span> v<span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">());</span> 
<span class="hl opt">}</span>

<span class="hl ppc">#endif</span>

<span class="hl slc">// Финальный метод. Конструктор строки берет данные напрямую</span>
<span class="hl slc">// из итератора istreambuf_iterator. Объект потока создается</span>
<span class="hl slc">// динамически прямо в коде вызова конструктора строки через </span>
<span class="hl slc">// std::auto_ptr.</span>
<span class="hl kwd">TEST</span><span class="hl opt">(</span>ReaderTest<span class="hl opt">,</span> istreambuf_iterator_tostring_short_auto_ptr<span class="hl opt">) {</span>
  std<span class="hl opt">::</span>string <span class="hl kwd">v</span><span class="hl opt">(</span>
    <span class="hl opt">(</span>std<span class="hl opt">::</span>istreambuf_iterator<span class="hl opt">&lt;</span><span class="hl kwb">char</span><span class="hl opt">&gt;(</span>
      <span class="hl opt">*(</span>std<span class="hl opt">::</span>auto_ptr<span class="hl opt">&lt;</span>std<span class="hl opt">::</span>ifstream<span class="hl opt">&gt;(</span>
        <span class="hl kwa">new</span> std<span class="hl opt">::</span><span class="hl kwd">ifstream</span><span class="hl opt">(</span>Env<span class="hl opt">::</span><span class="hl kwd">testfile</span><span class="hl opt">())</span>
      <span class="hl opt">)).</span><span class="hl kwd">get</span><span class="hl opt">()</span>
    <span class="hl opt">)),</span> 
    std<span class="hl opt">::</span>istreambuf_iterator<span class="hl opt">&lt;</span><span class="hl kwb">char</span><span class="hl opt">&gt;()</span>
  <span class="hl opt">);</span>

  <span class="hl slc">// На всякий случай проверяем размер считанного файла.</span>
  <span class="hl kwd">EXPECT_EQ</span><span class="hl opt">(</span>Env<span class="hl opt">::</span><span class="hl kwd">testfile_sz</span><span class="hl opt">(),</span> v<span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">());</span> 
<span class="hl opt">}</span>

<span class="hl slc">// Запуск тестов.</span>
<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span> <span class="hl opt">**</span>argv<span class="hl opt">) {</span>
  <span class="hl slc">// Инициализация нашей тестовой среды.</span>
  testing<span class="hl opt">::</span><span class="hl kwd">AddGlobalTestEnvironment</span><span class="hl opt">(</span><span class="hl kwa">new</span> Env<span class="hl opt">);</span>
  testing<span class="hl opt">::</span><span class="hl kwd">InitGoogleTest</span><span class="hl opt">(&amp;</span>argc<span class="hl opt">,</span> argv<span class="hl opt">);</span>
  <span class="hl kwa">return</span> <span class="hl kwd">RUN_ALL_TESTS</span><span class="hl opt">();</span>
<span class="hl opt">}</span>
</pre>

<p>Для компиляции вам необходимы файлы <code>gtest/gtest.h</code> и <code>gtest-all.cc</code> (см. выше).</p>

<p>Для начала скомпилируем в Visual Studio 2008:</p>

<pre><code>cl /Fefilereader_vs2008.exe /DWIN32 /O2 /arch:SSE2 /I. /EHsc filereader_unittest.cpp gtest-all.cc
</code></pre>

<p>Запускаем:</p>

<pre><code>filereader_vs2008.exe --gtest_print_time
</code></pre>

<p>Опция <code>--gtest_print_time</code> указывает Google Test выводить время работы каждого теста.</p>

<p>Результат:</p>

<pre><code>[==========] Running 12 tests from 1 test case.
[----------] Global test environment set-up.
[----------] 12 tests from ReaderTest
[ RUN      ] ReaderTest.raw_100
[       OK ] ReaderTest.raw_100 (141 ms)
[ RUN      ] ReaderTest.raw_1024
[       OK ] ReaderTest.raw_1024 (94 ms)
[ RUN      ] ReaderTest.raw_10240
[       OK ] ReaderTest.raw_10240 (109 ms)
[ RUN      ] ReaderTest.raw_reserve_10240
[       OK ] ReaderTest.raw_reserve_10240 (94 ms)
[ RUN      ] ReaderTest.istream_iterator
[       OK ] ReaderTest.istream_iterator (359 ms)
[ RUN      ] ReaderTest.istream_iterator_reserve
[       OK ] ReaderTest.istream_iterator_reserve (344 ms)
[ RUN      ] ReaderTest.istream_iterator_tostring
[       OK ] ReaderTest.istream_iterator_tostring (281 ms)
[ RUN      ] ReaderTest.istreambuf_iterator
[       OK ] ReaderTest.istreambuf_iterator (141 ms)
[ RUN      ] ReaderTest.istreambuf_iterator_reserve
[       OK ] ReaderTest.istreambuf_iterator_reserve (125 ms)
[ RUN      ] ReaderTest.istreambuf_iterator_tostring
[       OK ] ReaderTest.istreambuf_iterator_tostring (78 ms)
[ RUN      ] ReaderTest.istreambuf_iterator_tostring_short
[       OK ] ReaderTest.istreambuf_iterator_tostring_short (67 ms)
[ RUN      ] ReaderTest.istreambuf_iterator_tostring_short_auto_ptr
[       OK ] ReaderTest.istreambuf_iterator_tostring_short_auto_ptr (78 ms)
[----------] 12 tests from ReaderTest (1891 ms total)

[----------] Global test environment tear-down
[==========] 12 tests from 1 test case ran. (1906 ms total)
[  PASSED  ] 12 tests.
</code></pre>

<p>Давайте проанализируем результаты.</p>

<p>Мы не будем сравнивать абсолютные времена компиляторов друг против друга. Сейчас не об этом.</p>

<p><strong>Вывод первый</strong>. Предварительное резервирование буфера приемной строки (метод <code>reserve()</code>) не дает никакого эффекта в нашем случае. Может это из-за того, что стратегия расширения буфера при простом линейном добавлении данных итак весьма эффективна в классе <code>std::string</code>.</p>

<p><strong>Вывод второй</strong>. Размер буфера чтения в методе чтения файла явными кусками установленного размера не дал четкой картины. Не очевидно, какой размер буфера может быть потенциально оптимальным. Тут может и дисковый кэш повлиял, может внутреннее буферизирование в классе <code>std::ifstream</code>, может что-то еще.</p>

<p><strong>Вывод третий</strong>. Работа через итератор <code>istream_iterator</code> является крайне медленной. Возможно это связано с накладными расходами на форматные преобразования, производимые данным классом и совершенно ненужные в нашей задаче. Для реального использования данный метод практически непригоден.</p>

<p><strong>Вывод четвертый</strong>. Использование конструктора класса <code>std::string</code>, работающего напрямую с итераторами потока, заметно быстрее, чем использование алгоритма <code>std::copy</code> (<code>ReaderTest.istream_iterator</code> заметно медленнее <code>ReaderTest.istream_iterator_tostring</code> и <code>ReaderTestiterator</code> заметно медленнее <code>ReaderTest.istreambuf_iterator_tostring</code>). И понятно почему — данные напрямую поступают в буфер строки без ненужного промежуточного копирования.</p>

<p><strong>Вывод пятый (основной)</strong>. Метод чтения через итератор <code>istreambuf_iterator</code> с использованием конструктора строки, работающего напрямую с итераторами потока (тест <code>ReaderTest.istreambuf_iterator_tostring</code> для &ldquo;нестрогого&rdquo; компилятора и тест <code>ReaderTest.istreambuf_iterator_tostring_auto_ptr</code> для компилятора, следующего стандартам), является весьма эффективным и может конкурировать с ручным блочным чтением. Конечно, текст данного метода весьма непрост и может запутан для понимания на первый взгляд, особенно для начинающих, а блочное чтения прозрачно и ясно, но при почти равной эффективности этих методов нет причин отказываться от работы через итераторы, так как данный метод весь фактически предоставляется библиотекой STL, а значит быть может оптимизирован независимо, без затрагивания кода уже использующей его программы.</p>

<p>Другие посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2009/02/09/dark-corners-of-cpp/">Темные углы С++</a></li>
<li><a href="http://demin.ws/blog/russian/2009/01/28/unit-testing-concurrent-threads/">Unit-тестирование для параллельных потоков</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Самодельный мьютекс на C++ для Windows и UNIX]]></title>
    <link href="http://demin.ws/blog/russian/2009/02/06/universal-mutex-in-cpp-for-windows-and-unix/"/>
    <updated>2009-02-06T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/02/06/universal-mutex-in-cpp-for-windows-and-unix/</id>
    <content type="html"><![CDATA[<p>Параллельные потоки — это очень удобно. Класс <a href="http://demin.ws/blog/russian/2009/01/26/universal-threads-for-windows-and-unix/">Thread</a> неплохо делает свою работу на многих платформах. Однако, самостоятельно работающий поток, который не имеет связи с внешним миром (другими потоками), вряд ли полезен в реальном приложении. Вычисления для этого и распараллеливаются, чтобы, так сказать, в несколько рук (потоков) выполнить одну задачу. Возникает задача синхронизации потоков.</p>

<p>Например, в программе есть некоторая строковая переменная, хранящая описание текущего состояния. Это состояние может, например, выводиться в нижней полоске рабочего окна. Теперь представим, что в программе есть два параллельно работающих потока. Первый занимается получением данных из сети, а второй — обработкой базы данных. Допустим, настал некоторый момент времени, когда первый поток принял данные из сети и хочет об этом отрапортовать в строке состояния, записав туда &ldquo;Принято 16384 байт&rdquo;. Приблизительно в этот же момент второй поток завершил периодическую проверку базы данных и также желает об этом сообщить пользователю строкой &ldquo;База данных проверена&rdquo;. Операция копирования строки не является атомарной, то есть нет никакой гарантии, что во время ее выполнения процессор не переключится на какой-то другой поток, и операция копирования не будет прервана посреди работы. Итак, когда поток номер 1 успел записать в строку состояния слово &ldquo;Принято&rdquo;, может так случиться, что процессор активирует поток номер 2, который также начнет запись своей строки и добавит к уже записанному &ldquo;Принято&rdquo; строку &ldquo;База данных про&rdquo;, но будет прерван первым потоком и т.д. В итоге в переменная может содержать кашу типа &ldquo;ПрияноБаза данных 1про6в3ерена84 байт&rdquo;. Вывод такой — результат полностью непредсказуем.</p>

<p>Для решения подобного вроде проблем в мире параллельного программирования существует такое понятие, как блокировка. Суть ее в том, что когда один процесс захватывает блокировку, то все остальные процессы, пытающиеся ее захватить после, будут блокированы до тех пор, пока первый процесс ее не отпустит. Это похоже на дверь в комнату: представим, что наша переменная <code>globalStatus</code> находится в комнате с одной дверью и ключом внутри. Если дверь открыта (блокировка свободна), то в комнате никого нет (никто не работает с переменной). Когда процесс заходит в комнату, он запирает дверь изнутри (захватывает блокировку). После этого процесс может спокойно работать с переменной как угодно долго, так как гарантированно никто другой не войдет в комнату, так как она заперта изнутри, и не будет мешать ему работать с переменной.</p>

<p>Это была идея простейшей блокировки, которую часто называют мьютекс (mutex). Сейчас мы рассмотрим реализацию такой блокировки на С++, которая будет работать в Windows и UNIX. Как я писал в <a href="http://demin.ws/blog/russian/2009/01/26/universal-threads-for-windows-and-unix/">статье про параллельные потоки</a>, в мире UNIX стандартом де-факто является библиотека pthread (POSIX Threads). Имеено ее мы и будем использовать для UNIX-версии. Для Windows будет отдельная реализация.</p>

<p>Класс Mutex получился весьма простой, в виде единственного файла <code>mutex.h</code>. Пространство имен (namespace) называется ext для простоты. Переименуйте его, если это требуется для вашего проекта.</p>

<p><code>mutex.h</code>:</p>

<pre class="hl">
<span class="hl ppc">#ifndef _EXT_MUTEX_H</span>
<span class="hl ppc">#define _EXT_MUTEX_H</span>

<span class="hl ppc">#ifdef WIN32</span>
<span class="hl ppc">#define WIN32_LEAN_AND_MEAN</span>
<span class="hl ppc">#define NOGDI</span>
<span class="hl ppc">#include &lt;windows.h&gt;</span>
<span class="hl ppc">#else</span>
<span class="hl ppc">#include &lt;stdlib.h&gt;</span>
<span class="hl ppc">#include &lt;pthread.h&gt;</span>
<span class="hl ppc">#endif</span>

<span class="hl kwa">namespace</span> ext <span class="hl opt">{</span>

<span class="hl ppc">#ifdef WIN32</span>
  <span class="hl kwc">typedef</span> CRITICAL_SECTION MutexType<span class="hl opt">;</span>
<span class="hl ppc">#else</span>
  <span class="hl kwc">typedef</span> pthread_mutex_t MutexType<span class="hl opt">;</span>
<span class="hl ppc">#endif</span>

<span class="hl slc">// Интерфейс класса Mutex.</span>
<span class="hl slc">// Класс задумывался как маленький и быстрый, поэтому все</span>
<span class="hl slc">// определено прямо в заголовочном файле, и все функции</span>
<span class="hl slc">// объявлены принудительно inline. Это должно уберечь</span>
<span class="hl slc">// от ошибок и предупреждений о двойных символах при</span>
<span class="hl slc">// включении mutex.h в несколько модулей.</span>
<span class="hl kwc">class</span> Mutex <span class="hl opt">{</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl kwc">inline</span> <span class="hl kwd">Mutex</span><span class="hl opt">();</span>
  <span class="hl slc">// Деструктор объявлен как не виртуальный из-за тех же</span>
  <span class="hl slc">// соображений эффективности. Если вы планируете</span>
  <span class="hl slc">// наследоваться от этого класса, то лучше сделать</span>
  <span class="hl slc">// деструктор виртуальным, так как наследование от класса</span>
  <span class="hl slc">// с не виртуальным деструктором потенциально опасно</span>
  <span class="hl slc">// с точки зрения утечек памяти и является одним из</span>
  <span class="hl slc">// больших &quot;no-no&quot; в С++.</span>
  <span class="hl kwc">inline</span> <span class="hl opt">~</span><span class="hl kwd">Mutex</span><span class="hl opt">();</span>

  <span class="hl slc">// Функция захвата блокировки (вход в комнату и запирание</span>
  <span class="hl slc">// двери ключом изнутри). </span>
  <span class="hl kwc">inline</span> <span class="hl kwb">void</span> <span class="hl kwd">Lock</span><span class="hl opt">();</span>

  <span class="hl slc">// Функция освобождения блокировки (отпирание двери и</span>
  <span class="hl slc">// выход из комнаты)</span>
  <span class="hl kwc">inline</span> <span class="hl kwb">void</span> <span class="hl kwd">Unlock</span><span class="hl opt">();</span>
<span class="hl kwc">private</span><span class="hl opt">:</span>
  MutexType __mutex<span class="hl opt">;</span>

  <span class="hl slc">// Защита от случайного копирования объекта данного класса.</span>
  <span class="hl slc">// Экземпляр этого класса с трудом может быть нормально</span>
  <span class="hl slc">// скопирован, так как он жестко привязан к системному</span>
  <span class="hl slc">// ресурсу. </span>
  <span class="hl kwd">Mutex</span><span class="hl opt">(</span><span class="hl kwb">const</span> Mutex<span class="hl opt">&amp;);</span>
  <span class="hl kwb">void</span> <span class="hl kwc">operator</span><span class="hl opt">=(</span><span class="hl kwb">const</span> Mutex<span class="hl opt">&amp;);</span>
<span class="hl opt">};</span>

<span class="hl ppc">#ifdef WIN32</span>

<span class="hl slc">// Реализация через Windows API</span>

Mutex<span class="hl opt">::</span><span class="hl kwd">Mutex</span><span class="hl opt">()             {</span> <span class="hl kwd">InitializeCriticalSection</span><span class="hl opt">(&amp;</span>__mutex<span class="hl opt">); }</span>
Mutex<span class="hl opt">::~</span><span class="hl kwd">Mutex</span><span class="hl opt">()            {</span> <span class="hl kwd">DeleteCriticalSection</span><span class="hl opt">(&amp;</span>__mutex<span class="hl opt">); }</span>
<span class="hl kwb">void</span> Mutex<span class="hl opt">::</span><span class="hl kwd">Lock</span><span class="hl opt">()         {</span> <span class="hl kwd">EnterCriticalSection</span><span class="hl opt">(&amp;</span>__mutex<span class="hl opt">); }</span>
<span class="hl kwb">void</span> Mutex<span class="hl opt">::</span><span class="hl kwd">Unlock</span><span class="hl opt">()       {</span> <span class="hl kwd">LeaveCriticalSection</span><span class="hl opt">(&amp;</span>__mutex<span class="hl opt">); }</span>

<span class="hl ppc">#else</span> <span class="hl slc">// WIN32</span>
<span class="hl ppc"></span>
<span class="hl slc">// UNIX версия через pthread</span>

Mutex<span class="hl opt">::</span><span class="hl kwd">Mutex</span><span class="hl opt">()             {</span> <span class="hl kwd">pthread_mutex_init</span><span class="hl opt">(&amp;</span>__mutex<span class="hl opt">,</span> NULL<span class="hl opt">); }</span>
Mutex<span class="hl opt">::~</span><span class="hl kwd">Mutex</span><span class="hl opt">()            {</span> <span class="hl kwd">pthread_mutex_destroy</span><span class="hl opt">(&amp;</span>__mutex<span class="hl opt">); }</span>
<span class="hl kwb">void</span> Mutex<span class="hl opt">::</span><span class="hl kwd">Lock</span><span class="hl opt">()         {</span> <span class="hl kwd">pthread_mutex_lock</span><span class="hl opt">(&amp;</span>__mutex<span class="hl opt">); }</span>
<span class="hl kwb">void</span> Mutex<span class="hl opt">::</span><span class="hl kwd">Unlock</span><span class="hl opt">()       {</span> <span class="hl kwd">pthread_mutex_unlock</span><span class="hl opt">(&amp;</span>__mutex<span class="hl opt">); }</span>

<span class="hl ppc">#endif</span> <span class="hl slc">// WIN32</span>
<span class="hl ppc"></span>
<span class="hl opt">}</span> <span class="hl slc">// ext</span>

<span class="hl ppc">#endif</span>
</pre>

<p>Касаемо техники <a href="http://demin.ws/blog/russian/2009/01/27/preventing-copying-objects-in-cpp/">&ldquo;защиты&rdquo; объекта в С++ от случайного копирования</a> я уже писал ранее.</p>

<p>Я не стал проверять коды возвратов данных функций для упрощения класса. Могу сказать, что если хоть одна из них завершиться с ошибкой, то это значит, что-то конкретно не так в вашей системе, и приложение по любому не будет работать нормально еще по миллиарду причин.</p>

<p>Пощупаем класс в работе. И конечно, используя unit-тестирование.</p>

<p>Традиционно, для компиляции тестов нам нужна <a href="http://code.google.com/p/googletest/">Google Test Framework</a>. Как я уже <a href="http://demin.ws/blog/russian/2009/01/28/unit-testing-concurrent-threads/">писал</a>, вы можете скачать <a href="http://demin.ws/downloads/gtest-amalgamation-1.2.1.zip">мою модификацию</a> этой библиотеки, которая сокращена до двух необходимых файлов <code>gtest/gtest.h</code> и <code>gtest-all.cc</code>.</p>

<p>Для теста нам также потребуются файлы thread.cpp и thread.h из <a href="http://demin.ws/blog/russian/2009/01/26/universal-threads-for-windows-and-unix/">статьи про параллельные потоки в С++</a>.</p>

<p><code>mutex_unittest.cpp</code>:</p>

<pre class="hl">
<span class="hl ppc">#include</span> <span class="hl pps">&quot;gtest/gtest.h&quot;</span><span class="hl ppc"></span>

<span class="hl ppc">#include</span> <span class="hl pps">&quot;mutex.h&quot;</span><span class="hl ppc"></span>
<span class="hl ppc">#include</span> <span class="hl pps">&quot;thread.h&quot;</span><span class="hl ppc"></span>

<span class="hl slc">// Макрос для осуществления задержки в миллисекундах</span>
<span class="hl ppc">#ifdef WIN32</span>
<span class="hl ppc">#include &lt;windows.h&gt;</span>
<span class="hl ppc">#define msleep(x)    Sleep(x)</span>
<span class="hl ppc">#else</span>
<span class="hl ppc">#include &lt;unistd.h&gt;</span>
<span class="hl ppc">#define msleep(x)    usleep((x)*1000)</span>
<span class="hl ppc">#endif</span>

<span class="hl slc">// Определим параллельный поток, который будет</span>
<span class="hl slc">// &quot;конкурировать&quot; с основным потоком за блокировку.</span>
<span class="hl slc">// Данный поток будет пытаться захватить блокировку,</span>
<span class="hl slc">// изменить значение флага и освободить затем</span>
<span class="hl slc">// блокировку.</span>
<span class="hl kwc">class</span> A<span class="hl opt">:</span> <span class="hl kwc">public</span> ext<span class="hl opt">::</span>Thread <span class="hl opt">{</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl slc">// Передаем в конструкторе ссылку на флаг и </span>
  <span class="hl slc">// ссылку на блокировку.</span>
  <span class="hl kwd">A</span><span class="hl opt">(</span><span class="hl kwc">volatile</span> <span class="hl kwb">int</span><span class="hl opt">&amp;</span> flag<span class="hl opt">,</span> ext<span class="hl opt">::</span>Mutex<span class="hl opt">&amp;</span> mutex<span class="hl opt">) :</span>
    <span class="hl kwd">__flag</span><span class="hl opt">(</span>flag<span class="hl opt">),</span> <span class="hl kwd">__mutex</span><span class="hl opt">(</span>mutex<span class="hl opt">)</span>
  <span class="hl opt">{}</span>

  <span class="hl kwc">virtual</span> <span class="hl kwb">void</span> <span class="hl kwd">Execute</span><span class="hl opt">() {</span>
    <span class="hl slc">// Захват блокировки (1)</span>
    __mutex<span class="hl opt">.</span><span class="hl kwd">Lock</span><span class="hl opt">();</span>
    <span class="hl slc">// Изменяет флаг на 1</span>
    __flag <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
    <span class="hl slc">// Освобождаем блокировку</span>
    __mutex<span class="hl opt">.</span><span class="hl kwd">Unlock</span><span class="hl opt">();</span>
  <span class="hl opt">}</span>

<span class="hl kwc">private</span><span class="hl opt">:</span>
  <span class="hl kwc">volatile</span> <span class="hl kwb">int</span><span class="hl opt">&amp;</span> __flag<span class="hl opt">;</span>
  ext<span class="hl opt">::</span>Mutex<span class="hl opt">&amp;</span> __mutex<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl kwd">TEST</span><span class="hl opt">(</span>MutexTest<span class="hl opt">,</span> Generic<span class="hl opt">) {</span>
  <span class="hl slc">// Начальное значение флага - 0.</span>
  <span class="hl kwc">volatile</span> <span class="hl kwb">int</span> flag <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>

  <span class="hl slc">// Создаем объект-блокировку</span>
  ext<span class="hl opt">::</span>Mutex mutex<span class="hl opt">;</span>
  <span class="hl slc">// Захватываем блокировку.</span>
  mutex<span class="hl opt">.</span><span class="hl kwd">Lock</span><span class="hl opt">();</span>

  <span class="hl slc">// Создаем параллельный поток выполнения.</span>
  A <span class="hl kwd">a</span><span class="hl opt">(</span>flag<span class="hl opt">,</span> mutex<span class="hl opt">);</span>
  <span class="hl slc">// Запускаем его.</span>
  a<span class="hl opt">.</span><span class="hl kwd">Start</span><span class="hl opt">();</span>
  <span class="hl slc">// Ждем для проформы десятую секунды, чтобы дать</span>
  <span class="hl slc">// время параллельному потоку создаться и успеть</span>
  <span class="hl slc">// дойти до строки (1), то есть до захвата блокировки.</span>
  <span class="hl kwd">msleep</span><span class="hl opt">(</span><span class="hl num">100</span><span class="hl opt">);</span>

  <span class="hl slc">// Значение флага должно быть все еще 0, так как</span>
  <span class="hl slc">// параллельный поток должен быть блокирован на</span>
  <span class="hl slc">// строке (1), так как мы захватили блокировку еще</span>
  <span class="hl slc">// до его создания.</span>
  <span class="hl kwd">EXPECT_EQ</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> flag<span class="hl opt">);</span>

  <span class="hl slc">// Освобождаем блокировку, тем самым давая </span>
  <span class="hl slc">// параллельному потоку выполняться дальше и</span>
  <span class="hl slc">// изменить значение флага на 1.</span>
  mutex<span class="hl opt">.</span><span class="hl kwd">Unlock</span><span class="hl opt">();</span>

  <span class="hl slc">// Ждем завершения параллельного потока.</span>
  a<span class="hl opt">.</span><span class="hl kwd">Join</span><span class="hl opt">();</span>
  <span class="hl slc">// Так как параллельный поток завершился, то</span>
  <span class="hl slc">// флаг теперь точно должен быть равен 1.</span>
  <span class="hl kwd">EXPECT_EQ</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span> flag<span class="hl opt">);</span>
<span class="hl opt">}</span>
</pre>

<p>Для запуска тестов нам нужен стандартный файл запуска <code>runner.cpp</code>:</p>

<pre class="hl">
<span class="hl ppc">#include</span> <span class="hl pps">&quot;gtest/gtest.h&quot;</span><span class="hl ppc"></span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[]) {</span>
  testing<span class="hl opt">::</span><span class="hl kwd">InitGoogleTest</span><span class="hl opt">(&amp;</span>argc<span class="hl opt">,</span> argv<span class="hl opt">);</span>
  <span class="hl kwa">return</span> <span class="hl kwd">RUN_ALL_TESTS</span><span class="hl opt">();</span>
<span class="hl opt">}</span>
</pre>

<p>Компилируем все вместе.</p>

<p>В Visual Studio:</p>

<pre><code>cl /EHsc /I. /Femutex_unittest_vs2008.exe /DWIN32 runner.cpp mutex_unittest.cpp thread.cpp gtest\gtest-all.cc
</code></pre>

<p>Или если вы используете <code>gcc</code>:</p>

<pre><code>g++ -I. -o mutex_unittest_cygwin.exe runner.cpp mutex_unittest.cpp thread.cpp gtest/gtest-all.cc
</code></pre>

<p>Запускаем mutex_unittest_vs2008.exe или mutex_unittest_cygwin.exe:</p>

<pre><code>[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from MutexText
[ RUN      ] MutexText.Generic
[       OK ] MutexText.Generic
[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran.
[  PASSED  ] 1 test.
</code></pre>

<p>Вроде работает как надо.</p>

<p>Теперь внесем в исходный текст класса &ldquo;случайную&rdquo; ошибку, заменив строку:</p>

<pre class="hl">
<span class="hl kwb">void</span> Mutex<span class="hl opt">::</span><span class="hl kwd">Lock</span><span class="hl opt">()         {</span> <span class="hl kwd">EnterCriticalSection</span><span class="hl opt">(&amp;</span>__mutex<span class="hl opt">); }</span>
</pre>

<p>на</p>

<pre class="hl">
<span class="hl kwb">void</span> Mutex<span class="hl opt">::</span><span class="hl kwd">Lock</span><span class="hl opt">()         {</span> <span class="hl com">/* EnterCriticalSection(&amp;__mutex); */</span> <span class="hl opt">}</span>
</pre>

<p>Этой &ldquo;ошибкой&rdquo; мы просто отключили создание блокировки. Перекомпилируем все заново и запустим:</p>

<pre><code>[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from MutexText
[ RUN      ] MutexText.Generic
mutex_unittest.cpp:41: Failure
Value of: flag
  Actual: 1
Expected: 0
[  FAILED  ] MutexText.Generic
[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran.
[  PASSED  ] 0 tests.
[  FAILED  ] 1 test, listed below:
[  FAILED  ] MutexText.Generic

 1 FAILED TEST
</code></pre>

<p>Видно, что флаг был изменен в параллельном потоке вне зависимости от блокировки (и понятно почему, мы ж ее &ldquo;сломали&rdquo;).</p>

<p>Итак, можно вернуть исправленную строку в исходное состояние. Класс работает, и тесты на это подтвердили.</p>

<p>При использовании класса Mutex у себя в проекте не забудьте включить файл <code>mutex_unittest.cpp</code> в ваш набор unit-тестов.</p>

<p>В завершении могу сказать, что данный класс успешно работает и проверен мной лично на Windows (32- и 64-бит), Linux 2.6 (32- и 64-бит Intel и SPARC), AIX 5.3 и 6, SunOS 5.2 64-bit SPARC, HP-UX и HP-UX IA64.</p>

<p>Другие посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2009/02/17/auto-mutex-using-raii/">Автоматический мьютекс</a></li>
<li><a href="http://demin.ws/blog/russian/2009/01/26/universal-threads-for-windows-and-unix/">Универсальные потоки на С++ для Windows и UNIX</a></li>
<li><a href="http://demin.ws/blog/russian/2009/01/28/unit-testing-concurrent-threads/">Unit-тестирование для параллельных потоков</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Функция задержки для класса PreciseTimer]]></title>
    <link href="http://demin.ws/blog/russian/2009/02/05/sleep-method-for-precise-timer/"/>
    <updated>2009-02-05T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/02/05/sleep-method-for-precise-timer/</id>
    <content type="html"><![CDATA[<p>Универсальный класс <a href="http://demin.ws/blog/russian/2009/01/29/milliseconds-timer-for-windows-and-unix/">Миллисекундный таймер для Windows и UNIX</a>, дающий возможность работать с миллисекундными интервалами времени в Windows и UNIX получил новую функцию:</p>

<pre class="hl">
<span class="hl kwb">static void</span> <span class="hl kwd">sleepMs</span><span class="hl opt">(</span><span class="hl kwb">int</span> ms<span class="hl opt">);</span>
</pre>

<p>Эта функция реализует задержку в указанное число миллисекунд. Функция является статической, то есть ей можно пользоваться без создания экземпляра касса:</p>

<pre class="hl">
ext<span class="hl opt">::</span>PreciseTimer<span class="hl opt">::</span><span class="hl kwd">sleepMs</span><span class="hl opt">(</span><span class="hl num">100</span><span class="hl opt">);</span>
</pre>

<p>Необходимо учитывать, что в UNIX системах данная функция может быть прервана пришедшим системным сигналом, например, сигналом о полученных новых данных в буфер сокета. В этом случае задержка может быть меньне, чем ожидается.</p>

<p>Обновленный исходный текст класса и тестов находится по <a href="http://demin.ws/blog/russian/2009/01/29/milliseconds-timer-for-windows-and-unix/">старому адресу</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Дармаван Салихан, "BIOS. Дизассемблирование, модификация, программирование"]]></title>
    <link href="http://demin.ws/blog/russian/2009/02/04/bios-disassembly-ninjutsu-uncovered/"/>
    <updated>2009-02-04T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/02/04/bios-disassembly-ninjutsu-uncovered/</id>
    <content type="html"><![CDATA[<p>Не буду оригинален в посвящении некоторых постов книгам.</p>

<p>Дармаван Салихан</p>

<p><a href="http://www.ozon.ru/context/detail/id/3506567/?partner=easy-coding">BIOS. Дизассемблирование, модификация, программирование</a> (BIOS Disassembly Ninjutsu Uncovered)</p>

<p><img src="http://demin.ws/images/covers/russian/bios-disassembly-ninjutsu-uncovered-cover.jpg" /></p>

<p>С изматывающими подробностями разжевываются по крупицам вопросы, касаемые биоса. Начиная от организации памяти в писюках 90-х и биосов тех лет вплоть современных матерей со всем последними шинами, протоколами, системам загрузки, инициализации железа, загрузки микрокода в процессор и периферию, ориентации на модное направление встраиваемых систем и т.д. Изучается вопрос написания своих биосов с нуля (как на ассемблере, так и на си) и модификации существующих. Подробно разобран пример, как всем известный вирус <a href="http://en.wikipedia.org/wiki/CIH_virus">CIH</a> стирал биосы на некоторых матерях своего времени.</p>

<p>Изложение материала сопровождается изобилием примеров программ и результатов дизассемблирования под винды и линукс.</p>

<p>Единственный вопрос, который, как мне показалось, остался за бортом — это альтернативы классическому подходу в простроении биосов на основе ядра линукса, а именно системы <a href="http://www.coreboot.org/">Coreboot</a>, ранее известной как <a href="http://www.linuxbios.org/">LinuxBIOS</a>.</p>

<p>Резюме: крайне занимательное чтиво для занимающихся встраиваемыми системами, и вообще находящихся на стыке железа и софта.</p>

<p>И еще. Нельзя забывать о том, что книги надо не только иметь, но и читать.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Как рецензировали мой патч для Google Test]]></title>
    <link href="http://demin.ws/blog/russian/2009/02/03/how-googletest-authors-reviewed-my-patch/"/>
    <updated>2009-02-03T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/02/03/how-googletest-authors-reviewed-my-patch/</id>
    <content type="html"><![CDATA[<p>Я обожаю, когда кто-то рецензирует мой код. Профессиональное программирование столь многогранная область, что очень просто что-то упустить, а взляд со стороны помогает этого избежать. Если над проектом работает много людей, особенно разной квалификации, то рецензирование кода является прекрасным механизмом поддержания качества кода на должном уровне и одновременно обучения новичков, не херить в два приема наработанное годами, а впитать лучшее и сделать это лучшее еще лучше.</p>

<p>В процессе внесения мноего патча в Google Test Framework какой-то китаец просто извел меня своими придирками не только в фундаментальному качеству представленных мной unit-тестов, доказывающих правильность моих изменений, но и вплоть до знаков пунктуации в комментариях. Лишь раза с десятого, он сказал &ldquo;поехали!&rdquo;, и махнул рукой, как говорится. Патч то был размером строк в 50-60. По первости я просто бесился, что какой-то хрен указывает мне на мнимые &ldquo;недостатки&rdquo; моего &ldquo;гениального кода&rdquo;. Но когда в результате я оглянулся на то, что было изначально и на результат — я простил ему все.</p>

<p>В программировании, как в любой другой науке, чем дальше ты растешь и развиваешься, чем очевиднее становится факт наличия людей, гораздо более крутых в некоторых вопросах чем ты. И, как мне кажется, очень важно прислушиваться к советам, а особенно, претензиям, исходящих от них.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Функциональный деструктор в С++]]></title>
    <link href="http://demin.ws/blog/russian/2009/02/02/functional-destructor-in-cpp/"/>
    <updated>2009-02-02T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/02/02/functional-destructor-in-cpp/</id>
    <content type="html"><![CDATA[<p>В С++ крайне распространен прием использования класса <code>std::vector</code> для хранения указателей на размещенные в <a href="http://ru.wikipedia.org/wiki/%D0%9A%D1%83%D1%87%D0%B0_(%D0%BD%D0%B5%D1%80%D0%B0%D1%81%D0%BF%D1%80%D0%B5%D0%B4%D0%B5%D0%BB%D1%91%D0%BD%D0%BD%D0%B0%D1%8F_%D0%BF%D0%B0%D0%BC%D1%8F%D1%82%D1%8C)">куче</a> объекты.</p>

<pre class="hl">
<span class="hl kwc">class</span> Book <span class="hl opt">{</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl kwd">Book</span><span class="hl opt">(</span><span class="hl kwb">int</span> index<span class="hl opt">);</span>
<span class="hl opt">...</span>
<span class="hl opt">};</span>
<span class="hl opt">...</span>
std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span>Book <span class="hl opt">*&gt;</span> books<span class="hl opt">;</span>
<span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> <span class="hl num">10</span><span class="hl opt">; ++</span>i<span class="hl opt">)</span>
  books<span class="hl opt">.</span><span class="hl kwd">push_back</span><span class="hl opt">(</span><span class="hl kwa">new</span> <span class="hl kwd">Book</span><span class="hl opt">(</span>i<span class="hl opt">));</span>
</pre>

<p>Естественно, после использования память надо освободить. Обычно стандартный прием для этого таков:</p>

<pre class="hl">
<span class="hl kwa">for</span> <span class="hl opt">(</span>std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span>Book <span class="hl opt">*&gt;::</span>iterator i <span class="hl opt">=</span> books<span class="hl opt">.</span><span class="hl kwd">begin</span><span class="hl opt">();</span> i <span class="hl opt">!=</span> books<span class="hl opt">.</span><span class="hl kwd">end</span><span class="hl opt">(); ++</span>i<span class="hl opt">)</span>
  <span class="hl kwa">delete</span> <span class="hl opt">*</span>i<span class="hl opt">;</span>
</pre>

<p>В целом, с таким подходом все в порядке, разве что слегка веет от него излишней алгоритмической загруженностью. Он вынужден, навязан особенностями языка C++. Индексная переменная <code>i</code> здесь абсолютно неважна для цикла, она является чисто служебной. Все это, конечно, не так страшно, как использование оператора goto или статических переменных, но все равно хочется гармонии. И способ есть. Данный код можно переписать так:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;algorithm&gt;</span>
<span class="hl kwc">class</span> deleter <span class="hl opt">{</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl kwc">template</span> <span class="hl opt">&lt;</span>typename T<span class="hl opt">&gt;</span>
  <span class="hl kwb">void</span> <span class="hl kwc">operator</span><span class="hl opt">()(</span><span class="hl kwb">const</span> T<span class="hl opt">*</span> p<span class="hl opt">)</span> <span class="hl kwb">const</span> <span class="hl opt">{</span>
    <span class="hl kwa">delete</span> p<span class="hl opt">;</span>
  <span class="hl opt">}</span>
<span class="hl opt">};</span>
<span class="hl opt">...</span>
  std<span class="hl opt">::</span><span class="hl kwd">for_each</span><span class="hl opt">(</span>a<span class="hl opt">.</span><span class="hl kwd">begin</span><span class="hl opt">(),</span> a<span class="hl opt">.</span><span class="hl kwd">end</span><span class="hl opt">(),</span> <span class="hl kwd">deleter</span><span class="hl opt">());</span>
</pre>

<p>Данный код определяет класс-функтор, у которого перегруженный оператор <code>operator()</code> является шаблонным. Затем стандартный алгоритм <code>std::for_each()</code> вызывает этот оператор для каждого члена вектора.</p>

<p>Конечно, вы можете сказать, что мол битва за идею принуждает нас таскать за собой класс <code>deleter</code>, но тут аргумент простой — данный подход ближе к декларативному подходу в программировании, нежели к прямому алгоритмическому. В декларативном подходе вы стараетесь как можно больше логики перенести из ее явного программирования базовыми конструкциями типа условий, циклов и т.д. к ее выражению через определения (декларации) сущностей и их взаимосвязей. Декларативные конструкции проще дробить на независимые куски, а значит проще тестировать. Например, вы можете протестировать алгоритм <code>std::for_each</code> в изоляции, тем самым гарантируя его корректную работу сразу во всей программе, а вот протестировать явный цикл в изоляции вряд ли получится, так как цикл &ldquo;жестко вплетен&rdquo; в прочую логику программы. Максимум удастся проверить данный конкретный цикл как-то вручную, и если их программе много, проверять придется каждый из них.</p>

<p>Соглашусь, однако, что конкретно этот пример весьма тривиален и является в большинстве делом вкуса, нежели вопросом реального выигрыша простоте и тестируемости кода. Но сам прием весьма показателен в плане замены простейших алгоритмов высокоуровневыми сущностями. И еще, в защиту такого приему могу сказать, что например, вы можете переопределить алгоритм <code>std::for_each</code> на свой, который сможет на конкретно вашей платформе выполняться гораздо быстрее, или, например, ловить исключения работы с кучей и журналировать проблемы освобождения памяти. В случае же прямого использования цикла <code>for</code> вам придется переписать сам цикл. Хорошо, когда такое место одно в программе, а если их тысячи?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Статический аргумент функции putenv]]></title>
    <link href="http://demin.ws/blog/russian/2009/02/01/static-argument-of-putenv/"/>
    <updated>2009-02-01T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/02/01/static-argument-of-putenv/</id>
    <content type="html"><![CDATA[<p>В мире программирования UNIX есть стандартная библиотечная функция <code>putenv()</code>. Она устанавливает переменную окружения для текущего процесса. В основном функция полезна, когда ваш процесс вызывает из под себя другой процесс и передает ему какие-либо параметры через переменные окружения.</p>

<p>Прототип функции такой:</p>

<pre class="hl">
<span class="hl kwb">int</span> <span class="hl kwd">putenv</span><span class="hl opt">(</span><span class="hl kwb">char</span><span class="hl opt">*</span> string<span class="hl opt">);</span>
</pre>

<p>Казалось бы, все предельно просто и понятно — вызываешь функцию, она делает свое дело, если надо проверятся код ошибки, и все пучком.</p>

<p>Например:</p>

<pre class="hl">
<span class="hl kwd">putenv</span><span class="hl opt">(</span><span class="hl str">&quot;TESTVAR=testvalue&quot;</span><span class="hl opt">);</span>
</pre>

<p>Или так:</p>

<pre class="hl">
<span class="hl opt">...</span>
<span class="hl kwb">char</span> var<span class="hl opt">[</span><span class="hl num">1024</span><span class="hl opt">];</span>
<span class="hl opt">...</span>
<span class="hl kwd">strcpy</span><span class="hl opt">(</span>var<span class="hl opt">,</span> <span class="hl str">&quot;TESTVAR=&quot;</span><span class="hl opt">);</span>
<span class="hl kwd">strcat</span><span class="hl opt">(</span>var<span class="hl opt">,</span> value<span class="hl opt">);</span>
<span class="hl kwd">putenv</span><span class="hl opt">(</span>var<span class="hl opt">);</span>
<span class="hl opt">...</span>
</pre>

<p>Вроде похожие примеры, хотя между ними есть огромное &ldquo;но&rdquo;. Первый пример будет работать нормально, а вот второй пример может приводить к неверному значению установленной переменной или даже к падению программы с нарушением защиты памяти на некоторых платформах. Почему?</p>

<p>Отгадка кроется в том, что на некоторых операционных системах и версиях системной библиотеки libc значение параметра будет использоваться напрямую даже после возврата из функции. Другими словами, функция <code>putenv()</code> не копирует переданный ей параметр куда-либо. Если вы передадите в эту функцию буфер, размещенный в стеке (автоматическая переменная), то это прямой путь к серьезным ошибкам памяти, так в момент реального использования установленной переменной автоматический буфер может уже не существовать (функция, его создавшая, уже завершила работу и подчистила за собой стек). Отсюда вывод — указатель, передаваемый в функцию <code>putenv()</code>, всегда должен указывать на статические данные. Первый пример работает правильно, так как в С и C++ строковые константы размещены в статическом сегменте и постоянны во время всей жизни программы.</p>

<p>Ситуация усугубляется еще и тем, что разные версии системной библиотеки ведут себя по разному. Нет четкого правила: копировать значение буфера или нет. Я лично наступил на эти грабли, когда начал писать программу под виндами на Visual Studio, все работало. А вот при запуске на юниксах или под виндами, но использовании компилятора gcc из <a href="http://www.cygwin.com/">Cygwin</a>, все падало. Конечно, чтение документации все сразу прояснило, но вот осадочек остался. Просто использование буфера напрямую, без создания внутренней копии, как-то противоречит здравому смыслу, но&hellip; как сделало, так сделано.</p>

<p>Я набросал мини-тесты на всю эту тему.</p>

<p>Традиционно, для компиляции тестов нам нужна <a href="http://code.google.com/p/googletest/">Google Test Framework</a>. Как я уже <a href="http://demin.ws/blog/russian/2009/01/28/unit-testing-concurrent-threads/">писал</a>, вы можете скачать <a href="http://demin.ws/downloads/gtest-amalgamation-1.2.1.zip">мою модификацию</a>  этой библиотеки, которая сокращена до двух необходимых файлов <code>gtest/gtest.h</code> и <code>gtest-all.cc</code>.</p>

<p>Файл тестов (<code>putenv_unittest.cpp</code>):</p>

<pre class="hl">
<span class="hl ppc">#include &lt;gtest/gtest.h&gt;</span>
<span class="hl ppc">#include &lt;cstdlib&gt;</span>

<span class="hl slc">// Главная проверочная функция. Вызывает putenv() с указанным буфером</span>
<span class="hl slc">// (автоматическим или статическим), если надо перезатирает буфер, чтобы</span>
<span class="hl slc">// проверить тот ли это буфер, и после сверяет установленное значение</span>
<span class="hl slc">// с ожидаемым эталоном.</span>
<span class="hl kwb">void</span> <span class="hl kwd">checkPutEnv</span><span class="hl opt">(</span><span class="hl kwb">char</span><span class="hl opt">*</span> buf<span class="hl opt">,</span> <span class="hl kwb">bool</span> rewrite<span class="hl opt">) {</span>
  <span class="hl slc">// Эталон</span>
  <span class="hl kwb">const char</span><span class="hl opt">*</span> etalon <span class="hl opt">=</span> <span class="hl str">&quot;TESTVAR=testvalue&quot;</span><span class="hl opt">;</span>
  <span class="hl slc">// Копируем эталон в буфер</span>
  std<span class="hl opt">::</span><span class="hl kwd">strcpy</span><span class="hl opt">(</span>buf<span class="hl opt">,</span> etalon<span class="hl opt">);</span>
  <span class="hl slc">// Устанавливаем переменную</span>
  <span class="hl kwd">putenv</span><span class="hl opt">(</span>buf<span class="hl opt">);</span>
  <span class="hl slc">// Если того требуют условия теста, то перезатираем буфер</span>
  <span class="hl slc">// фальшивым значением.</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>rewrite<span class="hl opt">)</span>
    std<span class="hl opt">::</span><span class="hl kwd">strcpy</span><span class="hl opt">(</span>buf<span class="hl opt">,</span> <span class="hl str">&quot;TESTVAR=novalue&quot;</span><span class="hl opt">);</span>
  <span class="hl slc">// Копируем значение системной переменной.</span>
  std<span class="hl opt">::</span>string actual <span class="hl opt">=</span> <span class="hl kwd">getenv</span><span class="hl opt">(</span><span class="hl str">&quot;TESTVAR&quot;</span><span class="hl opt">);</span>
  <span class="hl slc">// Сверяем результаты</span>
  <span class="hl kwd">EXPECT_EQ</span><span class="hl opt">(</span>std<span class="hl opt">::</span><span class="hl kwd">string</span><span class="hl opt">(</span><span class="hl str">&quot;testvalue&quot;</span><span class="hl opt">),</span> actual<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl slc">// Тест с использованием статического буфера без перезатирания.</span>
<span class="hl slc">// Это должно работать стопудово на все платформах, так как</span>
<span class="hl slc">// используется статический буфер, и мы его не перезатираем.</span>
<span class="hl kwd">TEST</span><span class="hl opt">(</span>PutEnv<span class="hl opt">,</span> UsingStaticVariable<span class="hl opt">) {</span>
 <span class="hl kwb">static char</span> buf<span class="hl opt">[</span><span class="hl num">1024</span><span class="hl opt">];</span>
 <span class="hl kwd">checkPutEnv</span><span class="hl opt">(</span>buf<span class="hl opt">,</span> <span class="hl kwa">false</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl slc">// Тест с использованием статического буфера с перезатиранием.</span>
<span class="hl slc">// Данный тест будет рабоать только на системах, которые копируют</span>
<span class="hl slc">// аргумент putenv()'а во внутренний буфер. То есть перезатирание</span>
<span class="hl slc">// нами буфера не приведет к изменению значения установленной</span>
<span class="hl slc">// переменной.</span>
<span class="hl kwd">TEST</span><span class="hl opt">(</span>PutEnv<span class="hl opt">,</span> UsingStaticVariableRewriteBuffer<span class="hl opt">) {</span>
 <span class="hl kwb">static char</span> buf<span class="hl opt">[</span><span class="hl num">1024</span><span class="hl opt">];</span>
 <span class="hl kwd">checkPutEnv</span><span class="hl opt">(</span>buf<span class="hl opt">,</span> <span class="hl kwa">true</span><span class="hl opt">);</span>
<span class="hl opt">}</span>
</pre>

<p>Файл головной программы запуска тестов (<code>runner.cc</code>):</p>

<pre class="hl">
<span class="hl ppc">#include</span> <span class="hl pps">&quot;gtest/gtest.h&quot;</span><span class="hl ppc"></span>
<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[]) {</span>
 testing<span class="hl opt">::</span><span class="hl kwd">InitGoogleTest</span><span class="hl opt">(&amp;</span>argc<span class="hl opt">,</span> argv<span class="hl opt">);</span>
 <span class="hl kwa">return</span> <span class="hl kwd">RUN_ALL_TESTS</span><span class="hl opt">();</span>
<span class="hl opt">}</span>
</pre>

<p>Сначала пробуем в Visual Studio.</p>

<p>Компилируем:</p>

<pre><code>cl /EHsc /I. /Feputenv_unittest_vs2008.exe runner.cpp putenv_unittest.cpp gtest\gtest-all.cc
</code></pre>

<p>Запускаем putenv_unittest_vs2008.exe&rsquo;:</p>

<pre><code>[==========] Running 2 tests from 1 test case.
[----------] Global test environment set-up.
[----------] 2 tests from PutEnv
[ RUN      ] PutEnv.UsingStaticVariable
[       OK ] PutEnv.UsingStaticVariable
[ RUN      ] PutEnv.UsingStaticVariableRewriteBuffer
[       OK ] PutEnv.UsingStaticVariableRewriteBuffer
[----------] Global test environment tear-down
[==========] 2 tests from 1 test case ran.
[  PASSED  ] 2 tests.
</code></pre>

<p>Видно, что все тесты работают, а это значит, что микрософтовский <code>putenv()</code> копирует значение аргумента во внутренний буфер, и значит можно передавать в него указатель на нестатический блок памяти.</p>

<p>Теперь пробуем тоже под виндами, но через Cygwin.</p>

<p>Компилируем:</p>

<pre><code>g++ -I. -o putenv_unittest_cygwin.exe putenv_unittest.cpp runner.cpp gtest/gtest-all.cc
</code></pre>

<p>Запускаем:</p>

<pre><code>[==========] Running 2 tests from 1 test case.
[----------] Global test environment set-up.
[----------] 2 tests from PutEnv
[ RUN      ] PutEnv.UsingStaticVariable
[       OK ] PutEnv.UsingStaticVariable
[ RUN      ] PutEnv.UsingStaticVariableRewriteBuffer
putenv_unittest.cpp:15: Failure
Value of: actual
  Actual: &quot;novalue&quot;
Expected: std::string(&quot;testvalue&quot;)
Which is: &quot;testvalue&quot;
[  FAILED  ] PutEnv.UsingStaticVariableRewriteBuffer
[----------] Global test environment tear-down
[==========] 2 tests from 1 test case ran.
[  PASSED  ] 1 test.
[  FAILED  ] 1 test, listed below:
[  FAILED  ] PutEnv.UsingStaticVariableRewriteBuffer

 1 FAILED TEST
</code></pre>

<p>Видно, что тест <code>PutEnv.UsingStaticVariableRewriteBuffer</code>, ожидая получить значение переменной <code>testvalue</code>, получил <code>novalue</code>. Ясно, мы принудительно перезаписали оригинальное значение переменной прямо в буфере после вызова <code>putenv()</code>. Вывод: Cygwin&rsquo;овский <code>putenv()</code> не копирует значение аргумента куда-либо и, значение буфера используется напрямую, поэтому тут надо передавать указатель обязательно на статический блок памяти, или хотя бы такой блок, которые не исчезнет на момент обращения к переменной.</p>

<p>Резюме.</p>

<p>Будьте осторожны при использовании функции <code>putenv()</code>, так как на некоторых платформах ее аргумент не копируется во внутренний буфер, как бы это ни подсказывала вам очевидная логика, а используется прямо из вашего буфера.</p>

<p>Другие посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2009/01/28/unit-testing-concurrent-threads/">Unit-тестирование для параллельных потоков</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Кто быстрее: vector<bool> или vector<int>]]></title>
    <link href="http://demin.ws/blog/russian/2009/02/01/what-is-faster-vector-int-or-bool/"/>
    <updated>2009-02-01T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/02/01/what-is-faster-vector-int-or-bool/</id>
    <content type="html"><![CDATA[<p>Я много раз слышал, что стандартный класс <code>std::vector</code>, специализированный для хранения типа <code>bool</code>, то есть <code>std::vector&lt;bool&gt;</code>, который по задумке создателей должен работать заметно быстрее своего смыслового аналога <code>std::vector&lt;int&gt;</code>, на самом деле нет так и хорош. Но тут, как говориться, бабушка на двое сказала, так как с одной стороны операция с базовым типом процессора <code>int</code> обычно является почти самой быстрой атомарной операцией, а другой стороны тип <code>bool</code> может быть упакован в тот же &ldquo;быстрый&rdquo; <code>int</code> пачкой по 32 или 64 штуки за раз, и можно оперировать сразу группой значений. В общем, целое поле для оптимизации.</p>

<p>Я люблю все проверять лично, так что привожу результаты своей проверки.</p>

<p>Итак, объект — программа нахождения простых чисел <a href="http://ru.wikipedia.org/wiki/%D0%A0%D0%B5%D1%88%D0%B5%D1%82%D0%BE_%D0%AD%D1%80%D0%B0%D1%82%D0%BE%D1%81%D1%84%D0%B5%D0%BD%D0%B0">Решето Эратосфена</a>. Классический алгоритм для проверки на вшивость всяких оптимизаторов. На оригинальность и оптимальность кода не претендую.</p>

<p><code>era.cpp</code>:</p>

<pre class="hl">
<span class="hl ppc">#include &lt;iostream&gt;</span>
<span class="hl ppc">#include &lt;vector&gt;</span>
<span class="hl ppc">#include &lt;cmath&gt;</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[]) {</span>
  <span class="hl slc">// Получаем предельное значение эксперимента из командной</span>
  <span class="hl slc">// строки. По умолчанию - 100. Это основной, влияющий</span>
  <span class="hl slc">// на время работы алгоритма, параметр.</span>
  <span class="hl kwb">long</span> n <span class="hl opt">=</span> argc <span class="hl opt">&gt;</span> <span class="hl num">1</span> ? std<span class="hl opt">::</span><span class="hl kwd">atoi</span><span class="hl opt">(</span>argv<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]) :</span> <span class="hl num">100</span><span class="hl opt">;</span>
  <span class="hl slc">// Корень квадратный из максимума, округленный до большего</span>
  <span class="hl slc">// целого.</span>
  <span class="hl kwb">long</span> sqrt_n <span class="hl opt">=</span> <span class="hl kwa">static_cast</span><span class="hl opt">&lt;</span><span class="hl kwb">long</span><span class="hl opt">&gt;(</span>std<span class="hl opt">::</span><span class="hl kwd">sqrt</span><span class="hl opt">(</span><span class="hl kwa">static_cast</span><span class="hl opt">&lt;</span><span class="hl kwb">double</span><span class="hl opt">&gt;(</span>n<span class="hl opt">))) +</span> <span class="hl num">1</span><span class="hl opt">;</span>

  <span class="hl slc">// Массив-вектор для хранения значений. Это центр внимания нашего</span>
  <span class="hl slc">// эксперимента. Макрос TYPE задает тип элементов вектора и должен</span>
  <span class="hl slc">// быть задан в опциях при компиляции: -DTYPE=int или</span>
  <span class="hl slc">// -DTYPE=bool соответственно.</span>
  std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span>TYPE<span class="hl opt">&gt;</span> <span class="hl kwd">S</span><span class="hl opt">(</span>n<span class="hl opt">,</span> <span class="hl kwa">true</span><span class="hl opt">);</span>

  <span class="hl slc">// Собственно, решето Эратосфена.</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">2</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> sqrt_n<span class="hl opt">; ++</span>i<span class="hl opt">)</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>S<span class="hl opt">[</span>i<span class="hl opt">])</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> j <span class="hl opt">=</span> i<span class="hl opt">*</span>i<span class="hl opt">;</span> j <span class="hl opt">&lt;</span> n<span class="hl opt">;</span> j <span class="hl opt">+=</span> i<span class="hl opt">)</span>
        S<span class="hl opt">[</span>j<span class="hl opt">] =</span> <span class="hl kwa">false</span><span class="hl opt">;</span>

  <span class="hl slc">// Подсчет количество найденных простых чисел. Делаем это для</span>
  <span class="hl slc">// самопроверки.</span>
  <span class="hl kwb">int</span> count <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">2</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> n<span class="hl opt">; ++</span>i<span class="hl opt">)</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>S<span class="hl opt">[</span>i<span class="hl opt">])</span>
      count<span class="hl opt">++;</span>

  <span class="hl slc">// Печатаем найденное количество.</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> count <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>

  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Эксперимент я проводил на ноутбуке с процессором Core 2 1ГГц. Для конкретно этой машины я выбрал предел поиска в 10000000. При этом значении времена работы программы с одной стороны небольшие (удобно для повторения замеров), но другой стороны — весьма показательные.</p>

<p>Теперь компилятор. В забеге принимали участие:</p>

<ul>
<li>GNU g++ 3.4.4 (cygwin)</li>
<li>Borland/Codegear bcc32.exe 5.93 (Codegear Studio 2007)</li>
<li>Microsoft cl.exe 14.00 (Visual Studio 2005)</li>
<li>Microsoft cl.exe 15.00 (Visual Studio 2008)</li>
</ul>

<p>Операционная система Windows XP SP3.</p>

<p>Каждый компилятор получил свои максимально полные опции оптимизации на скорость, так как глупо говорить об эффективности программы на С++ без включенной оптимизации компилятора (ни тебе inline-функций, ни использования регистров процессора и т.д.) Но для целостности картины результаты без оптимизации тоже приведены (и будет позже ясно почему).</p>

<p>Для компилирования примера я сделал скрипт, которой компилирует исходную программу каждым компилятором по очереди с использованием типа <code>bool</code> и <code>int</code>, с оптимизацией и без. Итого по четыре варианта на каждый компилятор.</p>

<p><code>build.cmd</code>:</p>

<pre class="hl">
bcc32 <span class="hl opt">-</span>DTYPE<span class="hl opt">=</span>bool <span class="hl opt">-</span>eera<span class="hl opt">-</span>bcc32<span class="hl opt">-</span>bool.exe era.cpp
bcc32 <span class="hl opt">-</span>DTYPE<span class="hl opt">=</span>int <span class="hl opt">-</span>eera<span class="hl opt">-</span>bcc32<span class="hl opt">-</span>int.exe era.cpp
bcc32 <span class="hl opt">-</span>O2 <span class="hl opt">-</span>DTYPE<span class="hl opt">=</span>bool <span class="hl opt">-</span>eera<span class="hl opt">-</span>bcc32<span class="hl opt">-</span>bool<span class="hl opt">-</span>opt.exe era.cpp
bcc32 <span class="hl opt">-</span>O2 <span class="hl opt">-</span>DTYPE<span class="hl opt">=</span>int <span class="hl opt">-</span>eera<span class="hl opt">-</span>bcc32<span class="hl opt">-</span>int<span class="hl opt">-</span>opt.exe era.cpp

g<span class="hl opt">++ -</span>DTYPE<span class="hl opt">=</span>bool <span class="hl opt">-</span>o era<span class="hl opt">-</span>g<span class="hl opt">++-</span>bool.exe era.cpp
g<span class="hl opt">++ -</span>DTYPE<span class="hl opt">=</span>int <span class="hl opt">-</span>o era<span class="hl opt">-</span>g<span class="hl opt">++-</span>int.exe era.cpp
g<span class="hl opt">++ -</span>O3 <span class="hl opt">-</span>funroll<span class="hl opt">-</span>all<span class="hl opt">-</span>loops <span class="hl opt">-</span>fomit<span class="hl opt">-</span>frame<span class="hl opt">-</span>pointer <span class="hl opt">-</span>mtune<span class="hl opt">=</span>nocona <span class="hl opt">-</span>DTYPE<span class="hl opt">=</span>bool <span class="hl opt">-</span>o era<span class="hl opt">-</span>g<span class="hl opt">++-</span>bool<span class="hl opt">-</span>opt.exe era.cpp
g<span class="hl opt">++ -</span>O3 <span class="hl opt">-</span>funroll<span class="hl opt">-</span>all<span class="hl opt">-</span>loops <span class="hl opt">-</span>fomit<span class="hl opt">-</span>frame<span class="hl opt">-</span>pointer <span class="hl opt">-</span>mtune<span class="hl opt">=</span>nocona <span class="hl opt">-</span>DTYPE<span class="hl opt">=</span>int <span class="hl opt">-</span>o era<span class="hl opt">-</span>g<span class="hl opt">++-</span>int<span class="hl opt">-</span>opt.exe era.cpp

call cl2008.cmd
cl <span class="hl opt">/</span>EHsc <span class="hl opt">/</span>DTYPE<span class="hl opt">=</span>bool <span class="hl opt">/</span>Feera<span class="hl opt">-</span>cl2008<span class="hl opt">-</span>bool.exe era.cpp
cl <span class="hl opt">/</span>EHsc <span class="hl opt">/</span>DTYPE<span class="hl opt">=</span>int <span class="hl opt">/</span>Feera<span class="hl opt">-</span>cl2008<span class="hl opt">-</span>int.exe era.cpp
cl <span class="hl opt">/</span>EHsc <span class="hl opt">/</span>arch<span class="hl opt">:</span>SSE2 <span class="hl opt">/</span>O2 <span class="hl opt">-</span>DTYPE<span class="hl opt">=</span>bool <span class="hl opt">/</span>Feera<span class="hl opt">-</span>cl2008<span class="hl opt">-</span>bool<span class="hl opt">-</span>opt.exe era.cpp
cl <span class="hl opt">/</span>EHsc <span class="hl opt">/</span>arch<span class="hl opt">:</span>SSE2 <span class="hl opt">/</span>O2 <span class="hl opt">-</span>DTYPE<span class="hl opt">=</span>int <span class="hl opt">/</span>Feera<span class="hl opt">-</span>cl2008<span class="hl opt">-</span>int<span class="hl opt">-</span>opt.exe era.cpp

call cl2005.cmd
cl <span class="hl opt">/</span>EHsc <span class="hl opt">/</span>DTYPE<span class="hl opt">=</span>bool <span class="hl opt">/</span>Feera<span class="hl opt">-</span>cl2005<span class="hl opt">-</span>bool.exe era.cpp
cl <span class="hl opt">/</span>EHsc <span class="hl opt">/</span>DTYPE<span class="hl opt">=</span>int <span class="hl opt">/</span>Feera<span class="hl opt">-</span>cl2005<span class="hl opt">-</span>int.exe era.cpp
cl <span class="hl opt">/</span>EHsc <span class="hl opt">/</span>arch<span class="hl opt">:</span>SSE2 <span class="hl opt">/</span>O2 <span class="hl opt">-</span>DTYPE<span class="hl opt">=</span>bool <span class="hl opt">/</span>Feera<span class="hl opt">-</span>cl2005<span class="hl opt">-</span>bool<span class="hl opt">-</span>opt.exe era.cpp
cl <span class="hl opt">/</span>EHsc <span class="hl opt">/</span>arch<span class="hl opt">:</span>SSE2 <span class="hl opt">/</span>O2 <span class="hl opt">-</span>DTYPE<span class="hl opt">=</span>int <span class="hl opt">/</span>Feera<span class="hl opt">-</span>cl2005<span class="hl opt">-</span>int<span class="hl opt">-</span>opt.exe era.cpp
</pre>

<p>При скрипты <code>cl2005.cmd</code> и <code>cl2008.cmd</code> я уже <a href="http://demin.ws/blog/russian/2009/01/29/scripts-for-visual-studio-command-line/">писал</a>.</p>

<p>После компиляции должны получиться 16 исполняемых файлов с сообразными именами.</p>

<p>Далее, запуск. Для этого можно использовать следующий скрипт (<code>run.cmd</code>).</p>

<pre class="hl">
ntimer <span class="hl opt">-</span><span class="hl num">1</span> era<span class="hl opt">-</span>cl2005<span class="hl opt">-</span>bool.exe <span class="hl num">10000000</span>
ntimer <span class="hl opt">-</span><span class="hl num">1</span> era<span class="hl opt">-</span>cl2005<span class="hl opt">-</span>int.exe <span class="hl num">10000000</span>
ntimer <span class="hl opt">-</span><span class="hl num">1</span> era<span class="hl opt">-</span>cl2005<span class="hl opt">-</span>bool<span class="hl opt">-</span>opt.exe <span class="hl num">10000000</span>
ntimer <span class="hl opt">-</span><span class="hl num">1</span> era<span class="hl opt">-</span>cl2005<span class="hl opt">-</span>int<span class="hl opt">-</span>opt.exe <span class="hl num">10000000</span>

ntimer <span class="hl opt">-</span><span class="hl num">1</span> era<span class="hl opt">-</span>cl2008<span class="hl opt">-</span>bool.exe <span class="hl num">10000000</span>
ntimer <span class="hl opt">-</span><span class="hl num">1</span> era<span class="hl opt">-</span>cl2008<span class="hl opt">-</span>int.exe <span class="hl num">10000000</span>
ntimer <span class="hl opt">-</span><span class="hl num">1</span> era<span class="hl opt">-</span>cl2008<span class="hl opt">-</span>bool<span class="hl opt">-</span>opt.exe <span class="hl num">10000000</span>
ntimer <span class="hl opt">-</span><span class="hl num">1</span> era<span class="hl opt">-</span>cl2008<span class="hl opt">-</span>int<span class="hl opt">-</span>opt.exe <span class="hl num">10000000</span>

ntimer <span class="hl opt">-</span><span class="hl num">1</span> era<span class="hl opt">-</span>bcc32<span class="hl opt">-</span>bool.exe <span class="hl num">10000000</span>
ntimer <span class="hl opt">-</span><span class="hl num">1</span> era<span class="hl opt">-</span>bcc32<span class="hl opt">-</span>int.exe <span class="hl num">10000000</span>
ntimer <span class="hl opt">-</span><span class="hl num">1</span> era<span class="hl opt">-</span>bcc32<span class="hl opt">-</span>bool<span class="hl opt">-</span>opt.exe <span class="hl num">10000000</span>
ntimer <span class="hl opt">-</span><span class="hl num">1</span> era<span class="hl opt">-</span>bcc32<span class="hl opt">-</span>int<span class="hl opt">-</span>opt.exe <span class="hl num">10000000</span>

ntimer <span class="hl opt">-</span><span class="hl num">1</span> era<span class="hl opt">-</span>g<span class="hl opt">++-</span>bool.exe <span class="hl num">10000000</span>
ntimer <span class="hl opt">-</span><span class="hl num">1</span> era<span class="hl opt">-</span>g<span class="hl opt">++-</span>int.exe <span class="hl num">10000000</span>
ntimer <span class="hl opt">-</span><span class="hl num">1</span> era<span class="hl opt">-</span>g<span class="hl opt">++-</span>bool<span class="hl opt">-</span>opt.exe <span class="hl num">10000000</span>
ntimer <span class="hl opt">-</span><span class="hl num">1</span> era<span class="hl opt">-</span>g<span class="hl opt">++-</span>int<span class="hl opt">-</span>opt.exe <span class="hl num">10000000</span>
</pre>

<p>Для измерения времени работы я использовал программу <a href="http://demin.ws/downloads/ntimer.zip">ntimer</a>. Ее нужно скачать, распаковать и положить <code>ntimer.exe</code> в текущий каталог. Будучи запущенной с ключом &ldquo;-1&rdquo; эта программа печатает времена в одну строку. Нас интересует самое первое печатаемой ей время.</p>

<p>Барабанная дробь! Запускаем&hellip;</p>

<p>Таблица с временами работы (по порядку):</p>

<pre><code>Компилятор             Версия Тип элемента Оптимизация Время (сек.)
---------------------- ------ ------------ ----------- ------------
Visual Studio 2005     14.00  bool         Выкл        23.750
Visual Studio 2005     14.00   int         Выкл         1.750
Visual Studio 2005     14.00  bool          Вкл         1.171
Visual Studio 2005     14.00   int          Вкл         1.312
Visual Studio 2008     15.00  bool         Выкл        23.062
Visual Studio 2008     15.00   int         Выкл         1.703
Visual Studio 2008     14.00  bool          Вкл         2.390
Visual Studio 2008     14.00   int          Вкл         1.312
Borland/Codegear 2007   5.93  bool         Выкл         8.375
Borland/Codegear 2007   5.93   int         Выкл         1.296
Borland/Codegear 2007   5.93  bool          Вкл         8.156
Borland/Codegear 2007   5.93   int          Вкл         1.328
gcc (cygwin)           3.4.4  bool         Выкл         4.640
gcc (cygwin)           3.4.4   int         Выкл         3.109
gcc (cygwin)           3.4.4  bool          Вкл         0.984
gcc (cygwin)           3.4.4   int          Вкл         1.343
</code></pre>

<p>А теперь в отсортированном виде по возрастанию времени:</p>

<pre><code>Компилятор             Версия Тип элемента Оптимизация Время (сек.)
---------------------- ------ ------------ ----------- ------------
gcc (cygwin)           3.4.4  bool          Вкл         0.984
Visual Studio 2005     14.00  bool          Вкл         1.171
Borland/Codegear 2007   5.93   int         Выкл         1.296
Visual Studio 2005     14.00   int          Вкл         1.312
Visual Studio 2008     14.00   int          Вкл         1.312
Borland/Codegear 2007   5.93   int          Вкл         1.328
gcc (cygwin)           3.4.4   int          Вкл         1.343
Visual Studio 2008     15.00   int         Выкл         1.703
Visual Studio 2005     14.00   int         Выкл         1.750
Visual Studio 2008     14.00  bool          Вкл         2.390
gcc (cygwin)           3.4.4   int         Выкл         3.109
gcc (cygwin)           3.4.4  bool         Выкл         4.640
Borland/Codegear 2007   5.93  bool          Вкл         8.156
Borland/Codegear 2007   5.93  bool         Выкл         8.375
Visual Studio 2008     15.00  bool         Выкл        23.062
Visual Studio 2005     14.00  bool         Выкл        23.75
</code></pre>

<p>Итак, на первом месте <code>gcc</code> в режиме <code>bool</code> с оптимизацией. На втором месте Visual Studio снова в режиме <code>bool</code> и оптимизацией. Интересно выступил борландовый компилятор, получив третье место, причем без оптимизации. Так как априори борландовый <code>bcc32.exe</code> считается весьма посредственным компилятором в плане качества кода и оптимизатора, то полученное им третье место весьма и весьма странно.</p>

<p>Конечно, пытливый читатель сразу заметит, что я как-то очень лихо проскочил один очень важный вопрос, а именно — версию STL. Не могу поручиться, что каждый из этих компиляторов поставляется с абсолютно неизменной и, как принято считать, &ldquo;стандартной&rdquo; версией этой библиотеки. Каждая фирма что-то меняет всегда под себя.</p>

<p>В итоге, я так и не получил однозначного ответа на изначальный вопрос — пользоваться ли <code>std::vector&lt;int&gt;</code> вместо <code>std::vector&lt;bool&gt;</code> или нет. Слишком много побочных факторов. Поэтому я бы посоветовал, если вы встали перед такой же дилеммой в вашем проекте, провести эксперимент на месте с вашим конкретным компилятором, вашей версией STL, на вашей конкретной платформе и т.д., то есть с учетом всех ваших факторов. Можно использовать приведенные мной программы и скрипты. Если у вас будут интересные и неоднозначные результаты, пишите.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Миллисекундный таймер для Windows и UNIX]]></title>
    <link href="http://demin.ws/blog/russian/2009/01/29/milliseconds-timer-for-windows-and-unix/"/>
    <updated>2009-01-29T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/01/29/milliseconds-timer-for-windows-and-unix/</id>
    <content type="html"><![CDATA[<p>Очень часто в программе удобно иметь возможность засекать и мерить интервалы времени. Стандартная функция <code>time()</code> конечно хороша своей переносимостью, но она работает с секундами, а хочется что-то более быстрое. Микросекунды - это уже тоже перебор. А вот миллисекунды - самое оно.</p>

<p>Итак, задача: сделать простой и переносимый класс C++ для работы с интервалами времени в миллисекундах. Должно работать в Windows и UNIX.</p>

<p>Я придумал вот такой интерфейс для класса:</p>

<pre class="hl">
<span class="hl kwc">class</span> PreciseTimer <span class="hl opt">{</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl slc">// Тип для работы с тиками таймера. По сути это целое в 64 бита,</span>
  <span class="hl slc">// но конкретное имя рабочего типа будет зависеть от платформы.</span>
  <span class="hl kwc">typedef</span> s_int_64 Counter<span class="hl opt">;</span>

  <span class="hl slc">// Функция получение текущего значения миллисекундного таймера.</span>
  <span class="hl slc">// Само по себе это число особого смысла не имеет, так как оно</span>
  <span class="hl slc">// ни к чему не привязано, а вот разница двух таких чисел как </span>
  <span class="hl slc">// раз используется для замеров интервалов времени.</span>
  <span class="hl slc">// Функция возвращает 0 под Windows, если не удается получить</span>
  <span class="hl slc">// значение системного таймера.</span>
  Counter <span class="hl kwd">millisec</span><span class="hl opt">();</span>

  <span class="hl slc">// Задержка на указанное число миллисекунд. Необходимо учитывать,</span>
  <span class="hl slc">// что в UNIX системах данная функция может быть прервана</span>
  <span class="hl slc">// системым сигналом (signal). В этом случае задержка может быть</span>
  <span class="hl slc">// меньше, чем ожидалось.</span>
  <span class="hl kwb">static void</span> <span class="hl kwd">sleepMs</span><span class="hl opt">(</span><span class="hl kwb">int</span> ms<span class="hl opt">);</span>

  <span class="hl slc">// Функция &quot;отметки&quot; текущего момента времени.</span>
  <span class="hl slc">// Добавляет текущее время в очередь отметок.</span>
  <span class="hl kwb">void</span> <span class="hl kwd">mark</span><span class="hl opt">();</span>

  <span class="hl slc">// Функция получения времени, прошедшего с последней отметки</span>
  <span class="hl slc">// в функции mark(). Последняя отметка вынимается из очереди</span>
  <span class="hl slc">// и вычитается из текущего значения таймера. Эта разница и</span>
  <span class="hl slc">// есть результат функции. Если очередь отметок пуста (никто</span>
  <span class="hl slc">// не вызывал mark() до этого), то возвращается -1.</span>
  Counter <span class="hl kwd">release</span><span class="hl opt">();</span>

  <span class="hl slc">// Парные вызовы mark()/release() могут быть вложенными.</span>
  <span class="hl slc">//</span>
  <span class="hl slc">// Примерная техника работы с классом:</span>
  <span class="hl slc">// ...</span>
  <span class="hl slc">// PreTimer timer;</span>
  <span class="hl slc">// ...</span>
  <span class="hl slc">// timer.mark();</span>
  <span class="hl slc">// ...что-то делаем тут (1)</span>
  <span class="hl slc">// timer.mark();</span>
  <span class="hl slc">// ...что-то еще делаем тут (2)</span>
  <span class="hl slc">// /* получаем продолжительность дела (2) */</span>
  <span class="hl slc">// t1 = timer.release(); </span>
  <span class="hl slc">// /* получаем суммарную продолжительность дел (1) и (2) */</span>
  <span class="hl slc">// t2 = timer.release();</span>
  <span class="hl slc">// /* А t3 уже равно -1, так как очередь пуста, так как этот</span>
  <span class="hl slc">//  * вызов release() третий в счету, а вызовов mark() было</span>
  <span class="hl slc">//  * всего два */</span>
  <span class="hl slc">// t3 = timer.release();</span>
<span class="hl opt">}</span>
</pre>

<p>Реалиазация вышла довольно простая. Всего один файл <code>pretimer.h</code> (без .cpp) без внешних нестандартных зависимостей.</p>

<p><code>pretimer.h</code>:</p>

<pre class="hl">
<span class="hl ppc">#ifndef EXT_PRETIMER_H</span>
<span class="hl ppc">#define EXT_PRETIMER_H</span>

<span class="hl ppc">#include &lt;stack&gt;</span>

<span class="hl ppc">#ifdef WIN32</span>
<span class="hl ppc">#include &lt;windows.h&gt;</span>
<span class="hl ppc">#else</span>
<span class="hl ppc">#include &lt;sys/time.h&gt;</span>
<span class="hl ppc">#include &lt;unistd.h&gt;</span>    <span class="hl slc">// usleep()</span>
<span class="hl ppc"></span><span class="hl ppc">#endif</span>

<span class="hl slc">// namespace, традиционно, с именем &quot;ext&quot;, так что измените под ваши</span>
<span class="hl slc">// привычки именования, если надо.</span>
<span class="hl kwa">namespace</span> ext <span class="hl opt">{</span>

<span class="hl kwc">class</span> PreciseTimer <span class="hl opt">{</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
<span class="hl ppc">#ifdef WIN32</span>
  <span class="hl slc">// Тип int64 для Windows</span>
  <span class="hl kwc">typedef</span> LONGLONG Counter<span class="hl opt">;</span>
<span class="hl ppc">#else</span>
  <span class="hl slc">// Тип int64 для UNIX</span>
  <span class="hl kwc">typedef</span> <span class="hl kwb">long long</span> Counter<span class="hl opt">;</span>
<span class="hl ppc">#endif</span>
  <span class="hl kwd">PreciseTimer</span><span class="hl opt">();</span>

  Counter <span class="hl kwd">millisec</span><span class="hl opt">();</span>

  <span class="hl kwb">void</span> <span class="hl kwd">mark</span><span class="hl opt">();</span>
  Counter <span class="hl kwd">release</span><span class="hl opt">();</span>

  <span class="hl kwb">static void</span> <span class="hl kwd">sleepMs</span><span class="hl opt">(</span><span class="hl kwb">int</span> ms<span class="hl opt">);</span>
<span class="hl kwc">private</span><span class="hl opt">:</span>
  <span class="hl slc">// Тип стека для хранения отметок времени.</span>
  <span class="hl kwc">typedef</span> std<span class="hl opt">::</span>stack<span class="hl opt">&lt;</span> Counter <span class="hl opt">&gt;</span> Counters<span class="hl opt">;</span>

  <span class="hl slc">// Стек для хранения отметок времени.</span>
  Counters __counters<span class="hl opt">;</span>

<span class="hl ppc">#ifdef WIN32</span>
  <span class="hl slc">// Для Windows надо хранить системную частоту таймера.</span>
  LARGE_INTEGER __freq<span class="hl opt">;</span>
<span class="hl ppc">#endif</span>
<span class="hl opt">};</span>

<span class="hl kwb">void</span> PreciseTimer<span class="hl opt">::</span><span class="hl kwd">mark</span><span class="hl opt">() {</span>
  __counters<span class="hl opt">.</span><span class="hl kwd">push</span><span class="hl opt">(</span><span class="hl kwd">millisec</span><span class="hl opt">());</span>
<span class="hl opt">}</span>

PreciseTimer<span class="hl opt">::</span>Counter PreciseTimer<span class="hl opt">::</span><span class="hl kwd">release</span><span class="hl opt">() {</span>
  <span class="hl kwa">if</span><span class="hl opt">(</span> __counters<span class="hl opt">.</span><span class="hl kwd">empty</span><span class="hl opt">() )</span> <span class="hl kwa">return</span> <span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">;</span>
  Counter val <span class="hl opt">=</span> <span class="hl kwd">millisec</span><span class="hl opt">() -</span> __counters<span class="hl opt">.</span><span class="hl kwd">top</span><span class="hl opt">();</span>
  __counters<span class="hl opt">.</span><span class="hl kwd">pop</span><span class="hl opt">();</span>
  <span class="hl kwa">return</span> val<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl ppc">#ifdef WIN32</span>

PreciseTimer<span class="hl opt">::</span><span class="hl kwd">PreciseTimer</span><span class="hl opt">() {</span>
  <span class="hl slc">// Для Windows в конструкторе получаем системную частоту таймера</span>
  <span class="hl slc">// (количество тиков в секунду).</span>
  <span class="hl kwa">if</span> <span class="hl opt">(!</span><span class="hl kwd">QueryPerformanceFrequency</span><span class="hl opt">(&amp;</span>__freq<span class="hl opt">))</span>
    __freq<span class="hl opt">.</span>QuadPart <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

PreciseTimer<span class="hl opt">::</span>Counter PreciseTimer<span class="hl opt">::</span><span class="hl kwd">millisec</span><span class="hl opt">() {</span>
  LARGE_INTEGER current<span class="hl opt">;</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>__freq<span class="hl opt">.</span>QuadPart <span class="hl opt">==</span> <span class="hl num">0</span> <span class="hl opt">|| !</span><span class="hl kwd">QueryPerformanceCounter</span><span class="hl opt">(</span>¤t<span class="hl opt">))</span> 
    <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
  <span class="hl slc">// Пересчитываем количество системных тиков в миллисекунды.</span>
  <span class="hl kwa">return</span> current<span class="hl opt">.</span>QuadPart <span class="hl opt">/ (</span>__freq<span class="hl opt">.</span>QuadPart <span class="hl opt">/</span> <span class="hl num">1000</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span> PreciseTimer<span class="hl opt">::</span><span class="hl kwd">sleepMs</span><span class="hl opt">(</span><span class="hl kwb">int</span> ms<span class="hl opt">) {</span>
  <span class="hl kwd">Sleep</span><span class="hl opt">(</span>ms<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl ppc">#else</span> <span class="hl slc">// WIN32</span>
<span class="hl ppc"></span>
PreciseTimer<span class="hl opt">::</span><span class="hl kwd">PreciseTimer</span><span class="hl opt">() {}</span>

PreciseTimer<span class="hl opt">::</span>Counter PreciseTimer<span class="hl opt">::</span><span class="hl kwd">millisec</span><span class="hl opt">() {</span>
  <span class="hl kwb">struct</span> timeval tv<span class="hl opt">;</span>
  <span class="hl kwd">gettimeofday</span><span class="hl opt">(&amp;</span>tv<span class="hl opt">,</span> NULL<span class="hl opt">);</span>
  <span class="hl kwa">return</span> tv<span class="hl opt">.</span>tv_sec <span class="hl opt">*</span> <span class="hl num">1000</span> <span class="hl opt">+</span> tv<span class="hl opt">.</span>tv_usec <span class="hl opt">/</span> <span class="hl num">1000</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span> PreciseTimer<span class="hl opt">::</span><span class="hl kwd">sleepMs</span><span class="hl opt">(</span><span class="hl kwb">int</span> ms<span class="hl opt">) {</span>
  <span class="hl kwd">usleep</span><span class="hl opt">(</span>ms <span class="hl opt">*</span> <span class="hl num">1000</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl ppc">#endif</span> <span class="hl slc">// WIN32</span>
<span class="hl ppc"></span>
<span class="hl opt">}</span> <span class="hl slc">// ext</span>

<span class="hl ppc">#endif</span> <span class="hl slc">// _EXT_PRETIMER_H</span><span class="hl ppc"></span>
</pre>

<p>Итак, класс готов, но надо попробовать его в работе. Я, как сугубый апологет unit-тестирования, напишу тесты. Для их компиляции вам потребуется библиотека <a href="http://code.google.com/p/googletest/">Google Test Framework</a>. Вы можете взять оригинал с официального сайта, а можете для простоты воспользоваться <a href="http://demin.ws/downloads/gtest-amalgamation-1.2.1.zip">моей версией</a>, упакованной в два компактных файла <code>gtest-all.cc</code> и <code>gtest.h</code>. Я уже писал про это в <a href="http://demin.ws/blog/russian/2009/01/28/unit-testing-concurrent-threads/">рассказе про unit-тестирование</a>. Там я подробно описал, как подготовить Google Test к удобной работе.</p>

<p>Итак, тесты.</p>

<p><code>pretimer_unittest.cpp</code>:</p>

<pre class="hl">
<span class="hl ppc">#include</span> <span class="hl pps">&quot;gtest/gtest.h&quot;</span><span class="hl ppc"></span>
<span class="hl ppc">#include &lt;cstdlib&gt;</span>

<span class="hl slc">// Подключаем наш класс</span>
<span class="hl ppc">#include</span> <span class="hl pps">&quot;pretimer.h&quot;</span><span class="hl ppc"></span>

<span class="hl slc">// Простой тест, для Windows, в основном, для проверки</span>
<span class="hl slc">// доступности системного таймера.</span>
<span class="hl kwd">TEST</span><span class="hl opt">(</span>PreciseTimer<span class="hl opt">,</span> PreciseSystemTimerAvailability<span class="hl opt">) {</span>
  ext<span class="hl opt">::</span>PreciseTimer timer<span class="hl opt">;</span>
  <span class="hl slc">// Если метод millisec() возвращает 0, значит недоступен</span>
  <span class="hl slc">// системный таймер.</span>
  <span class="hl kwd">EXPECT_NE</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> timer<span class="hl opt">.</span><span class="hl kwd">millisec</span><span class="hl opt">()) &lt;&lt;</span> <span class="hl str">&quot;Недоступен системный таймер&quot;</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl slc">// Тестирует &quot;точность&quot; измерений.</span>
<span class="hl kwd">TEST</span><span class="hl opt">(</span>PreciseTimer<span class="hl opt">,</span> MeasurementAccuracy<span class="hl opt">) {</span>
  <span class="hl slc">// Тестируем на задержке в 100 миллисекунд.</span>
  <span class="hl kwb">const int</span> delay_ms <span class="hl opt">=</span> <span class="hl num">100</span><span class="hl opt">;</span>
  <span class="hl slc">// Зададим наше допустимое отклонение в 10% (10 миллисекунд).</span>
  <span class="hl slc">// Функция задержки msleep() тоже неидеальна и привносит</span>
  <span class="hl slc">// какую-то погрешность помимо наших измерений.</span>
  <span class="hl kwb">const int</span> allowed_delta_ms <span class="hl opt">=</span> <span class="hl num">10</span><span class="hl opt">;</span>
  <span class="hl slc">// Создаем таймер</span>
  ext<span class="hl opt">::</span>PreciseTimer timer<span class="hl opt">;</span>
  <span class="hl slc">// Замечаем время</span>
  timer<span class="hl opt">.</span><span class="hl kwd">mark</span><span class="hl opt">();</span>
  <span class="hl slc">// Ждем 100 миллисекунд</span>
  <span class="hl kwd">msleep</span><span class="hl opt">(</span>delay_ms<span class="hl opt">);</span>
  <span class="hl slc">// Вычисляем модуль разницы между эталоном в 100 миллисекунд</span>
  <span class="hl slc">// и измеренным нами интервалом через mark()/release()</span>
  <span class="hl kwb">int</span> delta <span class="hl opt">=</span> std<span class="hl opt">::</span><span class="hl kwd">abs</span><span class="hl opt">(</span><span class="hl kwa">static_cast</span><span class="hl opt">&lt;</span><span class="hl kwb">int</span><span class="hl opt">&gt;(</span>delay_ms <span class="hl opt">-</span> timer<span class="hl opt">.</span><span class="hl kwd">release</span><span class="hl opt">()));</span>

  <span class="hl slc">// Если отклонение более 10 миллисекунд - ошибка.</span>
  <span class="hl kwd">EXPECT_TRUE</span><span class="hl opt">(</span>delta <span class="hl opt">&lt;=</span> allowed_delta_ms<span class="hl opt">)</span> 
    <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;Слишком большое отклонение &quot;</span> <span class="hl opt">&lt;&lt;</span> delta <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;, превышающее &quot;</span> <span class="hl opt">&lt;&lt;</span> allowed_delta_ms<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl slc">// Тестируем очередь замеров</span>
<span class="hl kwd">TEST</span><span class="hl opt">(</span>PreciseTimer<span class="hl opt">,</span> Queue<span class="hl opt">) {</span>
  <span class="hl slc">// Создаем таймер</span>
  ext<span class="hl opt">::</span>PreciseTimer timer<span class="hl opt">;</span>
  <span class="hl slc">// Делаем замер номер 1</span>
  timer<span class="hl opt">.</span><span class="hl kwd">mark</span><span class="hl opt">();</span>
  <span class="hl slc">// Делаем замер номер 2</span>
  timer<span class="hl opt">.</span><span class="hl kwd">mark</span><span class="hl opt">();</span>
  <span class="hl slc">// Получаем текущее значение таймера</span>
  ext<span class="hl opt">::</span>PreciseTimer<span class="hl opt">::</span>Counter a <span class="hl opt">=</span> timer<span class="hl opt">.</span><span class="hl kwd">release</span><span class="hl opt">();</span>
  <span class="hl slc">// Ждем 100 миллисекунд</span>
  monitor<span class="hl opt">::</span>PreciseTimer<span class="hl opt">::</span><span class="hl kwd">sleepMs</span><span class="hl opt">(</span><span class="hl num">100</span><span class="hl opt">);</span>
  <span class="hl slc">// Проверяем, что значение таймера до задежки</span>
  <span class="hl slc">// меньше, чем после. Этим мы проверили, что</span>
  <span class="hl slc">// очередь замеров работает, так как получили </span>
  <span class="hl slc">// корректное значение второго в очереди замера.</span>
  <span class="hl kwd">EXPECT_LT</span><span class="hl opt">(</span>a<span class="hl opt">,</span> timer<span class="hl opt">.</span><span class="hl kwd">release</span><span class="hl opt">());</span>
<span class="hl opt">}</span>

<span class="hl slc">// Проверка пустой очередь замеров</span>
<span class="hl kwd">TEST</span><span class="hl opt">(</span>PreciseTimer<span class="hl opt">,</span> EmptyQueue<span class="hl opt">) {</span>
  ext<span class="hl opt">::</span>PreciseTimer timer<span class="hl opt">;</span>
  <span class="hl slc">// Если очередь замеров пуста, метод release() должен</span>
  <span class="hl slc">// возвращать -1.</span>
  <span class="hl kwd">EXPECT_EQ</span><span class="hl opt">(-</span><span class="hl num">1</span><span class="hl opt">,</span> timer<span class="hl opt">.</span><span class="hl kwd">release</span><span class="hl opt">());</span>
<span class="hl opt">}</span>
</pre>

<p>Я потратил на этот класс часа четыре неторопливой работы, а на написание тестов всего полчаса, но эти полчаса будут мне служить верой и правдой еще очень долго.</p>

<p>Забавно, что когда я запускал эти тесты как-то на Windows под виртуальной машиной, то тест <em>MeasurementAccuracy</em> <a href="http://demin.ws/blog/russian/2009/03/05/queryperformancecounter-on-multicore-and-virtual-systems/">давал сбой</a>! Видимо виртуальная машина как-то неправильно эмулировала работу таймеров, и замер делался совершенно неправильно. А вот теперь если представить - как бы я искал этот баг вручную по всей боевой программе, а? Кто ж мог предположить, что в виртуальной среде что-то можно пойти не так с таймерами.</p>

<p>Снова повторю - unit тестирование forever!</p>

<p>В завершении, нам нужна главная программа для запуска тестов:</p>

<pre class="hl">
<span class="hl ppc">#include</span> <span class="hl pps">&quot;gtest/gtest.h&quot;</span><span class="hl ppc"></span>
<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[]) {</span>
  <span class="hl slc">// Инициализируем библиотеку</span>
  testing<span class="hl opt">::</span><span class="hl kwd">InitGoogleTest</span><span class="hl opt">(&amp;</span>argc<span class="hl opt">,</span> argv<span class="hl opt">);</span>
  <span class="hl slc">// Запускаем все тесты, прилинкованные к проекту</span>
  <span class="hl kwa">return</span> <span class="hl kwd">RUN_ALL_TESTS</span><span class="hl opt">();</span>
<span class="hl opt">}</span>
</pre>

<p>Компилируем:</p>

<p>Visual Studio:</p>

<pre><code>cl /EHsc /I. /DWIN32 /Fepretimer_unittest.exe runner.cpp pretimer_unittest.cpp gtest-all.cc
</code></pre>

<p>UNIX:</p>

<pre><code>g++ -I. -o pretimer_unittest runner.cpp pretimer_unittest.cpp gtest-all.cc
</code></pre>

<p>Запускаем <code>pretimer_unittest</code> и получаем:</p>

<pre><code>[==========] Running 3 tests from 1 test case.
[----------] Global test environment set-up.
[----------] 4 tests from PreciseTimer
[ RUN      ] PreciseTimer.PreciseSystemTimerAvailability
[       OK ] PreciseTimer.PreciseSystemTimerAvailability
[ RUN      ] PreciseTimer.MeasurementAccuracy
[       OK ] PreciseTimer.MeasurementAccuracy
[ RUN      ] PreciseTimer.Queue
[       OK ] PreciseTimer.Queue
[ RUN      ] PreciseTimer.EmptyQueue
[       OK ] PreciseTimer.EmptyQueue
[----------] Global test environment tear-down
[==========] 4 tests from 1 test case ran.
[  PASSED  ] 4 tests.
</code></pre>

<p>Ура! Все работает. Доказано тестами. При использовании данного класса у себя в проекте не забудьте добавить <code>pretimer_unittest.cpp</code> в набор ваших прочих unit тестов. Этим вы избавитесь от множества сюрпризов.</p>

<p>Приобщайтесь к unit-тестированию, и программируйте правильно!</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2009/03/05/queryperformancecounter-on-multicore-and-virtual-systems/">QueryPerformanceCounter на мультиядерных и виртуальных системах</a></li>
<li><a href="http://demin.ws/blog/russian/2009/01/28/unit-testing-concurrent-threads/">Unit-тестирование для параллельных потоков</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Скрипты для Visual Studio]]></title>
    <link href="http://demin.ws/blog/russian/2009/01/29/scripts-for-visual-studio-command-line/"/>
    <updated>2009-01-29T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/01/29/scripts-for-visual-studio-command-line/</id>
    <content type="html"><![CDATA[<p>По роду работы у меня на компьютере стоят сразу несколько версий Visual Studio: 2003, 2005 и 2008. В целом они легко уживаются на одной машине, и при работе в графической оболочке обычно не возникает каких-либо неудобств или конфликтов. Но вот при работе через командную строку обычно надо как-то понимать, какой именно компилятор хочется вызвать (ведь имя то у него одно - <code>cl.exe</code>, a версий три). В итоге я убрал из путей PATH все ссылки на каталоги разных версии студии, и сделал вот такие скрипты, помещенные в любой каталог, находящийся в списке путей PATH.</p>

<p>Visual Studio 2003, файл: <code>cl2003.cmd</code>:</p>

<pre><code>@&quot;%VS71COMNTOOLS%\vsvars32.bat&quot;
</code></pre>

<p>Visual Studio 2005, файл: <code>cl2005.cmd</code>:</p>

<pre><code>@&quot;%VS80COMNTOOLS%\vsvars32.bat&quot;
</code></pre>

<p>Visual Studio 2008, файл: <code>cl2008.cmd</code>:</p>

<pre><code>@&quot;%VS90COMNTOOLS%\vsvars32.bat&quot;
</code></pre>

<p>Если вы ставили студии по умолчанию стандартным образом, то в системе должны быть переменные окружения <code>VS71COMNTOOLS</code>, <code>VS80COMNTOOLS</code> и <code>VS90COMNTOOLS</code>, задающие расположение конкретной версии. Скрипт же <code>vsvars32.bat</code> поставляется вместе со студией и автоматически настраивает все необходимое для компилятора окружение.</p>

<p>Теперь компиляция в версии 2005 делается, например, вот таким cmd-файлом:</p>

<pre><code>call cl2005.cmd
cl /Fetest.exe test.cpp
</code></pre>

<p>Очевидно, что для перехода на версию 2003 или 2008 надо заменить всего одну цифру. Очень удобно.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit-тестирование для параллельных потоков]]></title>
    <link href="http://demin.ws/blog/russian/2009/01/28/unit-testing-concurrent-threads/"/>
    <updated>2009-01-28T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/01/28/unit-testing-concurrent-threads/</id>
    <content type="html"><![CDATA[<p>В <a href="http://demin.ws/blog/russian/2009/01/26/universal-threads-for-windows-and-unix/">статье про класс Thread</a>, реализующий потоки в С++, я обещал как минимум показать, как работать с данным классом, и как максимум рассказать про блочное (unit) тестирование в целом, и про его применение для проверки работы нашего класса в частности.</p>

<p>Дожив до четвертого десятка и имея за спиной десяток с хвостиком, посвященный программированию, к своему огромному стыду к программированию с использованием блочного тестирования (TDD - test driven development) я приобщился только год назад. Честно могу сказать - это было для меня одним из сильнейших потрясений в профессиональной области за последнее время, и радикально поменяло некоторые фундаментальные представления о разработке софта. Как прирожденный максималист в профессии (за что часто очень нелюбим коллегами по цеху, которые руководствуются правилом &ldquo;лучшее враг хорошего&rdquo;), я работаю под девизом &ldquo;мои программы должны быть безупречны&rdquo;. А так как тут мне дали в руки такой волшебный инструмент как блочное тестирование, я стараюсь теперь его применять где только возможно. Даже порой радикально перерабатывая старые проекты.</p>

<p>Ладно, это лирика. Приступим к делу.</p>

<p>У нас есть <a href="http://demin.ws/blog/russian/2009/01/26/universal-threads-for-windows-and-unix/">класс Thread</a>, расположенный в файлах <code>thread.cpp</code> и <code>thread.h</code>.</p>

<p>Напишем небольшой пример (<code>thread_example.cpp</code>).</p>

<pre class="hl">
<span class="hl ppc">#include &lt;iostream&gt;</span>
<span class="hl ppc">#include</span> <span class="hl pps">&quot;thread.h&quot;</span><span class="hl ppc"></span>

<span class="hl slc">// Создаем наследника от класса Thread</span>
<span class="hl kwc">class</span> MyThread<span class="hl opt">:</span> <span class="hl kwc">public</span> ext<span class="hl opt">::</span>Thread <span class="hl opt">{</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl slc">// Инициализируем в false флаг завершения в конструкторе</span>
  <span class="hl kwd">MyThread</span><span class="hl opt">() :</span> <span class="hl kwd">__done</span><span class="hl opt">(</span><span class="hl kwa">false</span><span class="hl opt">) {}</span>
  <span class="hl kwc">virtual</span> <span class="hl kwb">void</span> <span class="hl kwd">Execute</span><span class="hl opt">() {</span>
    <span class="hl slc">// В процессе работы потока меняем флаг завершения на истину</span>
    __done <span class="hl opt">=</span> <span class="hl kwa">true</span><span class="hl opt">;</span>
  <span class="hl opt">}</span>
  <span class="hl slc">// Функция, возвращающая значение флага завершение</span>
  <span class="hl kwb">bool</span> <span class="hl kwd">done</span><span class="hl opt">()</span> <span class="hl kwb">const</span> <span class="hl opt">{</span> <span class="hl kwa">return</span> __done<span class="hl opt">; }</span>
<span class="hl kwc">private</span><span class="hl opt">:</span>
  <span class="hl kwb">bool</span> __done<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[]) {</span>
  <span class="hl slc">// Создаем объект потока. Пока он еще не запущен.</span>
  MyThread thread<span class="hl opt">;</span> 
  <span class="hl slc">// Печатаем значение флага завершения. Должно быть 0 (false)</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;Thread status before: &quot;</span> <span class="hl opt">&lt;&lt;</span> thread<span class="hl opt">.</span><span class="hl kwd">done</span><span class="hl opt">() &lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
  <span class="hl slc">// Запускаем поток</span>
  thread<span class="hl opt">.</span><span class="hl kwd">Start</span><span class="hl opt">();</span>
  <span class="hl slc">// И ждем его завершения</span>
  thread<span class="hl opt">.</span><span class="hl kwd">Join</span><span class="hl opt">();</span>
  <span class="hl slc">// Если поток нормально был запущен и отработал, то значение</span>
  <span class="hl slc">// флага должно измениться на 1 (true). Это должна сделать</span>
  <span class="hl slc">// функция Execute(). Если тут будет не 1, а 0, значит поток</span>
  <span class="hl slc">// не выполнялся, и выходит, что с классом что-то не так.</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;Thread status after: &quot;</span> <span class="hl opt">&lt;&lt;</span> thread<span class="hl opt">.</span><span class="hl kwd">done</span><span class="hl opt">() &lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Компилируем (естественно, из командной строки).</p>

<p>Visual Studio 2008 (хотя подойдет любая версия VS):</p>

<pre><code>cl /EHsc /I. /Fethread_example /DWIN32 thread_example.cpp thread.cpp
</code></pre>

<p>Опция <code>/EHsc</code> нужна, так как мы пишем на С++, и поэтому компилятору <code>cl.exe</code> надо явно указать необходимость включения поддержки исключений. Особенность данного компилятора.</p>

<p>Если вы в UNIX&rsquo;e, тогда, например, <code>gcc</code>:</p>

<pre><code>g++ -o thread_example thread_example.cpp thread.cpp
</code></pre>

<p>Запускаем thread_example, и имеем на экране следующее:</p>

<pre><code>Thread status before: 0
Thread status after: 1
</code></pre>

<p>Судя по напечатанным данным, класс работает правильно.</p>

<p>Я специально не использовал в функции <code>Execute()</code> отладочной печати на экран типа &ldquo;Hello, world! I&rsquo;m the thread&rdquo;. Хотя это было бы нагляднее и прикольнее, чем какие-то булевы флаги. Но на это была причина. При работе с потоками, когда ваш код теперь уже выполняется нелинейно, а какие-то фрагменты могут работать параллельно, приходится очень тщательно продумывать совместное использование переменных одновременно работающими потоками. Может так случиться, что когда основной поток будет печатать что-то на экран через переменную <code>std::cout</code>, параллельный поток тоже захочет это сделать, прервет основной поток на полпути и сам начнет использовать <code>std::cout</code>. Данные обоих потоков смешаются, и в лучшем случае на экран вылезет каша, а в худшем программа может завершиться аварийно. На том же мной так любимом AIX&rsquo;е именно это и происходит. Видимо, стандартная библиотека AIX&rsquo;а требует каких-то дополнительных настроек для нормальной работы в мультипотоковой среде. Для избежания подобных проблем совместного доступа применяются различные механизмы из мира параллельного программирования - блокировки (mutex), семафоры, критические секции и т.д. Я посвящу отдельный пост этому очень непростому вопросу, но расскажу о нем крайне просто и понятно.</p>

<p>Теперь давайте запустим десяток потоков (<code>thread_example2.cpp</code>).</p>

<pre class="hl">
<span class="hl ppc">#include &lt;vector&gt;</span>
<span class="hl ppc">#include &lt;iostream&gt;</span>
<span class="hl ppc">#include</span> <span class="hl pps">&quot;thread.h&quot;</span><span class="hl ppc"></span>

<span class="hl kwc">class</span> MyThread<span class="hl opt">:</span> <span class="hl kwc">public</span> ext<span class="hl opt">::</span>Thread <span class="hl opt">{</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl kwd">MyThread</span><span class="hl opt">(</span><span class="hl kwb">int</span> id<span class="hl opt">) :</span> <span class="hl kwd">__id</span><span class="hl opt">(</span>id<span class="hl opt">),</span> <span class="hl kwd">__done</span><span class="hl opt">(</span><span class="hl kwa">false</span><span class="hl opt">) {}</span>
  <span class="hl kwc">virtual</span> <span class="hl kwb">void</span> <span class="hl kwd">Execute</span><span class="hl opt">() {</span>
    <span class="hl slc">// Небольшая &quot;перчинка&quot; программы, чтобы не было скучно.</span>
    <span class="hl slc">// Суть в том, что поток с индексом 3 (по счету номер 4, так первый</span>
    <span class="hl slc">// индекс 0) не будет устанавливать флаг выполнения. Сделано это</span>
    <span class="hl slc">// просто для разнообразия. Результат данной &quot;перчинки&quot; будет виден</span>
    <span class="hl slc">// при печати.</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>__id <span class="hl opt">!=</span> <span class="hl num">3</span><span class="hl opt">)</span>
      __done <span class="hl opt">=</span> <span class="hl kwa">true</span><span class="hl opt">;</span>
  <span class="hl opt">}</span>
  <span class="hl kwb">bool</span> <span class="hl kwd">done</span><span class="hl opt">()</span> <span class="hl kwb">const</span> <span class="hl opt">{</span> <span class="hl kwa">return</span> __done<span class="hl opt">; }</span>
<span class="hl kwc">private</span><span class="hl opt">:</span>
  <span class="hl kwb">int</span> __id<span class="hl opt">;</span>
  <span class="hl kwb">bool</span> __done<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl kwc">typedef</span> std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span>MyThread<span class="hl opt">*&gt;</span> Threads<span class="hl opt">;</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[]) {</span>
  <span class="hl slc">// Создаем вектор из указателей на потоки</span>
  std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span>MyThread<span class="hl opt">*&gt;</span> threads<span class="hl opt">;</span>

  <span class="hl slc">// Создаем 10 потоков и сохраняем указатели на них в вектор</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> <span class="hl num">10</span><span class="hl opt">;</span> i<span class="hl opt">++)</span>
    threads<span class="hl opt">.</span><span class="hl kwd">push_back</span><span class="hl opt">(</span><span class="hl kwa">new</span> <span class="hl kwd">MyThread</span><span class="hl opt">(</span>i<span class="hl opt">));</span>
 
  <span class="hl slc">// Запускаем потоки на выполнение</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span>Threads<span class="hl opt">::</span>iterator i <span class="hl opt">=</span> threads<span class="hl opt">.</span><span class="hl kwd">begin</span><span class="hl opt">();</span> i <span class="hl opt">!=</span> threads<span class="hl opt">.</span><span class="hl kwd">end</span><span class="hl opt">();</span> i<span class="hl opt">++)</span>
    <span class="hl opt">(*</span>i<span class="hl opt">)-&gt;</span><span class="hl kwd">Start</span><span class="hl opt">();</span>
 
  <span class="hl slc">// Дожидаемся, пока они все завершатся</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span>Threads<span class="hl opt">::</span>iterator i <span class="hl opt">=</span> threads<span class="hl opt">.</span><span class="hl kwd">begin</span><span class="hl opt">();</span> i <span class="hl opt">!=</span> threads<span class="hl opt">.</span><span class="hl kwd">end</span><span class="hl opt">();</span> i<span class="hl opt">++)</span>
    <span class="hl opt">(*</span>i<span class="hl opt">)-&gt;</span><span class="hl kwd">Join</span><span class="hl opt">();</span>
 
  <span class="hl slc">// Печатаем статусы потоков в одну строку через пробел</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span>Threads<span class="hl opt">::</span>iterator i <span class="hl opt">=</span> threads<span class="hl opt">.</span><span class="hl kwd">begin</span><span class="hl opt">();</span> i <span class="hl opt">!=</span> threads<span class="hl opt">.</span><span class="hl kwd">end</span><span class="hl opt">();</span> i<span class="hl opt">++)</span>
    std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt; (*</span>i<span class="hl opt">)-&gt;</span><span class="hl kwd">done</span><span class="hl opt">() &lt;&lt;</span> <span class="hl str">&quot; &quot;</span><span class="hl opt">;</span>
  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
 
  <span class="hl slc">// Чистим за собой память.</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span>Threads<span class="hl opt">::</span>iterator i <span class="hl opt">=</span> threads<span class="hl opt">.</span><span class="hl kwd">begin</span><span class="hl opt">();</span> i <span class="hl opt">!=</span> threads<span class="hl opt">.</span><span class="hl kwd">end</span><span class="hl opt">();</span> i<span class="hl opt">++)</span>
    <span class="hl kwa">delete</span> <span class="hl opt">*</span>i<span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Компилируем.</p>

<p>Visual Studio:</p>

<pre><code>cl /EHsc /I. /Fethread_example2 /DWIN32 thread_example2.cpp thread.cpp
</code></pre>

<p>В UNIX&rsquo;e (<code>gcc</code>):</p>

<pre><code>g++ -o thread_example2 thread_example2.cpp thread.cpp
</code></pre>

<p>Запускаем <code>thread_example2</code>, и имеем на экране следующее:</p>

<pre><code>1 1 1 0 1 1 1 1 1 1
</code></pre>

<p>Видно, что все потоки, кроме четвертого (индекс 3, так как считаем от нуля) установили свои флаги правильно. Четвертому помешала &ldquo;перчинка&rdquo; (см. выше).</p>

<p>Что дальше? Да ничего, собственно. Теперь вы наверняка набросаете несколько своих примеров, поиграетесь, и может начнете включать данный класс в свои проекты. Тестовые примеры вы скорее всего сотрете как отработанный материал, а может и заначите до лучших времен.</p>

<p>А теперь! На сцену приглашается unit тестирование.</p>

<p>Я вам предлагаю сделать небольшие программы-тесты, которые бы своими результатами доказывали правильность работы нашего класса. Например:</p>

<pre class="hl">
<span class="hl kwc">class</span> SimpleThread<span class="hl opt">:</span> <span class="hl kwc">public</span> ext<span class="hl opt">::</span>Thread <span class="hl opt">{</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
    <span class="hl kwd">SimpleThread</span><span class="hl opt">() :</span> <span class="hl kwd">__done</span><span class="hl opt">(</span><span class="hl kwa">false</span><span class="hl opt">) {}</span>

    <span class="hl kwc">virtual</span> <span class="hl kwb">void</span> <span class="hl kwd">Execute</span><span class="hl opt">() {</span>
        __done <span class="hl opt">=</span> <span class="hl kwa">true</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwb">bool</span> <span class="hl kwd">done</span><span class="hl opt">()</span> <span class="hl kwb">const</span> <span class="hl opt">{</span> <span class="hl kwa">return</span> __done<span class="hl opt">; }</span>
<span class="hl kwc">private</span><span class="hl opt">:</span>
    <span class="hl kwb">bool</span> __done<span class="hl opt">;</span>
<span class="hl opt">};</span>
</pre>

<p>Класс <code>SimpleThread</code> очень похож на класс <code>MyThread</code> из наших примеров выше. Он просто меняет флаг активности с <code>false</code> на <code>true</code> в процессе успешного выполнения.</p>

<pre class="hl">
 <span class="hl slc">// Декларируем тест с именем RunningInParallel в группе тестов ThreadTest.</span>
<span class="hl kwd">TEST</span><span class="hl opt">(</span>ThreadTest<span class="hl opt">,</span> RunningInParallel<span class="hl opt">) {</span>
  <span class="hl slc">// Создаем объект нашего класса</span>
  SimpleThread thread<span class="hl opt">;</span>
  <span class="hl slc">// Внимание! Макрос EXPECT_FALSE смотрит, какое значение у его аргумента.</span>
  <span class="hl slc">// Если это ложь, то все нормально, и выполнение теста идет дальше. Если же нет,</span>
  <span class="hl slc">// то печатается сообщение об ошибке, хотя тест продолжает работу.</span>
  <span class="hl slc">// В нашем случае тут должно быть false по смыслу.</span>
  <span class="hl kwd">EXPECT_FALSE</span><span class="hl opt">(</span>thread<span class="hl opt">.</span><span class="hl kwd">done</span><span class="hl opt">());</span>
  <span class="hl slc">// Запускаем поток на выполнение</span>
  thread<span class="hl opt">.</span><span class="hl kwd">Start</span><span class="hl opt">();</span>
  <span class="hl slc">// Ждем завершение потока</span>
  thread<span class="hl opt">.</span><span class="hl kwd">Join</span><span class="hl opt">();</span>
  <span class="hl slc">// Макрос EXPECT_TRUE смотрит, какое значение у его аргумента.</span>
  <span class="hl slc">// Если это истина, то все нормально, и выполнение теста идет дальше. Если же нет,</span>
  <span class="hl slc">// то печатается сообщение об ошибке, хотя тест продолжает работу.</span>
  <span class="hl slc">// Тут мы уже ждем не false, а true, потому что поток должен был изменить значение</span>
  <span class="hl slc">// этого флага.</span>
  <span class="hl kwd">EXPECT_TRUE</span><span class="hl opt">(</span>thread<span class="hl opt">.</span><span class="hl kwd">done</span><span class="hl opt">());</span>
<span class="hl opt">}</span>
</pre>

<p>Теперь осознаем произошедшее - мы не просто написали какой-то пример, а мы формально опередили логику работы класса, задали его ответственность. Теперь наши пожелания к функциональности класса заданы не на словах и предположениях, а в виде программы.</p>

<p>Теперь осталось только запустить этот тест.</p>

<p>Существует много библиотек для unit тестирования практически для каждого языка. С++ не исключение. Самой распространенной в мире С++ является <a href="http://cppunit.sourceforge.net/">CppUnit</a>. Но около полугода назад Google ворвался в мир библиотек тестирования с <a href="http://code.google.com/p/googletest/">Google Test Framework</a>. На момент написания данной статьи актуальной версией является <a href="http://googletest.googlecode.com/files/gtest-1.2.1.tar.gz">1.2.1</a>. Распространяется в исходных текстах. Данную библиотеку можно прекомпилировать и использовать как двоичный модуль при линковке, но я сделал иначе. Так как я постоянно прыгаю с платформы на платформу, с компилятора на компилятор, мне удобнее компилировать Google Test прямо из исходников каждый раз при сборке проекта, благо библиотека хорошо портируема, мала по размеру и быстро компилируется. К небольшому сожалению, Google Test реализована в виде не одного файла-исходника и одного .h файла, а целого набора .h файлов и набора .cc (.cpp) файлов. Так удобно библиотеку развивать (что логично), но не использовать из исходников со стороны. Поэтому я объединил всю библиотеку в два файла: <code>gtest.h</code> и <code>gtest-all.cc</code>, и больше ничего не нужно. Гугловцы обещали в следующий релиз библиотеки включить мой патч на эту тему. Сейчас же они (также по моей идее) дают специальный скрипт, которым можно из официального архива сделать компактную версию из двух файлов. Для тех, у кого уже съехали мозги от этих подробностей, и кто пока не хочет тратить время на техдетали библиотеки, я могу предложить <a href="http://demin.ws/downloads/gtest-amalgamation-1.2.1.zip">мою сборку Google Test&rsquo;а</a>. Можно начать с нее. Она основана на официальной версии 1.2.1 и является объединением множества файлов в два. В архиве два файла <code>gtest/gtest.h</code> и <code>gtest-all.cc</code>. Положите их в каталог, где будете проводить опыты.</p>

<p>Итак, предположим, вы имеете файлы: <code>gtest/gtest.h</code> и <code>gtest-all.cc</code> в рабочем каталоге, и все готово к запуску.</p>

<p>Полный вариант исходника <code>thread_unittest.cpp</code>:</p>

<pre class="hl">
<span class="hl ppc">#include</span> <span class="hl pps">&quot;gtest/gtest.h&quot;</span><span class="hl ppc"></span>
<span class="hl ppc">#include</span> <span class="hl pps">&quot;thread.h&quot;</span><span class="hl ppc"></span>

<span class="hl kwc">class</span> SimpleThread<span class="hl opt">:</span> <span class="hl kwc">public</span> ext<span class="hl opt">::</span>Thread <span class="hl opt">{</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl kwd">SimpleThread</span><span class="hl opt">() :</span> <span class="hl kwd">__done</span><span class="hl opt">(</span><span class="hl kwa">false</span><span class="hl opt">) {}</span>

  <span class="hl kwc">virtual</span> <span class="hl kwb">void</span> <span class="hl kwd">Execute</span><span class="hl opt">() {</span>
      __done <span class="hl opt">=</span> <span class="hl kwa">true</span><span class="hl opt">;</span>
  <span class="hl opt">}</span>

  <span class="hl kwb">bool</span> <span class="hl kwd">done</span><span class="hl opt">()</span> <span class="hl kwb">const</span> <span class="hl opt">{</span> <span class="hl kwa">return</span> __done<span class="hl opt">; }</span>
<span class="hl kwc">private</span><span class="hl opt">:</span>
  <span class="hl kwb">bool</span> __done<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl kwd">TEST</span><span class="hl opt">(</span>ThreadTest<span class="hl opt">,</span> RunningInParallel<span class="hl opt">) {</span>
  SimpleThread thread<span class="hl opt">;</span>
  <span class="hl kwd">EXPECT_FALSE</span><span class="hl opt">(</span>thread<span class="hl opt">.</span><span class="hl kwd">done</span><span class="hl opt">());</span>
  thread<span class="hl opt">.</span><span class="hl kwd">Start</span><span class="hl opt">();</span>
  thread<span class="hl opt">.</span><span class="hl kwd">Join</span><span class="hl opt">();</span>
  <span class="hl kwd">EXPECT_TRUE</span><span class="hl opt">(</span>thread<span class="hl opt">.</span><span class="hl kwd">done</span><span class="hl opt">());</span>
<span class="hl opt">}</span>
</pre>

<p>Я предпочитаю давать имена файлам с тестами, используя суффикс <code>_unittest</code> к имени основного файла. Это позволяет, быстро взглянув на каталог, понять - какие классы имеют тесты, а какие нет.</p>

<p>Также нам нужен стартовый файл <code>runner.cpp</code>, который будет содержать функцию <code>main()</code>:</p>

<pre class="hl">
<span class="hl ppc">#include</span> <span class="hl pps">&quot;gtest/gtest.h&quot;</span><span class="hl ppc"></span>
<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[]) {</span>
  <span class="hl slc">// Инициализируем библиотеку</span>
  testing<span class="hl opt">::</span><span class="hl kwd">InitGoogleTest</span><span class="hl opt">(&amp;</span>argc<span class="hl opt">,</span> argv<span class="hl opt">);</span>
  <span class="hl slc">// Запускаем все тесты, прилинкованные к проекту</span>
  <span class="hl kwa">return</span> <span class="hl kwd">RUN_ALL_TESTS</span><span class="hl opt">();</span>
<span class="hl opt">}</span>
</pre>

<p>Тут все просто. Обычно, этот файл одинаков для все тестовых проектов, если вам не надо проводить какие-нибудь дополнительные инициализации, брать что-то из командной строки и.д. Google Test устроена так (в отличие от CppUnit, например), что тесты (<code>TEST</code> и <code>TEST_F</code>) не надо нигде дополнительно регистрировать, объявлять и т.д. Вы просто задаете тело теста, включаете файл с исходником в проект и все. Далее все происходит автоматически.</p>

<p>Резонный вопрос - а в каком порядке тесты буду выполнены, если их несколько? А ответ прост: вас это не касается. Тесты могут выполняться в любом порядке, и нельзя делать никаких предположений на эту тему. Суть тут в том, что каждый тест должет быть атомарным и независимым (конечным автоматом без памяти). В этом суть блочного (unit) тестирования, когда маленькие кусочки большой программы проверяются отдельно, в полной изоляции. Но, вернемся к компиляции.</p>

<p>Компилируем.</p>

<p>Visual Studio:</p>

<pre><code>cl /EHsc /DWIN32 /I. /Fethread_unittest.exe runner.cpp thread_unittest.cpp thread.cpp gtest-all.cc
</code></pre>

<p>UNIX:</p>

<pre><code>g++ -I. -o thread_unittest runner.cpp thread_unittest.cpp thread.cpp gtest-all.cc
</code></pre>

<p>Запускаем <code>thread_unittest</code> и получаем что-то вроде:</p>

<pre><code>[==========] Running 1 tests from 1 test case.
[----------] Global test environment set-up.
[----------] 1 tests from ThreadTest
[ RUN      ] ThreadTest.RunningInParallel
[       OK ] ThreadTest.RunningInParallel
[----------] Global test environment tear-down
[==========] 1 tests from 1 test case ran.
[  PASSED  ] 1 tests.
</code></pre>

<p>Это значит, что тест был запущен и отработал как положено.</p>

<p>Добавим еще один тест, который будет проверять, убивается ли поток, когда мы этого хотим.</p>

<p><code>thread_unittest.cpp</code>:</p>

<pre class="hl">
<span class="hl ppc">#include</span> <span class="hl pps">&quot;gtest/gtest.h&quot;</span><span class="hl ppc"></span>
<span class="hl ppc">#include</span> <span class="hl pps">&quot;thread.h&quot;</span><span class="hl ppc"></span>

<span class="hl ppc">#ifdef WIN32</span>
<span class="hl ppc">#include &lt;windows.h&gt;</span>
<span class="hl ppc">#define msleep(x)    Sleep(x)</span>
<span class="hl ppc">#else</span>
<span class="hl ppc">#include &lt;unistd.h&gt;</span>
<span class="hl ppc">#define msleep(x)    usleep((x)*1000)</span>
<span class="hl ppc">#endif</span>

<span class="hl kwc">class</span> SimpleThread<span class="hl opt">:</span> <span class="hl kwc">public</span> ext<span class="hl opt">::</span>Thread <span class="hl opt">{</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl kwd">SimpleThread</span><span class="hl opt">() :</span> <span class="hl kwd">__done</span><span class="hl opt">(</span><span class="hl kwa">false</span><span class="hl opt">) {}</span>

  <span class="hl kwc">virtual</span> <span class="hl kwb">void</span> <span class="hl kwd">Execute</span><span class="hl opt">() {</span>
    __done <span class="hl opt">=</span> <span class="hl kwa">true</span><span class="hl opt">;</span>
  <span class="hl opt">}</span>

  <span class="hl kwb">bool</span> <span class="hl kwd">done</span><span class="hl opt">()</span> <span class="hl kwb">const</span> <span class="hl opt">{</span> <span class="hl kwa">return</span> __done<span class="hl opt">; }</span>
<span class="hl kwc">private</span><span class="hl opt">:</span>
  <span class="hl kwb">bool</span> __done<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl kwd">TEST</span><span class="hl opt">(</span>ThreadTest<span class="hl opt">,</span> RunningInParallel<span class="hl opt">) {</span>
  SimpleThread thread<span class="hl opt">;</span>
  <span class="hl kwd">EXPECT_FALSE</span><span class="hl opt">(</span>thread<span class="hl opt">.</span><span class="hl kwd">done</span><span class="hl opt">());</span>
  thread<span class="hl opt">.</span><span class="hl kwd">Start</span><span class="hl opt">();</span>
  thread<span class="hl opt">.</span><span class="hl kwd">Join</span><span class="hl opt">();</span>
  <span class="hl kwd">EXPECT_TRUE</span><span class="hl opt">(</span>thread<span class="hl opt">.</span><span class="hl kwd">done</span><span class="hl opt">());</span>
<span class="hl opt">}</span>

<span class="hl slc">// &quot;Нескончаемый поток&quot;</span>
<span class="hl kwc">class</span> GreedyThread<span class="hl opt">:</span> <span class="hl kwc">public</span> ext<span class="hl opt">::</span>Thread <span class="hl opt">{</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl kwc">virtual</span> <span class="hl kwb">void</span> <span class="hl kwd">Execute</span><span class="hl opt">() {</span>
    <span class="hl slc">// Данный поток будет работать вечно, пока его не убьют извне.</span>
    <span class="hl kwa">while</span> <span class="hl opt">(</span><span class="hl kwa">true</span><span class="hl opt">) {</span>
      <span class="hl kwd">msleep</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
  <span class="hl opt">}</span>
<span class="hl opt">};</span>

<span class="hl kwd">TEST</span><span class="hl opt">(</span>ThreadTest<span class="hl opt">,</span> Kill<span class="hl opt">) {</span>
  <span class="hl slc">// Создаем &quot;вечный&quot; поток</span>
  GreedyThread thread<span class="hl opt">;</span>
  <span class="hl slc">// Запускаем его</span>
  thread<span class="hl opt">.</span><span class="hl kwd">Start</span><span class="hl opt">();</span>
  <span class="hl slc">// Убиваем его</span>
  thread<span class="hl opt">.</span><span class="hl kwd">Kill</span><span class="hl opt">();</span>
  <span class="hl slc">// Если функция Kill() не работает, ты мы никогда не дождемся окончания потока</span>
  <span class="hl slc">// и программа тут повиснет.</span>
  thread<span class="hl opt">.</span><span class="hl kwd">Join</span><span class="hl opt">();</span>
<span class="hl opt">}</span>
</pre>

<p>Компилируем.</p>

<p>Visual Studio:</p>

<pre><code>cl /EHsc /I. /Fethread_unittest.exe /DWIN32 runner.cpp thread_unittest.cpp thread.cpp gtest-all.cc
</code></pre>

<p>UNIX:</p>

<pre><code>g++ -I. -o thread_unittest runner.cpp thread_unittest.cpp thread.cpp gtest-all.cc
</code></pre>

<p>Запускаем <code>thread_unittest</code> и получает что-то вроде:</p>

<pre><code>[==========] Running 2 tests from 1 test case.
[----------] Global test environment set-up.
[----------] 2 tests from ThreadTest
[ RUN      ] ThreadTest.RunningInParallel
[       OK ] ThreadTest.RunningInParallel
[ RUN      ] ThreadTest.Kill
[       OK ] ThreadTest.Kill
[----------] Global test environment tear-down
[==========] 2 tests from 1 test case ran.
[  PASSED  ] 2 tests.
</code></pre>

<p>Оба теста отработали правильно. Получается, что теперь мы точно уверены, что наш поток умеет работать параллельно и независимо от основного потока, и умеет принудительно &ldquo;убиваться&rdquo; по требованию. Мы это доказали тестами, а не словами или алгоритмами на бумаге. Если вам кажется, что еще не вся функциональность класса проверена, обязательно допишите свои тесты для проверки своих предположений.</p>

<p>Теперь внесем в класс &ldquo;случайную ошибку&rdquo;, добавив оператор <code>return</code> в виндовый вариант функции <code>void Thread::Start()</code>:</p>

<pre class="hl">
<span class="hl kwb">void</span> Thread<span class="hl opt">::</span><span class="hl kwd">Start</span><span class="hl opt">() {</span>
  <span class="hl slc">// &quot;Случайная&quot; ошибка</span>
  <span class="hl kwa">return</span><span class="hl opt">;</span>
  __handle <span class="hl opt">=</span> <span class="hl kwd">CreateThread</span><span class="hl opt">(</span>
    <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span>
    <span class="hl kwa">reinterpret_cast</span><span class="hl opt">&lt;</span>LPTHREAD_START_ROUTINE<span class="hl opt">&gt;(</span>ThreadCallback<span class="hl opt">),</span> <span class="hl kwa">this</span><span class="hl opt">,</span>
    <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">0</span>
  <span class="hl opt">);</span>
<span class="hl opt">}</span>
</pre>

<p>Теперь наш класс &ldquo;сломан&rdquo;. Посмотрим, что скажет тестирование (естественно, надо перекомпилировать программу перед этим):</p>

<pre><code>[==========] Running 2 tests from 1 test case.
[----------] Global test environment set-up.
[----------] 2 tests from ThreadTest
[ RUN      ] ThreadTest.RunningInParallel
thread_unittest.cpp(33): error: Value of: thread.done()
  Actual: false
Expected: true
[  FAILED  ] ThreadTest.RunningInParallel
[ RUN      ] ThreadTest.Kill
[       OK ] ThreadTest.Kill
[----------] Global test environment tear-down
[==========] 2 tests from 1 test case ran.
[  PASSED  ] 1 test.
[  FAILED  ] 1 test, listed below:
[  FAILED  ] ThreadTest.RunningInParallel

 1 FAILED TEST
</code></pre>

<p>Бинго! Тест говорит, что ожидаемое значение флага выполнения &ldquo;истина&rdquo;, а реальное &ldquo;ложь&rdquo;. Класс не работает! Конечно не работает, так как создание потока не происходит из-за &ldquo;случайного&rdquo; оператора <code>return</code>. Мы нашли реальный &ldquo;баг&rdquo;, причем сделали это автоматизированным образом.</p>

<p>Можно еще улучшить тест дополнительной информацией, которая будет показана в случае его сбоя:</p>

<pre class="hl">
<span class="hl kwd">TEST</span><span class="hl opt">(</span>ThreadTest<span class="hl opt">,</span> Simple<span class="hl opt">) {</span>
  SimpleThread thread<span class="hl opt">;</span>
  <span class="hl kwd">EXPECT_FALSE</span><span class="hl opt">(</span>thread<span class="hl opt">.</span><span class="hl kwd">done</span><span class="hl opt">());</span>
  thread<span class="hl opt">.</span><span class="hl kwd">Start</span><span class="hl opt">();</span>
  thread<span class="hl opt">.</span><span class="hl kwd">Join</span><span class="hl opt">();</span>
  <span class="hl kwd">EXPECT_TRUE</span><span class="hl opt">(</span>thread<span class="hl opt">.</span><span class="hl kwd">done</span><span class="hl opt">()) &lt;&lt;</span> <span class="hl str">&quot;Поток не изменил флаг&quot;</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Теперь сообщение об ошибке будет более информативно.</p>

<pre><code>[==========] Running 2 tests from 1 test case.
[----------] Global test environment set-up.
[----------] 2 tests from ThreadTest
[ RUN      ] ThreadTest.RunningInParallel
thread_unittest.cpp(33): error: Value of: thread.done()
  Actual: false
Expected: true
Поток не изменил флаг
[  FAILED  ] ThreadTest.RunningInParallel
[ RUN      ] ThreadTest.Kill
[       OK ] ThreadTest.Kill
[----------] Global test environment tear-down
[==========] 2 tests from 1 test case ran.
[  PASSED  ] 1 test.
[  FAILED  ] 1 test, listed below:
[  FAILED  ] ThreadTest.RunningInParallel

 1 FAILED TEST
</code></pre>

<p>Google Test имеет множество функций для тестовых сравнений, но основные их них, используемые в 99% случаев, следующие:</p>

<ul>
<li><code>EXPECT_EQ(a, b)</code> - проверка условия &ldquo;a = b&rdquo;</li>
<li><code>EXPECT_NE(a, b)</code> - проверка условия &ldquo;a != b&rdquo;</li>
<li><code>EXPECT_GT(a, b)</code> - проверка условия &ldquo;a &gt; b&rdquo;</li>
<li><code>EXPECT_LT(a, b)</code> - проверка условия &ldquo;a &lt; b&rdquo;</li>
<li><code>EXPECT_GE(a, b)</code> - проверка условия &ldquo;a &gt;= b&rdquo;</li>
<li><code>EXPECT_LE(a, b)</code> - проверка условия &ldquo;a &lt;= b&rdquo;</li>
<li><code>EXPECT_TRUE(a)</code> - проверка аргумента на истину</li>
<li><code>EXPECT_FALSE(a)</code> - проверка аргумента на ложь</li>
</ul>

<p>Функции, начинающиеся с <code>EXPECT_</code>, в случае ошибки не прерывают выполнение теста, а просто печатают сообщение об ошибке, и тестирование продолжается. Если ваша ошибка фатальна (например, база данных недоступна), и нет причин продолжать тесты вообще, то можно использовать функции со схожим именованием:</p>

<ul>
<li><code>ASSERT_EQ(a, b)</code> - проверка условия &ldquo;a = b&rdquo;</li>
<li><code>ASSERT_NE(a, b)</code> - проверка условия &ldquo;a != b&rdquo;</li>
<li><code>ASSERT_GT(a, b)</code> - проверка условия &ldquo;a &gt; b&rdquo;</li>
<li><code>ASSERT_LT(a, b)</code> - проверка условия &ldquo;a &lt; b&rdquo;</li>
<li><code>ASSERT_GE(a, b)</code> - проверка условия &ldquo;a &gt;= b&rdquo;</li>
<li><code>ASSERT_LE(a, b)</code> - проверка условия &ldquo;a &lt;= b&rdquo;</li>
<li><code>ASSERT_TRUE(a)</code> - проверка аргумента на истину</li>
<li><code>ASSERT_FALSE(a)</code> - проверка аргумента на ложь</li>
</ul>

<p>Эти фунции при ошибке прерывают тест и весь процесс тестирования с целом.</p>

<p>Есть еще особая функция <code>FAIL()</code>, которая безусловно прерывает тест с ошибкой. Удобно для проверки мест, где вы &ldquo;не должны&rdquo; оказаться в процесса работы теста. Например:</p>

<pre class="hl">
<span class="hl kwa">try</span> <span class="hl opt">{</span>
  <span class="hl opt">...</span>
<span class="hl opt">}</span> <span class="hl kwa">catch</span><span class="hl opt">(...) {</span>
  <span class="hl kwd">FAIL</span><span class="hl opt">() &lt;&lt;</span> <span class="hl str">&quot;Данный кусок программы не должен генерировать исключений&quot;</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>

<p>Полный список функций-проверок, а также описания прочих возможностей Google Test, так как я затронул пока лишь малую их часть, можно получить в <a href="http://code.google.com/p/googletest/wiki/AdvancedGuide">документации</a>.</p>

<p>Кроме того, во все эти функции можно писать как стандартные потоки вывода через оператор <code>&lt;&lt;</code>, как мы делали в примере выше:</p>

<pre class="hl">
<span class="hl kwd">EXPECT_TRUE</span><span class="hl opt">(</span>thread<span class="hl opt">.</span><span class="hl kwd">done</span><span class="hl opt">()) &lt;&lt;</span> <span class="hl str">&quot;Поток не изменил флаг&quot;</span><span class="hl opt">;</span>
</pre>

<p>тем самым печатая удобную отладочную информацию.</p>

<p>Давайте проанализируем сказанное и сделанное. Что мы получили? Как я уже говорил, мы формализовали наши требования от класса в виде программы, которую можно теперь запускать сколько угодно раз, проверяя работу класса. Вы спросите для чего? Класс-то работает. А вот представьте, что вы установили новую версию компилятора или новую версию библиотеки <code>pthread</code> и что-то в этом роде. Вы уверены, что в них нет ошибок? или может нужны другие опции командной строки для правильной работы. Кто знает?! Тест знает! Скомпилированный и запущенный тест сразу же проверит, работает ли класс так, как вы от него ожидаете. По крайне мере хуже уже не будет. Новые ошибки тест может и не покажет, но уже формализованное ранее поведение класса проверит точно. А теперь представьте, что вам надо так перепроверить сотни классов в вашем проекте. Только автоматизированное тестирование делает это реальным. А тестирование типа &ldquo;давай поерзаем программой быстренько, и если сразу не сломалось, то все хорошо&rdquo; тестированием не является вообще. Гораздо проще включить компилирование и запуск тестов при каждой полной сборке проекта. Небольшая потеря времени конечно есть на дополнительную компиляцию, но это с лихвой окупается выявленными тут же ошибками. Сами unit тесты обычно работают очень быстро. Они должны быть быстрыми, иначе они неудобны для регулярного запуска. Сотни тестов не должны как-либо заметно медленно работать. Если какой-то тест требует секунд для себя, то может его стоит перенести в раздел функционального тестирования и пользоваться им уже в процессе проверки программы для релиза, а не в процессе самой разработки, или запускать медленные тесты автоматически в ночных сборках.</p>

<p>Кстати, наличие тестов позволяет поручить возможные доработки кода не только тому, кто этот код писал изначально и понимает в самых деталях, как все работает. Если тесты работают, значит изменения кода по крайне мере не сделали его хуже, а значит клиент не будет кричать сразу после установки новой версии типа &ldquo;какого вы тут все сломали&rdquo;. Тесты - это прежде доказательства программиста, что его программа работает так, как он ожидает и всем обещает, как его программа должна работать. Только это уже не просто слова, а автоматизированный метод проверки.</p>

<p>Помните те примеры, которые мы писали в начале. Что с ними случилось? Мы их просто выкинули как отработанный материал. Выкинули результаты очень полезной работы. Мы по кусочкам разобрались, как работает исследуемый класс, но потом отказались повторно использовать уже полученные результаты, выкинув тестовые примеры. Так почему бы изначально не приложить чуть-чуть усилий и не оформить тестовые игрушечные примеры в виде блочных тестов, готовых к автоматизированному повторному использованию, и не превратить их в мощное автоматизированное оружие против багов?</p>

<p>Личный пример. Писал я класс, реализующий TCP/IP сокет с использованием SSL. Скачал библиотеку OpenSSL, начал разбираться. Стал писать мини примеры для освоения разных аспектов библиотеки. И каждый свой эксперимент я оформлял в виде теста (один тест для создания контекста ключей, другой для установления соединения, третий для расшифрации кодов ошибок и т.д.). Каждый новый запуск проекта влючал все больше и больше таких тестов. Затем я вынужден был прерваться на месяц. По прошествии месяца я напрочь забыл все про OpenSSL. И если бы не готовые уже тесты, я бы начал разбираться опять сначала. А так, поглядев на уже сделанные куски, я быстро погонял тесты, вспомнил что к чему, и продолжил работу. Затем из этих тестов фактически и родилась моя библиотека для работы с SSL, и сами тесты включились в тестирующую сборку. Когда осваиваешь что-то новое - язык, библиотеку и т.д. - тестовая программа очень быстро разрастается и превращается некоего монстра, в котором вы хотите задействовать и проверить все новое. Гораздо полезнее разбираться по маленьким кусочкам, изолированно изучать каждый вопрос, закрепляя полученные результаты в виде тестов.</p>

<p>Вы меня сходу спросите - а как писать тесты? Ведь данный пример весьма тривиален, а реальные программы гораздо сложнее, в них много взаимозависимостей, и порой крайне сложно раскроить их на тестируемые кусочки. Ответ, который я дам сходу сейчас таков - пишите ваши программы сразу пригодными для тестирования. А вот как именно это делать - я расскажу в будущих выпусках нашего научно-популярного журнала.</p>

<p>А вы меня опять спросите - а другие языки как? как, например, делать unit тестирование в классическом языке С? Об этом я тоже непременно расскажу.</p>

<p>Unit-тестирование — это громадная и очень интересная тема. Будем ее развивать.</p>

<p>P.S. Исходные тексты данной статьи я проверял на Windows, Linux 2.6 (32- и 64-бит Intel и SPARC), AIX 5.3 и 6, SunOS 5.2 64-bit SPARC.</p>

<p>Другие посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2009/01/26/universal-threads-for-windows-and-unix/">Универсальные потоки на С++ для Windows и UNIX</a></li>
<li><a href="http://demin.ws/blog/russian/2009/03/01/unit-testing-in-c/">Unit-тестирование в языке С</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Защита объектов от случайного копирования в С++]]></title>
    <link href="http://demin.ws/blog/russian/2009/01/27/preventing-copying-objects-in-cpp/"/>
    <updated>2009-01-27T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/01/27/preventing-copying-objects-in-cpp/</id>
    <content type="html"><![CDATA[<p>Внимательный читатель наверняка заметил в посте про <a href="http://demin.ws/blog/russian/2009/01/26/universal-threads-for-windows-and-unix/">Универсальные потоки на С++ для Windows и UNIX</a> следующий фрагмент кода:</p>

<pre class="hl">
<span class="hl kwc">class</span> Thread <span class="hl opt">{</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl opt">...</span>
<span class="hl kwc">private</span><span class="hl opt">:</span>
  <span class="hl opt">...</span>
  <span class="hl slc">// Защита от случайного копирования объекта в C++</span>
  <span class="hl kwd">Thread</span><span class="hl opt">(</span><span class="hl kwb">const</span> Thread<span class="hl opt">&amp;);</span>
  <span class="hl kwb">void</span> <span class="hl kwc">operator</span><span class="hl opt">=(</span><span class="hl kwb">const</span> Thread<span class="hl opt">&amp;);</span>
<span class="hl opt">};</span>
</pre>

<p>Это определения конструктора копирования и перегруженого оператора присваивания. Причем непосредственно реализаций этих функций нигде нет, только определения. Вопрос: для чего все это?</p>

<p>Давайте разберемся с назначением этих функций. Их прямая задача уметь копировать объект данного класса. А что произойдет, если вы по какой-то причине не определили конструктор копирования или оператор присваивания (может просто забыли), а пользователь вашего класса решил скопировать объект, возможно даже неосознанно? В этом случае компилятор сам определит конструктор копирования по <em>умолчанию</em>, который будет тупо копировать объект байт за байтом без учета смысла копируемых данных. И вам крупно повезет, если все члены-данные вашего класса являются либо базовыми типами (<code>int</code>, <code>long</code>, <code>char</code> и т.д.), либо имеют корректные конструкторы копирования и операторы присваивания. В этом случае все будет хорошо — базовые типы компилятор умеет копировать правильно, а сложные типы скопируют себя сами через их конструкторы копирования. А представьте, что вы внутри своего класса создаете объекты динамически в куче и храните в классе только указатели на них. Указатеть — это базовый тип, и компилятор его нормально скопирует. А вот данные, на которые этот указатель указывает он копировать не будет. В итоге два объекта (старый-оригинал и новый-копия) будут ссылаться на один кусок памяти в куче. Теперь понятно, что при попытке освобождения этой памяти в деструкторе (если вы не забыли этого сделать) кто-то из этих двух объектов попытается освободить уже освобожденную память. Вероятность аварийного завершения программы в этом случае крайне высока, а поиск подобных ошибок может быть крайне долгим и мучительным.</p>

<p>Отсюда мораль: если для вашего класса не заданы конструктор копирования и оператор присваивания (они вам не нужны по смыслу), сделайте им пустые объявления в разделе закрытом разделе (<code>private</code>). Тогда попытка скопировать этот объект сразу приведет к ошибке при компиляции. Во-первых, объявления являются закрытыми (<code>private</code>), и сторонний пользователь вашего класса получит ошибку доступа к закрытым данным класса. Во-вторых, у этих функций нет тел, а значит вы сами не выстрелите себе в ногу, попытавшись случайно скопировать объект данного класса в нем же самом (тут вам <code>private</code> уже не помеха), если вы на это не рассчитывали при проектирование класса.</p>

<p>Лично я делаю так. У меня есть следующий файл (<code>ctorguard.h</code>):</p>

<pre class="hl">
<span class="hl ppc">#ifndef _EXT_CTOR_GUARD_H</span>
<span class="hl ppc">#define _EXT_CTOR_GUARD_H</span>
<span class="hl ppc">#define DISALLOW_COPY_AND_ASSIGN(TypeName) \</span>
<span class="hl ppc">  TypeName(const TypeName&amp;);               \</span>
<span class="hl ppc">  void operator=(const TypeName&amp;)</span>
<span class="hl ppc">#endif</span>
Теперь определение класса будет выглядеть так<span class="hl opt">:</span>
<span class="hl ppc">#include</span> <span class="hl pps">&quot;ctorguard.h&quot;</span><span class="hl ppc"></span>
<span class="hl kwc">class</span> Thread <span class="hl opt">{</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl opt">...</span>
<span class="hl kwc">private</span><span class="hl opt">:</span>
  <span class="hl opt">...</span>
  <span class="hl slc">// Защита от случайного копирования объекта в C++</span>
  <span class="hl kwd">DISALLOW_COPY_AND_ASSIGN</span><span class="hl opt">(</span>Thread<span class="hl opt">);</span>
<span class="hl opt">};</span>
</pre>

<p>Теперь вы надежно предохранены.</p>

<p>Кстати, вдогонку. При реализации оператора присваивания надо обязательно проверять — не пытаетесь ли вы копировать объект сам в себя, то есть, не является ли источник копирования самими объектом куда идет копирование. Если это произойдет, вы легко можете получить переполнения стека как самый вероятный исход из-за бесконечного вызова оператора присваивания себя самим.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Универсальные потоки на С++ для Windows и UNIX]]></title>
    <link href="http://demin.ws/blog/russian/2009/01/26/universal-threads-for-windows-and-unix/"/>
    <updated>2009-01-26T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/01/26/universal-threads-for-windows-and-unix/</id>
    <content type="html"><![CDATA[<p>Потоки (threads) являются весьма удобным механизмом для ускорения программ и придания им гибкости в использовании процессорного времени, особенно в наш успешно и бесповоротно наступивший век многоядерных процессоров, стоящих почти в каждом современном компьютере. Чего уж говорить о серверных платформах.</p>

<p>Итак, задался я целью иметь удобный и простой класс на С++ для работы с потоками. В силу особенностей работы мне приходится иметь дело различными системами, и хотелось иметь максимально переносимый вариант. На сегодняшний день стандартом де-факто для мира UNIX являются так называемые <a href="http://ru.wikipedia.org/wiki/POSIX_Threads">потоки POSIX</a> Для Windows тоже есть реализация этой библиотеки, но в целях исключения дополнительной внешней зависимости для этой платформы я решил пользоваться напрямую Windows API, благо назначения функций очень похожи. При использования POSIX Threads под Windows данный класс еще упрощается (надо просто выкинуть всю Windows секцию), но для меня лично удобнее было не иметь зависимости от виндусовых POSIX Threads. Дополнительная гибкость, так сказать.</p>

<p>Исходники приведены прямо тут, благо они небольшие. Комментариев мало, так как я считаю, что лучший комментарий, это грамотно написанный код. Сердце всего дизайна класса — это виртуальный метод <code>void Execute()</code>, который и реализует работу потока. Данный метод должен быть определен в вашем классе потока, который наследуется от класса Thread.</p>

<p>Я всегда использую пространства имен (namespaces) в C++, особенно для библиотечных классов общего назначения. Для данного примера я использовал имя <code>ext</code>. Замените его на ваше, если необходимо &ldquo;вписать&rdquo; класс в ваш проект.</p>

<p>Для компиляции в Windows необходимо определить макрос WIN32. В этом случае будет использоваться Windows API. Иначе подразумевается работа с pthreads. Если вы используете Cygwin, то можно работать и через Windows API и через pthreads.</p>

<p><code>thread.h</code>:</p>

<pre class="hl">
<span class="hl ppc">#ifndef _EXT_THREAD_H</span>
<span class="hl ppc">#define _EXT_THREAD_H</span>

<span class="hl ppc">#ifdef WIN32</span>
<span class="hl ppc">#include &lt;windows.h&gt;</span>
<span class="hl ppc">#else</span>
<span class="hl ppc">#include &lt;pthread.h&gt;</span>
<span class="hl ppc">#include &lt;signal.h&gt;</span>
<span class="hl ppc">#endif</span>

<span class="hl kwa">namespace</span> ext <span class="hl opt">{</span>

<span class="hl ppc">#ifdef WIN32</span>
<span class="hl kwc">typedef</span> HANDLE ThreadType<span class="hl opt">;</span>
<span class="hl ppc">#else</span>
<span class="hl kwc">typedef</span> pthread_t ThreadType<span class="hl opt">;</span>
<span class="hl ppc">#endif</span>

<span class="hl kwc">class</span> Thread <span class="hl opt">{</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl kwd">Thread</span><span class="hl opt">() {}</span>
  <span class="hl kwc">virtual</span> <span class="hl opt">~</span><span class="hl kwd">Thread</span><span class="hl opt">();</span>

  <span class="hl slc">// Функция запуска потока. Ее нельзя совместить с конструктором</span>
  <span class="hl slc">// класса, так как может случиться, что поток запустится до того,</span>
  <span class="hl slc">// как объект будет полностью сформирован. А это может спокойно </span>
  <span class="hl slc">// произойти, если вызвать pthread_create или CreateThread в</span>
  <span class="hl slc">// в конструкторе. А вызов виртуальной функции в конструкторе, </span>
  <span class="hl slc">// да еще и в конструкторе недосформированного объекта, </span>
  <span class="hl slc">// в лучшем случае приведет к фатальной ошибке вызова чисто </span>
  <span class="hl slc">// виртуальной функции, либо в худшем случае падению программы </span>
  <span class="hl slc">// с нарушением защиты памяти. Запуск же потока после работы</span>
  <span class="hl slc">// конструктора избавляет от этих проблем. </span>
  <span class="hl kwb">void</span> <span class="hl kwd">Start</span><span class="hl opt">();</span>

  <span class="hl slc">// Главная функция потока, реализующая работу потока.</span>
  <span class="hl slc">// Поток завершается, когда эта функция заканчивает работу.</span>
  <span class="hl slc">// Крайне рекомендуется ловить ВСЕ исключения в данной функции</span>
  <span class="hl slc">// через try-catch(...). Возникновение неловимого никем </span>
  <span class="hl slc">// исключения приведет к молчаливому падению программы без</span>
  <span class="hl slc">// возможности объяснить причину.</span>
  <span class="hl kwc">virtual</span> <span class="hl kwb">void</span> <span class="hl kwd">Execute</span><span class="hl opt">() =</span> <span class="hl num">0</span><span class="hl opt">;</span>

  <span class="hl slc">// Присоединение к потоку.</span>
  <span class="hl slc">// Данная функция вернет управление только когда поток</span>
  <span class="hl slc">// завершит работу. Применяется при синхронизации потоков,</span>
  <span class="hl slc">// если надо отследить завершение потока.</span>
  <span class="hl kwb">void</span> <span class="hl kwd">Join</span><span class="hl opt">();</span>

  <span class="hl slc">// Уничтожение потока.</span>
  <span class="hl slc">// Принудительно уничтожает поток извне. Данный способ</span>
  <span class="hl slc">// завершения потока является крайне нерекомендуемым.</span>
  <span class="hl slc">// Правильнее завершать поток логически, предусмотрев</span>
  <span class="hl slc">// в функции Execute() условие для выхода, так самым</span>
  <span class="hl slc">// обеспечив потоку нормальное завершение.</span>
  <span class="hl kwb">void</span> <span class="hl kwd">Kill</span><span class="hl opt">();</span>

<span class="hl kwc">private</span><span class="hl opt">:</span>
  ThreadType __handle<span class="hl opt">;</span>

  <span class="hl slc">// Защита от случайного копирования объекта в C++</span>
  <span class="hl kwd">Thread</span><span class="hl opt">(</span><span class="hl kwb">const</span> Thread<span class="hl opt">&amp;);</span>
  <span class="hl kwb">void</span> <span class="hl kwc">operator</span><span class="hl opt">=(</span><span class="hl kwb">const</span> Thread<span class="hl opt">&amp;);</span>
<span class="hl opt">};</span>

<span class="hl opt">}</span> <span class="hl slc">// ext</span>

<span class="hl ppc">#endif</span>
</pre>

<p><code>thread.cpp</code>:</p>

<pre class="hl">
<span class="hl ppc">#include</span> <span class="hl pps">&quot;thread.h&quot;</span><span class="hl ppc"></span>

<span class="hl kwa">namespace</span> ext <span class="hl opt">{</span>

<span class="hl kwb">static void</span> <span class="hl kwd">ThreadCallback</span><span class="hl opt">(</span>Thread<span class="hl opt">*</span> who<span class="hl opt">) {</span>
<span class="hl ppc">#ifndef WIN32</span>
  <span class="hl slc">// Далаем поток &quot;убиваемым&quot; через pthread_cancel.</span>
  <span class="hl kwb">int</span> old_thread_type<span class="hl opt">;</span>
  <span class="hl kwd">pthread_setcanceltype</span><span class="hl opt">(</span>PTHREAD_CANCEL_ASYNCHRONOUS<span class="hl opt">, &amp;</span>old_thread_type<span class="hl opt">);</span>
<span class="hl ppc">#endif</span>
  who<span class="hl opt">-&gt;</span><span class="hl kwd">Execute</span><span class="hl opt">();</span> 
<span class="hl opt">}</span>

<span class="hl ppc">#ifdef WIN32</span>

Thread<span class="hl opt">::~</span><span class="hl kwd">Thread</span><span class="hl opt">() {</span>
  <span class="hl kwd">CloseHandle</span><span class="hl opt">(</span>__handle<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span> Thread<span class="hl opt">::</span><span class="hl kwd">Start</span><span class="hl opt">() {</span>
  __handle <span class="hl opt">=</span> <span class="hl kwd">CreateThread</span><span class="hl opt">(</span>
    <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> 
    <span class="hl kwa">reinterpret_cast</span><span class="hl opt">&lt;</span>LPTHREAD_START_ROUTINE<span class="hl opt">&gt;(</span>ThreadCallback<span class="hl opt">),</span> <span class="hl kwa">this</span><span class="hl opt">,</span>
    <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">0</span>
  <span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span> Thread<span class="hl opt">::</span><span class="hl kwd">Join</span><span class="hl opt">() {</span>
  <span class="hl kwd">WaitForSingleObject</span><span class="hl opt">(</span>__handle<span class="hl opt">,</span>  INFINITE<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span> Thread<span class="hl opt">::</span><span class="hl kwd">Kill</span><span class="hl opt">() {</span>
  <span class="hl kwd">TerminateThread</span><span class="hl opt">(</span>__handle<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl ppc">#else</span>

Thread<span class="hl opt">::~</span><span class="hl kwd">Thread</span><span class="hl opt">() {</span>
<span class="hl opt">}</span>

<span class="hl kwc">extern</span> <span class="hl str">&quot;C&quot;</span>
<span class="hl kwc">typedef</span> <span class="hl kwb">void</span> <span class="hl opt">*(*</span>pthread_callback<span class="hl opt">)(</span><span class="hl kwb">void</span> <span class="hl opt">*);</span>

<span class="hl kwb">void</span> Thread<span class="hl opt">::</span><span class="hl kwd">Start</span><span class="hl opt">() {</span>
  <span class="hl kwd">pthread_create</span><span class="hl opt">(</span>
    <span class="hl opt">&amp;</span>__handle<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> 
    <span class="hl kwa">reinterpret_cast</span><span class="hl opt">&lt;</span>pthread_callback<span class="hl opt">&gt;(</span>ThreadCallback<span class="hl opt">),</span> 
    <span class="hl kwa">this</span>
  <span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span> Thread<span class="hl opt">::</span><span class="hl kwd">Join</span><span class="hl opt">() {</span>
  <span class="hl kwd">pthread_join</span><span class="hl opt">(</span>__handle<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span> Thread<span class="hl opt">::</span><span class="hl kwd">Kill</span><span class="hl opt">() {</span>
  <span class="hl kwd">pthread_cancel</span><span class="hl opt">(</span>__handle<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl ppc">#endif</span>

<span class="hl opt">}</span> <span class="hl slc">// ext</span>
</pre>

<p>Возникает резонный вопрос — я почему ни один из вызовов функций не проверяет код ошибки. Вдруг что? Я могу сказать, что я встретил только один случай возврата ошибки от pthread_create.</p>

<p>Это было на AIX&rsquo;e при использовании связывания (linking) времени исполнения. Программа не была слинкована с библиотекой pthreads (я забыл указать ключик &ldquo;-lpthread&rdquo;), но из-за особенностей линковки времени исполнения (так любимой AIX&rsquo;ом) линкер сообщил, что все хорошо и выдал мне исполняемый файл. В процессе же работы ни одна функция из библиотеки pthreads просто не вызывалась. Интересно, что код ошибки функции <code>pthread_create()</code> означал что-то типа &ldquo;не могу открыть файл&rdquo;, и чего я сделал вывод, что файл библиотеки недоступен. Вообще, линковка времени исполнения — это довольно хитрая штука. В данном виде связывания внешние связи определены уже на стадии линковки (то есть это не тоже самое, что загрузка разделяемой библиотеки вручную во время работы, самостоятельный поиск функций по именам и т.д.), но вот фактический поиск вызываемой функции происходит в сам момент старта программы. Получается, что до непосредственно запуска нельзя проверить в порядке ли внешние зависимости (команда <code>ldd</code> рапортует, что все хорошо). Более того, разрешение внешних зависимостей происходить в момент вызовы внешней функции. Это довольно гибкий механизм, но вот его практическая полезность пока остается для меня загадкой. Вообще AIX является довольно изощренной системой в плане разнообразия механизмов связывания. Позже я постараюсь описать результаты моих &ldquo;исследований&rdquo; AIXа на эту тему.</p>

<p>Но вернемся к причинам отсутствия проверки кодов возврата от функций pthreads и Windows API. Как я уже упомянул, если какая-то из этих функций завешается с ошибкой, то с огромной вероятностью что-то радикально не так в системе, и это не просто нормальное завершение функции с ошибкой, после которой можно как-то работать дальше. Это фатальная ошибка, и ваше приложение не будет работать нормально еще по туче других причин. Кроме этого я хотел сделать это класс максимально простым, чтобы его можно было таскать из проекта в проект и не допиливать его напильником под существующую в проекте систему обработки ошибок (исключения, коды возврата, журналирование и т.д.), так как в каждом проекте она может быть разная.</p>

<p>Читатель всегда может добавить в код необходимые проверки для собственных нужд.</p>

<p>Кроме этого, я всегда использую в разработке unit-тестирование, и данный класс также имеет тесты. Поэтому запускаемый при каждой полной сборке проекта набор тестов сразу выявляет большинство проблем (уже проблемы линковки точно).</p>

<p>В следующей главе я расскажу про технику использования описанного класса — как создавать потоки, как их запускать, останавливать и уничтожать. Я буду использовать unit-тестирование, что позволит все мини-примеры превращать в автоматизированные тесты вашего проекта.</p>

<p>В завершении могу сказать, что данный класс успешно работает и проверен мной лично на Windows (32- и 64-бит), Linux 2.6 (32- и 64-бит Intel и SPARC), AIX 5.3 и 6, SunOS 5.2 64-bit SPARC, HP-UX и HP-UX IA64.</p>

<p>Другие посты по теме:</p>

<ul>
<li><a href="http://demin.ws/blog/russian/2009/01/28/unit-testing-concurrent-threads/">Unit-тестирование для параллельных потоков</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Вступительное слово, или "Почему? собственно"]]></title>
    <link href="http://demin.ws/blog/russian/2009/01/24/why-i-have-started-this-blog/"/>
    <updated>2009-01-24T00:00:00+00:00</updated>
    <id>http://demin.ws/blog/russian/2009/01/24/why-i-have-started-this-blog/</id>
    <content type="html"><![CDATA[<p>Прекрасно сказано:</p>

<blockquote>
<p>Математик любит искать во всем логику, закономерности, разумность. Если ее не хватает в реальной жизни, то компьютер, операционная система, языки программирования дополняют этот дефицит, служат своего рода отдушиной, тем сказочным миром, который помогает легче переносить уродливость мира реального. Следовательно, чем более иррациональным будет повседневное бытие, тем больше будет тяга к компьютеру, к его удивительно логичному и разумному поведению, осмысленным действиям, внутренней логике, виртуальной действительности. Там нет тупых и невежественных генералов, очередей за мясом, совхозов и овощебаз, общественной работы и субботников, там только четкие и понятные критерии, TRUE и FALSE, единица и ноль. А специалист по компьютерам, хороший программист всегда будет востребован, при любом правителе, любой идеологии, любых начальниках. Отсюда уже недалеко и до свободы, до реальной свободы, когда пропадает этот инстинктивный трепет перед важными надутыми начальниками, не освоившими толком даже компьютерных игр.</p>

<p><strong>Михаил Масленников</strong> <a href="http://mikhailmasl.livejournal.com/4852.html">Криптография и свобода</a></p>
</blockquote>

<p>Это, наверное, первый и последний нетехнический пост в данном блоге. Далее все будет носить исключительно технический характер про компьютеры, программирование, роботов и так далее со всеми остановками. Изначальная идея была просто сделать сборник моих собственных фишек и штучек, изобретенных или подсмотренных. Многие вещи быстро забываются, и хочется иметь онлайновый справочник. Кроме того, идеи глупо держать под подушкой, там они гниют и тухнут. Идеями надо делиться, что я и планирую делать тут.</p>

<p>Будет интересно. Следите за анонсами.</p>
]]></content>
  </entry>
  

</feed>
