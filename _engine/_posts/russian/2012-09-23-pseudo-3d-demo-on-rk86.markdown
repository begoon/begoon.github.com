---
layout: post
title: "Псевдо 3D-демо для Радио-86РК"
language: russian
date: 2012-09-23 22:22
comments: true
categories: 
- radio86
- rk86
- russian
---
Писав [пост про досовскую демку команды UCL][Демки из прошлого - United Crackers League (UCL)], я надеялся, что мне подскажут ее алгоритм. Увы,
сначала были только "буу" на Хабре, но вот 
[Вячеслав Славинский][] подогнал не просто алгоритм, а уже готовое решение.

[Демки из прошлого - United Crackers League (UCL)]: /blog/russian/2012/09/10/united-crackers-league/

Основные моменты [реализации][Исходники от Вячеслава]:

* Формула "волны" (функция [z_offset][]), по которой вычисляется координата Z.
* Формула перспективы [zdiv][] для перевода (X, Y, Z) в плоские координаты
  экрана.
* Пример работы с библиотекой [Processing.js][] для удобного моделирования 3D.
  Если посмотреть [исходник][Исходники от Вячеслава], то это не совсем
  JavaScript. В это типа Java c типами и отсутствием вольностей типа
  опционального ";". 

[Вячеслав Славинский]: http://sensi.org/~svo/
[Исходники от Вячеслава]: https://github.com/begoon/rk86-3d-demo/blob/master/svo/wfloat.pde
[z_offset]: https://github.com/begoon/rk86-3d-demo/blob/63a4734c1bde9ea5ec93d90d9240303f70397751/svo/wfloat.pde#L32
[zdiv]: https://github.com/begoon/rk86-3d-demo/blob/63a4734c1bde9ea5ec93d90d9240303f70397751/svo/wfloat.pde#L58
[Processing.js]: http://processingjs.org/

А вот [демка в действии][].

[демка в действии]: /projects/radio86/demo/svo/

Изучив ее вдоль и поперек, у меня возник план перенести ее на Радио-86РК. 
Напомню: 1.78MHz, 32Кб памяти, символьный экран 78x30 или 156x60 через
псевдографику.

Для начала было интересно посмотреть, как могло бы выглядеть изображения
на экране РК. Например, [вот так][Статическая картинка] (не могу понять
почему, но надо нажать CTRL-R или F5 после перехода по ссылке, а иначе
только черный экран).

[Статическая картинка]: /projects/radio86/demo/static/

![](/images/blog/rk86/demo/rk86-demo-static.png)

В принципе, красиво, я решил продолжить. Взяв за основу исходник Вячеслава,
я добавил туда вывод в стиле РК символами псевдографики - 178x60.
[Выглядит неплохо][Демо с float].

[Демо с float]: /projects/radio86/demo/156x60/java/index-float.html

Итак, идея работает. Надо думать, как это все потенциально писать на
8-битном ассемблере Intel 8080, где даже деления нет. Надо переводить все
в целые числа, а синус брать по таблице. 
[Реализация с вещественными числами][] немного поменялась, стала использовать
[табличный синус][Реализация с табличным синусом]. Несмотря на использование 
только 128 целых значений синуса на всем интервале от 0 до 2*PI, к тому же
теперь домноженных на 256 и округленных в целое, 
[выглядело тоже неплохо][Реализация с табличным синусом в работе]
(случайно вышел забавный эффект в начале демки, когда буквы приезжают сзади).

[Реализация с вещественными числами]: https://github.com/begoon/rk86-3d-demo/blob/master/156x60/java/wfloat-float.pde
[Реализация с табличным синусом]: https://github.com/begoon/rk86-3d-demo/blob/master/156x60/java/wfloat.pde
[Реализация с табличным синусом в работе]: /projects/radio86/demo/156x60/java/

Дальше надо было уже убирать библиотеку Processing.js, все переводить на
целые и желательно положительные числа. Для целочисленности я все домножил
на 256, а для положительности ввел смещение. 
[Исходник][Реализация с целыми и положительными числами]
уже становился все хуже и хуже, но все еще 
[работал][Реализация с целыми и положительными числами в работе].
Я везде по возможности упрощал константы и вставил проверки на
положительность переменных.

[Реализация с целыми и положительными числами]: https://github.com/begoon/rk86-3d-demo/blob/master/156x60/js/index.html

[Реализация с целыми и положительными числами в работе]: /projects/radio86/demo/156x60/js/

И вот родилась [первая версия на ассемблере][], где можно было считать синус.
В качестве эксперимента я попробовал рисовать [синусоиду][Синусоида].

[первая версия на ассемблере]: https://github.com/begoon/rk86-3d-demo/blob/master/156x60/i8080/rk86demo.asm
[Синусоида]: /projects/radio86/demo/156x60/i8080/

Очевидно, что с такой производительностью полный кадр 156x60 она будет 
считать полгода. Первый облом.

Решил я перейти в разрешение 78x30, просто символы, без псевдографики.
Сам исходник на JavaScript [несильно поменялся][78x30 на JS], 
разве что константы. [Выглядело][78x30 на JS в работе] тоже сносно.

[78x30 на JS]: https://github.com/begoon/rk86-3d-demo/blob/master/78x30/js/demo.html
[78x30 на JS в работе]: /projects/radio86/demo/78x30/js/

Уже эту версию [я полностью реализовал на ассемблере 8080][78x30 на 8080].
Получился монструозный опус почти на тысячу строк. 
А работал он [вот так][78x30 на 8080 в работе]... Второй облом.

[78x30 на 8080]: https://github.com/begoon/rk86-3d-demo/blob/master/78x30/i8080/pure/rk86demo.asm

[78x30 на 8080 в работе]: /projects/radio86/demo/78x30/i8080/pure/

Он отступать уж совсем поздно было, и я предпринял последнюю, хоть уже
немного "нечистую" попытку. С помощью [генератора на С][Генератор на C]
я [записал все кадры][Frames log] вместе с 
[разницей между соседними][Frames ASM]. Сам же 
[плеер этого самопального MPEG'а][] был очень короткий.

[Генератор на C]: https://github.com/begoon/rk86-3d-demo/blob/master/78x30/i8080/generator/demo.c
[плеер этого самопального MPEG'а]: https://github.com/begoon/rk86-3d-demo/blob/master/78x30/i8080/rk86demo.asm

[Frames ASM]: https://github.com/begoon/rk86-3d-demo/blob/master/78x30/i8080/frames/frames.asm
[Frames log]: https://raw.github.com/begoon/rk86-3d-demo/master/78x30/i8080/frames/frames.log

В итоге - ОНО! ([на эмуляторе в браузере][78x30 на 8080 с кадрами])

[78x30 на 8080 с кадрами]: /projects/radio86/demo/78x30/i8080/

И теперь уже на настоящем РК (почти настоящем):

<iframe width="640" height="360" src="https://www.youtube.com/embed/kVNvI8KrrnM" frameborder="0" allowfullscreen></iframe>

Мораль
------

Уметь найти в себе силы признавать бесперспективность той или иной
затей и вовремя остановиться.

P.S.
----

Исходники все этого мучения доступны - https://github.com/begoon/rk86-3d-demo/


