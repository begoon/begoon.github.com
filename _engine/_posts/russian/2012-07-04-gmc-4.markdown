---
layout: post
title: "Микрокомпьютер GMC-4"
language: russian
date: 2012-07-04 19:22
comments: true
categories: 
- russian
- microcomputer
- gadget
- gmc-4
---
[По наводке Сергея Вакуленко][Пост про GMC-4], я купил [GMC-4][]. Все-таки в подобных устройствах есть какой-то неповторимый шарм. Заказал в забавном японском магазине гаджетов [Japan Trend Shop][].

![](/images/blog/gmc4/gmc4.jpg)

[Пост про GMC-4]: http://ramlamyammambam.livejournal.com/190698.html
[GMC-4]: http://en.wikipedia.org/wiki/GMC-4
[Japan Trend Shop]: http://www.japantrendshop.com/gmc4-microcomputer-p-789.html

GMC-4 -- это четырехбитный микрокомпьютер. Характеристики компьютера:

- размер слова 4 бита
- восемь регистров, один регистр-флаг
- 15 однословных и 16 двухсловных машинных инструкций
- память программ 80 слов
- память данных 16 слов
- ПЗУ c набором из 7 игр: орган, угадай мелодию, дави моль, теннис, таймер, музыкальный плеер, генератор морзе
- семь светодиодов - порт вывода шины адреса
- семисегментный индикатор - порт вывода шины данных
- 20-кнопочная клавиатура - порт ввода
- динамик для вывода звука
- кнопка сброса
- питание от 3-х батареек AA

Вся архитектура описывается одним небольшим документом -- [Programming the Gakken GMC-4 Microcomputer][].

[Programming the Gakken GMC-4 Microcomputer]: http://tsoj.manga.org/gakken/otona_gmc.html

Сегодня приехала моя посылка. GMC-4 является приложением к одному из выпусков журнала "Otona no Kagaku" издательства Gakken, 24-й номер за 2009 год. Коробка с конструктором приклеена к журналу. Все на японском.

![](/images/blog/gmc4/IMG_0458.JPG)

Забавно, на обратной стороне коробки изображены машинные инструкции GMC-4. Все умещается в одну таблицу.

![](/images/blog/gmc4/IMG_0459.JPG)

Плата, пищалка, подставка, фрагменты клавиатуры и винты.

![](/images/blog/gmc4/IMG_0460.JPG)

Инструкция на японском -- это жестко.

![](/images/blog/gmc4/IMG_0469.JPG)

Ставим батарейки и закрепляем пищалку.

![](/images/blog/gmc4/IMG_0463.JPG)

Плата.

![](/images/blog/gmc4/IMG_0461.JPG)

![](/images/blog/gmc4/IMG_0462.JPG)

Наклеиваем клавиатуру.

![](/images/blog/gmc4/IMG_0464.JPG)

![](/images/blog/gmc4/IMG_0466.JPG)

Включаем... It's alive! Alive!!!

![](/images/blog/gmc4/IMG_0468.JPG)

Итак: клавиатура, семисегментник, под ним процессор, затем пипка "hard reset". Сверху семь  светодиодов, управляемых индивидуально. Они, например, используются для отображения текущего адреса. Мне это все напомнило [ЮТ-88][]. В его [первой модификации][ЮТ-88, минимальная конфигурация] был только семисегментный индикатор и похожая клавиатура.

![](/images/blog/gmc4/ut88-minimal.jpg)

[ЮТ-88]: http://ru.wikipedia.org/wiki/%D0%AE%D0%A2-88
[ЮТ-88, минимальная конфигурация]: http://junetech.chat.ru/kollection/ut88/1step.htm

Попробуем чего-нибудь написать. Например, простая программа, которая ждет нажатия на клавиатуре и затем отображает код нажатой кнопки на семисегментном индикаторе.

    00: 0     KA 0       ; Считываем код кнопки (0-F) в A. Если нажата, то Flag=0, иначе Flag=1.
    01: F00   JUMP 00    ; Если Flag=1 (не нажата), то переходим на 00.   
    04: 1     AO         ; Выводим A на семисегментник и устанавливаем Flag=1
    05: F00   JUMP 00    ; Если Flag=1 (тут всегда 1), то переходим на 00.

Для ввода жмем: `RESET 0 INCR F INCR 0 INCR 0 INCR 1 INCR F INCR 0 INCR 0 INCR RESET`

Для запуска: `RESET 1 RUN`

<iframe width="640" height="360" src="https://www.youtube.com/embed/t-S86rICAPk" frameborder="0" allowfullscreen></iframe>

Интересно, эта железка позволяет **пошагово трассировать** программу. Если запустить программу через `RESET 6 RUN`, то она будет останавливаться после каждой инструкции, и текущий адрес будет на верхних светодиодах в двоичном коде. Для выполнения следующей инструкции надо нажать `INCR` и т.д. Можно прервать программу, нажав `RESET`, и, например, посмотреть содержимое регистров. Они являются ячейками памяти. Какая никакая отладка.

Теперь программа по сложнее: бегущий огонек по верхним семи светодиодам с отображением текущего номера на семисегментнике.

    00: 80    TIA 0     ; A=0
    02: 1     AO        ; Выводим A на семисегментник.
    03: 3     CY        ; Сохраняем A в Y.
    04: E1    CAL SETR  ; Зажигаем светодиод, номер которого в Y.
    06: 84    TIA 4     ; A=4
    08: EC    CAL TMR   ; Задержка (A+1)*0.1 секунд (0.5 сек).
    0A: E2    CAL RSTR  ; Гасим светодиод, номер которого в Y.
    0C: 3     CY        ; Восстанавливаем A из Y.
    0D: 91    AIA 1     ; A = A + 1
    0F: C7    CIA 7     ; Если A=7, то Flag=0. Иначе Flag=1.
    11: F02   JUMP 02   ; Переход на 02, если Flag=1. Также устанавливаем Flag=1.
    13: F00   JUMP 00   ; Безусловный переход на 00 (Flag=1 после предыдущей команды).

Коды: `8 0 1 3 E 1 8 4 E C E 2 3 9 1 C 7 F 0 2 F 0 0`

<iframe width="640" height="360" src="https://www.youtube.com/embed/bdEUUtv93r0" frameborder="0" allowfullscreen></iframe>

## Что есть из средств разработки?

Увы, почти все ресурсы на японском, но Google Translate творит чудеса.

## [Симулятор][Simulator]

![](/images/blog/gmc4/gmc4simulator.png)

[Simulator]: http://dansan.air-nifty.com/blog/gmc4-simulator.html

### Автоматический загрузчик

<iframe width="420" height="315" src="https://www.youtube.com/embed/lagnC5CpsUE" frameborder="0" allowfullscreen></iframe>

### Языки программирования

- [Ассемблер](http://musashinodenpa.com/misc/GMC4/)
- [Компилятор C](http://terus.jp/engineering/gmc4cc/) и 
  [Ассемблер](http://terus.jp/engineering/gmc4cc/gmc4as.html)
- [Бейсик](http://softyasu.net/g4cbasic.html)

# Вместо заключения

Классная игрушка. Я начал программировать на [Радио-86РК][] в машинных кодах, набивая их в Мониторе. Тут почти такие же ощущения. Выпуск журнала, приложением которого является GMC-4, судя по картинкам (я по-японски не читаю, увы), содержит иллюстрированную историю микропроцессоров, начиная с [Intel 4004][]. Далее идут десятки различных примеров программ и проектов, в которых используется GMC-4. Красота!

[Intel 4004]: http://en.wikipedia.org/wiki/Intel_4004
[Радио-86РК]: http://radio86.googlecode.com/hg/online/radio86.html
